
RobotSTV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000684c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  08006a50  08006a50  00016a50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006e30  08006e30  00016e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006e38  08006e38  00016e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006e3c  08006e3c  00016e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000000  08006e40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001774  200001dc  0800701c  000201dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001950  0800701c  00021950  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003e20a  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006099  00000000  00000000  0005e414  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000107af  00000000  00000000  000644ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001688  00000000  00000000  00074c60  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001bf8  00000000  00000000  000762e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000d978  00000000  00000000  00077ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00009682  00000000  00000000  00085858  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0008eeda  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000540c  00000000  00000000  0008ef58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001dc 	.word	0x200001dc
 800021c:	00000000 	.word	0x00000000
 8000220:	08006a34 	.word	0x08006a34

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e0 	.word	0x200001e0
 800023c:	08006a34 	.word	0x08006a34

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b97a 	b.w	80005fc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	468c      	mov	ip, r1
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	9e08      	ldr	r6, [sp, #32]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d151      	bne.n	80003d4 <__udivmoddi4+0xb4>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d96d      	bls.n	8000412 <__udivmoddi4+0xf2>
 8000336:	fab2 fe82 	clz	lr, r2
 800033a:	f1be 0f00 	cmp.w	lr, #0
 800033e:	d00b      	beq.n	8000358 <__udivmoddi4+0x38>
 8000340:	f1ce 0c20 	rsb	ip, lr, #32
 8000344:	fa01 f50e 	lsl.w	r5, r1, lr
 8000348:	fa20 fc0c 	lsr.w	ip, r0, ip
 800034c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000350:	ea4c 0c05 	orr.w	ip, ip, r5
 8000354:	fa00 f40e 	lsl.w	r4, r0, lr
 8000358:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800035c:	0c25      	lsrs	r5, r4, #16
 800035e:	fbbc f8fa 	udiv	r8, ip, sl
 8000362:	fa1f f987 	uxth.w	r9, r7
 8000366:	fb0a cc18 	mls	ip, sl, r8, ip
 800036a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800036e:	fb08 f309 	mul.w	r3, r8, r9
 8000372:	42ab      	cmp	r3, r5
 8000374:	d90a      	bls.n	800038c <__udivmoddi4+0x6c>
 8000376:	19ed      	adds	r5, r5, r7
 8000378:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800037c:	f080 8123 	bcs.w	80005c6 <__udivmoddi4+0x2a6>
 8000380:	42ab      	cmp	r3, r5
 8000382:	f240 8120 	bls.w	80005c6 <__udivmoddi4+0x2a6>
 8000386:	f1a8 0802 	sub.w	r8, r8, #2
 800038a:	443d      	add	r5, r7
 800038c:	1aed      	subs	r5, r5, r3
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb5 f0fa 	udiv	r0, r5, sl
 8000394:	fb0a 5510 	mls	r5, sl, r0, r5
 8000398:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800039c:	fb00 f909 	mul.w	r9, r0, r9
 80003a0:	45a1      	cmp	r9, r4
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x98>
 80003a4:	19e4      	adds	r4, r4, r7
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003aa:	f080 810a 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80003ae:	45a1      	cmp	r9, r4
 80003b0:	f240 8107 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80003b4:	3802      	subs	r0, #2
 80003b6:	443c      	add	r4, r7
 80003b8:	eba4 0409 	sub.w	r4, r4, r9
 80003bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003c0:	2100      	movs	r1, #0
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d061      	beq.n	800048a <__udivmoddi4+0x16a>
 80003c6:	fa24 f40e 	lsr.w	r4, r4, lr
 80003ca:	2300      	movs	r3, #0
 80003cc:	6034      	str	r4, [r6, #0]
 80003ce:	6073      	str	r3, [r6, #4]
 80003d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d907      	bls.n	80003e8 <__udivmoddi4+0xc8>
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d054      	beq.n	8000486 <__udivmoddi4+0x166>
 80003dc:	2100      	movs	r1, #0
 80003de:	e886 0021 	stmia.w	r6, {r0, r5}
 80003e2:	4608      	mov	r0, r1
 80003e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e8:	fab3 f183 	clz	r1, r3
 80003ec:	2900      	cmp	r1, #0
 80003ee:	f040 808e 	bne.w	800050e <__udivmoddi4+0x1ee>
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d302      	bcc.n	80003fc <__udivmoddi4+0xdc>
 80003f6:	4282      	cmp	r2, r0
 80003f8:	f200 80fa 	bhi.w	80005f0 <__udivmoddi4+0x2d0>
 80003fc:	1a84      	subs	r4, r0, r2
 80003fe:	eb65 0503 	sbc.w	r5, r5, r3
 8000402:	2001      	movs	r0, #1
 8000404:	46ac      	mov	ip, r5
 8000406:	2e00      	cmp	r6, #0
 8000408:	d03f      	beq.n	800048a <__udivmoddi4+0x16a>
 800040a:	e886 1010 	stmia.w	r6, {r4, ip}
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	b912      	cbnz	r2, 800041a <__udivmoddi4+0xfa>
 8000414:	2701      	movs	r7, #1
 8000416:	fbb7 f7f2 	udiv	r7, r7, r2
 800041a:	fab7 fe87 	clz	lr, r7
 800041e:	f1be 0f00 	cmp.w	lr, #0
 8000422:	d134      	bne.n	800048e <__udivmoddi4+0x16e>
 8000424:	1beb      	subs	r3, r5, r7
 8000426:	0c3a      	lsrs	r2, r7, #16
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	2101      	movs	r1, #1
 800042e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000432:	0c25      	lsrs	r5, r4, #16
 8000434:	fb02 3318 	mls	r3, r2, r8, r3
 8000438:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800043c:	fb0c f308 	mul.w	r3, ip, r8
 8000440:	42ab      	cmp	r3, r5
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x134>
 8000444:	19ed      	adds	r5, r5, r7
 8000446:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x132>
 800044c:	42ab      	cmp	r3, r5
 800044e:	f200 80d1 	bhi.w	80005f4 <__udivmoddi4+0x2d4>
 8000452:	4680      	mov	r8, r0
 8000454:	1aed      	subs	r5, r5, r3
 8000456:	b2a3      	uxth	r3, r4
 8000458:	fbb5 f0f2 	udiv	r0, r5, r2
 800045c:	fb02 5510 	mls	r5, r2, r0, r5
 8000460:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000464:	fb0c fc00 	mul.w	ip, ip, r0
 8000468:	45a4      	cmp	ip, r4
 800046a:	d907      	bls.n	800047c <__udivmoddi4+0x15c>
 800046c:	19e4      	adds	r4, r4, r7
 800046e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x15a>
 8000474:	45a4      	cmp	ip, r4
 8000476:	f200 80b8 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 800047a:	4618      	mov	r0, r3
 800047c:	eba4 040c 	sub.w	r4, r4, ip
 8000480:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000484:	e79d      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048e:	f1ce 0420 	rsb	r4, lr, #32
 8000492:	fa05 f30e 	lsl.w	r3, r5, lr
 8000496:	fa07 f70e 	lsl.w	r7, r7, lr
 800049a:	fa20 f804 	lsr.w	r8, r0, r4
 800049e:	0c3a      	lsrs	r2, r7, #16
 80004a0:	fa25 f404 	lsr.w	r4, r5, r4
 80004a4:	ea48 0803 	orr.w	r8, r8, r3
 80004a8:	fbb4 f1f2 	udiv	r1, r4, r2
 80004ac:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80004b0:	fb02 4411 	mls	r4, r2, r1, r4
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004bc:	fb01 f30c 	mul.w	r3, r1, ip
 80004c0:	42ab      	cmp	r3, r5
 80004c2:	fa00 f40e 	lsl.w	r4, r0, lr
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x1bc>
 80004c8:	19ed      	adds	r5, r5, r7
 80004ca:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80004ce:	f080 808a 	bcs.w	80005e6 <__udivmoddi4+0x2c6>
 80004d2:	42ab      	cmp	r3, r5
 80004d4:	f240 8087 	bls.w	80005e6 <__udivmoddi4+0x2c6>
 80004d8:	3902      	subs	r1, #2
 80004da:	443d      	add	r5, r7
 80004dc:	1aeb      	subs	r3, r5, r3
 80004de:	fa1f f588 	uxth.w	r5, r8
 80004e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004e6:	fb02 3310 	mls	r3, r2, r0, r3
 80004ea:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004ee:	fb00 f30c 	mul.w	r3, r0, ip
 80004f2:	42ab      	cmp	r3, r5
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x1e6>
 80004f6:	19ed      	adds	r5, r5, r7
 80004f8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fc:	d26f      	bcs.n	80005de <__udivmoddi4+0x2be>
 80004fe:	42ab      	cmp	r3, r5
 8000500:	d96d      	bls.n	80005de <__udivmoddi4+0x2be>
 8000502:	3802      	subs	r0, #2
 8000504:	443d      	add	r5, r7
 8000506:	1aeb      	subs	r3, r5, r3
 8000508:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800050c:	e78f      	b.n	800042e <__udivmoddi4+0x10e>
 800050e:	f1c1 0720 	rsb	r7, r1, #32
 8000512:	fa22 f807 	lsr.w	r8, r2, r7
 8000516:	408b      	lsls	r3, r1
 8000518:	fa05 f401 	lsl.w	r4, r5, r1
 800051c:	ea48 0303 	orr.w	r3, r8, r3
 8000520:	fa20 fe07 	lsr.w	lr, r0, r7
 8000524:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000528:	40fd      	lsrs	r5, r7
 800052a:	ea4e 0e04 	orr.w	lr, lr, r4
 800052e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000532:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000536:	fb0c 5519 	mls	r5, ip, r9, r5
 800053a:	fa1f f883 	uxth.w	r8, r3
 800053e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000542:	fb09 f408 	mul.w	r4, r9, r8
 8000546:	42ac      	cmp	r4, r5
 8000548:	fa02 f201 	lsl.w	r2, r2, r1
 800054c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000550:	d908      	bls.n	8000564 <__udivmoddi4+0x244>
 8000552:	18ed      	adds	r5, r5, r3
 8000554:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000558:	d243      	bcs.n	80005e2 <__udivmoddi4+0x2c2>
 800055a:	42ac      	cmp	r4, r5
 800055c:	d941      	bls.n	80005e2 <__udivmoddi4+0x2c2>
 800055e:	f1a9 0902 	sub.w	r9, r9, #2
 8000562:	441d      	add	r5, r3
 8000564:	1b2d      	subs	r5, r5, r4
 8000566:	fa1f fe8e 	uxth.w	lr, lr
 800056a:	fbb5 f0fc 	udiv	r0, r5, ip
 800056e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000572:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000576:	fb00 f808 	mul.w	r8, r0, r8
 800057a:	45a0      	cmp	r8, r4
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x26e>
 800057e:	18e4      	adds	r4, r4, r3
 8000580:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000584:	d229      	bcs.n	80005da <__udivmoddi4+0x2ba>
 8000586:	45a0      	cmp	r8, r4
 8000588:	d927      	bls.n	80005da <__udivmoddi4+0x2ba>
 800058a:	3802      	subs	r0, #2
 800058c:	441c      	add	r4, r3
 800058e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000592:	eba4 0408 	sub.w	r4, r4, r8
 8000596:	fba0 8902 	umull	r8, r9, r0, r2
 800059a:	454c      	cmp	r4, r9
 800059c:	46c6      	mov	lr, r8
 800059e:	464d      	mov	r5, r9
 80005a0:	d315      	bcc.n	80005ce <__udivmoddi4+0x2ae>
 80005a2:	d012      	beq.n	80005ca <__udivmoddi4+0x2aa>
 80005a4:	b156      	cbz	r6, 80005bc <__udivmoddi4+0x29c>
 80005a6:	ebba 030e 	subs.w	r3, sl, lr
 80005aa:	eb64 0405 	sbc.w	r4, r4, r5
 80005ae:	fa04 f707 	lsl.w	r7, r4, r7
 80005b2:	40cb      	lsrs	r3, r1
 80005b4:	431f      	orrs	r7, r3
 80005b6:	40cc      	lsrs	r4, r1
 80005b8:	6037      	str	r7, [r6, #0]
 80005ba:	6074      	str	r4, [r6, #4]
 80005bc:	2100      	movs	r1, #0
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	4618      	mov	r0, r3
 80005c4:	e6f8      	b.n	80003b8 <__udivmoddi4+0x98>
 80005c6:	4690      	mov	r8, r2
 80005c8:	e6e0      	b.n	800038c <__udivmoddi4+0x6c>
 80005ca:	45c2      	cmp	sl, r8
 80005cc:	d2ea      	bcs.n	80005a4 <__udivmoddi4+0x284>
 80005ce:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d2:	eb69 0503 	sbc.w	r5, r9, r3
 80005d6:	3801      	subs	r0, #1
 80005d8:	e7e4      	b.n	80005a4 <__udivmoddi4+0x284>
 80005da:	4628      	mov	r0, r5
 80005dc:	e7d7      	b.n	800058e <__udivmoddi4+0x26e>
 80005de:	4640      	mov	r0, r8
 80005e0:	e791      	b.n	8000506 <__udivmoddi4+0x1e6>
 80005e2:	4681      	mov	r9, r0
 80005e4:	e7be      	b.n	8000564 <__udivmoddi4+0x244>
 80005e6:	4601      	mov	r1, r0
 80005e8:	e778      	b.n	80004dc <__udivmoddi4+0x1bc>
 80005ea:	3802      	subs	r0, #2
 80005ec:	443c      	add	r4, r7
 80005ee:	e745      	b.n	800047c <__udivmoddi4+0x15c>
 80005f0:	4608      	mov	r0, r1
 80005f2:	e708      	b.n	8000406 <__udivmoddi4+0xe6>
 80005f4:	f1a8 0802 	sub.w	r8, r8, #2
 80005f8:	443d      	add	r5, r7
 80005fa:	e72b      	b.n	8000454 <__udivmoddi4+0x134>

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000600:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <HAL_InitTick+0x3c>)
{
 8000604:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000606:	4a0e      	ldr	r2, [pc, #56]	; (8000640 <HAL_InitTick+0x40>)
 8000608:	7818      	ldrb	r0, [r3, #0]
 800060a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800060e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000612:	6810      	ldr	r0, [r2, #0]
 8000614:	fbb0 f0f3 	udiv	r0, r0, r3
 8000618:	f000 f8aa 	bl	8000770 <HAL_SYSTICK_Config>
 800061c:	4604      	mov	r4, r0
 800061e:	b958      	cbnz	r0, 8000638 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000620:	2d0f      	cmp	r5, #15
 8000622:	d809      	bhi.n	8000638 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000624:	4602      	mov	r2, r0
 8000626:	4629      	mov	r1, r5
 8000628:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800062c:	f000 f84e 	bl	80006cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000630:	4b04      	ldr	r3, [pc, #16]	; (8000644 <HAL_InitTick+0x44>)
 8000632:	4620      	mov	r0, r4
 8000634:	601d      	str	r5, [r3, #0]
 8000636:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000638:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800063a:	bd38      	pop	{r3, r4, r5, pc}
 800063c:	20000000 	.word	0x20000000
 8000640:	20000008 	.word	0x20000008
 8000644:	20000004 	.word	0x20000004

08000648 <HAL_Init>:
{
 8000648:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800064a:	2003      	movs	r0, #3
 800064c:	f000 f82c 	bl	80006a8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000650:	2000      	movs	r0, #0
 8000652:	f7ff ffd5 	bl	8000600 <HAL_InitTick>
  HAL_MspInit();
 8000656:	f002 fe99 	bl	800338c <HAL_MspInit>
}
 800065a:	2000      	movs	r0, #0
 800065c:	bd08      	pop	{r3, pc}
	...

08000660 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000660:	4a03      	ldr	r2, [pc, #12]	; (8000670 <HAL_IncTick+0x10>)
 8000662:	4b04      	ldr	r3, [pc, #16]	; (8000674 <HAL_IncTick+0x14>)
 8000664:	6811      	ldr	r1, [r2, #0]
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	440b      	add	r3, r1
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20000274 	.word	0x20000274
 8000674:	20000000 	.word	0x20000000

08000678 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000678:	4b01      	ldr	r3, [pc, #4]	; (8000680 <HAL_GetTick+0x8>)
 800067a:	6818      	ldr	r0, [r3, #0]
}
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	20000274 	.word	0x20000274

08000684 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000684:	b538      	push	{r3, r4, r5, lr}
 8000686:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000688:	f7ff fff6 	bl	8000678 <HAL_GetTick>
 800068c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800068e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000690:	bf1e      	ittt	ne
 8000692:	4b04      	ldrne	r3, [pc, #16]	; (80006a4 <HAL_Delay+0x20>)
 8000694:	781b      	ldrbne	r3, [r3, #0]
 8000696:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000698:	f7ff ffee 	bl	8000678 <HAL_GetTick>
 800069c:	1b40      	subs	r0, r0, r5
 800069e:	4284      	cmp	r4, r0
 80006a0:	d8fa      	bhi.n	8000698 <HAL_Delay+0x14>
  {
  }
}
 80006a2:	bd38      	pop	{r3, r4, r5, pc}
 80006a4:	20000000 	.word	0x20000000

080006a8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a8:	4a07      	ldr	r2, [pc, #28]	; (80006c8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80006aa:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006ac:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80006ae:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006b2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006b6:	041b      	lsls	r3, r3, #16
 80006b8:	0c1b      	lsrs	r3, r3, #16
 80006ba:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80006c2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80006c4:	60d3      	str	r3, [r2, #12]
 80006c6:	4770      	bx	lr
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006cc:	4b19      	ldr	r3, [pc, #100]	; (8000734 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006ce:	b530      	push	{r4, r5, lr}
 80006d0:	68dc      	ldr	r4, [r3, #12]
 80006d2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006da:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006dc:	2b04      	cmp	r3, #4
 80006de:	bf28      	it	cs
 80006e0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e4:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e8:	bf8c      	ite	hi
 80006ea:	3c03      	subhi	r4, #3
 80006ec:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ee:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) < 0)
 80006f2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80006f8:	ea01 0103 	and.w	r1, r1, r3
 80006fc:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000700:	fa05 f404 	lsl.w	r4, r5, r4
 8000704:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8000708:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800070c:	ea42 0201 	orr.w	r2, r2, r1
 8000710:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) < 0)
 8000714:	da05      	bge.n	8000722 <HAL_NVIC_SetPriority+0x56>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000716:	f000 000f 	and.w	r0, r0, #15
 800071a:	b2d2      	uxtb	r2, r2
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <HAL_NVIC_SetPriority+0x6c>)
 800071e:	541a      	strb	r2, [r3, r0]
 8000720:	bd30      	pop	{r4, r5, pc}
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000722:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000726:	b2d2      	uxtb	r2, r2
 8000728:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800072c:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	bf00      	nop
 8000734:	e000ed00 	.word	0xe000ed00
 8000738:	e000ed14 	.word	0xe000ed14

0800073c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800073c:	0942      	lsrs	r2, r0, #5
 800073e:	2301      	movs	r3, #1
 8000740:	f000 001f 	and.w	r0, r0, #31
 8000744:	fa03 f000 	lsl.w	r0, r3, r0
 8000748:	4b01      	ldr	r3, [pc, #4]	; (8000750 <HAL_NVIC_EnableIRQ+0x14>)
 800074a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800074e:	4770      	bx	lr
 8000750:	e000e100 	.word	0xe000e100

08000754 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000754:	0943      	lsrs	r3, r0, #5
 8000756:	2201      	movs	r2, #1
 8000758:	f000 001f 	and.w	r0, r0, #31
 800075c:	3320      	adds	r3, #32
 800075e:	fa02 f000 	lsl.w	r0, r2, r0
 8000762:	4a02      	ldr	r2, [pc, #8]	; (800076c <HAL_NVIC_DisableIRQ+0x18>)
 8000764:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	e000e100 	.word	0xe000e100

08000770 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000770:	3801      	subs	r0, #1
 8000772:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000776:	d20a      	bcs.n	800078e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800077a:	21f0      	movs	r1, #240	; 0xf0
 800077c:	4a06      	ldr	r2, [pc, #24]	; (8000798 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800077e:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000780:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000782:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000786:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000788:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800078e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	e000e010 	.word	0xe000e010
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800079c:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800079e:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	bf0c      	ite	eq
 80007a4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80007a8:	f022 0204 	bicne.w	r2, r2, #4
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	4770      	bx	lr
 80007b0:	e000e010 	.word	0xe000e010

080007b4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80007b4:	4770      	bx	lr

080007b6 <HAL_SYSTICK_IRQHandler>:
{
 80007b6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80007b8:	f7ff fffc 	bl	80007b4 <HAL_SYSTICK_Callback>
 80007bc:	bd08      	pop	{r3, pc}
	...

080007c0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80007c0:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 80007c2:	4604      	mov	r4, r0
 80007c4:	b908      	cbnz	r0, 80007ca <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 80007c6:	2001      	movs	r0, #1
 80007c8:	bd10      	pop	{r4, pc}
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if(hcrc->State == HAL_CRC_STATE_RESET)
 80007ca:	7f43      	ldrb	r3, [r0, #29]
 80007cc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80007d0:	b913      	cbnz	r3, 80007d8 <HAL_CRC_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80007d2:	7702      	strb	r2, [r0, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80007d4:	f002 f9ba 	bl	8002b4c <HAL_CRC_MspInit>
  }
  
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80007d8:	2302      	movs	r3, #2
 80007da:	7763      	strb	r3, [r4, #29]
  
  /* check whether or not non-default generating polynomial has been 
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse)); 
  if(hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80007dc:	7923      	ldrb	r3, [r4, #4]
 80007de:	b9e3      	cbnz	r3, 800081a <HAL_CRC_Init+0x5a>
  {
    /* initialize IP with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 80007e0:	6823      	ldr	r3, [r4, #0]
 80007e2:	4a13      	ldr	r2, [pc, #76]	; (8000830 <HAL_CRC_Init+0x70>)
 80007e4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80007e6:	689a      	ldr	r2, [r3, #8]
 80007e8:	f022 0218 	bic.w	r2, r2, #24
 80007ec:	609a      	str	r2, [r3, #8]
  }
  
  /* check whether or not non-default CRC initial value has been 
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if(hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80007ee:	7962      	ldrb	r2, [r4, #5]
 80007f0:	6823      	ldr	r3, [r4, #0]
 80007f2:	b9d2      	cbnz	r2, 800082a <HAL_CRC_Init+0x6a>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 80007f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80007f8:	611a      	str	r2, [r3, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
  
  /* Return function status */
  return HAL_OK;
 80007fa:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 80007fc:	689a      	ldr	r2, [r3, #8]
 80007fe:	6961      	ldr	r1, [r4, #20]
 8000800:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8000804:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 8000806:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 8000808:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 800080a:	689a      	ldr	r2, [r3, #8]
 800080c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000810:	430a      	orrs	r2, r1
 8000812:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8000814:	2301      	movs	r3, #1
 8000816:	7763      	strb	r3, [r4, #29]
}
 8000818:	bd10      	pop	{r4, pc}
    if(HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800081a:	68e2      	ldr	r2, [r4, #12]
 800081c:	4620      	mov	r0, r4
 800081e:	68a1      	ldr	r1, [r4, #8]
 8000820:	f000 f808 	bl	8000834 <HAL_CRCEx_Polynomial_Set>
 8000824:	2800      	cmp	r0, #0
 8000826:	d0e2      	beq.n	80007ee <HAL_CRC_Init+0x2e>
 8000828:	e7cd      	b.n	80007c6 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800082a:	6922      	ldr	r2, [r4, #16]
 800082c:	e7e4      	b.n	80007f8 <HAL_CRC_Init+0x38>
 800082e:	bf00      	nop
 8000830:	04c11db7 	.word	0x04c11db7

08000834 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000834:	231f      	movs	r3, #31
{
 8000836:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & ((uint32_t)(0x1) << msb)) == 0) && (msb-- > 0))
 8000838:	fa21 f403 	lsr.w	r4, r1, r3
 800083c:	07e4      	lsls	r4, r4, #31
 800083e:	d40a      	bmi.n	8000856 <HAL_CRCEx_Polynomial_Set+0x22>
 8000840:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8000844:	d2f8      	bcs.n	8000838 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8000846:	2a10      	cmp	r2, #16
 8000848:	d003      	beq.n	8000852 <HAL_CRCEx_Polynomial_Set+0x1e>
 800084a:	2a18      	cmp	r2, #24
 800084c:	d001      	beq.n	8000852 <HAL_CRCEx_Polynomial_Set+0x1e>
 800084e:	2a08      	cmp	r2, #8
 8000850:	d10b      	bne.n	800086a <HAL_CRCEx_Polynomial_Set+0x36>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
      { 
        return  HAL_ERROR;
 8000852:	2001      	movs	r0, #1
 8000854:	bd10      	pop	{r4, pc}
  switch (PolyLength)
 8000856:	2a10      	cmp	r2, #16
 8000858:	d010      	beq.n	800087c <HAL_CRCEx_Polynomial_Set+0x48>
 800085a:	2a18      	cmp	r2, #24
 800085c:	d003      	beq.n	8000866 <HAL_CRCEx_Polynomial_Set+0x32>
 800085e:	2a08      	cmp	r2, #8
 8000860:	d103      	bne.n	800086a <HAL_CRCEx_Polynomial_Set+0x36>
      {
        return  HAL_ERROR;
      }
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8000862:	2b0f      	cmp	r3, #15
 8000864:	e000      	b.n	8000868 <HAL_CRCEx_Polynomial_Set+0x34>
      if (msb >= HAL_CRC_LENGTH_7B)
 8000866:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8000868:	d8f3      	bhi.n	8000852 <HAL_CRCEx_Polynomial_Set+0x1e>
  default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 800086a:	6800      	ldr	r0, [r0, #0]
 800086c:	6141      	str	r1, [r0, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 800086e:	6883      	ldr	r3, [r0, #8]
 8000870:	f023 0318 	bic.w	r3, r3, #24
 8000874:	431a      	orrs	r2, r3
 8000876:	6082      	str	r2, [r0, #8]
  
  /* Return function status */
  return HAL_OK;
 8000878:	2000      	movs	r0, #0
 800087a:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 800087c:	2b07      	cmp	r3, #7
 800087e:	e7f3      	b.n	8000868 <HAL_CRCEx_Polynomial_Set+0x34>

08000880 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000880:	6803      	ldr	r3, [r0, #0]
 8000882:	2118      	movs	r1, #24
 8000884:	b2da      	uxtb	r2, r3
 8000886:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800088a:	3a10      	subs	r2, #16
 800088c:	f023 0303 	bic.w	r3, r3, #3
 8000890:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000894:	4904      	ldr	r1, [pc, #16]	; (80008a8 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8000896:	2a03      	cmp	r2, #3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000898:	5c89      	ldrb	r1, [r1, r2]
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800089a:	bf88      	it	hi
 800089c:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800089e:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80008a0:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 80008a2:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	08006a50 	.word	0x08006a50

080008ac <HAL_DMA_Init>:
{
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80008b0:	f7ff fee2 	bl	8000678 <HAL_GetTick>
 80008b4:	4605      	mov	r5, r0
  if(hdma == NULL)
 80008b6:	2c00      	cmp	r4, #0
 80008b8:	d071      	beq.n	800099e <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 80008ba:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 80008bc:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 80008be:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80008c2:	2302      	movs	r3, #2
 80008c4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80008c8:	6813      	ldr	r3, [r2, #0]
 80008ca:	f023 0301 	bic.w	r3, r3, #1
 80008ce:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80008d0:	6821      	ldr	r1, [r4, #0]
 80008d2:	680b      	ldr	r3, [r1, #0]
 80008d4:	07d8      	lsls	r0, r3, #31
 80008d6:	d43c      	bmi.n	8000952 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 80008d8:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80008da:	4d32      	ldr	r5, [pc, #200]	; (80009a4 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008dc:	6862      	ldr	r2, [r4, #4]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80008de:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008e0:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008e2:	69a0      	ldr	r0, [r4, #24]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008e4:	4313      	orrs	r3, r2
 80008e6:	68e2      	ldr	r2, [r4, #12]
 80008e8:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008ea:	6922      	ldr	r2, [r4, #16]
 80008ec:	4313      	orrs	r3, r2
 80008ee:	6962      	ldr	r2, [r4, #20]
 80008f0:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008f2:	69e2      	ldr	r2, [r4, #28]
 80008f4:	4303      	orrs	r3, r0
 80008f6:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80008f8:	6a22      	ldr	r2, [r4, #32]
 80008fa:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80008fe:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000900:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000904:	bf01      	itttt	eq
 8000906:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8000908:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 800090a:	4335      	orreq	r5, r6
 800090c:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800090e:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 8000910:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8000912:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000914:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8000918:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800091c:	d10b      	bne.n	8000936 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 800091e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000920:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8000922:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000924:	b13d      	cbz	r5, 8000936 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000926:	b9f8      	cbnz	r0, 8000968 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8000928:	2a01      	cmp	r2, #1
 800092a:	d02d      	beq.n	8000988 <HAL_DMA_Init+0xdc>
 800092c:	d301      	bcc.n	8000932 <HAL_DMA_Init+0x86>
 800092e:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000930:	d101      	bne.n	8000936 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000932:	01ea      	lsls	r2, r5, #7
 8000934:	d42b      	bmi.n	800098e <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8000936:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000938:	4620      	mov	r0, r4
 800093a:	f7ff ffa1 	bl	8000880 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800093e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000940:	233f      	movs	r3, #63	; 0x3f
 8000942:	4093      	lsls	r3, r2
 8000944:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000946:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000948:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800094a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800094c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000950:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000952:	f7ff fe91 	bl	8000678 <HAL_GetTick>
 8000956:	1b40      	subs	r0, r0, r5
 8000958:	2805      	cmp	r0, #5
 800095a:	d9b9      	bls.n	80008d0 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800095c:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800095e:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000960:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000962:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000966:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000968:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800096c:	d113      	bne.n	8000996 <HAL_DMA_Init+0xea>
    switch (tmp)
 800096e:	2a03      	cmp	r2, #3
 8000970:	d8e1      	bhi.n	8000936 <HAL_DMA_Init+0x8a>
 8000972:	a001      	add	r0, pc, #4	; (adr r0, 8000978 <HAL_DMA_Init+0xcc>)
 8000974:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000978:	0800098f 	.word	0x0800098f
 800097c:	08000933 	.word	0x08000933
 8000980:	0800098f 	.word	0x0800098f
 8000984:	08000989 	.word	0x08000989
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000988:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800098c:	d1d3      	bne.n	8000936 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800098e:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8000990:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000992:	6563      	str	r3, [r4, #84]	; 0x54
 8000994:	e7e5      	b.n	8000962 <HAL_DMA_Init+0xb6>
    switch (tmp)
 8000996:	2a02      	cmp	r2, #2
 8000998:	d9f9      	bls.n	800098e <HAL_DMA_Init+0xe2>
 800099a:	2a03      	cmp	r2, #3
 800099c:	e7c8      	b.n	8000930 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 800099e:	2001      	movs	r0, #1
 80009a0:	bd70      	pop	{r4, r5, r6, pc}
 80009a2:	bf00      	nop
 80009a4:	e010803f 	.word	0xe010803f

080009a8 <HAL_DMA_DeInit>:
{
 80009a8:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 80009aa:	4605      	mov	r5, r0
 80009ac:	b320      	cbz	r0, 80009f8 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80009ae:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 80009b2:	b2e4      	uxtb	r4, r4
 80009b4:	2c02      	cmp	r4, #2
 80009b6:	d01d      	beq.n	80009f4 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 80009b8:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
 80009ba:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	f022 0201 	bic.w	r2, r2, #1
 80009c2:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80009c4:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 80009c6:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 80009c8:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 80009ca:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 80009cc:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 80009ce:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80009d0:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80009d2:	f7ff ff55 	bl	8000880 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009d6:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80009d8:	233f      	movs	r3, #63	; 0x3f
 80009da:	4093      	lsls	r3, r2
 80009dc:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009de:	656c      	str	r4, [r5, #84]	; 0x54
  hdma->XferCpltCallback = NULL;
 80009e0:	63ec      	str	r4, [r5, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80009e2:	642c      	str	r4, [r5, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80009e4:	646c      	str	r4, [r5, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80009e6:	64ac      	str	r4, [r5, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80009e8:	64ec      	str	r4, [r5, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80009ea:	652c      	str	r4, [r5, #80]	; 0x50
  hdma->State = HAL_DMA_STATE_RESET;
 80009ec:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 80009f0:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
    return HAL_BUSY;
 80009f4:	4620      	mov	r0, r4
}
 80009f6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80009f8:	2001      	movs	r0, #1
 80009fa:	bd38      	pop	{r3, r4, r5, pc}

080009fc <HAL_DMA_Start_IT>:
{
 80009fc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 80009fe:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8000a02:	2c01      	cmp	r4, #1
 8000a04:	d035      	beq.n	8000a72 <HAL_DMA_Start_IT+0x76>
 8000a06:	2401      	movs	r4, #1
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a08:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8000a0a:	2500      	movs	r5, #0
  __HAL_LOCK(hdma);
 8000a0c:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000a10:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8000a14:	2c01      	cmp	r4, #1
 8000a16:	f04f 0402 	mov.w	r4, #2
 8000a1a:	d128      	bne.n	8000a6e <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a1c:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000a20:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a22:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000a24:	6825      	ldr	r5, [r4, #0]
 8000a26:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8000a2a:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8000a2c:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000a2e:	6883      	ldr	r3, [r0, #8]
 8000a30:	2b40      	cmp	r3, #64	; 0x40
 8000a32:	d119      	bne.n	8000a68 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 8000a34:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8000a36:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a38:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8000a3a:	233f      	movs	r3, #63	; 0x3f
 8000a3c:	4093      	lsls	r3, r2
 8000a3e:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000a40:	6823      	ldr	r3, [r4, #0]
 8000a42:	f043 0316 	orr.w	r3, r3, #22
 8000a46:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000a48:	6963      	ldr	r3, [r4, #20]
 8000a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a4e:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8000a50:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000a52:	b11b      	cbz	r3, 8000a5c <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000a54:	6823      	ldr	r3, [r4, #0]
 8000a56:	f043 0308 	orr.w	r3, r3, #8
 8000a5a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000a5c:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000a5e:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6023      	str	r3, [r4, #0]
 8000a66:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 8000a68:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8000a6a:	60e2      	str	r2, [r4, #12]
 8000a6c:	e7e4      	b.n	8000a38 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8000a6e:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8000a72:	2002      	movs	r0, #2
}
 8000a74:	bd70      	pop	{r4, r5, r6, pc}

08000a76 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a76:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000a7a:	2b02      	cmp	r3, #2
 8000a7c:	d003      	beq.n	8000a86 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a7e:	2380      	movs	r3, #128	; 0x80
 8000a80:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000a82:	2001      	movs	r0, #1
 8000a84:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8000a86:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000a88:	2305      	movs	r3, #5
 8000a8a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  return HAL_OK;
 8000a8e:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8000a90:	6813      	ldr	r3, [r2, #0]
 8000a92:	f023 0301 	bic.w	r3, r3, #1
 8000a96:	6013      	str	r3, [r2, #0]
}
 8000a98:	4770      	bx	lr
	...

08000a9c <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 8000a9c:	2300      	movs	r3, #0
{
 8000a9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8000aa0:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000aa2:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8000aa4:	4b59      	ldr	r3, [pc, #356]	; (8000c0c <HAL_DMA_IRQHandler+0x170>)
{
 8000aa6:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000aa8:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 8000aaa:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000aac:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8000aae:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ab0:	409a      	lsls	r2, r3
 8000ab2:	4216      	tst	r6, r2
 8000ab4:	d00c      	beq.n	8000ad0 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000ab6:	6801      	ldr	r1, [r0, #0]
 8000ab8:	6808      	ldr	r0, [r1, #0]
 8000aba:	0740      	lsls	r0, r0, #29
 8000abc:	d508      	bpl.n	8000ad0 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000abe:	6808      	ldr	r0, [r1, #0]
 8000ac0:	f020 0004 	bic.w	r0, r0, #4
 8000ac4:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000ac6:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000ac8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000aca:	f042 0201 	orr.w	r2, r2, #1
 8000ace:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	409a      	lsls	r2, r3
 8000ad4:	4216      	tst	r6, r2
 8000ad6:	d008      	beq.n	8000aea <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000ad8:	6821      	ldr	r1, [r4, #0]
 8000ada:	6949      	ldr	r1, [r1, #20]
 8000adc:	0609      	lsls	r1, r1, #24
 8000ade:	d504      	bpl.n	8000aea <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000ae0:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000ae2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000ae4:	f042 0202 	orr.w	r2, r2, #2
 8000ae8:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000aea:	2204      	movs	r2, #4
 8000aec:	409a      	lsls	r2, r3
 8000aee:	4216      	tst	r6, r2
 8000af0:	d008      	beq.n	8000b04 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000af2:	6821      	ldr	r1, [r4, #0]
 8000af4:	6809      	ldr	r1, [r1, #0]
 8000af6:	0788      	lsls	r0, r1, #30
 8000af8:	d504      	bpl.n	8000b04 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000afa:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000afc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000afe:	f042 0204 	orr.w	r2, r2, #4
 8000b02:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000b04:	2210      	movs	r2, #16
 8000b06:	409a      	lsls	r2, r3
 8000b08:	4216      	tst	r6, r2
 8000b0a:	d010      	beq.n	8000b2e <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000b0c:	6823      	ldr	r3, [r4, #0]
 8000b0e:	6819      	ldr	r1, [r3, #0]
 8000b10:	0709      	lsls	r1, r1, #28
 8000b12:	d50c      	bpl.n	8000b2e <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000b14:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	0350      	lsls	r0, r2, #13
 8000b1a:	d535      	bpl.n	8000b88 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	0319      	lsls	r1, r3, #12
 8000b20:	d401      	bmi.n	8000b26 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8000b22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b24:	e000      	b.n	8000b28 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000b26:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8000b28:	b10b      	cbz	r3, 8000b2e <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8000b2a:	4620      	mov	r0, r4
 8000b2c:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000b2e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000b30:	2220      	movs	r2, #32
 8000b32:	408a      	lsls	r2, r1
 8000b34:	4216      	tst	r6, r2
 8000b36:	d038      	beq.n	8000baa <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000b38:	6823      	ldr	r3, [r4, #0]
 8000b3a:	6818      	ldr	r0, [r3, #0]
 8000b3c:	06c6      	lsls	r6, r0, #27
 8000b3e:	d534      	bpl.n	8000baa <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000b40:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000b42:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8000b46:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000b48:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000b4a:	d125      	bne.n	8000b98 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000b4c:	f022 0216 	bic.w	r2, r2, #22
 8000b50:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000b52:	695a      	ldr	r2, [r3, #20]
 8000b54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b58:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000b5a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000b5c:	b90a      	cbnz	r2, 8000b62 <HAL_DMA_IRQHandler+0xc6>
 8000b5e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000b60:	b11a      	cbz	r2, 8000b6a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	f022 0208 	bic.w	r2, r2, #8
 8000b68:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000b6a:	233f      	movs	r3, #63	; 0x3f
 8000b6c:	408b      	lsls	r3, r1
 8000b6e:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8000b70:	2300      	movs	r3, #0
 8000b72:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000b76:	2301      	movs	r3, #1
 8000b78:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000b7c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8000b7e:	b10b      	cbz	r3, 8000b84 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8000b80:	4620      	mov	r0, r4
 8000b82:	4798      	blx	r3
}
 8000b84:	b003      	add	sp, #12
 8000b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	05d2      	lsls	r2, r2, #23
 8000b8c:	d4c9      	bmi.n	8000b22 <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	f022 0208 	bic.w	r2, r2, #8
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	e7c4      	b.n	8000b22 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000b98:	0350      	lsls	r0, r2, #13
 8000b9a:	d528      	bpl.n	8000bee <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	0319      	lsls	r1, r3, #12
 8000ba0:	d432      	bmi.n	8000c08 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8000ba2:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8000ba4:	b10b      	cbz	r3, 8000baa <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8000ba6:	4620      	mov	r0, r4
 8000ba8:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000baa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d0e9      	beq.n	8000b84 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000bb0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000bb2:	07da      	lsls	r2, r3, #31
 8000bb4:	d519      	bpl.n	8000bea <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000bb6:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8000bb8:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8000bba:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000bbe:	6813      	ldr	r3, [r2, #0]
 8000bc0:	f023 0301 	bic.w	r3, r3, #1
 8000bc4:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8000bc6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000bca:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8000bce:	9b01      	ldr	r3, [sp, #4]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	429f      	cmp	r7, r3
 8000bd4:	9301      	str	r3, [sp, #4]
 8000bd6:	d302      	bcc.n	8000bde <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000bd8:	6813      	ldr	r3, [r2, #0]
 8000bda:	07db      	lsls	r3, r3, #31
 8000bdc:	d4f7      	bmi.n	8000bce <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 8000bde:	2300      	movs	r3, #0
 8000be0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000be4:	2301      	movs	r3, #1
 8000be6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000bea:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000bec:	e7c7      	b.n	8000b7e <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000bf4:	d108      	bne.n	8000c08 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000bf6:	6819      	ldr	r1, [r3, #0]
 8000bf8:	f021 0110 	bic.w	r1, r1, #16
 8000bfc:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000bfe:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8000c00:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000c04:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000c08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000c0a:	e7cb      	b.n	8000ba4 <HAL_DMA_IRQHandler+0x108>
 8000c0c:	20000008 	.word	0x20000008

08000c10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c14:	680b      	ldr	r3, [r1, #0]
{
 8000c16:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c18:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000ddc <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c1c:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000c1e:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c20:	4a6c      	ldr	r2, [pc, #432]	; (8000dd4 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c22:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8000de0 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8000c26:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c2a:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8000c2c:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c30:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000c34:	45b6      	cmp	lr, r6
 8000c36:	f040 80b3 	bne.w	8000da0 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c3a:	684c      	ldr	r4, [r1, #4]
 8000c3c:	f024 0710 	bic.w	r7, r4, #16
 8000c40:	2f02      	cmp	r7, #2
 8000c42:	d116      	bne.n	8000c72 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8000c44:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000c48:	f003 0b07 	and.w	fp, r3, #7
 8000c4c:	f04f 0c0f 	mov.w	ip, #15
 8000c50:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000c54:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000c58:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000c5c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000c60:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000c64:	690d      	ldr	r5, [r1, #16]
 8000c66:	fa05 f50b 	lsl.w	r5, r5, fp
 8000c6a:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000c6e:	f8ca 5020 	str.w	r5, [sl, #32]
 8000c72:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c76:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000c78:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c7c:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c80:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c84:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c86:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c8a:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c8c:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c8e:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c92:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 8000c96:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c9a:	d811      	bhi.n	8000cc0 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000c9c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000c9e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8000ca2:	68cf      	ldr	r7, [r1, #12]
 8000ca4:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000ca8:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000cac:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000cae:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cb0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000cb4:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000cb8:	409f      	lsls	r7, r3
 8000cba:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000cbe:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000cc0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000cc2:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000cc4:	688f      	ldr	r7, [r1, #8]
 8000cc6:	fa07 f70a 	lsl.w	r7, r7, sl
 8000cca:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000ccc:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cce:	00e5      	lsls	r5, r4, #3
 8000cd0:	d566      	bpl.n	8000da0 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd2:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8000cd6:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000cda:	f003 0e03 	and.w	lr, r3, #3
 8000cde:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce2:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 8000ce6:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000cea:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cee:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 8000cf2:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000cf6:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8000cfa:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8000cfe:	9503      	str	r5, [sp, #12]
 8000d00:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000d02:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 8000d06:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000d0a:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d0e:	4d32      	ldr	r5, [pc, #200]	; (8000dd8 <HAL_GPIO_Init+0x1c8>)
 8000d10:	42a8      	cmp	r0, r5
 8000d12:	d04c      	beq.n	8000dae <HAL_GPIO_Init+0x19e>
 8000d14:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d18:	42a8      	cmp	r0, r5
 8000d1a:	d04a      	beq.n	8000db2 <HAL_GPIO_Init+0x1a2>
 8000d1c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d20:	42a8      	cmp	r0, r5
 8000d22:	d048      	beq.n	8000db6 <HAL_GPIO_Init+0x1a6>
 8000d24:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d28:	42a8      	cmp	r0, r5
 8000d2a:	d046      	beq.n	8000dba <HAL_GPIO_Init+0x1aa>
 8000d2c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d30:	42a8      	cmp	r0, r5
 8000d32:	d044      	beq.n	8000dbe <HAL_GPIO_Init+0x1ae>
 8000d34:	4548      	cmp	r0, r9
 8000d36:	d044      	beq.n	8000dc2 <HAL_GPIO_Init+0x1b2>
 8000d38:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000d3c:	42a8      	cmp	r0, r5
 8000d3e:	d042      	beq.n	8000dc6 <HAL_GPIO_Init+0x1b6>
 8000d40:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d44:	42a8      	cmp	r0, r5
 8000d46:	d040      	beq.n	8000dca <HAL_GPIO_Init+0x1ba>
 8000d48:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d4c:	42a8      	cmp	r0, r5
 8000d4e:	d03e      	beq.n	8000dce <HAL_GPIO_Init+0x1be>
 8000d50:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d54:	42a8      	cmp	r0, r5
 8000d56:	bf14      	ite	ne
 8000d58:	250a      	movne	r5, #10
 8000d5a:	2509      	moveq	r5, #9
 8000d5c:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d60:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d64:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000d68:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8000d6a:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 8000d6e:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000d70:	bf0c      	ite	eq
 8000d72:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000d74:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d76:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8000d7a:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000d7c:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000d7e:	bf0c      	ite	eq
 8000d80:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000d82:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d84:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8000d88:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000d8a:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000d8c:	bf0c      	ite	eq
 8000d8e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000d90:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d92:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8000d94:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000d96:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000d98:	bf54      	ite	pl
 8000d9a:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000d9c:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000d9e:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000da0:	3301      	adds	r3, #1
 8000da2:	2b10      	cmp	r3, #16
 8000da4:	f47f af3f 	bne.w	8000c26 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000da8:	b005      	add	sp, #20
 8000daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000dae:	2500      	movs	r5, #0
 8000db0:	e7d4      	b.n	8000d5c <HAL_GPIO_Init+0x14c>
 8000db2:	2501      	movs	r5, #1
 8000db4:	e7d2      	b.n	8000d5c <HAL_GPIO_Init+0x14c>
 8000db6:	2502      	movs	r5, #2
 8000db8:	e7d0      	b.n	8000d5c <HAL_GPIO_Init+0x14c>
 8000dba:	2503      	movs	r5, #3
 8000dbc:	e7ce      	b.n	8000d5c <HAL_GPIO_Init+0x14c>
 8000dbe:	2504      	movs	r5, #4
 8000dc0:	e7cc      	b.n	8000d5c <HAL_GPIO_Init+0x14c>
 8000dc2:	2505      	movs	r5, #5
 8000dc4:	e7ca      	b.n	8000d5c <HAL_GPIO_Init+0x14c>
 8000dc6:	2506      	movs	r5, #6
 8000dc8:	e7c8      	b.n	8000d5c <HAL_GPIO_Init+0x14c>
 8000dca:	2507      	movs	r5, #7
 8000dcc:	e7c6      	b.n	8000d5c <HAL_GPIO_Init+0x14c>
 8000dce:	2508      	movs	r5, #8
 8000dd0:	e7c4      	b.n	8000d5c <HAL_GPIO_Init+0x14c>
 8000dd2:	bf00      	nop
 8000dd4:	40013c00 	.word	0x40013c00
 8000dd8:	40020000 	.word	0x40020000
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40021400 	.word	0x40021400

08000de4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000de8:	2400      	movs	r4, #0
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8000dea:	4e4c      	ldr	r6, [pc, #304]	; (8000f1c <HAL_GPIO_DeInit+0x138>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8000dec:	f8df a134 	ldr.w	sl, [pc, #308]	; 8000f24 <HAL_GPIO_DeInit+0x140>
 8000df0:	f8df b134 	ldr.w	fp, [pc, #308]	; 8000f28 <HAL_GPIO_DeInit+0x144>
    ioposition = ((uint32_t)0x01) << position;
 8000df4:	f04f 0901 	mov.w	r9, #1
 8000df8:	fa09 f204 	lsl.w	r2, r9, r4
    if(iocurrent == ioposition)
 8000dfc:	ea32 0301 	bics.w	r3, r2, r1
 8000e00:	d174      	bne.n	8000eec <HAL_GPIO_DeInit+0x108>
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000e02:	2303      	movs	r3, #3
 8000e04:	fa04 f509 	lsl.w	r5, r4, r9
 8000e08:	6807      	ldr	r7, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e0a:	f004 0e07 	and.w	lr, r4, #7
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000e0e:	fa03 f505 	lsl.w	r5, r3, r5
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e12:	fa24 fc03 	lsr.w	ip, r4, r3
 8000e16:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e1a:	43d2      	mvns	r2, r2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000e1c:	43ed      	mvns	r5, r5
 8000e1e:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8000e22:	402f      	ands	r7, r5
 8000e24:	6007      	str	r7, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e26:	270f      	movs	r7, #15
 8000e28:	f8dc 8020 	ldr.w	r8, [ip, #32]
 8000e2c:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000e30:	ea28 0e0e 	bic.w	lr, r8, lr
 8000e34:	f8cc e020 	str.w	lr, [ip, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e38:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8000e3c:	ea05 0e0e 	and.w	lr, r5, lr
 8000e40:	f8c0 e008 	str.w	lr, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e44:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8000e48:	ea02 0e0e 	and.w	lr, r2, lr
 8000e4c:	f8c0 e004 	str.w	lr, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e50:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8000e54:	ea05 050e 	and.w	r5, r5, lr
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000e58:	ea04 0e03 	and.w	lr, r4, r3
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8000e5c:	4b30      	ldr	r3, [pc, #192]	; (8000f20 <HAL_GPIO_DeInit+0x13c>)
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e5e:	60c5      	str	r5, [r0, #12]
 8000e60:	f024 0503 	bic.w	r5, r4, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000e64:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8000e68:	4298      	cmp	r0, r3
 8000e6a:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000e6e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e72:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp = SYSCFG->EXTICR[position >> 2];
 8000e76:	f8d5 c008 	ldr.w	ip, [r5, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000e7a:	ea0c 0c07 	and.w	ip, ip, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8000e7e:	d03a      	beq.n	8000ef6 <HAL_GPIO_DeInit+0x112>
 8000e80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e84:	4298      	cmp	r0, r3
 8000e86:	d038      	beq.n	8000efa <HAL_GPIO_DeInit+0x116>
 8000e88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e8c:	4298      	cmp	r0, r3
 8000e8e:	d036      	beq.n	8000efe <HAL_GPIO_DeInit+0x11a>
 8000e90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e94:	4298      	cmp	r0, r3
 8000e96:	d034      	beq.n	8000f02 <HAL_GPIO_DeInit+0x11e>
 8000e98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e9c:	4298      	cmp	r0, r3
 8000e9e:	d032      	beq.n	8000f06 <HAL_GPIO_DeInit+0x122>
 8000ea0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000ea4:	4298      	cmp	r0, r3
 8000ea6:	d030      	beq.n	8000f0a <HAL_GPIO_DeInit+0x126>
 8000ea8:	4550      	cmp	r0, sl
 8000eaa:	d030      	beq.n	8000f0e <HAL_GPIO_DeInit+0x12a>
 8000eac:	4558      	cmp	r0, fp
 8000eae:	d030      	beq.n	8000f12 <HAL_GPIO_DeInit+0x12e>
 8000eb0:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8000eb4:	4298      	cmp	r0, r3
 8000eb6:	d02e      	beq.n	8000f16 <HAL_GPIO_DeInit+0x132>
 8000eb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000ebc:	4298      	cmp	r0, r3
 8000ebe:	bf0c      	ite	eq
 8000ec0:	2309      	moveq	r3, #9
 8000ec2:	230a      	movne	r3, #10
 8000ec4:	fa03 f30e 	lsl.w	r3, r3, lr
 8000ec8:	459c      	cmp	ip, r3
 8000eca:	d10f      	bne.n	8000eec <HAL_GPIO_DeInit+0x108>
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8000ecc:	68ab      	ldr	r3, [r5, #8]
 8000ece:	ea23 0707 	bic.w	r7, r3, r7
 8000ed2:	60af      	str	r7, [r5, #8]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8000ed4:	6833      	ldr	r3, [r6, #0]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	6033      	str	r3, [r6, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8000eda:	6873      	ldr	r3, [r6, #4]
 8000edc:	4013      	ands	r3, r2
 8000ede:	6073      	str	r3, [r6, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8000ee0:	68b3      	ldr	r3, [r6, #8]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	60b3      	str	r3, [r6, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8000ee6:	68f3      	ldr	r3, [r6, #12]
 8000ee8:	401a      	ands	r2, r3
 8000eea:	60f2      	str	r2, [r6, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000eec:	3401      	adds	r4, #1
 8000eee:	2c10      	cmp	r4, #16
 8000ef0:	d180      	bne.n	8000df4 <HAL_GPIO_DeInit+0x10>
	  }
    }
  }
}
 8000ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	e7e4      	b.n	8000ec4 <HAL_GPIO_DeInit+0xe0>
 8000efa:	464b      	mov	r3, r9
 8000efc:	e7e2      	b.n	8000ec4 <HAL_GPIO_DeInit+0xe0>
 8000efe:	2302      	movs	r3, #2
 8000f00:	e7e0      	b.n	8000ec4 <HAL_GPIO_DeInit+0xe0>
 8000f02:	2303      	movs	r3, #3
 8000f04:	e7de      	b.n	8000ec4 <HAL_GPIO_DeInit+0xe0>
 8000f06:	2304      	movs	r3, #4
 8000f08:	e7dc      	b.n	8000ec4 <HAL_GPIO_DeInit+0xe0>
 8000f0a:	2305      	movs	r3, #5
 8000f0c:	e7da      	b.n	8000ec4 <HAL_GPIO_DeInit+0xe0>
 8000f0e:	2306      	movs	r3, #6
 8000f10:	e7d8      	b.n	8000ec4 <HAL_GPIO_DeInit+0xe0>
 8000f12:	2307      	movs	r3, #7
 8000f14:	e7d6      	b.n	8000ec4 <HAL_GPIO_DeInit+0xe0>
 8000f16:	2308      	movs	r3, #8
 8000f18:	e7d4      	b.n	8000ec4 <HAL_GPIO_DeInit+0xe0>
 8000f1a:	bf00      	nop
 8000f1c:	40013c00 	.word	0x40013c00
 8000f20:	40020000 	.word	0x40020000
 8000f24:	40021800 	.word	0x40021800
 8000f28:	40021c00 	.word	0x40021c00

08000f2c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f2c:	b10a      	cbz	r2, 8000f32 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000f2e:	6181      	str	r1, [r0, #24]
 8000f30:	4770      	bx	lr
 8000f32:	0409      	lsls	r1, r1, #16
 8000f34:	e7fb      	b.n	8000f2e <HAL_GPIO_WritePin+0x2>

08000f36 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f36:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f38:	4604      	mov	r4, r0
 8000f3a:	2800      	cmp	r0, #0
 8000f3c:	d04a      	beq.n	8000fd4 <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f3e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000f42:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f46:	b91b      	cbnz	r3, 8000f50 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f48:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f4c:	f001 ff94 	bl	8002e78 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f50:	2324      	movs	r3, #36	; 0x24
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f52:	68e1      	ldr	r1, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f54:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f58:	2901      	cmp	r1, #1
  __HAL_I2C_DISABLE(hi2c);
 8000f5a:	6823      	ldr	r3, [r4, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	f022 0201 	bic.w	r2, r2, #1
 8000f62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f64:	6862      	ldr	r2, [r4, #4]
 8000f66:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f6a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f6c:	689a      	ldr	r2, [r3, #8]
 8000f6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f76:	d124      	bne.n	8000fc2 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f7c:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f7e:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f80:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000f82:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f84:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000f88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f8c:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f8e:	68da      	ldr	r2, [r3, #12]
 8000f90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f94:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000f96:	6922      	ldr	r2, [r4, #16]
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	69a1      	ldr	r1, [r4, #24]
 8000f9c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000fa0:	6a21      	ldr	r1, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000fa2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000fa4:	69e2      	ldr	r2, [r4, #28]
 8000fa6:	430a      	orrs	r2, r1
 8000fa8:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	f042 0201 	orr.w	r2, r2, #1
 8000fb0:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000fb2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fb4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000fb6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000fba:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fbc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 8000fc0:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000fc2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000fc6:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000fc8:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000fca:	d1d8      	bne.n	8000f7e <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000fcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	e7d4      	b.n	8000f7e <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8000fd4:	2001      	movs	r0, #1
}
 8000fd6:	bd10      	pop	{r4, pc}

08000fd8 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fd8:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8000fdc:	b2d2      	uxtb	r2, r2
 8000fde:	2a20      	cmp	r2, #32
{
 8000fe0:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fe2:	d11d      	bne.n	8001020 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fe4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d019      	beq.n	8001020 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000fec:	2324      	movs	r3, #36	; 0x24
 8000fee:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000ff2:	6803      	ldr	r3, [r0, #0]
 8000ff4:	681c      	ldr	r4, [r3, #0]
 8000ff6:	f024 0401 	bic.w	r4, r4, #1
 8000ffa:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000ffc:	681c      	ldr	r4, [r3, #0]
 8000ffe:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8001002:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001004:	681c      	ldr	r4, [r3, #0]
 8001006:	4321      	orrs	r1, r4
 8001008:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800100a:	6819      	ldr	r1, [r3, #0]
 800100c:	f041 0101 	orr.w	r1, r1, #1
 8001010:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001012:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001014:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001018:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800101c:	4618      	mov	r0, r3
 800101e:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001020:	2002      	movs	r0, #2
  }
}
 8001022:	bd10      	pop	{r4, pc}

08001024 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001024:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001026:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 800102a:	b2e4      	uxtb	r4, r4
 800102c:	2c20      	cmp	r4, #32
 800102e:	d11c      	bne.n	800106a <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001030:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001034:	2b01      	cmp	r3, #1
 8001036:	d018      	beq.n	800106a <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001038:	2324      	movs	r3, #36	; 0x24
 800103a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800103e:	6803      	ldr	r3, [r0, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	f022 0201 	bic.w	r2, r2, #1
 8001046:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001048:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800104a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800104e:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001052:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	f042 0201 	orr.w	r2, r2, #1
 800105a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800105c:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800105e:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001062:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001066:	4618      	mov	r0, r3
 8001068:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 800106a:	2002      	movs	r0, #2
  }
}
 800106c:	bd10      	pop	{r4, pc}
	...

08001070 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001070:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8001072:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8001074:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001076:	4c19      	ldr	r4, [pc, #100]	; (80010dc <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001078:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800107c:	641a      	str	r2, [r3, #64]	; 0x40
 800107e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001084:	9301      	str	r3, [sp, #4]
 8001086:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001088:	6823      	ldr	r3, [r4, #0]
 800108a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800108e:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001090:	f7ff faf2 	bl	8000678 <HAL_GetTick>
 8001094:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001096:	6863      	ldr	r3, [r4, #4]
 8001098:	03da      	lsls	r2, r3, #15
 800109a:	d50c      	bpl.n	80010b6 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800109c:	6823      	ldr	r3, [r4, #0]
 800109e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a2:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010a4:	f7ff fae8 	bl	8000678 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80010a8:	4c0c      	ldr	r4, [pc, #48]	; (80010dc <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 80010aa:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80010ac:	6863      	ldr	r3, [r4, #4]
 80010ae:	039b      	lsls	r3, r3, #14
 80010b0:	d50a      	bpl.n	80010c8 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80010b2:	2000      	movs	r0, #0
 80010b4:	e006      	b.n	80010c4 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80010b6:	f7ff fadf 	bl	8000678 <HAL_GetTick>
 80010ba:	1b40      	subs	r0, r0, r5
 80010bc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80010c0:	d9e9      	bls.n	8001096 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 80010c2:	2003      	movs	r0, #3
}
 80010c4:	b003      	add	sp, #12
 80010c6:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80010c8:	f7ff fad6 	bl	8000678 <HAL_GetTick>
 80010cc:	1b40      	subs	r0, r0, r5
 80010ce:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80010d2:	d9eb      	bls.n	80010ac <HAL_PWREx_EnableOverDrive+0x3c>
 80010d4:	e7f5      	b.n	80010c2 <HAL_PWREx_EnableOverDrive+0x52>
 80010d6:	bf00      	nop
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40007000 	.word	0x40007000

080010e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010e4:	4604      	mov	r4, r0
 80010e6:	b918      	cbnz	r0, 80010f0 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80010e8:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80010ea:	b002      	add	sp, #8
 80010ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010f0:	6803      	ldr	r3, [r0, #0]
 80010f2:	07d8      	lsls	r0, r3, #31
 80010f4:	d410      	bmi.n	8001118 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010f6:	6823      	ldr	r3, [r4, #0]
 80010f8:	0799      	lsls	r1, r3, #30
 80010fa:	d45e      	bmi.n	80011ba <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010fc:	6823      	ldr	r3, [r4, #0]
 80010fe:	0719      	lsls	r1, r3, #28
 8001100:	f100 80a3 	bmi.w	800124a <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001104:	6823      	ldr	r3, [r4, #0]
 8001106:	075a      	lsls	r2, r3, #29
 8001108:	f100 80c4 	bmi.w	8001294 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800110c:	69a2      	ldr	r2, [r4, #24]
 800110e:	2a00      	cmp	r2, #0
 8001110:	f040 812e 	bne.w	8001370 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 8001114:	2000      	movs	r0, #0
 8001116:	e7e8      	b.n	80010ea <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001118:	4b93      	ldr	r3, [pc, #588]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 800111a:	689a      	ldr	r2, [r3, #8]
 800111c:	f002 020c 	and.w	r2, r2, #12
 8001120:	2a04      	cmp	r2, #4
 8001122:	d007      	beq.n	8001134 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001124:	689a      	ldr	r2, [r3, #8]
 8001126:	f002 020c 	and.w	r2, r2, #12
 800112a:	2a08      	cmp	r2, #8
 800112c:	d10a      	bne.n	8001144 <HAL_RCC_OscConfig+0x64>
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	025a      	lsls	r2, r3, #9
 8001132:	d507      	bpl.n	8001144 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001134:	4b8c      	ldr	r3, [pc, #560]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	039b      	lsls	r3, r3, #14
 800113a:	d5dc      	bpl.n	80010f6 <HAL_RCC_OscConfig+0x16>
 800113c:	6863      	ldr	r3, [r4, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d1d9      	bne.n	80010f6 <HAL_RCC_OscConfig+0x16>
 8001142:	e7d1      	b.n	80010e8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001144:	6863      	ldr	r3, [r4, #4]
 8001146:	4d88      	ldr	r5, [pc, #544]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 8001148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800114c:	d111      	bne.n	8001172 <HAL_RCC_OscConfig+0x92>
 800114e:	682b      	ldr	r3, [r5, #0]
 8001150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001154:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001156:	f7ff fa8f 	bl	8000678 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800115a:	4d83      	ldr	r5, [pc, #524]	; (8001368 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 800115c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800115e:	682b      	ldr	r3, [r5, #0]
 8001160:	039f      	lsls	r7, r3, #14
 8001162:	d4c8      	bmi.n	80010f6 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001164:	f7ff fa88 	bl	8000678 <HAL_GetTick>
 8001168:	1b80      	subs	r0, r0, r6
 800116a:	2864      	cmp	r0, #100	; 0x64
 800116c:	d9f7      	bls.n	800115e <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 800116e:	2003      	movs	r0, #3
 8001170:	e7bb      	b.n	80010ea <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001172:	b99b      	cbnz	r3, 800119c <HAL_RCC_OscConfig+0xbc>
 8001174:	682b      	ldr	r3, [r5, #0]
 8001176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800117a:	602b      	str	r3, [r5, #0]
 800117c:	682b      	ldr	r3, [r5, #0]
 800117e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001182:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001184:	f7ff fa78 	bl	8000678 <HAL_GetTick>
 8001188:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800118a:	682b      	ldr	r3, [r5, #0]
 800118c:	0398      	lsls	r0, r3, #14
 800118e:	d5b2      	bpl.n	80010f6 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001190:	f7ff fa72 	bl	8000678 <HAL_GetTick>
 8001194:	1b80      	subs	r0, r0, r6
 8001196:	2864      	cmp	r0, #100	; 0x64
 8001198:	d9f7      	bls.n	800118a <HAL_RCC_OscConfig+0xaa>
 800119a:	e7e8      	b.n	800116e <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800119c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011a0:	682b      	ldr	r3, [r5, #0]
 80011a2:	d103      	bne.n	80011ac <HAL_RCC_OscConfig+0xcc>
 80011a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a8:	602b      	str	r3, [r5, #0]
 80011aa:	e7d0      	b.n	800114e <HAL_RCC_OscConfig+0x6e>
 80011ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011b0:	602b      	str	r3, [r5, #0]
 80011b2:	682b      	ldr	r3, [r5, #0]
 80011b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011b8:	e7cc      	b.n	8001154 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011ba:	4b6b      	ldr	r3, [pc, #428]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 80011bc:	689a      	ldr	r2, [r3, #8]
 80011be:	f012 0f0c 	tst.w	r2, #12
 80011c2:	d007      	beq.n	80011d4 <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011c4:	689a      	ldr	r2, [r3, #8]
 80011c6:	f002 020c 	and.w	r2, r2, #12
 80011ca:	2a08      	cmp	r2, #8
 80011cc:	d111      	bne.n	80011f2 <HAL_RCC_OscConfig+0x112>
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	0259      	lsls	r1, r3, #9
 80011d2:	d40e      	bmi.n	80011f2 <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011d4:	4b64      	ldr	r3, [pc, #400]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	0792      	lsls	r2, r2, #30
 80011da:	d502      	bpl.n	80011e2 <HAL_RCC_OscConfig+0x102>
 80011dc:	68e2      	ldr	r2, [r4, #12]
 80011de:	2a01      	cmp	r2, #1
 80011e0:	d182      	bne.n	80010e8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	6921      	ldr	r1, [r4, #16]
 80011e6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80011ea:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80011ee:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011f0:	e784      	b.n	80010fc <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011f2:	68e3      	ldr	r3, [r4, #12]
 80011f4:	4d5c      	ldr	r5, [pc, #368]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 80011f6:	b1bb      	cbz	r3, 8001228 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 80011f8:	682b      	ldr	r3, [r5, #0]
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001200:	f7ff fa3a 	bl	8000678 <HAL_GetTick>
 8001204:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001206:	682b      	ldr	r3, [r5, #0]
 8001208:	079f      	lsls	r7, r3, #30
 800120a:	d507      	bpl.n	800121c <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800120c:	682b      	ldr	r3, [r5, #0]
 800120e:	6922      	ldr	r2, [r4, #16]
 8001210:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001214:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001218:	602b      	str	r3, [r5, #0]
 800121a:	e76f      	b.n	80010fc <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800121c:	f7ff fa2c 	bl	8000678 <HAL_GetTick>
 8001220:	1b80      	subs	r0, r0, r6
 8001222:	2802      	cmp	r0, #2
 8001224:	d9ef      	bls.n	8001206 <HAL_RCC_OscConfig+0x126>
 8001226:	e7a2      	b.n	800116e <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001228:	682b      	ldr	r3, [r5, #0]
 800122a:	f023 0301 	bic.w	r3, r3, #1
 800122e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001230:	f7ff fa22 	bl	8000678 <HAL_GetTick>
 8001234:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001236:	682b      	ldr	r3, [r5, #0]
 8001238:	0798      	lsls	r0, r3, #30
 800123a:	f57f af5f 	bpl.w	80010fc <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800123e:	f7ff fa1b 	bl	8000678 <HAL_GetTick>
 8001242:	1b80      	subs	r0, r0, r6
 8001244:	2802      	cmp	r0, #2
 8001246:	d9f6      	bls.n	8001236 <HAL_RCC_OscConfig+0x156>
 8001248:	e791      	b.n	800116e <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800124a:	6963      	ldr	r3, [r4, #20]
 800124c:	4d46      	ldr	r5, [pc, #280]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 800124e:	b183      	cbz	r3, 8001272 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8001250:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001258:	f7ff fa0e 	bl	8000678 <HAL_GetTick>
 800125c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800125e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001260:	079b      	lsls	r3, r3, #30
 8001262:	f53f af4f 	bmi.w	8001104 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001266:	f7ff fa07 	bl	8000678 <HAL_GetTick>
 800126a:	1b80      	subs	r0, r0, r6
 800126c:	2802      	cmp	r0, #2
 800126e:	d9f6      	bls.n	800125e <HAL_RCC_OscConfig+0x17e>
 8001270:	e77d      	b.n	800116e <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001272:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001274:	f023 0301 	bic.w	r3, r3, #1
 8001278:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800127a:	f7ff f9fd 	bl	8000678 <HAL_GetTick>
 800127e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001280:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001282:	079f      	lsls	r7, r3, #30
 8001284:	f57f af3e 	bpl.w	8001104 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001288:	f7ff f9f6 	bl	8000678 <HAL_GetTick>
 800128c:	1b80      	subs	r0, r0, r6
 800128e:	2802      	cmp	r0, #2
 8001290:	d9f6      	bls.n	8001280 <HAL_RCC_OscConfig+0x1a0>
 8001292:	e76c      	b.n	800116e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001294:	4b34      	ldr	r3, [pc, #208]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 8001296:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001298:	00d0      	lsls	r0, r2, #3
 800129a:	d427      	bmi.n	80012ec <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 800129c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800129e:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80012a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012a4:	641a      	str	r2, [r3, #64]	; 0x40
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ac:	9301      	str	r3, [sp, #4]
 80012ae:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012b0:	4d2e      	ldr	r5, [pc, #184]	; (800136c <HAL_RCC_OscConfig+0x28c>)
 80012b2:	682b      	ldr	r3, [r5, #0]
 80012b4:	05d9      	lsls	r1, r3, #23
 80012b6:	d51b      	bpl.n	80012f0 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012b8:	68a3      	ldr	r3, [r4, #8]
 80012ba:	4d2b      	ldr	r5, [pc, #172]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d127      	bne.n	8001310 <HAL_RCC_OscConfig+0x230>
 80012c0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012c8:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80012cc:	f7ff f9d4 	bl	8000678 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012d0:	4f25      	ldr	r7, [pc, #148]	; (8001368 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 80012d2:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80012d6:	079b      	lsls	r3, r3, #30
 80012d8:	d53f      	bpl.n	800135a <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 80012da:	2e00      	cmp	r6, #0
 80012dc:	f43f af16 	beq.w	800110c <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80012e0:	4a21      	ldr	r2, [pc, #132]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 80012e2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80012e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012e8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ea:	e70f      	b.n	800110c <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 80012ec:	2600      	movs	r6, #0
 80012ee:	e7df      	b.n	80012b0 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 80012f0:	682b      	ldr	r3, [r5, #0]
 80012f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80012f8:	f7ff f9be 	bl	8000678 <HAL_GetTick>
 80012fc:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012fe:	682b      	ldr	r3, [r5, #0]
 8001300:	05da      	lsls	r2, r3, #23
 8001302:	d4d9      	bmi.n	80012b8 <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001304:	f7ff f9b8 	bl	8000678 <HAL_GetTick>
 8001308:	1bc0      	subs	r0, r0, r7
 800130a:	2864      	cmp	r0, #100	; 0x64
 800130c:	d9f7      	bls.n	80012fe <HAL_RCC_OscConfig+0x21e>
 800130e:	e72e      	b.n	800116e <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001310:	b9ab      	cbnz	r3, 800133e <HAL_RCC_OscConfig+0x25e>
 8001312:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001314:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001318:	f023 0301 	bic.w	r3, r3, #1
 800131c:	672b      	str	r3, [r5, #112]	; 0x70
 800131e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001320:	f023 0304 	bic.w	r3, r3, #4
 8001324:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001326:	f7ff f9a7 	bl	8000678 <HAL_GetTick>
 800132a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800132c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800132e:	0798      	lsls	r0, r3, #30
 8001330:	d5d3      	bpl.n	80012da <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001332:	f7ff f9a1 	bl	8000678 <HAL_GetTick>
 8001336:	1bc0      	subs	r0, r0, r7
 8001338:	4540      	cmp	r0, r8
 800133a:	d9f7      	bls.n	800132c <HAL_RCC_OscConfig+0x24c>
 800133c:	e717      	b.n	800116e <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800133e:	2b05      	cmp	r3, #5
 8001340:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001342:	d103      	bne.n	800134c <HAL_RCC_OscConfig+0x26c>
 8001344:	f043 0304 	orr.w	r3, r3, #4
 8001348:	672b      	str	r3, [r5, #112]	; 0x70
 800134a:	e7b9      	b.n	80012c0 <HAL_RCC_OscConfig+0x1e0>
 800134c:	f023 0301 	bic.w	r3, r3, #1
 8001350:	672b      	str	r3, [r5, #112]	; 0x70
 8001352:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001354:	f023 0304 	bic.w	r3, r3, #4
 8001358:	e7b5      	b.n	80012c6 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800135a:	f7ff f98d 	bl	8000678 <HAL_GetTick>
 800135e:	eba0 0008 	sub.w	r0, r0, r8
 8001362:	42a8      	cmp	r0, r5
 8001364:	d9b6      	bls.n	80012d4 <HAL_RCC_OscConfig+0x1f4>
 8001366:	e702      	b.n	800116e <HAL_RCC_OscConfig+0x8e>
 8001368:	40023800 	.word	0x40023800
 800136c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001370:	4d24      	ldr	r5, [pc, #144]	; (8001404 <HAL_RCC_OscConfig+0x324>)
 8001372:	68ab      	ldr	r3, [r5, #8]
 8001374:	f003 030c 	and.w	r3, r3, #12
 8001378:	2b08      	cmp	r3, #8
 800137a:	f43f aeb5 	beq.w	80010e8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 800137e:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001380:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001382:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001386:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001388:	d12f      	bne.n	80013ea <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 800138a:	f7ff f975 	bl	8000678 <HAL_GetTick>
 800138e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001390:	682b      	ldr	r3, [r5, #0]
 8001392:	0199      	lsls	r1, r3, #6
 8001394:	d423      	bmi.n	80013de <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001396:	6a22      	ldr	r2, [r4, #32]
 8001398:	69e3      	ldr	r3, [r4, #28]
 800139a:	4313      	orrs	r3, r2
 800139c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800139e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80013a2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80013a4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80013a8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80013aa:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80013ae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013b0:	4c14      	ldr	r4, [pc, #80]	; (8001404 <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013b2:	0852      	lsrs	r2, r2, #1
 80013b4:	3a01      	subs	r2, #1
 80013b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80013ba:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80013bc:	682b      	ldr	r3, [r5, #0]
 80013be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013c2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80013c4:	f7ff f958 	bl	8000678 <HAL_GetTick>
 80013c8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ca:	6823      	ldr	r3, [r4, #0]
 80013cc:	019a      	lsls	r2, r3, #6
 80013ce:	f53f aea1 	bmi.w	8001114 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013d2:	f7ff f951 	bl	8000678 <HAL_GetTick>
 80013d6:	1b40      	subs	r0, r0, r5
 80013d8:	2802      	cmp	r0, #2
 80013da:	d9f6      	bls.n	80013ca <HAL_RCC_OscConfig+0x2ea>
 80013dc:	e6c7      	b.n	800116e <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013de:	f7ff f94b 	bl	8000678 <HAL_GetTick>
 80013e2:	1b80      	subs	r0, r0, r6
 80013e4:	2802      	cmp	r0, #2
 80013e6:	d9d3      	bls.n	8001390 <HAL_RCC_OscConfig+0x2b0>
 80013e8:	e6c1      	b.n	800116e <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 80013ea:	f7ff f945 	bl	8000678 <HAL_GetTick>
 80013ee:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013f0:	682b      	ldr	r3, [r5, #0]
 80013f2:	019b      	lsls	r3, r3, #6
 80013f4:	f57f ae8e 	bpl.w	8001114 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013f8:	f7ff f93e 	bl	8000678 <HAL_GetTick>
 80013fc:	1b00      	subs	r0, r0, r4
 80013fe:	2802      	cmp	r0, #2
 8001400:	d9f6      	bls.n	80013f0 <HAL_RCC_OscConfig+0x310>
 8001402:	e6b4      	b.n	800116e <HAL_RCC_OscConfig+0x8e>
 8001404:	40023800 	.word	0x40023800

08001408 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001408:	4913      	ldr	r1, [pc, #76]	; (8001458 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800140a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800140c:	688b      	ldr	r3, [r1, #8]
 800140e:	f003 030c 	and.w	r3, r3, #12
 8001412:	2b04      	cmp	r3, #4
 8001414:	d003      	beq.n	800141e <HAL_RCC_GetSysClockFreq+0x16>
 8001416:	2b08      	cmp	r3, #8
 8001418:	d003      	beq.n	8001422 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800141a:	4810      	ldr	r0, [pc, #64]	; (800145c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800141c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800141e:	4810      	ldr	r0, [pc, #64]	; (8001460 <HAL_RCC_GetSysClockFreq+0x58>)
 8001420:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001422:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001424:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001426:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001428:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800142c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001430:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001434:	bf1a      	itte	ne
 8001436:	480a      	ldrne	r0, [pc, #40]	; (8001460 <HAL_RCC_GetSysClockFreq+0x58>)
 8001438:	2300      	movne	r3, #0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800143a:	4808      	ldreq	r0, [pc, #32]	; (800145c <HAL_RCC_GetSysClockFreq+0x54>)
 800143c:	fba1 0100 	umull	r0, r1, r1, r0
 8001440:	f7fe ff56 	bl	80002f0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <HAL_RCC_GetSysClockFreq+0x50>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800144c:	3301      	adds	r3, #1
 800144e:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001450:	fbb0 f0f3 	udiv	r0, r0, r3
 8001454:	bd08      	pop	{r3, pc}
 8001456:	bf00      	nop
 8001458:	40023800 	.word	0x40023800
 800145c:	00f42400 	.word	0x00f42400
 8001460:	007a1200 	.word	0x007a1200

08001464 <HAL_RCC_ClockConfig>:
{
 8001464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001468:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800146a:	4604      	mov	r4, r0
 800146c:	b910      	cbnz	r0, 8001474 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800146e:	2001      	movs	r0, #1
 8001470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001474:	4a46      	ldr	r2, [pc, #280]	; (8001590 <HAL_RCC_ClockConfig+0x12c>)
 8001476:	6813      	ldr	r3, [r2, #0]
 8001478:	f003 030f 	and.w	r3, r3, #15
 800147c:	428b      	cmp	r3, r1
 800147e:	d328      	bcc.n	80014d2 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001480:	6821      	ldr	r1, [r4, #0]
 8001482:	078f      	lsls	r7, r1, #30
 8001484:	d430      	bmi.n	80014e8 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001486:	07c8      	lsls	r0, r1, #31
 8001488:	d443      	bmi.n	8001512 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800148a:	4a41      	ldr	r2, [pc, #260]	; (8001590 <HAL_RCC_ClockConfig+0x12c>)
 800148c:	6813      	ldr	r3, [r2, #0]
 800148e:	f003 030f 	and.w	r3, r3, #15
 8001492:	429d      	cmp	r5, r3
 8001494:	d367      	bcc.n	8001566 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001496:	6822      	ldr	r2, [r4, #0]
 8001498:	0751      	lsls	r1, r2, #29
 800149a:	d470      	bmi.n	800157e <HAL_RCC_ClockConfig+0x11a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800149c:	0713      	lsls	r3, r2, #28
 800149e:	d507      	bpl.n	80014b0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014a0:	4a3c      	ldr	r2, [pc, #240]	; (8001594 <HAL_RCC_ClockConfig+0x130>)
 80014a2:	6921      	ldr	r1, [r4, #16]
 80014a4:	6893      	ldr	r3, [r2, #8]
 80014a6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80014aa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80014ae:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014b0:	f7ff ffaa 	bl	8001408 <HAL_RCC_GetSysClockFreq>
 80014b4:	4b37      	ldr	r3, [pc, #220]	; (8001594 <HAL_RCC_ClockConfig+0x130>)
 80014b6:	4a38      	ldr	r2, [pc, #224]	; (8001598 <HAL_RCC_ClockConfig+0x134>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80014be:	5cd3      	ldrb	r3, [r2, r3]
 80014c0:	40d8      	lsrs	r0, r3
 80014c2:	4b36      	ldr	r3, [pc, #216]	; (800159c <HAL_RCC_ClockConfig+0x138>)
 80014c4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80014c6:	2000      	movs	r0, #0
 80014c8:	f7ff f89a 	bl	8000600 <HAL_InitTick>
  return HAL_OK;
 80014cc:	2000      	movs	r0, #0
 80014ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014d2:	6813      	ldr	r3, [r2, #0]
 80014d4:	f023 030f 	bic.w	r3, r3, #15
 80014d8:	430b      	orrs	r3, r1
 80014da:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014dc:	6813      	ldr	r3, [r2, #0]
 80014de:	f003 030f 	and.w	r3, r3, #15
 80014e2:	4299      	cmp	r1, r3
 80014e4:	d1c3      	bne.n	800146e <HAL_RCC_ClockConfig+0xa>
 80014e6:	e7cb      	b.n	8001480 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e8:	f011 0f04 	tst.w	r1, #4
 80014ec:	4b29      	ldr	r3, [pc, #164]	; (8001594 <HAL_RCC_ClockConfig+0x130>)
 80014ee:	d003      	beq.n	80014f8 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80014f6:	609a      	str	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014f8:	070e      	lsls	r6, r1, #28
 80014fa:	d503      	bpl.n	8001504 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014fc:	689a      	ldr	r2, [r3, #8]
 80014fe:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001502:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	68a0      	ldr	r0, [r4, #8]
 8001508:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800150c:	4302      	orrs	r2, r0
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	e7b9      	b.n	8001486 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001512:	6861      	ldr	r1, [r4, #4]
 8001514:	4b1f      	ldr	r3, [pc, #124]	; (8001594 <HAL_RCC_ClockConfig+0x130>)
 8001516:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001518:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800151a:	d11c      	bne.n	8001556 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001520:	d0a5      	beq.n	800146e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001522:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001524:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001528:	4e1a      	ldr	r6, [pc, #104]	; (8001594 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800152a:	f022 0203 	bic.w	r2, r2, #3
 800152e:	430a      	orrs	r2, r1
 8001530:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001532:	f7ff f8a1 	bl	8000678 <HAL_GetTick>
 8001536:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001538:	68b3      	ldr	r3, [r6, #8]
 800153a:	6862      	ldr	r2, [r4, #4]
 800153c:	f003 030c 	and.w	r3, r3, #12
 8001540:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001544:	d0a1      	beq.n	800148a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001546:	f7ff f897 	bl	8000678 <HAL_GetTick>
 800154a:	1bc0      	subs	r0, r0, r7
 800154c:	4540      	cmp	r0, r8
 800154e:	d9f3      	bls.n	8001538 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8001550:	2003      	movs	r0, #3
}
 8001552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001556:	2902      	cmp	r1, #2
 8001558:	d102      	bne.n	8001560 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800155a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800155e:	e7df      	b.n	8001520 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001560:	f012 0f02 	tst.w	r2, #2
 8001564:	e7dc      	b.n	8001520 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001566:	6813      	ldr	r3, [r2, #0]
 8001568:	f023 030f 	bic.w	r3, r3, #15
 800156c:	432b      	orrs	r3, r5
 800156e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001570:	6813      	ldr	r3, [r2, #0]
 8001572:	f003 030f 	and.w	r3, r3, #15
 8001576:	429d      	cmp	r5, r3
 8001578:	f47f af79 	bne.w	800146e <HAL_RCC_ClockConfig+0xa>
 800157c:	e78b      	b.n	8001496 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800157e:	4905      	ldr	r1, [pc, #20]	; (8001594 <HAL_RCC_ClockConfig+0x130>)
 8001580:	68e0      	ldr	r0, [r4, #12]
 8001582:	688b      	ldr	r3, [r1, #8]
 8001584:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001588:	4303      	orrs	r3, r0
 800158a:	608b      	str	r3, [r1, #8]
 800158c:	e786      	b.n	800149c <HAL_RCC_ClockConfig+0x38>
 800158e:	bf00      	nop
 8001590:	40023c00 	.word	0x40023c00
 8001594:	40023800 	.word	0x40023800
 8001598:	08006af1 	.word	0x08006af1
 800159c:	20000008 	.word	0x20000008

080015a0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80015a0:	4b01      	ldr	r3, [pc, #4]	; (80015a8 <HAL_RCC_GetHCLKFreq+0x8>)
 80015a2:	6818      	ldr	r0, [r3, #0]
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	20000008 	.word	0x20000008

080015ac <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80015ac:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80015ae:	4a05      	ldr	r2, [pc, #20]	; (80015c4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80015b6:	5cd3      	ldrb	r3, [r2, r3]
 80015b8:	4a03      	ldr	r2, [pc, #12]	; (80015c8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80015ba:	6810      	ldr	r0, [r2, #0]
}
 80015bc:	40d8      	lsrs	r0, r3
 80015be:	4770      	bx	lr
 80015c0:	40023800 	.word	0x40023800
 80015c4:	08006b01 	.word	0x08006b01
 80015c8:	20000008 	.word	0x20000008

080015cc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80015cc:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80015ce:	4a05      	ldr	r2, [pc, #20]	; (80015e4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80015d6:	5cd3      	ldrb	r3, [r2, r3]
 80015d8:	4a03      	ldr	r2, [pc, #12]	; (80015e8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80015da:	6810      	ldr	r0, [r2, #0]
}
 80015dc:	40d8      	lsrs	r0, r3
 80015de:	4770      	bx	lr
 80015e0:	40023800 	.word	0x40023800
 80015e4:	08006b01 	.word	0x08006b01
 80015e8:	20000008 	.word	0x20000008

080015ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80015ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80015f0:	6802      	ldr	r2, [r0, #0]
{
 80015f2:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80015f4:	f012 0601 	ands.w	r6, r2, #1
 80015f8:	d00b      	beq.n	8001612 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80015fa:	4bba      	ldr	r3, [pc, #744]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80015fc:	6899      	ldr	r1, [r3, #8]
 80015fe:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8001602:	6099      	str	r1, [r3, #8]
 8001604:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8001606:	6899      	ldr	r1, [r3, #8]
 8001608:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800160a:	fab6 f686 	clz	r6, r6
 800160e:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001610:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001612:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 8001616:	d012      	beq.n	800163e <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001618:	49b2      	ldr	r1, [pc, #712]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800161a:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800161c:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001620:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001624:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 8001628:	bf08      	it	eq
 800162a:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800162c:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001630:	bf16      	itet	ne
 8001632:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8001636:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001638:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800163a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800163e:	02d7      	lsls	r7, r2, #11
 8001640:	d510      	bpl.n	8001664 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001642:	48a8      	ldr	r0, [pc, #672]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001644:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001646:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800164a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800164e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001652:	ea43 0301 	orr.w	r3, r3, r1
 8001656:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800165a:	f000 81a9 	beq.w	80019b0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800165e:	2900      	cmp	r1, #0
 8001660:	bf08      	it	eq
 8001662:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8001664:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8001668:	bf18      	it	ne
 800166a:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800166c:	0690      	lsls	r0, r2, #26
 800166e:	d531      	bpl.n	80016d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001670:	4b9c      	ldr	r3, [pc, #624]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001672:	4f9d      	ldr	r7, [pc, #628]	; (80018e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001674:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001676:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800167a:	641a      	str	r2, [r3, #64]	; 0x40
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001682:	9301      	str	r3, [sp, #4]
 8001684:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800168c:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800168e:	f7fe fff3 	bl	8000678 <HAL_GetTick>
 8001692:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	05d9      	lsls	r1, r3, #23
 8001698:	f140 818c 	bpl.w	80019b4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800169c:	4f91      	ldr	r7, [pc, #580]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800169e:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80016a0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80016a4:	f040 8191 	bne.w	80019ca <HAL_RCCEx_PeriphCLKConfig+0x3de>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80016a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80016aa:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80016ae:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80016b2:	4a8c      	ldr	r2, [pc, #560]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80016b4:	f040 81af 	bne.w	8001a16 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 80016b8:	6891      	ldr	r1, [r2, #8]
 80016ba:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80016be:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80016c2:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80016c6:	4301      	orrs	r1, r0
 80016c8:	6091      	str	r1, [r2, #8]
 80016ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ce:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80016d0:	430b      	orrs	r3, r1
 80016d2:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80016d4:	6823      	ldr	r3, [r4, #0]
 80016d6:	06df      	lsls	r7, r3, #27
 80016d8:	d50c      	bpl.n	80016f4 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80016da:	4a82      	ldr	r2, [pc, #520]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80016dc:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80016e0:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80016e4:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 80016e8:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80016ec:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80016ee:	4301      	orrs	r1, r0
 80016f0:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80016f4:	0458      	lsls	r0, r3, #17
 80016f6:	d508      	bpl.n	800170a <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80016f8:	497a      	ldr	r1, [pc, #488]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80016fa:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80016fc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001700:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001704:	4302      	orrs	r2, r0
 8001706:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800170a:	0419      	lsls	r1, r3, #16
 800170c:	d508      	bpl.n	8001720 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800170e:	4975      	ldr	r1, [pc, #468]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001710:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001712:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001716:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800171a:	4302      	orrs	r2, r0
 800171c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001720:	03da      	lsls	r2, r3, #15
 8001722:	d508      	bpl.n	8001736 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001724:	496f      	ldr	r1, [pc, #444]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001726:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001728:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800172c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001730:	4302      	orrs	r2, r0
 8001732:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001736:	039f      	lsls	r7, r3, #14
 8001738:	d508      	bpl.n	800174c <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800173a:	496a      	ldr	r1, [pc, #424]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800173c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800173e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001742:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001746:	4302      	orrs	r2, r0
 8001748:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800174c:	0658      	lsls	r0, r3, #25
 800174e:	d508      	bpl.n	8001762 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001750:	4964      	ldr	r1, [pc, #400]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001752:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001754:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001758:	f022 0203 	bic.w	r2, r2, #3
 800175c:	4302      	orrs	r2, r0
 800175e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001762:	0619      	lsls	r1, r3, #24
 8001764:	d508      	bpl.n	8001778 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001766:	495f      	ldr	r1, [pc, #380]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001768:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800176a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800176e:	f022 020c 	bic.w	r2, r2, #12
 8001772:	4302      	orrs	r2, r0
 8001774:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001778:	05da      	lsls	r2, r3, #23
 800177a:	d508      	bpl.n	800178e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800177c:	4959      	ldr	r1, [pc, #356]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800177e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001780:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001784:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001788:	4302      	orrs	r2, r0
 800178a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800178e:	059f      	lsls	r7, r3, #22
 8001790:	d508      	bpl.n	80017a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001792:	4954      	ldr	r1, [pc, #336]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001794:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001796:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800179a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800179e:	4302      	orrs	r2, r0
 80017a0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80017a4:	0558      	lsls	r0, r3, #21
 80017a6:	d508      	bpl.n	80017ba <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80017a8:	494e      	ldr	r1, [pc, #312]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80017aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80017ac:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80017b0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80017b4:	4302      	orrs	r2, r0
 80017b6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80017ba:	0519      	lsls	r1, r3, #20
 80017bc:	d508      	bpl.n	80017d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80017be:	4949      	ldr	r1, [pc, #292]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80017c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80017c2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80017c6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80017ca:	4302      	orrs	r2, r0
 80017cc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80017d0:	04da      	lsls	r2, r3, #19
 80017d2:	d508      	bpl.n	80017e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80017d4:	4943      	ldr	r1, [pc, #268]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80017d6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80017d8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80017dc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80017e0:	4302      	orrs	r2, r0
 80017e2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80017e6:	049f      	lsls	r7, r3, #18
 80017e8:	d508      	bpl.n	80017fc <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80017ea:	493e      	ldr	r1, [pc, #248]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80017ec:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80017ee:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80017f2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80017f6:	4302      	orrs	r2, r0
 80017f8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80017fc:	0258      	lsls	r0, r3, #9
 80017fe:	d508      	bpl.n	8001812 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001800:	4938      	ldr	r1, [pc, #224]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001802:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8001804:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001808:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800180c:	4302      	orrs	r2, r0
 800180e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001812:	0299      	lsls	r1, r3, #10
 8001814:	d50c      	bpl.n	8001830 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001816:	4833      	ldr	r0, [pc, #204]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001818:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800181a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800181e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001822:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8001826:	bf08      	it	eq
 8001828:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800182a:	430a      	orrs	r2, r1
 800182c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8001830:	f013 0f08 	tst.w	r3, #8
 8001834:	bf18      	it	ne
 8001836:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001838:	035a      	lsls	r2, r3, #13
 800183a:	d508      	bpl.n	800184e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800183c:	4929      	ldr	r1, [pc, #164]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800183e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8001840:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001844:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001848:	4302      	orrs	r2, r0
 800184a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800184e:	021f      	lsls	r7, r3, #8
 8001850:	d509      	bpl.n	8001866 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001852:	4924      	ldr	r1, [pc, #144]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001854:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8001858:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800185c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001860:	4302      	orrs	r2, r0
 8001862:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001866:	0158      	lsls	r0, r3, #5
 8001868:	d509      	bpl.n	800187e <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800186a:	491e      	ldr	r1, [pc, #120]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800186c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8001870:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001874:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001878:	4302      	orrs	r2, r0
 800187a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800187e:	0119      	lsls	r1, r3, #4
 8001880:	d509      	bpl.n	8001896 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001882:	4918      	ldr	r1, [pc, #96]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001884:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8001888:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800188c:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8001890:	4302      	orrs	r2, r0
 8001892:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001896:	00da      	lsls	r2, r3, #3
 8001898:	d509      	bpl.n	80018ae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800189a:	4912      	ldr	r1, [pc, #72]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800189c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80018a0:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 80018a4:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80018a8:	4302      	orrs	r2, r0
 80018aa:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80018ae:	2e01      	cmp	r6, #1
 80018b0:	f000 80b5 	beq.w	8001a1e <HAL_RCCEx_PeriphCLKConfig+0x432>
 80018b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80018b8:	f000 80b1 	beq.w	8001a1e <HAL_RCCEx_PeriphCLKConfig+0x432>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80018bc:	2d01      	cmp	r5, #1
 80018be:	d175      	bne.n	80019ac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80018c0:	4d08      	ldr	r5, [pc, #32]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80018c2:	682b      	ldr	r3, [r5, #0]
 80018c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018c8:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018ca:	f7fe fed5 	bl	8000678 <HAL_GetTick>
 80018ce:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80018d0:	682b      	ldr	r3, [r5, #0]
 80018d2:	009f      	lsls	r7, r3, #2
 80018d4:	f100 8127 	bmi.w	8001b26 <HAL_RCCEx_PeriphCLKConfig+0x53a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80018d8:	6821      	ldr	r1, [r4, #0]
 80018da:	030e      	lsls	r6, r1, #12
 80018dc:	d506      	bpl.n	80018ec <HAL_RCCEx_PeriphCLKConfig+0x300>
 80018de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80018e0:	b143      	cbz	r3, 80018f4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80018e2:	e003      	b.n	80018ec <HAL_RCCEx_PeriphCLKConfig+0x300>
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40007000 	.word	0x40007000
 80018ec:	02cd      	lsls	r5, r1, #11
 80018ee:	d51d      	bpl.n	800192c <HAL_RCCEx_PeriphCLKConfig+0x340>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80018f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018f2:	b9db      	cbnz	r3, 800192c <HAL_RCCEx_PeriphCLKConfig+0x340>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80018f4:	4a93      	ldr	r2, [pc, #588]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80018f6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80018fa:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80018fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001902:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001906:	4303      	orrs	r3, r0
 8001908:	6960      	ldr	r0, [r4, #20]
 800190a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800190e:	69a0      	ldr	r0, [r4, #24]
 8001910:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001914:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001918:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800191c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800191e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001922:	3801      	subs	r0, #1
 8001924:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001928:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800192c:	0288      	lsls	r0, r1, #10
 800192e:	d515      	bpl.n	800195c <HAL_RCCEx_PeriphCLKConfig+0x370>
 8001930:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001932:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001936:	d111      	bne.n	800195c <HAL_RCCEx_PeriphCLKConfig+0x370>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001938:	4a82      	ldr	r2, [pc, #520]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800193a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800193e:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001942:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001946:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800194a:	4303      	orrs	r3, r0
 800194c:	6960      	ldr	r0, [r4, #20]
 800194e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001952:	6a20      	ldr	r0, [r4, #32]
 8001954:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001958:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800195c:	070a      	lsls	r2, r1, #28
 800195e:	d519      	bpl.n	8001994 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001960:	4978      	ldr	r1, [pc, #480]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001962:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001966:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800196a:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800196e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001972:	4313      	orrs	r3, r2
 8001974:	6962      	ldr	r2, [r4, #20]
 8001976:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800197a:	69e2      	ldr	r2, [r4, #28]
 800197c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001980:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001984:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8001988:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800198a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800198e:	4313      	orrs	r3, r2
 8001990:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001994:	4c6b      	ldr	r4, [pc, #428]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001996:	6823      	ldr	r3, [r4, #0]
 8001998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800199c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800199e:	f7fe fe6b 	bl	8000678 <HAL_GetTick>
 80019a2:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80019a4:	6823      	ldr	r3, [r4, #0]
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	f140 80c4 	bpl.w	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x548>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80019ac:	2000      	movs	r0, #0
 80019ae:	e009      	b.n	80019c4 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      plli2sused = 1;
 80019b0:	2601      	movs	r6, #1
 80019b2:	e657      	b.n	8001664 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019b4:	f7fe fe60 	bl	8000678 <HAL_GetTick>
 80019b8:	eba0 0008 	sub.w	r0, r0, r8
 80019bc:	2864      	cmp	r0, #100	; 0x64
 80019be:	f67f ae69 	bls.w	8001694 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 80019c2:	2003      	movs	r0, #3
}
 80019c4:	b003      	add	sp, #12
 80019c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80019ca:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80019cc:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80019d0:	4293      	cmp	r3, r2
 80019d2:	f43f ae69 	beq.w	80016a8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80019d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80019d8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80019da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80019de:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80019e2:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80019e4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80019e6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80019ea:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 80019ec:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80019ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019f0:	07da      	lsls	r2, r3, #31
 80019f2:	f57f ae59 	bpl.w	80016a8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 80019f6:	f7fe fe3f 	bl	8000678 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019fa:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80019fe:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a02:	079b      	lsls	r3, r3, #30
 8001a04:	f53f ae50 	bmi.w	80016a8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a08:	f7fe fe36 	bl	8000678 <HAL_GetTick>
 8001a0c:	eba0 0008 	sub.w	r0, r0, r8
 8001a10:	4548      	cmp	r0, r9
 8001a12:	d9f5      	bls.n	8001a00 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8001a14:	e7d5      	b.n	80019c2 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a16:	6891      	ldr	r1, [r2, #8]
 8001a18:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001a1c:	e654      	b.n	80016c8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8001a1e:	4e49      	ldr	r6, [pc, #292]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001a20:	6833      	ldr	r3, [r6, #0]
 8001a22:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001a26:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001a28:	f7fe fe26 	bl	8000678 <HAL_GetTick>
 8001a2c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001a2e:	6833      	ldr	r3, [r6, #0]
 8001a30:	011b      	lsls	r3, r3, #4
 8001a32:	d472      	bmi.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001a34:	6822      	ldr	r2, [r4, #0]
 8001a36:	07d7      	lsls	r7, r2, #31
 8001a38:	d512      	bpl.n	8001a60 <HAL_RCCEx_PeriphCLKConfig+0x474>
 8001a3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001a3c:	b983      	cbnz	r3, 8001a60 <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001a3e:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001a42:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001a46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a4a:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001a4e:	430b      	orrs	r3, r1
 8001a50:	6861      	ldr	r1, [r4, #4]
 8001a52:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001a56:	68a1      	ldr	r1, [r4, #8]
 8001a58:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001a5c:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001a60:	0316      	lsls	r6, r2, #12
 8001a62:	d503      	bpl.n	8001a6c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8001a64:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a6a:	d005      	beq.n	8001a78 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8001a6c:	02d0      	lsls	r0, r2, #11
 8001a6e:	d51e      	bpl.n	8001aae <HAL_RCCEx_PeriphCLKConfig+0x4c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001a70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a76:	d11a      	bne.n	8001aae <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001a78:	4932      	ldr	r1, [pc, #200]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001a7a:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001a7e:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001a82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a86:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001a8a:	4303      	orrs	r3, r0
 8001a8c:	6860      	ldr	r0, [r4, #4]
 8001a8e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001a92:	68e0      	ldr	r0, [r4, #12]
 8001a94:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001a98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001a9c:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8001aa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001aa2:	f020 001f 	bic.w	r0, r0, #31
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	4303      	orrs	r3, r0
 8001aaa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001aae:	01d1      	lsls	r1, r2, #7
 8001ab0:	d511      	bpl.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001ab2:	4924      	ldr	r1, [pc, #144]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001ab4:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001ab8:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001abc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001ac0:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001ac4:	4303      	orrs	r3, r0
 8001ac6:	6860      	ldr	r0, [r4, #4]
 8001ac8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001acc:	6920      	ldr	r0, [r4, #16]
 8001ace:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001ad2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001ad6:	0192      	lsls	r2, r2, #6
 8001ad8:	d50d      	bpl.n	8001af6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001ada:	6923      	ldr	r3, [r4, #16]
 8001adc:	6862      	ldr	r2, [r4, #4]
 8001ade:	041b      	lsls	r3, r3, #16
 8001ae0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001ae4:	68e2      	ldr	r2, [r4, #12]
 8001ae6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001aea:	68a2      	ldr	r2, [r4, #8]
 8001aec:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001af0:	4a14      	ldr	r2, [pc, #80]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001af2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001af6:	4e13      	ldr	r6, [pc, #76]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001af8:	6833      	ldr	r3, [r6, #0]
 8001afa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001afe:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001b00:	f7fe fdba 	bl	8000678 <HAL_GetTick>
 8001b04:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001b06:	6833      	ldr	r3, [r6, #0]
 8001b08:	011b      	lsls	r3, r3, #4
 8001b0a:	f53f aed7 	bmi.w	80018bc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001b0e:	f7fe fdb3 	bl	8000678 <HAL_GetTick>
 8001b12:	1bc0      	subs	r0, r0, r7
 8001b14:	2864      	cmp	r0, #100	; 0x64
 8001b16:	d9f6      	bls.n	8001b06 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8001b18:	e753      	b.n	80019c2 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001b1a:	f7fe fdad 	bl	8000678 <HAL_GetTick>
 8001b1e:	1bc0      	subs	r0, r0, r7
 8001b20:	2864      	cmp	r0, #100	; 0x64
 8001b22:	d984      	bls.n	8001a2e <HAL_RCCEx_PeriphCLKConfig+0x442>
 8001b24:	e74d      	b.n	80019c2 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001b26:	f7fe fda7 	bl	8000678 <HAL_GetTick>
 8001b2a:	1b80      	subs	r0, r0, r6
 8001b2c:	2864      	cmp	r0, #100	; 0x64
 8001b2e:	f67f aecf 	bls.w	80018d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8001b32:	e746      	b.n	80019c2 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001b34:	f7fe fda0 	bl	8000678 <HAL_GetTick>
 8001b38:	1b40      	subs	r0, r0, r5
 8001b3a:	2864      	cmp	r0, #100	; 0x64
 8001b3c:	f67f af32 	bls.w	80019a4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8001b40:	e73f      	b.n	80019c2 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
 8001b42:	bf00      	nop
 8001b44:	40023800 	.word	0x40023800

08001b48 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8001b48:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0; 
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001b4a:	6803      	ldr	r3, [r0, #0]
{
 8001b4c:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001b4e:	68da      	ldr	r2, [r3, #12]
 8001b50:	0652      	lsls	r2, r2, #25
 8001b52:	d501      	bpl.n	8001b58 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8001b54:	2000      	movs	r0, #0
 8001b56:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001b58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b5c:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001b5e:	f7fe fd8b 	bl	8000678 <HAL_GetTick>
 8001b62:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001b64:	6823      	ldr	r3, [r4, #0]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	065b      	lsls	r3, r3, #25
 8001b6a:	d4f3      	bmi.n	8001b54 <RTC_EnterInitMode+0xc>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001b6c:	f7fe fd84 	bl	8000678 <HAL_GetTick>
 8001b70:	1b40      	subs	r0, r0, r5
 8001b72:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001b76:	d9f5      	bls.n	8001b64 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8001b78:	2003      	movs	r0, #3
}
 8001b7a:	bd38      	pop	{r3, r4, r5, pc}

08001b7c <HAL_RTC_Init>:
{
 8001b7c:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8001b7e:	4604      	mov	r4, r0
 8001b80:	b1b0      	cbz	r0, 8001bb0 <HAL_RTC_Init+0x34>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001b82:	7f43      	ldrb	r3, [r0, #29]
 8001b84:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001b88:	b913      	cbnz	r3, 8001b90 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8001b8a:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8001b8c:	f001 fb3e 	bl	800320c <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001b90:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001b92:	22ca      	movs	r2, #202	; 0xca
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001b94:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001b96:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001b98:	6823      	ldr	r3, [r4, #0]
 8001b9a:	625a      	str	r2, [r3, #36]	; 0x24
 8001b9c:	2253      	movs	r2, #83	; 0x53
 8001b9e:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001ba0:	f7ff ffd2 	bl	8001b48 <RTC_EnterInitMode>
 8001ba4:	6823      	ldr	r3, [r4, #0]
 8001ba6:	b128      	cbz	r0, 8001bb4 <HAL_RTC_Init+0x38>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001ba8:	22ff      	movs	r2, #255	; 0xff
 8001baa:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001bac:	2304      	movs	r3, #4
 8001bae:	7763      	strb	r3, [r4, #29]
     return HAL_ERROR;
 8001bb0:	2001      	movs	r0, #1
}
 8001bb2:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001bb4:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001bb6:	6925      	ldr	r5, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001bb8:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8001bbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bc0:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001bc2:	6862      	ldr	r2, [r4, #4]
 8001bc4:	6899      	ldr	r1, [r3, #8]
 8001bc6:	432a      	orrs	r2, r5
 8001bc8:	6965      	ldr	r5, [r4, #20]
 8001bca:	432a      	orrs	r2, r5
 8001bcc:	430a      	orrs	r2, r1
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8001bce:	68a1      	ldr	r1, [r4, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001bd0:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001bd2:	68e2      	ldr	r2, [r4, #12]
 8001bd4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8001bd6:	691a      	ldr	r2, [r3, #16]
 8001bd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType); 
 8001bdc:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8001bde:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8001be0:	68da      	ldr	r2, [r3, #12]
 8001be2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001be6:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8001be8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bea:	f022 0208 	bic.w	r2, r2, #8
 8001bee:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType); 
 8001bf0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001bf6:	22ff      	movs	r2, #255	; 0xff
 8001bf8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 8001bfe:	bd38      	pop	{r3, r4, r5, pc}

08001c00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c00:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c02:	4604      	mov	r4, r0
 8001c04:	2800      	cmp	r0, #0
 8001c06:	d04e      	beq.n	8001ca6 <HAL_SPI_Init+0xa6>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c0c:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8001c10:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c14:	b91b      	cbnz	r3, 8001c1e <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c16:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c1a:	f001 fb59 	bl	80032d0 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c1e:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c20:	6821      	ldr	r1, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c22:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001c24:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8001c28:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c2a:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8001c2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c32:	600b      	str	r3, [r1, #0]
 8001c34:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c38:	d932      	bls.n	8001ca0 <HAL_SPI_Init+0xa0>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001c3a:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001c3c:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c40:	bf18      	it	ne
 8001c42:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001c44:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c46:	b92b      	cbnz	r3, 8001c54 <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c48:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001c4c:	bf8c      	ite	hi
 8001c4e:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001c50:	2301      	movls	r3, #1
 8001c52:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001c54:	68a6      	ldr	r6, [r4, #8]
 8001c56:	6863      	ldr	r3, [r4, #4]
 8001c58:	69a5      	ldr	r5, [r4, #24]
 8001c5a:	4333      	orrs	r3, r6
 8001c5c:	6926      	ldr	r6, [r4, #16]
 8001c5e:	4333      	orrs	r3, r6
 8001c60:	6966      	ldr	r6, [r4, #20]
 8001c62:	4333      	orrs	r3, r6
 8001c64:	69e6      	ldr	r6, [r4, #28]
 8001c66:	4333      	orrs	r3, r6
 8001c68:	6a26      	ldr	r6, [r4, #32]
 8001c6a:	4333      	orrs	r3, r6
 8001c6c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001c6e:	4333      	orrs	r3, r6
 8001c70:	f405 7600 	and.w	r6, r5, #512	; 0x200
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001c74:	0c2d      	lsrs	r5, r5, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001c76:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001c78:	f005 0504 	and.w	r5, r5, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001c7c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001c7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c80:	431a      	orrs	r2, r3
 8001c82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001c84:	431a      	orrs	r2, r3
 8001c86:	432a      	orrs	r2, r5
 8001c88:	4302      	orrs	r2, r0
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c8a:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001c8c:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c8e:	69cb      	ldr	r3, [r1, #28]
 8001c90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001c94:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8001c96:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c98:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001c9a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 8001c9e:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001ca0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001ca4:	e7cc      	b.n	8001c40 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8001ca6:	2001      	movs	r0, #1
}
 8001ca8:	bd70      	pop	{r4, r5, r6, pc}

08001caa <TIM_TI1_ConfigInputStage>:
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001caa:	6a03      	ldr	r3, [r0, #32]
{
 8001cac:	b510      	push	{r4, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cae:	6a04      	ldr	r4, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001cb0:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cb4:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 8001cb8:	430b      	orrs	r3, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cba:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001cbc:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001cbe:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8001cc2:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001cc6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001cc8:	6203      	str	r3, [r0, #32]
 8001cca:	bd10      	pop	{r4, pc}

08001ccc <TIM_TI2_ConfigInputStage>:
{
uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ccc:	6a03      	ldr	r3, [r0, #32]
 8001cce:	f023 0310 	bic.w	r3, r3, #16
{
 8001cd2:	b510      	push	{r4, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001cd4:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001cd6:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001cd8:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001cda:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001cde:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12);
 8001ce2:	ea44 3202 	orr.w	r2, r4, r2, lsl #12
  tmpccer |= (TIM_ICPolarity << 4);
 8001ce6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001cea:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001cec:	6203      	str	r3, [r0, #32]
 8001cee:	bd10      	pop	{r4, pc}

08001cf0 <HAL_TIM_PeriodElapsedCallback>:
 8001cf0:	4770      	bx	lr

08001cf2 <HAL_TIM_OC_DelayElapsedCallback>:
 8001cf2:	4770      	bx	lr

08001cf4 <HAL_TIM_IC_CaptureCallback>:
 8001cf4:	4770      	bx	lr

08001cf6 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_TIM_TriggerCallback>:
 8001cf8:	4770      	bx	lr

08001cfa <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cfa:	6803      	ldr	r3, [r0, #0]
 8001cfc:	691a      	ldr	r2, [r3, #16]
 8001cfe:	0791      	lsls	r1, r2, #30
{
 8001d00:	b510      	push	{r4, lr}
 8001d02:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d04:	d50f      	bpl.n	8001d26 <HAL_TIM_IRQHandler+0x2c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001d06:	68da      	ldr	r2, [r3, #12]
 8001d08:	0792      	lsls	r2, r2, #30
 8001d0a:	d50c      	bpl.n	8001d26 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d0c:	f06f 0202 	mvn.w	r2, #2
 8001d10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d12:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8001d14:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d16:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8001d18:	0799      	lsls	r1, r3, #30
 8001d1a:	f000 8085 	beq.w	8001e28 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8001d1e:	f7ff ffe9 	bl	8001cf4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d22:	2300      	movs	r3, #0
 8001d24:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d26:	6823      	ldr	r3, [r4, #0]
 8001d28:	691a      	ldr	r2, [r3, #16]
 8001d2a:	0752      	lsls	r2, r2, #29
 8001d2c:	d510      	bpl.n	8001d50 <HAL_TIM_IRQHandler+0x56>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001d2e:	68da      	ldr	r2, [r3, #12]
 8001d30:	0750      	lsls	r0, r2, #29
 8001d32:	d50d      	bpl.n	8001d50 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d34:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8001d38:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d3c:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8001d3e:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d40:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8001d42:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001d46:	d075      	beq.n	8001e34 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001d48:	f7ff ffd4 	bl	8001cf4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d50:	6823      	ldr	r3, [r4, #0]
 8001d52:	691a      	ldr	r2, [r3, #16]
 8001d54:	0711      	lsls	r1, r2, #28
 8001d56:	d50f      	bpl.n	8001d78 <HAL_TIM_IRQHandler+0x7e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001d58:	68da      	ldr	r2, [r3, #12]
 8001d5a:	0712      	lsls	r2, r2, #28
 8001d5c:	d50c      	bpl.n	8001d78 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d5e:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8001d62:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d66:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8001d68:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d6a:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8001d6c:	079b      	lsls	r3, r3, #30
 8001d6e:	d067      	beq.n	8001e40 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8001d70:	f7ff ffc0 	bl	8001cf4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d74:	2300      	movs	r3, #0
 8001d76:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d78:	6823      	ldr	r3, [r4, #0]
 8001d7a:	691a      	ldr	r2, [r3, #16]
 8001d7c:	06d0      	lsls	r0, r2, #27
 8001d7e:	d510      	bpl.n	8001da2 <HAL_TIM_IRQHandler+0xa8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001d80:	68da      	ldr	r2, [r3, #12]
 8001d82:	06d1      	lsls	r1, r2, #27
 8001d84:	d50d      	bpl.n	8001da2 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d86:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 8001d8a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d8e:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8001d90:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d92:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8001d94:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001d98:	d058      	beq.n	8001e4c <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8001d9a:	f7ff ffab 	bl	8001cf4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001da2:	6823      	ldr	r3, [r4, #0]
 8001da4:	691a      	ldr	r2, [r3, #16]
 8001da6:	07d2      	lsls	r2, r2, #31
 8001da8:	d508      	bpl.n	8001dbc <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001daa:	68da      	ldr	r2, [r3, #12]
 8001dac:	07d0      	lsls	r0, r2, #31
 8001dae:	d505      	bpl.n	8001dbc <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001db0:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8001db4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001db6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001db8:	f7ff ff9a 	bl	8001cf0 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001dbc:	6823      	ldr	r3, [r4, #0]
 8001dbe:	691a      	ldr	r2, [r3, #16]
 8001dc0:	0611      	lsls	r1, r2, #24
 8001dc2:	d508      	bpl.n	8001dd6 <HAL_TIM_IRQHandler+0xdc>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001dc4:	68da      	ldr	r2, [r3, #12]
 8001dc6:	0612      	lsls	r2, r2, #24
 8001dc8:	d505      	bpl.n	8001dd6 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001dca:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001dce:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001dd0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001dd2:	f000 f984 	bl	80020de <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001dd6:	6823      	ldr	r3, [r4, #0]
 8001dd8:	691a      	ldr	r2, [r3, #16]
 8001dda:	05d0      	lsls	r0, r2, #23
 8001ddc:	d508      	bpl.n	8001df0 <HAL_TIM_IRQHandler+0xf6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001dde:	68da      	ldr	r2, [r3, #12]
 8001de0:	0611      	lsls	r1, r2, #24
 8001de2:	d505      	bpl.n	8001df0 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001de4:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001de8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001dea:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001dec:	f000 f977 	bl	80020de <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001df0:	6823      	ldr	r3, [r4, #0]
 8001df2:	691a      	ldr	r2, [r3, #16]
 8001df4:	0652      	lsls	r2, r2, #25
 8001df6:	d508      	bpl.n	8001e0a <HAL_TIM_IRQHandler+0x110>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001df8:	68da      	ldr	r2, [r3, #12]
 8001dfa:	0650      	lsls	r0, r2, #25
 8001dfc:	d505      	bpl.n	8001e0a <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001dfe:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8001e02:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e04:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001e06:	f7ff ff77 	bl	8001cf8 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e0a:	6823      	ldr	r3, [r4, #0]
 8001e0c:	691a      	ldr	r2, [r3, #16]
 8001e0e:	0691      	lsls	r1, r2, #26
 8001e10:	d522      	bpl.n	8001e58 <HAL_TIM_IRQHandler+0x15e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	0692      	lsls	r2, r2, #26
 8001e16:	d51f      	bpl.n	8001e58 <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e18:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001e1c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e1e:	611a      	str	r2, [r3, #16]
}
 8001e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8001e24:	f000 b95a 	b.w	80020dc <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e28:	f7ff ff63 	bl	8001cf2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e2c:	4620      	mov	r0, r4
 8001e2e:	f7ff ff62 	bl	8001cf6 <HAL_TIM_PWM_PulseFinishedCallback>
 8001e32:	e776      	b.n	8001d22 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e34:	f7ff ff5d 	bl	8001cf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e38:	4620      	mov	r0, r4
 8001e3a:	f7ff ff5c 	bl	8001cf6 <HAL_TIM_PWM_PulseFinishedCallback>
 8001e3e:	e785      	b.n	8001d4c <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e40:	f7ff ff57 	bl	8001cf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e44:	4620      	mov	r0, r4
 8001e46:	f7ff ff56 	bl	8001cf6 <HAL_TIM_PWM_PulseFinishedCallback>
 8001e4a:	e793      	b.n	8001d74 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e4c:	f7ff ff51 	bl	8001cf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e50:	4620      	mov	r0, r4
 8001e52:	f7ff ff50 	bl	8001cf6 <HAL_TIM_PWM_PulseFinishedCallback>
 8001e56:	e7a2      	b.n	8001d9e <HAL_TIM_IRQHandler+0xa4>
 8001e58:	bd10      	pop	{r4, pc}
	...

08001e5c <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001e5c:	4a30      	ldr	r2, [pc, #192]	; (8001f20 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8001e5e:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001e60:	4290      	cmp	r0, r2
 8001e62:	d012      	beq.n	8001e8a <TIM_Base_SetConfig+0x2e>
 8001e64:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001e68:	d00f      	beq.n	8001e8a <TIM_Base_SetConfig+0x2e>
 8001e6a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001e6e:	4290      	cmp	r0, r2
 8001e70:	d00b      	beq.n	8001e8a <TIM_Base_SetConfig+0x2e>
 8001e72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e76:	4290      	cmp	r0, r2
 8001e78:	d007      	beq.n	8001e8a <TIM_Base_SetConfig+0x2e>
 8001e7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e7e:	4290      	cmp	r0, r2
 8001e80:	d003      	beq.n	8001e8a <TIM_Base_SetConfig+0x2e>
 8001e82:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001e86:	4290      	cmp	r0, r2
 8001e88:	d11d      	bne.n	8001ec6 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8001e8a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001e90:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001e92:	4a23      	ldr	r2, [pc, #140]	; (8001f20 <TIM_Base_SetConfig+0xc4>)
 8001e94:	4290      	cmp	r0, r2
 8001e96:	d104      	bne.n	8001ea2 <TIM_Base_SetConfig+0x46>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e9c:	68ca      	ldr	r2, [r1, #12]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	e028      	b.n	8001ef4 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001ea2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001ea6:	d0f7      	beq.n	8001e98 <TIM_Base_SetConfig+0x3c>
 8001ea8:	4a1e      	ldr	r2, [pc, #120]	; (8001f24 <TIM_Base_SetConfig+0xc8>)
 8001eaa:	4290      	cmp	r0, r2
 8001eac:	d0f4      	beq.n	8001e98 <TIM_Base_SetConfig+0x3c>
 8001eae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001eb2:	4290      	cmp	r0, r2
 8001eb4:	d0f0      	beq.n	8001e98 <TIM_Base_SetConfig+0x3c>
 8001eb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001eba:	4290      	cmp	r0, r2
 8001ebc:	d0ec      	beq.n	8001e98 <TIM_Base_SetConfig+0x3c>
 8001ebe:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001ec2:	4290      	cmp	r0, r2
 8001ec4:	d0e8      	beq.n	8001e98 <TIM_Base_SetConfig+0x3c>
 8001ec6:	4a18      	ldr	r2, [pc, #96]	; (8001f28 <TIM_Base_SetConfig+0xcc>)
 8001ec8:	4290      	cmp	r0, r2
 8001eca:	d0e5      	beq.n	8001e98 <TIM_Base_SetConfig+0x3c>
 8001ecc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ed0:	4290      	cmp	r0, r2
 8001ed2:	d0e1      	beq.n	8001e98 <TIM_Base_SetConfig+0x3c>
 8001ed4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ed8:	4290      	cmp	r0, r2
 8001eda:	d0dd      	beq.n	8001e98 <TIM_Base_SetConfig+0x3c>
 8001edc:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001ee0:	4290      	cmp	r0, r2
 8001ee2:	d0d9      	beq.n	8001e98 <TIM_Base_SetConfig+0x3c>
 8001ee4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ee8:	4290      	cmp	r0, r2
 8001eea:	d0d5      	beq.n	8001e98 <TIM_Base_SetConfig+0x3c>
 8001eec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ef0:	4290      	cmp	r0, r2
 8001ef2:	d0d1      	beq.n	8001e98 <TIM_Base_SetConfig+0x3c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ef4:	694a      	ldr	r2, [r1, #20]
 8001ef6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001efa:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001efc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001efe:	688b      	ldr	r3, [r1, #8]
 8001f00:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001f02:	680b      	ldr	r3, [r1, #0]
 8001f04:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <TIM_Base_SetConfig+0xc4>)
 8001f08:	4298      	cmp	r0, r3
 8001f0a:	d006      	beq.n	8001f1a <TIM_Base_SetConfig+0xbe>
 8001f0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f10:	4298      	cmp	r0, r3
 8001f12:	d002      	beq.n	8001f1a <TIM_Base_SetConfig+0xbe>
  TIMx->EGR = TIM_EGR_UG;
 8001f14:	2301      	movs	r3, #1
 8001f16:	6143      	str	r3, [r0, #20]
}
 8001f18:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001f1a:	690b      	ldr	r3, [r1, #16]
 8001f1c:	6303      	str	r3, [r0, #48]	; 0x30
 8001f1e:	e7f9      	b.n	8001f14 <TIM_Base_SetConfig+0xb8>
 8001f20:	40010000 	.word	0x40010000
 8001f24:	40000400 	.word	0x40000400
 8001f28:	40014000 	.word	0x40014000

08001f2c <HAL_TIM_Base_Init>:
{ 
 8001f2c:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001f2e:	4604      	mov	r4, r0
 8001f30:	b1a0      	cbz	r0, 8001f5c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001f32:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001f36:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001f3a:	b91b      	cbnz	r3, 8001f44 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001f3c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001f40:	f001 fc00 	bl	8003744 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001f44:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001f46:	6820      	ldr	r0, [r4, #0]
 8001f48:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;
 8001f4a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001f4e:	f7ff ff85 	bl	8001e5c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001f52:	2301      	movs	r3, #1
  return HAL_OK;
 8001f54:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001f56:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001f5a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001f5c:	2001      	movs	r0, #1
}
 8001f5e:	bd10      	pop	{r4, pc}

08001f60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001f60:	b510      	push	{r4, lr}

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001f62:	430a      	orrs	r2, r1
  tmpsmcr = TIMx->SMCR;
 8001f64:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001f66:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f6a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001f6e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f70:	6083      	str	r3, [r0, #8]
 8001f72:	bd10      	pop	{r4, pc}

08001f74 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001f74:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001f78:	2b01      	cmp	r3, #1
{
 8001f7a:	b510      	push	{r4, lr}
 8001f7c:	4604      	mov	r4, r0
 8001f7e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001f82:	d018      	beq.n	8001fb6 <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 8001f84:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8001f88:	2301      	movs	r3, #1
  tmpsmcr = htim->Instance->SMCR;
 8001f8a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8001f8c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001f90:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f92:	4b3e      	ldr	r3, [pc, #248]	; (800208c <HAL_TIM_ConfigClockSource+0x118>)
 8001f94:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8001f96:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001f98:	680b      	ldr	r3, [r1, #0]
 8001f9a:	2b40      	cmp	r3, #64	; 0x40
 8001f9c:	d059      	beq.n	8002052 <HAL_TIM_ConfigClockSource+0xde>
 8001f9e:	d815      	bhi.n	8001fcc <HAL_TIM_ConfigClockSource+0x58>
 8001fa0:	2b10      	cmp	r3, #16
 8001fa2:	d067      	beq.n	8002074 <HAL_TIM_ConfigClockSource+0x100>
 8001fa4:	d808      	bhi.n	8001fb8 <HAL_TIM_ConfigClockSource+0x44>
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d05e      	beq.n	8002068 <HAL_TIM_ConfigClockSource+0xf4>
  htim->State = HAL_TIM_STATE_READY;
 8001faa:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001fac:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001fae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001fb2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001fb6:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8001fb8:	2b20      	cmp	r3, #32
 8001fba:	d061      	beq.n	8002080 <HAL_TIM_ConfigClockSource+0x10c>
 8001fbc:	2b30      	cmp	r3, #48	; 0x30
 8001fbe:	d1f4      	bne.n	8001faa <HAL_TIM_ConfigClockSource+0x36>
   tmpsmcr = TIMx->SMCR;
 8001fc0:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001fc6:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8001fca:	e026      	b.n	800201a <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8001fcc:	2b70      	cmp	r3, #112	; 0x70
 8001fce:	d026      	beq.n	800201e <HAL_TIM_ConfigClockSource+0xaa>
 8001fd0:	d80e      	bhi.n	8001ff0 <HAL_TIM_ConfigClockSource+0x7c>
 8001fd2:	2b50      	cmp	r3, #80	; 0x50
 8001fd4:	d032      	beq.n	800203c <HAL_TIM_ConfigClockSource+0xc8>
 8001fd6:	2b60      	cmp	r3, #96	; 0x60
 8001fd8:	d1e7      	bne.n	8001faa <HAL_TIM_ConfigClockSource+0x36>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8001fda:	68ca      	ldr	r2, [r1, #12]
 8001fdc:	6849      	ldr	r1, [r1, #4]
 8001fde:	f7ff fe75 	bl	8001ccc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001fe2:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 8001fe4:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001fea:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8001fee:	e023      	b.n	8002038 <HAL_TIM_ConfigClockSource+0xc4>
  switch (sClockSourceConfig->ClockSource)
 8001ff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ff4:	d00c      	beq.n	8002010 <HAL_TIM_ConfigClockSource+0x9c>
 8001ff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ffa:	d1d6      	bne.n	8001faa <HAL_TIM_ConfigClockSource+0x36>
      TIM_ETR_SetConfig(htim->Instance, 
 8001ffc:	68cb      	ldr	r3, [r1, #12]
 8001ffe:	684a      	ldr	r2, [r1, #4]
 8002000:	6889      	ldr	r1, [r1, #8]
 8002002:	f7ff ffad 	bl	8001f60 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002006:	6822      	ldr	r2, [r4, #0]
 8002008:	6893      	ldr	r3, [r2, #8]
 800200a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800200e:	e013      	b.n	8002038 <HAL_TIM_ConfigClockSource+0xc4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002010:	6883      	ldr	r3, [r0, #8]
 8002012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002016:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 800201a:	6083      	str	r3, [r0, #8]
 800201c:	e7c5      	b.n	8001faa <HAL_TIM_ConfigClockSource+0x36>
      TIM_ETR_SetConfig(htim->Instance, 
 800201e:	68cb      	ldr	r3, [r1, #12]
 8002020:	684a      	ldr	r2, [r1, #4]
 8002022:	6889      	ldr	r1, [r1, #8]
 8002024:	f7ff ff9c 	bl	8001f60 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002028:	6822      	ldr	r2, [r4, #0]
 800202a:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800202c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002030:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002034:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002038:	6093      	str	r3, [r2, #8]
    break;
 800203a:	e7b6      	b.n	8001faa <HAL_TIM_ConfigClockSource+0x36>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800203c:	68ca      	ldr	r2, [r1, #12]
 800203e:	6849      	ldr	r1, [r1, #4]
 8002040:	f7ff fe33 	bl	8001caa <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002044:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 8002046:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800204c:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8002050:	e7f2      	b.n	8002038 <HAL_TIM_ConfigClockSource+0xc4>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002052:	68ca      	ldr	r2, [r1, #12]
 8002054:	6849      	ldr	r1, [r1, #4]
 8002056:	f7ff fe28 	bl	8001caa <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800205a:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 800205c:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800205e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002062:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8002066:	e7e7      	b.n	8002038 <HAL_TIM_ConfigClockSource+0xc4>
   tmpsmcr = TIMx->SMCR;
 8002068:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800206a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800206e:	f043 0307 	orr.w	r3, r3, #7
 8002072:	e7d2      	b.n	800201a <HAL_TIM_ConfigClockSource+0xa6>
   tmpsmcr = TIMx->SMCR;
 8002074:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800207a:	f043 0317 	orr.w	r3, r3, #23
 800207e:	e7cc      	b.n	800201a <HAL_TIM_ConfigClockSource+0xa6>
   tmpsmcr = TIMx->SMCR;
 8002080:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002086:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 800208a:	e7c6      	b.n	800201a <HAL_TIM_ConfigClockSource+0xa6>
 800208c:	fffe0088 	.word	0xfffe0088

08002090 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002090:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002094:	2b01      	cmp	r3, #1
{
 8002096:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8002098:	d01c      	beq.n	80020d4 <HAL_TIMEx_MasterConfigSynchronization+0x44>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800209a:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800209c:	4d0e      	ldr	r5, [pc, #56]	; (80020d8 <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  tmpcr2 = htim->Instance->CR2;
 800209e:	6853      	ldr	r3, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80020a0:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 80020a2:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80020a4:	d003      	beq.n	80020ae <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 80020a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80020aa:	42aa      	cmp	r2, r5
 80020ac:	d103      	bne.n	80020b6 <HAL_TIMEx_MasterConfigSynchronization+0x26>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80020ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80020b2:	684d      	ldr	r5, [r1, #4]
 80020b4:	432b      	orrs	r3, r5
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80020b6:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80020b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80020bc:	6889      	ldr	r1, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 80020be:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80020c2:	432b      	orrs	r3, r5
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80020c4:	4321      	orrs	r1, r4
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80020c6:	6053      	str	r3, [r2, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 80020c8:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 80020ca:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 80020cc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 80020d0:	4618      	mov	r0, r3
 80020d2:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 80020d4:	2002      	movs	r0, #2
} 
 80020d6:	bd30      	pop	{r4, r5, pc}
 80020d8:	40010000 	.word	0x40010000

080020dc <HAL_TIMEx_CommutationCallback>:
 80020dc:	4770      	bx	lr

080020de <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020de:	4770      	bx	lr

080020e0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80020e0:	6803      	ldr	r3, [r0, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80020e8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	f022 0201 	bic.w	r2, r2, #1
 80020f0:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80020f2:	2320      	movs	r3, #32
 80020f4:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 80020f8:	4770      	bx	lr

080020fa <HAL_UART_DeInit>:
{
 80020fa:	b538      	push	{r3, r4, r5, lr}
  if(huart == NULL)
 80020fc:	4605      	mov	r5, r0
 80020fe:	b1b0      	cbz	r0, 800212e <HAL_UART_DeInit+0x34>
  huart->gState = HAL_UART_STATE_BUSY;
 8002100:	2324      	movs	r3, #36	; 0x24
  huart->Instance->CR1 = 0x0U;
 8002102:	2400      	movs	r4, #0
  huart->gState = HAL_UART_STATE_BUSY;
 8002104:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8002108:	6803      	ldr	r3, [r0, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	f022 0201 	bic.w	r2, r2, #1
 8002110:	601a      	str	r2, [r3, #0]
  huart->Instance->CR1 = 0x0U;
 8002112:	601c      	str	r4, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8002114:	605c      	str	r4, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8002116:	609c      	str	r4, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8002118:	f001 fd7e 	bl	8003c18 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800211c:	66ec      	str	r4, [r5, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 800211e:	f885 4068 	strb.w	r4, [r5, #104]	; 0x68
  return HAL_OK;
 8002122:	4620      	mov	r0, r4
  huart->gState    = HAL_UART_STATE_RESET;
 8002124:	f885 4069 	strb.w	r4, [r5, #105]	; 0x69
  huart->RxState   = HAL_UART_STATE_RESET;
 8002128:	f885 406a 	strb.w	r4, [r5, #106]	; 0x6a
  return HAL_OK;
 800212c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800212e:	2001      	movs	r0, #1
}
 8002130:	bd38      	pop	{r3, r4, r5, pc}
	...

08002134 <HAL_UART_Transmit_DMA>:
{
 8002134:	b538      	push	{r3, r4, r5, lr}
 8002136:	4604      	mov	r4, r0
 8002138:	4613      	mov	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 800213a:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 800213e:	2a20      	cmp	r2, #32
 8002140:	d12b      	bne.n	800219a <HAL_UART_Transmit_DMA+0x66>
    if((pData == NULL ) || (Size == 0U))
 8002142:	b341      	cbz	r1, 8002196 <HAL_UART_Transmit_DMA+0x62>
 8002144:	b33b      	cbz	r3, 8002196 <HAL_UART_Transmit_DMA+0x62>
    __HAL_LOCK(huart);
 8002146:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 800214a:	2a01      	cmp	r2, #1
 800214c:	d025      	beq.n	800219a <HAL_UART_Transmit_DMA+0x66>
 800214e:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002150:	2500      	movs	r5, #0
    huart->TxXferCount = Size;
 8002152:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    __HAL_LOCK(huart);
 8002156:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800215a:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800215c:	66e5      	str	r5, [r4, #108]	; 0x6c
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800215e:	6e20      	ldr	r0, [r4, #96]	; 0x60
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002160:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002164:	4a0e      	ldr	r2, [pc, #56]	; (80021a0 <HAL_UART_Transmit_DMA+0x6c>)
    huart->TxXferSize = Size;
 8002166:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
    huart->pTxBuffPtr = pData;
 800216a:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800216c:	63c2      	str	r2, [r0, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800216e:	4a0d      	ldr	r2, [pc, #52]	; (80021a4 <HAL_UART_Transmit_DMA+0x70>)
    huart->hdmatx->XferAbortCallback = NULL;
 8002170:	6505      	str	r5, [r0, #80]	; 0x50
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002172:	6402      	str	r2, [r0, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002174:	4a0c      	ldr	r2, [pc, #48]	; (80021a8 <HAL_UART_Transmit_DMA+0x74>)
 8002176:	64c2      	str	r2, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 8002178:	6822      	ldr	r2, [r4, #0]
 800217a:	3228      	adds	r2, #40	; 0x28
 800217c:	f7fe fc3e 	bl	80009fc <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_IT(huart, UART_FLAG_TC);
 8002180:	6823      	ldr	r3, [r4, #0]
 8002182:	2240      	movs	r2, #64	; 0x40
    return HAL_OK;
 8002184:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_IT(huart, UART_FLAG_TC);
 8002186:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002188:	689a      	ldr	r2, [r3, #8]
    __HAL_UNLOCK(huart);
 800218a:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800218e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002192:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8002194:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8002196:	2001      	movs	r0, #1
 8002198:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 800219a:	2002      	movs	r0, #2
}
 800219c:	bd38      	pop	{r3, r4, r5, pc}
 800219e:	bf00      	nop
 80021a0:	080023a1 	.word	0x080023a1
 80021a4:	080023d1 	.word	0x080023d1
 80021a8:	08002449 	.word	0x08002449

080021ac <UART_WaitOnFlagUntilTimeout>:
{
 80021ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021b0:	9d06      	ldr	r5, [sp, #24]
 80021b2:	4604      	mov	r4, r0
 80021b4:	460f      	mov	r7, r1
 80021b6:	4616      	mov	r6, r2
 80021b8:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021ba:	6821      	ldr	r1, [r4, #0]
 80021bc:	69ca      	ldr	r2, [r1, #28]
 80021be:	ea37 0302 	bics.w	r3, r7, r2
 80021c2:	bf0c      	ite	eq
 80021c4:	2201      	moveq	r2, #1
 80021c6:	2200      	movne	r2, #0
 80021c8:	42b2      	cmp	r2, r6
 80021ca:	d002      	beq.n	80021d2 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80021cc:	2000      	movs	r0, #0
}
 80021ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 80021d2:	1c6b      	adds	r3, r5, #1
 80021d4:	d0f2      	beq.n	80021bc <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 80021d6:	b99d      	cbnz	r5, 8002200 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021d8:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 80021da:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80021e2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021e4:	689a      	ldr	r2, [r3, #8]
 80021e6:	f022 0201 	bic.w	r2, r2, #1
 80021ea:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80021ec:	2320      	movs	r3, #32
 80021ee:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80021f2:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 80021f6:	2300      	movs	r3, #0
 80021f8:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80021fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8002200:	f7fe fa3a 	bl	8000678 <HAL_GetTick>
 8002204:	eba0 0008 	sub.w	r0, r0, r8
 8002208:	4285      	cmp	r5, r0
 800220a:	d8d6      	bhi.n	80021ba <UART_WaitOnFlagUntilTimeout+0xe>
 800220c:	e7e4      	b.n	80021d8 <UART_WaitOnFlagUntilTimeout+0x2c>

0800220e <HAL_UART_Transmit>:
{
 800220e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002212:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8002214:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
{
 8002218:	4604      	mov	r4, r0
 800221a:	460d      	mov	r5, r1
  if(huart->gState == HAL_UART_STATE_READY)
 800221c:	2b20      	cmp	r3, #32
{
 800221e:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8002220:	d14c      	bne.n	80022bc <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 8002222:	2900      	cmp	r1, #0
 8002224:	d048      	beq.n	80022b8 <HAL_UART_Transmit+0xaa>
 8002226:	2a00      	cmp	r2, #0
 8002228:	d046      	beq.n	80022b8 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 800222a:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800222e:	2b01      	cmp	r3, #1
 8002230:	d044      	beq.n	80022bc <HAL_UART_Transmit+0xae>
 8002232:	2301      	movs	r3, #1
 8002234:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002238:	2300      	movs	r3, #0
 800223a:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800223c:	2321      	movs	r3, #33	; 0x21
 800223e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 8002242:	f7fe fa19 	bl	8000678 <HAL_GetTick>
 8002246:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8002248:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 800224c:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8002250:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8002254:	b292      	uxth	r2, r2
 8002256:	b962      	cbnz	r2, 8002272 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002258:	9700      	str	r7, [sp, #0]
 800225a:	4633      	mov	r3, r6
 800225c:	2140      	movs	r1, #64	; 0x40
 800225e:	4620      	mov	r0, r4
 8002260:	f7ff ffa4 	bl	80021ac <UART_WaitOnFlagUntilTimeout>
 8002264:	b998      	cbnz	r0, 800228e <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 8002266:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8002268:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 800226c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    return HAL_OK;
 8002270:	e00e      	b.n	8002290 <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 8002272:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002276:	2200      	movs	r2, #0
 8002278:	9700      	str	r7, [sp, #0]
 800227a:	2180      	movs	r1, #128	; 0x80
      huart->TxXferCount--;
 800227c:	3b01      	subs	r3, #1
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800227e:	4620      	mov	r0, r4
      huart->TxXferCount--;
 8002280:	b29b      	uxth	r3, r3
 8002282:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002286:	4633      	mov	r3, r6
 8002288:	f7ff ff90 	bl	80021ac <UART_WaitOnFlagUntilTimeout>
 800228c:	b118      	cbz	r0, 8002296 <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 800228e:	2003      	movs	r0, #3
}
 8002290:	b002      	add	sp, #8
 8002292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002296:	68a3      	ldr	r3, [r4, #8]
 8002298:	6822      	ldr	r2, [r4, #0]
 800229a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800229e:	d107      	bne.n	80022b0 <HAL_UART_Transmit+0xa2>
 80022a0:	6923      	ldr	r3, [r4, #16]
 80022a2:	b92b      	cbnz	r3, 80022b0 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80022a4:	f835 3b02 	ldrh.w	r3, [r5], #2
 80022a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022ac:	6293      	str	r3, [r2, #40]	; 0x28
        pData += 2;
 80022ae:	e7cf      	b.n	8002250 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80022b0:	782b      	ldrb	r3, [r5, #0]
 80022b2:	3501      	adds	r5, #1
 80022b4:	6293      	str	r3, [r2, #40]	; 0x28
 80022b6:	e7cb      	b.n	8002250 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80022b8:	2001      	movs	r0, #1
 80022ba:	e7e9      	b.n	8002290 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 80022bc:	2002      	movs	r0, #2
 80022be:	e7e7      	b.n	8002290 <HAL_UART_Transmit+0x82>

080022c0 <HAL_UART_Receive>:
{
 80022c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80022c4:	4698      	mov	r8, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 80022c6:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
{
 80022ca:	4604      	mov	r4, r0
 80022cc:	460d      	mov	r5, r1
  if(huart->RxState == HAL_UART_STATE_READY)
 80022ce:	2b20      	cmp	r3, #32
{
 80022d0:	4616      	mov	r6, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 80022d2:	d161      	bne.n	8002398 <HAL_UART_Receive+0xd8>
    if((pData == NULL ) || (Size == 0U))
 80022d4:	2900      	cmp	r1, #0
 80022d6:	d05d      	beq.n	8002394 <HAL_UART_Receive+0xd4>
 80022d8:	2a00      	cmp	r2, #0
 80022da:	d05b      	beq.n	8002394 <HAL_UART_Receive+0xd4>
    __HAL_LOCK(huart);
 80022dc:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d059      	beq.n	8002398 <HAL_UART_Receive+0xd8>
 80022e4:	2301      	movs	r3, #1
 80022e6:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022ea:	2300      	movs	r3, #0
 80022ec:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80022ee:	2322      	movs	r3, #34	; 0x22
 80022f0:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
    tickstart = HAL_GetTick();
 80022f4:	f7fe f9c0 	bl	8000678 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 80022f8:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80022fa:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 80022fc:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8002300:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferCount = Size;
 8002304:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8002308:	d115      	bne.n	8002336 <HAL_UART_Receive+0x76>
 800230a:	6923      	ldr	r3, [r4, #16]
 800230c:	b98b      	cbnz	r3, 8002332 <HAL_UART_Receive+0x72>
 800230e:	f240 13ff 	movw	r3, #511	; 0x1ff
 8002312:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8002316:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
    while(huart->RxXferCount > 0U)
 800231a:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 800231e:	b280      	uxth	r0, r0
 8002320:	b9b8      	cbnz	r0, 8002352 <HAL_UART_Receive+0x92>
    huart->RxState = HAL_UART_STATE_READY;
 8002322:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8002324:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    huart->RxState = HAL_UART_STATE_READY;
 8002328:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
 800232c:	b002      	add	sp, #8
 800232e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 8002332:	23ff      	movs	r3, #255	; 0xff
 8002334:	e7ed      	b.n	8002312 <HAL_UART_Receive+0x52>
 8002336:	b923      	cbnz	r3, 8002342 <HAL_UART_Receive+0x82>
 8002338:	6923      	ldr	r3, [r4, #16]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d0f9      	beq.n	8002332 <HAL_UART_Receive+0x72>
 800233e:	237f      	movs	r3, #127	; 0x7f
 8002340:	e7e7      	b.n	8002312 <HAL_UART_Receive+0x52>
 8002342:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002346:	d1e6      	bne.n	8002316 <HAL_UART_Receive+0x56>
 8002348:	6923      	ldr	r3, [r4, #16]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d0f7      	beq.n	800233e <HAL_UART_Receive+0x7e>
 800234e:	233f      	movs	r3, #63	; 0x3f
 8002350:	e7df      	b.n	8002312 <HAL_UART_Receive+0x52>
      huart->RxXferCount--;
 8002352:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002356:	2200      	movs	r2, #0
 8002358:	f8cd 8000 	str.w	r8, [sp]
 800235c:	2120      	movs	r1, #32
      huart->RxXferCount--;
 800235e:	3b01      	subs	r3, #1
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002360:	4620      	mov	r0, r4
      huart->RxXferCount--;
 8002362:	b29b      	uxth	r3, r3
 8002364:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002368:	463b      	mov	r3, r7
 800236a:	f7ff ff1f 	bl	80021ac <UART_WaitOnFlagUntilTimeout>
 800236e:	b9a8      	cbnz	r0, 800239c <HAL_UART_Receive+0xdc>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002370:	68a3      	ldr	r3, [r4, #8]
 8002372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002376:	6823      	ldr	r3, [r4, #0]
 8002378:	d106      	bne.n	8002388 <HAL_UART_Receive+0xc8>
 800237a:	6922      	ldr	r2, [r4, #16]
 800237c:	b922      	cbnz	r2, 8002388 <HAL_UART_Receive+0xc8>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 800237e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002380:	4033      	ands	r3, r6
 8002382:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 8002386:	e7c8      	b.n	800231a <HAL_UART_Receive+0x5a>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238a:	3501      	adds	r5, #1
 800238c:	4033      	ands	r3, r6
 800238e:	f805 3c01 	strb.w	r3, [r5, #-1]
 8002392:	e7c2      	b.n	800231a <HAL_UART_Receive+0x5a>
      return  HAL_ERROR;
 8002394:	2001      	movs	r0, #1
 8002396:	e7c9      	b.n	800232c <HAL_UART_Receive+0x6c>
    return HAL_BUSY;
 8002398:	2002      	movs	r0, #2
 800239a:	e7c7      	b.n	800232c <HAL_UART_Receive+0x6c>
        return HAL_TIMEOUT;
 800239c:	2003      	movs	r0, #3
 800239e:	e7c5      	b.n	800232c <HAL_UART_Receive+0x6c>

080023a0 <UART_DMATransmitCplt>:
{
 80023a0:	b508      	push	{r3, lr}
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80023a2:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023a4:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80023ac:	d10b      	bne.n	80023c6 <UART_DMATransmitCplt+0x26>
    huart->TxXferCount = 0U;
 80023ae:	f8a2 3052 	strh.w	r3, [r2, #82]	; 0x52
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80023b2:	6813      	ldr	r3, [r2, #0]
 80023b4:	689a      	ldr	r2, [r3, #8]
 80023b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023ba:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80023c6:	4610      	mov	r0, r2
 80023c8:	f001 f84f 	bl	800346a <HAL_UART_TxCpltCallback>
 80023cc:	bd08      	pop	{r3, pc}

080023ce <HAL_UART_TxHalfCpltCallback>:
 80023ce:	4770      	bx	lr

080023d0 <UART_DMATxHalfCplt>:
{
 80023d0:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80023d2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80023d4:	f7ff fffb 	bl	80023ce <HAL_UART_TxHalfCpltCallback>
 80023d8:	bd08      	pop	{r3, pc}

080023da <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80023da:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80023de:	6802      	ldr	r2, [r0, #0]
 80023e0:	2b22      	cmp	r3, #34	; 0x22
{
 80023e2:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80023e4:	d12a      	bne.n	800243c <UART_Receive_IT+0x62>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023e6:	6883      	ldr	r3, [r0, #8]
  uint16_t uhMask = huart->Mask;
 80023e8:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023f0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80023f2:	d11d      	bne.n	8002430 <UART_Receive_IT+0x56>
 80023f4:	6904      	ldr	r4, [r0, #16]
 80023f6:	b9dc      	cbnz	r4, 8002430 <UART_Receive_IT+0x56>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80023f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023fa:	4011      	ands	r1, r2
 80023fc:	f823 1b02 	strh.w	r1, [r3], #2
      huart->pRxBuffPtr +=2;
 8002400:	6543      	str	r3, [r0, #84]	; 0x54
    if(--huart->RxXferCount == 0)
 8002402:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 8002406:	3c01      	subs	r4, #1
 8002408:	b2a4      	uxth	r4, r4
 800240a:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 800240e:	b96c      	cbnz	r4, 800242c <UART_Receive_IT+0x52>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002410:	6803      	ldr	r3, [r0, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002418:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	f022 0201 	bic.w	r2, r2, #1
 8002420:	609a      	str	r2, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8002422:	2320      	movs	r3, #32
 8002424:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 8002428:	f001 f81e 	bl	8003468 <HAL_UART_RxCpltCallback>
    return HAL_OK;
 800242c:	2000      	movs	r0, #0
}
 800242e:	bd10      	pop	{r4, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002430:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002432:	1c5c      	adds	r4, r3, #1
 8002434:	4011      	ands	r1, r2
 8002436:	6544      	str	r4, [r0, #84]	; 0x54
 8002438:	7019      	strb	r1, [r3, #0]
 800243a:	e7e2      	b.n	8002402 <UART_Receive_IT+0x28>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800243c:	6993      	ldr	r3, [r2, #24]
    return HAL_BUSY;
 800243e:	2002      	movs	r0, #2
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002440:	f043 0308 	orr.w	r3, r3, #8
 8002444:	6193      	str	r3, [r2, #24]
    return HAL_BUSY;
 8002446:	bd10      	pop	{r4, pc}

08002448 <UART_DMAError>:
{
 8002448:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800244a:	6b81      	ldr	r1, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800244c:	2300      	movs	r3, #0
 800244e:	f8a1 305a 	strh.w	r3, [r1, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8002452:	f8a1 3052 	strh.w	r3, [r1, #82]	; 0x52
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002456:	f891 3069 	ldrb.w	r3, [r1, #105]	; 0x69
 800245a:	2b21      	cmp	r3, #33	; 0x21
 800245c:	d10a      	bne.n	8002474 <UART_DMAError+0x2c>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 800245e:	680b      	ldr	r3, [r1, #0]
 8002460:	689a      	ldr	r2, [r3, #8]
 8002462:	0612      	lsls	r2, r2, #24
 8002464:	d506      	bpl.n	8002474 <UART_DMAError+0x2c>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800246c:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800246e:	2320      	movs	r3, #32
 8002470:	f881 3069 	strb.w	r3, [r1, #105]	; 0x69
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002474:	f891 306a 	ldrb.w	r3, [r1, #106]	; 0x6a
 8002478:	2b22      	cmp	r3, #34	; 0x22
 800247a:	d106      	bne.n	800248a <UART_DMAError+0x42>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 800247c:	680b      	ldr	r3, [r1, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	065b      	lsls	r3, r3, #25
 8002482:	d502      	bpl.n	800248a <UART_DMAError+0x42>
    UART_EndRxTransfer(huart);
 8002484:	4608      	mov	r0, r1
 8002486:	f7ff fe2b 	bl	80020e0 <UART_EndRxTransfer>
  SET_BIT(huart->ErrorCode, HAL_UART_ERROR_DMA);
 800248a:	6ecb      	ldr	r3, [r1, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 800248c:	4608      	mov	r0, r1
  SET_BIT(huart->ErrorCode, HAL_UART_ERROR_DMA);
 800248e:	f043 0310 	orr.w	r3, r3, #16
 8002492:	66cb      	str	r3, [r1, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8002494:	f000 ffea 	bl	800346c <HAL_UART_ErrorCallback>
 8002498:	bd08      	pop	{r3, pc}
	...

0800249c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800249c:	6803      	ldr	r3, [r0, #0]
 800249e:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024a0:	6819      	ldr	r1, [r3, #0]
{
 80024a2:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 80024a4:	0716      	lsls	r6, r2, #28
{
 80024a6:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024a8:	689d      	ldr	r5, [r3, #8]
  if (errorflags == RESET)
 80024aa:	d107      	bne.n	80024bc <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024ac:	0695      	lsls	r5, r2, #26
 80024ae:	d563      	bpl.n	8002578 <HAL_UART_IRQHandler+0xdc>
 80024b0:	068e      	lsls	r6, r1, #26
 80024b2:	d561      	bpl.n	8002578 <HAL_UART_IRQHandler+0xdc>
}
 80024b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80024b8:	f7ff bf8f 	b.w	80023da <UART_Receive_IT>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 80024bc:	f015 0001 	ands.w	r0, r5, #1
 80024c0:	d102      	bne.n	80024c8 <HAL_UART_IRQHandler+0x2c>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 80024c2:	f411 7f90 	tst.w	r1, #288	; 0x120
 80024c6:	d057      	beq.n	8002578 <HAL_UART_IRQHandler+0xdc>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80024c8:	07d5      	lsls	r5, r2, #31
 80024ca:	d507      	bpl.n	80024dc <HAL_UART_IRQHandler+0x40>
 80024cc:	05ce      	lsls	r6, r1, #23
 80024ce:	d505      	bpl.n	80024dc <HAL_UART_IRQHandler+0x40>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80024d0:	2501      	movs	r5, #1
 80024d2:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024d4:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 80024d6:	f045 0501 	orr.w	r5, r5, #1
 80024da:	66e5      	str	r5, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024dc:	0795      	lsls	r5, r2, #30
 80024de:	d506      	bpl.n	80024ee <HAL_UART_IRQHandler+0x52>
 80024e0:	b128      	cbz	r0, 80024ee <HAL_UART_IRQHandler+0x52>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80024e2:	2502      	movs	r5, #2
 80024e4:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024e6:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 80024e8:	f045 0504 	orr.w	r5, r5, #4
 80024ec:	66e5      	str	r5, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024ee:	0756      	lsls	r6, r2, #29
 80024f0:	d506      	bpl.n	8002500 <HAL_UART_IRQHandler+0x64>
 80024f2:	b128      	cbz	r0, 8002500 <HAL_UART_IRQHandler+0x64>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80024f4:	2504      	movs	r5, #4
 80024f6:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024f8:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 80024fa:	f045 0502 	orr.w	r5, r5, #2
 80024fe:	66e5      	str	r5, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8002500:	0715      	lsls	r5, r2, #28
 8002502:	d507      	bpl.n	8002514 <HAL_UART_IRQHandler+0x78>
 8002504:	068e      	lsls	r6, r1, #26
 8002506:	d400      	bmi.n	800250a <HAL_UART_IRQHandler+0x6e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002508:	b120      	cbz	r0, 8002514 <HAL_UART_IRQHandler+0x78>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 800250a:	2008      	movs	r0, #8
 800250c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800250e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002510:	4303      	orrs	r3, r0
 8002512:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002514:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002516:	2b00      	cmp	r3, #0
 8002518:	d06a      	beq.n	80025f0 <HAL_UART_IRQHandler+0x154>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800251a:	0695      	lsls	r5, r2, #26
 800251c:	d504      	bpl.n	8002528 <HAL_UART_IRQHandler+0x8c>
 800251e:	0688      	lsls	r0, r1, #26
 8002520:	d502      	bpl.n	8002528 <HAL_UART_IRQHandler+0x8c>
        UART_Receive_IT(huart);
 8002522:	4620      	mov	r0, r4
 8002524:	f7ff ff59 	bl	80023da <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002528:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        UART_EndRxTransfer(huart);
 800252a:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800252c:	0719      	lsls	r1, r3, #28
 800252e:	d404      	bmi.n	800253a <HAL_UART_IRQHandler+0x9e>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8002530:	6823      	ldr	r3, [r4, #0]
 8002532:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002534:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002538:	d01a      	beq.n	8002570 <HAL_UART_IRQHandler+0xd4>
        UART_EndRxTransfer(huart);
 800253a:	f7ff fdd1 	bl	80020e0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800253e:	6823      	ldr	r3, [r4, #0]
 8002540:	689a      	ldr	r2, [r3, #8]
 8002542:	0652      	lsls	r2, r2, #25
 8002544:	d510      	bpl.n	8002568 <HAL_UART_IRQHandler+0xcc>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002546:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8002548:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800254a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800254e:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8002550:	b150      	cbz	r0, 8002568 <HAL_UART_IRQHandler+0xcc>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002552:	4b28      	ldr	r3, [pc, #160]	; (80025f4 <HAL_UART_IRQHandler+0x158>)
 8002554:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002556:	f7fe fa8e 	bl	8000a76 <HAL_DMA_Abort_IT>
 800255a:	2800      	cmp	r0, #0
 800255c:	d048      	beq.n	80025f0 <HAL_UART_IRQHandler+0x154>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800255e:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 8002560:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002564:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002566:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002568:	4620      	mov	r0, r4
 800256a:	f000 ff7f 	bl	800346c <HAL_UART_ErrorCallback>
 800256e:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002570:	f000 ff7c 	bl	800346c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002574:	66e5      	str	r5, [r4, #108]	; 0x6c
 8002576:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002578:	0616      	lsls	r6, r2, #24
 800257a:	d52b      	bpl.n	80025d4 <HAL_UART_IRQHandler+0x138>
 800257c:	060d      	lsls	r5, r1, #24
 800257e:	d529      	bpl.n	80025d4 <HAL_UART_IRQHandler+0x138>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002580:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 8002584:	2a21      	cmp	r2, #33	; 0x21
 8002586:	d133      	bne.n	80025f0 <HAL_UART_IRQHandler+0x154>
    if(huart->TxXferCount == 0U)
 8002588:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800258c:	b292      	uxth	r2, r2
 800258e:	b942      	cbnz	r2, 80025a2 <HAL_UART_IRQHandler+0x106>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002596:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	bd70      	pop	{r4, r5, r6, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025a2:	68a2      	ldr	r2, [r4, #8]
 80025a4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80025a8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80025aa:	d10e      	bne.n	80025ca <HAL_UART_IRQHandler+0x12e>
 80025ac:	6921      	ldr	r1, [r4, #16]
 80025ae:	b961      	cbnz	r1, 80025ca <HAL_UART_IRQHandler+0x12e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80025b0:	f832 1b02 	ldrh.w	r1, [r2], #2
 80025b4:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80025b8:	6299      	str	r1, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80025ba:	64e2      	str	r2, [r4, #76]	; 0x4c
      huart->TxXferCount--;
 80025bc:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80025c0:	3b01      	subs	r3, #1
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 80025c8:	bd70      	pop	{r4, r5, r6, pc}
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 80025ca:	1c51      	adds	r1, r2, #1
 80025cc:	64e1      	str	r1, [r4, #76]	; 0x4c
 80025ce:	7812      	ldrb	r2, [r2, #0]
 80025d0:	629a      	str	r2, [r3, #40]	; 0x28
 80025d2:	e7f3      	b.n	80025bc <HAL_UART_IRQHandler+0x120>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80025d4:	0650      	lsls	r0, r2, #25
 80025d6:	d50b      	bpl.n	80025f0 <HAL_UART_IRQHandler+0x154>
 80025d8:	064a      	lsls	r2, r1, #25
 80025da:	d509      	bpl.n	80025f0 <HAL_UART_IRQHandler+0x154>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80025dc:	681a      	ldr	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 80025de:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80025e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025e4:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80025e6:	2320      	movs	r3, #32
 80025e8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  HAL_UART_TxCpltCallback(huart);
 80025ec:	f000 ff3d 	bl	800346a <HAL_UART_TxCpltCallback>
 80025f0:	bd70      	pop	{r4, r5, r6, pc}
 80025f2:	bf00      	nop
 80025f4:	080025f9 	.word	0x080025f9

080025f8 <UART_DMAAbortOnError>:
{
 80025f8:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80025fa:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 80025fc:	2300      	movs	r3, #0
 80025fe:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8002602:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8002606:	f000 ff31 	bl	800346c <HAL_UART_ErrorCallback>
 800260a:	bd08      	pop	{r3, pc}

0800260c <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800260c:	b538      	push	{r3, r4, r5, lr}
 800260e:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002610:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002612:	69c3      	ldr	r3, [r0, #28]
 8002614:	6921      	ldr	r1, [r4, #16]
 8002616:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002618:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800261a:	430a      	orrs	r2, r1
 800261c:	6961      	ldr	r1, [r4, #20]
 800261e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002620:	4993      	ldr	r1, [pc, #588]	; (8002870 <UART_SetConfig+0x264>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002622:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002624:	4001      	ands	r1, r0
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002626:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002628:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800262a:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800262c:	602a      	str	r2, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800262e:	686a      	ldr	r2, [r5, #4]
 8002630:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002634:	430a      	orrs	r2, r1
 8002636:	606a      	str	r2, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002638:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800263a:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800263c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800263e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8002642:	430a      	orrs	r2, r1
 8002644:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002646:	4a8b      	ldr	r2, [pc, #556]	; (8002874 <UART_SetConfig+0x268>)
 8002648:	4295      	cmp	r5, r2
 800264a:	d119      	bne.n	8002680 <UART_SetConfig+0x74>
 800264c:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8002650:	4989      	ldr	r1, [pc, #548]	; (8002878 <UART_SetConfig+0x26c>)
 8002652:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002656:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800265a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800265e:	5c8a      	ldrb	r2, [r1, r2]
 8002660:	f040 80b3 	bne.w	80027ca <UART_SetConfig+0x1be>
  {
    switch (clocksource)
 8002664:	2a08      	cmp	r2, #8
 8002666:	f200 80ad 	bhi.w	80027c4 <UART_SetConfig+0x1b8>
 800266a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800266e:	0026      	.short	0x0026
 8002670:	00e9007b 	.word	0x00e9007b
 8002674:	00f500ab 	.word	0x00f500ab
 8002678:	00ab00ab 	.word	0x00ab00ab
 800267c:	00fb00ab 	.word	0x00fb00ab
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002680:	4a7e      	ldr	r2, [pc, #504]	; (800287c <UART_SetConfig+0x270>)
 8002682:	4295      	cmp	r5, r2
 8002684:	d107      	bne.n	8002696 <UART_SetConfig+0x8a>
 8002686:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 800268a:	497d      	ldr	r1, [pc, #500]	; (8002880 <UART_SetConfig+0x274>)
 800268c:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002690:	f002 020c 	and.w	r2, r2, #12
 8002694:	e7e1      	b.n	800265a <UART_SetConfig+0x4e>
 8002696:	4a7b      	ldr	r2, [pc, #492]	; (8002884 <UART_SetConfig+0x278>)
 8002698:	4295      	cmp	r5, r2
 800269a:	d12b      	bne.n	80026f4 <UART_SetConfig+0xe8>
 800269c:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 80026a0:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80026a4:	f002 0230 	and.w	r2, r2, #48	; 0x30
 80026a8:	2a10      	cmp	r2, #16
 80026aa:	f000 80d2 	beq.w	8002852 <UART_SetConfig+0x246>
 80026ae:	d816      	bhi.n	80026de <UART_SetConfig+0xd2>
 80026b0:	b9da      	cbnz	r2, 80026ea <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026b6:	f040 809f 	bne.w	80027f8 <UART_SetConfig+0x1ec>
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80026ba:	f7fe ff77 	bl	80015ac <HAL_RCC_GetPCLK1Freq>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80026be:	6861      	ldr	r1, [r4, #4]
 80026c0:	084a      	lsrs	r2, r1, #1
 80026c2:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 80026c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80026ca:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80026cc:	2000      	movs	r0, #0
    default:
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 80026ce:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80026d2:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 80026d6:	6821      	ldr	r1, [r4, #0]
 80026d8:	4313      	orrs	r3, r2
 80026da:	60cb      	str	r3, [r1, #12]
 80026dc:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026de:	2a20      	cmp	r2, #32
 80026e0:	f000 80ab 	beq.w	800283a <UART_SetConfig+0x22e>
 80026e4:	2a30      	cmp	r2, #48	; 0x30
 80026e6:	f000 80ba 	beq.w	800285e <UART_SetConfig+0x252>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026ee:	d069      	beq.n	80027c4 <UART_SetConfig+0x1b8>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 80026f0:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 80026f2:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026f4:	4a64      	ldr	r2, [pc, #400]	; (8002888 <UART_SetConfig+0x27c>)
 80026f6:	4295      	cmp	r5, r2
 80026f8:	d10e      	bne.n	8002718 <UART_SetConfig+0x10c>
 80026fa:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 80026fe:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002702:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8002706:	2a40      	cmp	r2, #64	; 0x40
 8002708:	f000 80a3 	beq.w	8002852 <UART_SetConfig+0x246>
 800270c:	d9d0      	bls.n	80026b0 <UART_SetConfig+0xa4>
 800270e:	2a80      	cmp	r2, #128	; 0x80
 8002710:	f000 8093 	beq.w	800283a <UART_SetConfig+0x22e>
 8002714:	2ac0      	cmp	r2, #192	; 0xc0
 8002716:	e7e6      	b.n	80026e6 <UART_SetConfig+0xda>
 8002718:	4a5c      	ldr	r2, [pc, #368]	; (800288c <UART_SetConfig+0x280>)
 800271a:	4295      	cmp	r5, r2
 800271c:	d110      	bne.n	8002740 <UART_SetConfig+0x134>
 800271e:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 8002722:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002726:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800272a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800272e:	f000 8090 	beq.w	8002852 <UART_SetConfig+0x246>
 8002732:	d9bd      	bls.n	80026b0 <UART_SetConfig+0xa4>
 8002734:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002738:	d07f      	beq.n	800283a <UART_SetConfig+0x22e>
 800273a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800273e:	e7d2      	b.n	80026e6 <UART_SetConfig+0xda>
 8002740:	4a53      	ldr	r2, [pc, #332]	; (8002890 <UART_SetConfig+0x284>)
 8002742:	4295      	cmp	r5, r2
 8002744:	d117      	bne.n	8002776 <UART_SetConfig+0x16a>
 8002746:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 800274a:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800274e:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8002752:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002756:	d07c      	beq.n	8002852 <UART_SetConfig+0x246>
 8002758:	d807      	bhi.n	800276a <UART_SetConfig+0x15e>
 800275a:	2a00      	cmp	r2, #0
 800275c:	d1c5      	bne.n	80026ea <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800275e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002762:	d154      	bne.n	800280e <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002764:	f7fe ff32 	bl	80015cc <HAL_RCC_GetPCLK2Freq>
 8002768:	e7a9      	b.n	80026be <UART_SetConfig+0xb2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800276a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800276e:	d064      	beq.n	800283a <UART_SetConfig+0x22e>
 8002770:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8002774:	e7b7      	b.n	80026e6 <UART_SetConfig+0xda>
 8002776:	4a47      	ldr	r2, [pc, #284]	; (8002894 <UART_SetConfig+0x288>)
 8002778:	4295      	cmp	r5, r2
 800277a:	d10f      	bne.n	800279c <UART_SetConfig+0x190>
 800277c:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8002780:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002784:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8002788:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800278c:	d061      	beq.n	8002852 <UART_SetConfig+0x246>
 800278e:	d98f      	bls.n	80026b0 <UART_SetConfig+0xa4>
 8002790:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002794:	d051      	beq.n	800283a <UART_SetConfig+0x22e>
 8002796:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 800279a:	e7a4      	b.n	80026e6 <UART_SetConfig+0xda>
 800279c:	4a3e      	ldr	r2, [pc, #248]	; (8002898 <UART_SetConfig+0x28c>)
 800279e:	4295      	cmp	r5, r2
 80027a0:	d1a3      	bne.n	80026ea <UART_SetConfig+0xde>
 80027a2:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 80027a6:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80027aa:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80027ae:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80027b2:	d04e      	beq.n	8002852 <UART_SetConfig+0x246>
 80027b4:	f67f af7c 	bls.w	80026b0 <UART_SetConfig+0xa4>
 80027b8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80027bc:	d03d      	beq.n	800283a <UART_SetConfig+0x22e>
 80027be:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 80027c2:	e790      	b.n	80026e6 <UART_SetConfig+0xda>
        ret = HAL_ERROR;
 80027c4:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80027c6:	2300      	movs	r3, #0
 80027c8:	e781      	b.n	80026ce <UART_SetConfig+0xc2>
    switch (clocksource)
 80027ca:	2a08      	cmp	r2, #8
 80027cc:	d890      	bhi.n	80026f0 <UART_SetConfig+0xe4>
 80027ce:	a301      	add	r3, pc, #4	; (adr r3, 80027d4 <UART_SetConfig+0x1c8>)
 80027d0:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80027d4:	080027f9 	.word	0x080027f9
 80027d8:	0800280f 	.word	0x0800280f
 80027dc:	08002815 	.word	0x08002815
 80027e0:	080026f1 	.word	0x080026f1
 80027e4:	0800282b 	.word	0x0800282b
 80027e8:	080026f1 	.word	0x080026f1
 80027ec:	080026f1 	.word	0x080026f1
 80027f0:	080026f1 	.word	0x080026f1
 80027f4:	08002831 	.word	0x08002831
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80027f8:	f7fe fed8 	bl	80015ac <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80027fc:	6863      	ldr	r3, [r4, #4]
 80027fe:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002802:	fbb0 f0f3 	udiv	r0, r0, r3
 8002806:	b280      	uxth	r0, r0
 8002808:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800280a:	2000      	movs	r0, #0
      break;
 800280c:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800280e:	f7fe fedd 	bl	80015cc <HAL_RCC_GetPCLK2Freq>
 8002812:	e7f3      	b.n	80027fc <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002814:	6862      	ldr	r2, [r4, #4]
 8002816:	0853      	lsrs	r3, r2, #1
 8002818:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800281c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002820:	fbb3 f3f2 	udiv	r3, r3, r2
 8002824:	b29b      	uxth	r3, r3
 8002826:	60eb      	str	r3, [r5, #12]
 8002828:	e7ef      	b.n	800280a <UART_SetConfig+0x1fe>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800282a:	f7fe fded 	bl	8001408 <HAL_RCC_GetSysClockFreq>
 800282e:	e7e5      	b.n	80027fc <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002830:	6862      	ldr	r2, [r4, #4]
 8002832:	0853      	lsrs	r3, r2, #1
 8002834:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002838:	e7f2      	b.n	8002820 <UART_SetConfig+0x214>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800283a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800283e:	d1e9      	bne.n	8002814 <UART_SetConfig+0x208>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002840:	6860      	ldr	r0, [r4, #4]
 8002842:	0843      	lsrs	r3, r0, #1
 8002844:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002848:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800284c:	fbb3 f3f0 	udiv	r3, r3, r0
 8002850:	e73b      	b.n	80026ca <UART_SetConfig+0xbe>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002852:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002856:	d1e8      	bne.n	800282a <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002858:	f7fe fdd6 	bl	8001408 <HAL_RCC_GetSysClockFreq>
 800285c:	e72f      	b.n	80026be <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800285e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002862:	d1e5      	bne.n	8002830 <UART_SetConfig+0x224>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002864:	6860      	ldr	r0, [r4, #4]
 8002866:	0843      	lsrs	r3, r0, #1
 8002868:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800286c:	e7ee      	b.n	800284c <UART_SetConfig+0x240>
 800286e:	bf00      	nop
 8002870:	efff69f3 	.word	0xefff69f3
 8002874:	40011000 	.word	0x40011000
 8002878:	08006a58 	.word	0x08006a58
 800287c:	40004400 	.word	0x40004400
 8002880:	08006a5c 	.word	0x08006a5c
 8002884:	40004800 	.word	0x40004800
 8002888:	40004c00 	.word	0x40004c00
 800288c:	40005000 	.word	0x40005000
 8002890:	40011400 	.word	0x40011400
 8002894:	40007800 	.word	0x40007800
 8002898:	40007c00 	.word	0x40007c00

0800289c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800289c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800289e:	07da      	lsls	r2, r3, #31
{
 80028a0:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80028a2:	d506      	bpl.n	80028b2 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80028a4:	6801      	ldr	r1, [r0, #0]
 80028a6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80028a8:	684a      	ldr	r2, [r1, #4]
 80028aa:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80028ae:	4322      	orrs	r2, r4
 80028b0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80028b2:	079c      	lsls	r4, r3, #30
 80028b4:	d506      	bpl.n	80028c4 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80028b6:	6801      	ldr	r1, [r0, #0]
 80028b8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80028ba:	684a      	ldr	r2, [r1, #4]
 80028bc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80028c0:	4322      	orrs	r2, r4
 80028c2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80028c4:	0759      	lsls	r1, r3, #29
 80028c6:	d506      	bpl.n	80028d6 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80028c8:	6801      	ldr	r1, [r0, #0]
 80028ca:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80028cc:	684a      	ldr	r2, [r1, #4]
 80028ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028d2:	4322      	orrs	r2, r4
 80028d4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80028d6:	071a      	lsls	r2, r3, #28
 80028d8:	d506      	bpl.n	80028e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80028da:	6801      	ldr	r1, [r0, #0]
 80028dc:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80028de:	684a      	ldr	r2, [r1, #4]
 80028e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028e4:	4322      	orrs	r2, r4
 80028e6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80028e8:	06dc      	lsls	r4, r3, #27
 80028ea:	d506      	bpl.n	80028fa <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80028ec:	6801      	ldr	r1, [r0, #0]
 80028ee:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80028f0:	688a      	ldr	r2, [r1, #8]
 80028f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028f6:	4322      	orrs	r2, r4
 80028f8:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80028fa:	0699      	lsls	r1, r3, #26
 80028fc:	d506      	bpl.n	800290c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80028fe:	6801      	ldr	r1, [r0, #0]
 8002900:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002902:	688a      	ldr	r2, [r1, #8]
 8002904:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002908:	4322      	orrs	r2, r4
 800290a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800290c:	065a      	lsls	r2, r3, #25
 800290e:	d510      	bpl.n	8002932 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002910:	6801      	ldr	r1, [r0, #0]
 8002912:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002914:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002916:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800291a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800291e:	ea42 0204 	orr.w	r2, r2, r4
 8002922:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002924:	d105      	bne.n	8002932 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002926:	684a      	ldr	r2, [r1, #4]
 8002928:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800292a:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800292e:	4322      	orrs	r2, r4
 8002930:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002932:	061b      	lsls	r3, r3, #24
 8002934:	d506      	bpl.n	8002944 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002936:	6802      	ldr	r2, [r0, #0]
 8002938:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800293a:	6853      	ldr	r3, [r2, #4]
 800293c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002940:	430b      	orrs	r3, r1
 8002942:	6053      	str	r3, [r2, #4]
 8002944:	bd10      	pop	{r4, pc}

08002946 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002946:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002948:	2500      	movs	r5, #0
{
 800294a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800294c:	66c5      	str	r5, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800294e:	f7fd fe93 	bl	8000678 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002952:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8002954:	4603      	mov	r3, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002956:	6812      	ldr	r2, [r2, #0]
 8002958:	0712      	lsls	r2, r2, #28
 800295a:	d409      	bmi.n	8002970 <UART_CheckIdleState+0x2a>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 800295c:	2320      	movs	r3, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800295e:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8002960:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8002964:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState= HAL_UART_STATE_READY;
 8002968:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  return HAL_OK;
}
 800296c:	b003      	add	sp, #12
 800296e:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002970:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8002974:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002978:	4620      	mov	r0, r4
 800297a:	9200      	str	r2, [sp, #0]
 800297c:	462a      	mov	r2, r5
 800297e:	f7ff fc15 	bl	80021ac <UART_WaitOnFlagUntilTimeout>
 8002982:	2800      	cmp	r0, #0
 8002984:	d0ea      	beq.n	800295c <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002986:	2003      	movs	r0, #3
 8002988:	e7f0      	b.n	800296c <UART_CheckIdleState+0x26>

0800298a <HAL_UART_Init>:
{
 800298a:	b510      	push	{r4, lr}
  if(huart == NULL)
 800298c:	4604      	mov	r4, r0
 800298e:	b360      	cbz	r0, 80029ea <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002990:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002994:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002998:	b91b      	cbnz	r3, 80029a2 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800299a:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 800299e:	f000 ffe1 	bl	8003964 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80029a2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80029a4:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029a6:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 80029a8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80029ac:	6813      	ldr	r3, [r2, #0]
 80029ae:	f023 0301 	bic.w	r3, r3, #1
 80029b2:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029b4:	f7ff fe2a 	bl	800260c <UART_SetConfig>
 80029b8:	2801      	cmp	r0, #1
 80029ba:	d016      	beq.n	80029ea <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80029be:	b113      	cbz	r3, 80029c6 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80029c0:	4620      	mov	r0, r4
 80029c2:	f7ff ff6b 	bl	800289c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029c6:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 80029c8:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029d0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029d8:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	f042 0201 	orr.w	r2, r2, #1
}
 80029e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 80029e4:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80029e6:	f7ff bfae 	b.w	8002946 <UART_CheckIdleState>
}
 80029ea:	2001      	movs	r0, #1
 80029ec:	bd10      	pop	{r4, pc}
	...

080029f0 <Set_UartMsgHandle>:
/* Private Function ------------------------------------------------------------------*/

void Set_UartMsgHandle(UART_HandleTypeDef *UART_MsgHandle)
{

	UartMsgHandle = UART_MsgHandle;
 80029f0:	4b01      	ldr	r3, [pc, #4]	; (80029f8 <Set_UartMsgHandle+0x8>)
 80029f2:	6018      	str	r0, [r3, #0]
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	200002a0 	.word	0x200002a0

080029fc <DMA1_TransferComplete>:
void DMA1_TransferComplete()
{
  /* Process Locked */
	huart2.Lock = HAL_LOCKED;

	huart2.ErrorCode = HAL_UART_ERROR_NONE;
 80029fc:	4b10      	ldr	r3, [pc, #64]	; (8002a40 <DMA1_TransferComplete+0x44>)
 80029fe:	2000      	movs	r0, #0
#if defined (USE_STM32F7XX_NUCLEO) || defined (USE_STM32L4XX_NUCLEO)
	huart2.gState = HAL_UART_STATE_BUSY_TX;
 8002a00:	2221      	movs	r2, #33	; 0x21
	huart2.ErrorCode = HAL_UART_ERROR_NONE;
 8002a02:	66d8      	str	r0, [r3, #108]	; 0x6c
	huart2.gState = HAL_UART_STATE_BUSY_TX;
 8002a04:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
#endif
	huart2.pTxBuffPtr = (uint8_t*) console_send_char;
 8002a08:	4a0e      	ldr	r2, [pc, #56]	; (8002a44 <DMA1_TransferComplete+0x48>)
#endif
  // Process Unlocked
	huart2.Lock = HAL_UNLOCKED;

  // Enable the UART Transmit data register empty Interrupt
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_TXE);
 8002a0a:	6819      	ldr	r1, [r3, #0]
	huart2.pTxBuffPtr = (uint8_t*) console_send_char;
 8002a0c:	64da      	str	r2, [r3, #76]	; 0x4c
	huart2.TxXferSize = 1;
 8002a0e:	2201      	movs	r2, #1
	huart2.TxXferCount = 1;
 8002a10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	huart2.TxXferSize = 1;
 8002a14:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_TXE);
 8002a18:	680a      	ldr	r2, [r1, #0]
 8002a1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a1e:	600a      	str	r2, [r1, #0]
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8002a20:	4a09      	ldr	r2, [pc, #36]	; (8002a48 <DMA1_TransferComplete+0x4c>)
 8002a22:	6811      	ldr	r1, [r2, #0]
 8002a24:	f041 0110 	orr.w	r1, r1, #16
 8002a28:	6011      	str	r1, [r2, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8002a2a:	6811      	ldr	r1, [r2, #0]
 8002a2c:	f041 0101 	orr.w	r1, r1, #1
 8002a30:	6011      	str	r1, [r2, #0]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF1);
 8002a32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a36:	f842 1c20 	str.w	r1, [r2, #-32]
  //LL_DMA_EnableChannel(WIFI_CONSOLE_DMA, WIFI_CONSOLE_LL_DMA);
#endif

#endif
  /* Process Unlocked */
	huart2.Lock = HAL_UNLOCKED;
 8002a3a:	f883 0068 	strb.w	r0, [r3, #104]	; 0x68
 8002a3e:	4770      	bx	lr
 8002a40:	20000204 	.word	0x20000204
 8002a44:	200014a0 	.word	0x200014a0
 8002a48:	40026028 	.word	0x40026028

08002a4c <DMA2_TransferComplete>:
void DMA2_TransferComplete()
{
    /* Process Locked */
	huart3.Lock = HAL_LOCKED;

	huart3.ErrorCode = HAL_UART_ERROR_NONE;
 8002a4c:	4b10      	ldr	r3, [pc, #64]	; (8002a90 <DMA2_TransferComplete+0x44>)
 8002a4e:	2200      	movs	r2, #0
#if defined (USE_STM32F7XX_NUCLEO) || defined (USE_STM32L4XX_NUCLEO)
	huart3.gState = HAL_UART_STATE_BUSY_TX;
 8002a50:	2121      	movs	r1, #33	; 0x21
	huart3.ErrorCode = HAL_UART_ERROR_NONE;
 8002a52:	66da      	str	r2, [r3, #108]	; 0x6c
	huart3.gState = HAL_UART_STATE_BUSY_TX;
 8002a54:	f883 1069 	strb.w	r1, [r3, #105]	; 0x69
#endif
	huart3.pTxBuffPtr = (uint8_t*) WiFi_Counter_Variables.uart_byte;
 8002a58:	490e      	ldr	r1, [pc, #56]	; (8002a94 <DMA2_TransferComplete+0x48>)
    {
		huart3->State = HAL_UART_STATE_BUSY_TX;
    }
#endif
  // Process Unlocked
	huart3.Lock = HAL_UNLOCKED;
 8002a5a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	huart3.pTxBuffPtr = (uint8_t*) WiFi_Counter_Variables.uart_byte;
 8002a5e:	64d9      	str	r1, [r3, #76]	; 0x4c
	huart3.TxXferSize = 1;
 8002a60:	2101      	movs	r1, #1

  // Enable the UART Transmit data register empty Interrupt
	__HAL_UART_ENABLE_IT(&huart3, UART_IT_TXE);
 8002a62:	681a      	ldr	r2, [r3, #0]
	huart3.TxXferCount = 1;
 8002a64:	f8a3 1052 	strh.w	r1, [r3, #82]	; 0x52
	huart3.TxXferSize = 1;
 8002a68:	f8a3 1050 	strh.w	r1, [r3, #80]	; 0x50
	__HAL_UART_ENABLE_IT(&huart3, UART_IT_TXE);
 8002a6c:	6813      	ldr	r3, [r2, #0]
 8002a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a72:	6013      	str	r3, [r2, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8002a74:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <DMA2_TransferComplete+0x4c>)
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	f042 0210 	orr.w	r2, r2, #16
 8002a7c:	601a      	str	r2, [r3, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	430a      	orrs	r2, r1
 8002a82:	601a      	str	r2, [r3, #0]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF5);
 8002a84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a88:	f843 2c7c 	str.w	r2, [r3, #-124]
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	200011dc 	.word	0x200011dc
 8002a94:	20000572 	.word	0x20000572
 8002a98:	40026088 	.word	0x40026088

08002a9c <uartSendChar>:
/** @brief Sends a character to serial port
 * @param ch Character to send
 * @retval Character sent
 */
int uartSendChar(int ch)
{
 8002a9c:	b507      	push	{r0, r1, r2, lr}
 8002a9e:	a902      	add	r1, sp, #8
	// HAL_UART_Transmit(UartHandle, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart3, (uint8_t *) &ch, 1, HAL_MAX_DELAY);
 8002aa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002aa4:	2201      	movs	r2, #1
{
 8002aa6:	f841 0d04 	str.w	r0, [r1, #-4]!
	HAL_UART_Transmit(&huart3, (uint8_t *) &ch, 1, HAL_MAX_DELAY);
 8002aaa:	4803      	ldr	r0, [pc, #12]	; (8002ab8 <uartSendChar+0x1c>)
 8002aac:	f7ff fbaf 	bl	800220e <HAL_UART_Transmit>
  return ch;
}
 8002ab0:	9801      	ldr	r0, [sp, #4]
 8002ab2:	b003      	add	sp, #12
 8002ab4:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ab8:	200011dc 	.word	0x200011dc

08002abc <uartReceiveChar>:
/** @brief Receives a character from serial port
 * @param None
 * @retval Character received
 */
int uartReceiveChar(void)
{
 8002abc:	b513      	push	{r0, r1, r4, lr}
  uint8_t ch;
	// HAL_UART_Receive(UartHandle, &ch, 1, HAL_MAX_DELAY);
	HAL_UART_Receive(&huart3, &ch, 1, HAL_MAX_DELAY);

  /* Echo character back to console */
  HAL_UART_Transmit(UartHandle, &ch, 1, HAL_MAX_DELAY);
 8002abe:	4c11      	ldr	r4, [pc, #68]	; (8002b04 <uartReceiveChar+0x48>)
	HAL_UART_Receive(&huart3, &ch, 1, HAL_MAX_DELAY);
 8002ac0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f10d 0106 	add.w	r1, sp, #6
 8002aca:	480f      	ldr	r0, [pc, #60]	; (8002b08 <uartReceiveChar+0x4c>)
 8002acc:	f7ff fbf8 	bl	80022c0 <HAL_UART_Receive>
  HAL_UART_Transmit(UartHandle, &ch, 1, HAL_MAX_DELAY);
 8002ad0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f10d 0106 	add.w	r1, sp, #6
 8002ada:	6820      	ldr	r0, [r4, #0]
 8002adc:	f7ff fb97 	bl	800220e <HAL_UART_Transmit>

  /* And cope with Windows */
  if(ch == '\r'){
 8002ae0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002ae4:	2b0d      	cmp	r3, #13
 8002ae6:	d109      	bne.n	8002afc <uartReceiveChar+0x40>
    uint8_t ret = '\n';
 8002ae8:	230a      	movs	r3, #10
 8002aea:	a902      	add	r1, sp, #8
    HAL_UART_Transmit(UartHandle, &ret, 1, HAL_MAX_DELAY);
 8002aec:	2201      	movs	r2, #1
 8002aee:	6820      	ldr	r0, [r4, #0]
    uint8_t ret = '\n';
 8002af0:	f801 3d01 	strb.w	r3, [r1, #-1]!
    HAL_UART_Transmit(UartHandle, &ret, 1, HAL_MAX_DELAY);
 8002af4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002af8:	f7ff fb89 	bl	800220e <HAL_UART_Transmit>
  }

  return ch;
}
 8002afc:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8002b00:	b002      	add	sp, #8
 8002b02:	bd10      	pop	{r4, pc}
 8002b04:	200002a0 	.word	0x200002a0
 8002b08:	200011dc 	.word	0x200011dc

08002b0c <__io_putchar>:
 * @param ch Character to print
 * @retval Character printed
 */
int __io_putchar(int ch)
{
  return uartSendChar(ch);
 8002b0c:	f7ff bfc6 	b.w	8002a9c <uartSendChar>

08002b10 <__io_getchar>:
 * @param None
 * @retval Character acquired from standard input
 */
int __io_getchar(void)
{
  return uartReceiveChar();
 8002b10:	f7ff bfd4 	b.w	8002abc <uartReceiveChar>

08002b14 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8002b14:	b508      	push	{r3, lr}

  hcrc.Instance = CRC;
 8002b16:	480a      	ldr	r0, [pc, #40]	; (8002b40 <MX_CRC_Init+0x2c>)
 8002b18:	4b0a      	ldr	r3, [pc, #40]	; (8002b44 <MX_CRC_Init+0x30>)
 8002b1a:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8002b20:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8002b22:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8002b24:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002b26:	2301      	movs	r3, #1
 8002b28:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002b2a:	f7fd fe49 	bl	80007c0 <HAL_CRC_Init>
 8002b2e:	b128      	cbz	r0, 8002b3c <MX_CRC_Init+0x28>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002b30:	213d      	movs	r1, #61	; 0x3d
 8002b32:	4805      	ldr	r0, [pc, #20]	; (8002b48 <MX_CRC_Init+0x34>)
  }

}
 8002b34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8002b38:	f000 bb48 	b.w	80031cc <_Error_Handler>
 8002b3c:	bd08      	pop	{r3, pc}
 8002b3e:	bf00      	nop
 8002b40:	200014e8 	.word	0x200014e8
 8002b44:	40023000 	.word	0x40023000
 8002b48:	08006a69 	.word	0x08006a69

08002b4c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8002b4c:	6802      	ldr	r2, [r0, #0]
{
 8002b4e:	b082      	sub	sp, #8
  if(crcHandle->Instance==CRC)
 8002b50:	4b08      	ldr	r3, [pc, #32]	; (8002b74 <HAL_CRC_MspInit+0x28>)
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d10b      	bne.n	8002b6e <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002b56:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 8002b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b5e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b62:	631a      	str	r2, [r3, #48]	; 0x30
 8002b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b6a:	9301      	str	r3, [sp, #4]
 8002b6c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8002b6e:	b002      	add	sp, #8
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	40023000 	.word	0x40023000

08002b78 <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b78:	4b16      	ldr	r3, [pc, #88]	; (8002bd4 <MX_DMA_Init+0x5c>)
{
 8002b7a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002b7e:	200c      	movs	r0, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b80:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002b84:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002b86:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002b8a:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b90:	9301      	str	r3, [sp, #4]
 8002b92:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002b94:	f7fd fd9a 	bl	80006cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002b98:	200c      	movs	r0, #12
 8002b9a:	f7fd fdcf 	bl	800073c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	200e      	movs	r0, #14
 8002ba2:	4611      	mov	r1, r2
 8002ba4:	f7fd fd92 	bl	80006cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002ba8:	200e      	movs	r0, #14
 8002baa:	f7fd fdc7 	bl	800073c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002bae:	2200      	movs	r2, #0
 8002bb0:	2010      	movs	r0, #16
 8002bb2:	4611      	mov	r1, r2
 8002bb4:	f7fd fd8a 	bl	80006cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002bb8:	2010      	movs	r0, #16
 8002bba:	f7fd fdbf 	bl	800073c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	2011      	movs	r0, #17
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	f7fd fd82 	bl	80006cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002bc8:	2011      	movs	r0, #17
 8002bca:	f7fd fdb7 	bl	800073c <HAL_NVIC_EnableIRQ>

}
 8002bce:	b003      	add	sp, #12
 8002bd0:	f85d fb04 	ldr.w	pc, [sp], #4
 8002bd4:	40023800 	.word	0x40023800

08002bd8 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bd8:	4b6d      	ldr	r3, [pc, #436]	; (8002d90 <MX_GPIO_Init+0x1b8>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002bda:	f44f 4181 	mov.w	r1, #16512	; 0x4080
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002be0:	f042 0204 	orr.w	r2, r2, #4
{
 8002be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002be8:	631a      	str	r2, [r3, #48]	; 0x30
{
 8002bea:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bee:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002bf0:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 8002da0 <MX_GPIO_Init+0x1c8>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002bf4:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bf8:	f002 0204 	and.w	r2, r2, #4
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002bfc:	4f65      	ldr	r7, [pc, #404]	; (8002d94 <MX_GPIO_Init+0x1bc>)
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002bfe:	4650      	mov	r0, sl
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002c00:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8002da4 <MX_GPIO_Init+0x1cc>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c04:	9201      	str	r2, [sp, #4]

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c06:	2503      	movs	r5, #3
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c08:	9a01      	ldr	r2, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0a:	2602      	movs	r6, #2
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002c0e:	f04f 080b 	mov.w	r8, #11
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c12:	f042 0220 	orr.w	r2, r2, #32
 8002c16:	631a      	str	r2, [r3, #48]	; 0x30
 8002c18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c1a:	f002 0220 	and.w	r2, r2, #32
 8002c1e:	9202      	str	r2, [sp, #8]
 8002c20:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c28:	631a      	str	r2, [r3, #48]	; 0x30
 8002c2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c2c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002c30:	9203      	str	r2, [sp, #12]
 8002c32:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c36:	f042 0201 	orr.w	r2, r2, #1
 8002c3a:	631a      	str	r2, [r3, #48]	; 0x30
 8002c3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c3e:	f002 0201 	and.w	r2, r2, #1
 8002c42:	9204      	str	r2, [sp, #16]
 8002c44:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c48:	f042 0202 	orr.w	r2, r2, #2
 8002c4c:	631a      	str	r2, [r3, #48]	; 0x30
 8002c4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c50:	f002 0202 	and.w	r2, r2, #2
 8002c54:	9205      	str	r2, [sp, #20]
 8002c56:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c5a:	f042 0208 	orr.w	r2, r2, #8
 8002c5e:	631a      	str	r2, [r3, #48]	; 0x30
 8002c60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c62:	f002 0208 	and.w	r2, r2, #8
 8002c66:	9206      	str	r2, [sp, #24]
 8002c68:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c70:	631a      	str	r2, [r3, #48]	; 0x30
 8002c72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c74:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8002c78:	9207      	str	r2, [sp, #28]
 8002c7a:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c7e:	f042 0210 	orr.w	r2, r2, #16
 8002c82:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002c84:	2200      	movs	r2, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c88:	f003 0310 	and.w	r3, r3, #16
 8002c8c:	9308      	str	r3, [sp, #32]
 8002c8e:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002c90:	f7fe f94c 	bl	8000f2c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002c94:	2200      	movs	r2, #0
 8002c96:	4638      	mov	r0, r7
 8002c98:	2140      	movs	r1, #64	; 0x40
 8002c9a:	f7fe f947 	bl	8000f2c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c9e:	4b3e      	ldr	r3, [pc, #248]	; (8002d98 <MX_GPIO_Init+0x1c0>)
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002ca0:	a909      	add	r1, sp, #36	; 0x24
 8002ca2:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002ca4:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ca8:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002caa:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002cac:	f7fd ffb0 	bl	8000c10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002cb0:	2332      	movs	r3, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cb2:	a909      	add	r1, sp, #36	; 0x24
 8002cb4:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb6:	f5a9 6900 	sub.w	r9, r9, #2048	; 0x800
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002cba:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cbc:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbe:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cc0:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002cc2:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cc6:	f7fd ffa3 	bl	8000c10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002cca:	2386      	movs	r3, #134	; 0x86
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ccc:	a909      	add	r1, sp, #36	; 0x24
 8002cce:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd0:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002cd2:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd4:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd6:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002cd8:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cdc:	f7fd ff98 	bl	8000c10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002ce0:	a909      	add	r1, sp, #36	; 0x24
 8002ce2:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002ce4:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ce8:	f04f 0b01 	mov.w	fp, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cec:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cee:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cf0:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002cf2:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002cf6:	f7fd ff8b 	bl	8000c10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8002cfa:	f44f 4381 	mov.w	r3, #16512	; 0x4080
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cfe:	a909      	add	r1, sp, #36	; 0x24
 8002d00:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d02:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8002d06:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d08:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d0a:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d0c:	f7fd ff80 	bl	8000c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002d10:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002d12:	a909      	add	r1, sp, #36	; 0x24
 8002d14:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d16:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002d1a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1c:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1e:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002d20:	f7fd ff76 	bl	8000c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002d24:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002d26:	a909      	add	r1, sp, #36	; 0x24
 8002d28:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d2a:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002d2c:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2e:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002d30:	f7fd ff6e 	bl	8000c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002d34:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d38:	a909      	add	r1, sp, #36	; 0x24
 8002d3a:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d3c:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002d3e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002d40:	230a      	movs	r3, #10
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d42:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002d44:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d46:	950c      	str	r5, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d48:	f7fd ff62 	bl	8000c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002d4c:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002d50:	a909      	add	r1, sp, #36	; 0x24
 8002d52:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d54:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002d56:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d58:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002d5a:	f7fd ff59 	bl	8000c10 <HAL_GPIO_Init>
  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002d5e:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d60:	a909      	add	r1, sp, #36	; 0x24
 8002d62:	480e      	ldr	r0, [pc, #56]	; (8002d9c <MX_GPIO_Init+0x1c4>)
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002d64:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d66:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d68:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6a:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d6c:	950c      	str	r5, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d6e:	f7fd ff4f 	bl	8000c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002d72:	f44f 5320 	mov.w	r3, #10240	; 0x2800
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d76:	a909      	add	r1, sp, #36	; 0x24
 8002d78:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7a:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002d7c:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7e:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d80:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002d82:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d86:	f7fd ff43 	bl	8000c10 <HAL_GPIO_Init>

}
 8002d8a:	b00f      	add	sp, #60	; 0x3c
 8002d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d90:	40023800 	.word	0x40023800
 8002d94:	40021800 	.word	0x40021800
 8002d98:	10110000 	.word	0x10110000
 8002d9c:	40020c00 	.word	0x40020c00
 8002da0:	40020400 	.word	0x40020400
 8002da4:	40020800 	.word	0x40020800

08002da8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002da8:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8002daa:	4815      	ldr	r0, [pc, #84]	; (8002e00 <MX_I2C1_Init+0x58>)
  hi2c1.Init.Timing = 0x00C0EAFF;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002dac:	2201      	movs	r2, #1
  hi2c1.Init.Timing = 0x00C0EAFF;
 8002dae:	4b15      	ldr	r3, [pc, #84]	; (8002e04 <MX_I2C1_Init+0x5c>)
 8002db0:	4915      	ldr	r1, [pc, #84]	; (8002e08 <MX_I2C1_Init+0x60>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002db2:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8002db4:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c1.Init.OwnAddress1 = 0;
 8002db8:	2300      	movs	r3, #0
 8002dba:	6083      	str	r3, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002dbc:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002dbe:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002dc0:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002dc2:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002dc4:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002dc6:	f7fe f8b6 	bl	8000f36 <HAL_I2C_Init>
 8002dca:	b118      	cbz	r0, 8002dd4 <MX_I2C1_Init+0x2c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002dcc:	2143      	movs	r1, #67	; 0x43
 8002dce:	480f      	ldr	r0, [pc, #60]	; (8002e0c <MX_I2C1_Init+0x64>)
 8002dd0:	f000 f9fc 	bl	80031cc <_Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	480a      	ldr	r0, [pc, #40]	; (8002e00 <MX_I2C1_Init+0x58>)
 8002dd8:	f7fe f8fe 	bl	8000fd8 <HAL_I2CEx_ConfigAnalogFilter>
 8002ddc:	b118      	cbz	r0, 8002de6 <MX_I2C1_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002dde:	214a      	movs	r1, #74	; 0x4a
 8002de0:	480a      	ldr	r0, [pc, #40]	; (8002e0c <MX_I2C1_Init+0x64>)
 8002de2:	f000 f9f3 	bl	80031cc <_Error_Handler>
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002de6:	2100      	movs	r1, #0
 8002de8:	4805      	ldr	r0, [pc, #20]	; (8002e00 <MX_I2C1_Init+0x58>)
 8002dea:	f7fe f91b 	bl	8001024 <HAL_I2CEx_ConfigDigitalFilter>
 8002dee:	b128      	cbz	r0, 8002dfc <MX_I2C1_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002df0:	2151      	movs	r1, #81	; 0x51
 8002df2:	4806      	ldr	r0, [pc, #24]	; (8002e0c <MX_I2C1_Init+0x64>)
  }

}
 8002df4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8002df8:	f000 b9e8 	b.w	80031cc <_Error_Handler>
 8002dfc:	bd08      	pop	{r3, pc}
 8002dfe:	bf00      	nop
 8002e00:	2000150c 	.word	0x2000150c
 8002e04:	00c0eaff 	.word	0x00c0eaff
 8002e08:	40005400 	.word	0x40005400
 8002e0c:	08006a76 	.word	0x08006a76

08002e10 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002e10:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 8002e12:	4815      	ldr	r0, [pc, #84]	; (8002e68 <MX_I2C2_Init+0x58>)
  hi2c2.Init.Timing = 0x00C0EAFF;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e14:	2201      	movs	r2, #1
  hi2c2.Init.Timing = 0x00C0EAFF;
 8002e16:	4b15      	ldr	r3, [pc, #84]	; (8002e6c <MX_I2C2_Init+0x5c>)
 8002e18:	4915      	ldr	r1, [pc, #84]	; (8002e70 <MX_I2C2_Init+0x60>)
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e1a:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.Timing = 0x00C0EAFF;
 8002e1c:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c2.Init.OwnAddress1 = 0;
 8002e20:	2300      	movs	r3, #0
 8002e22:	6083      	str	r3, [r0, #8]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e24:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002e26:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002e28:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e2a:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e2c:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002e2e:	f7fe f882 	bl	8000f36 <HAL_I2C_Init>
 8002e32:	b118      	cbz	r0, 8002e3c <MX_I2C2_Init+0x2c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002e34:	2164      	movs	r1, #100	; 0x64
 8002e36:	480f      	ldr	r0, [pc, #60]	; (8002e74 <MX_I2C2_Init+0x64>)
 8002e38:	f000 f9c8 	bl	80031cc <_Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	480a      	ldr	r0, [pc, #40]	; (8002e68 <MX_I2C2_Init+0x58>)
 8002e40:	f7fe f8ca 	bl	8000fd8 <HAL_I2CEx_ConfigAnalogFilter>
 8002e44:	b118      	cbz	r0, 8002e4e <MX_I2C2_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002e46:	216b      	movs	r1, #107	; 0x6b
 8002e48:	480a      	ldr	r0, [pc, #40]	; (8002e74 <MX_I2C2_Init+0x64>)
 8002e4a:	f000 f9bf 	bl	80031cc <_Error_Handler>
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002e4e:	2100      	movs	r1, #0
 8002e50:	4805      	ldr	r0, [pc, #20]	; (8002e68 <MX_I2C2_Init+0x58>)
 8002e52:	f7fe f8e7 	bl	8001024 <HAL_I2CEx_ConfigDigitalFilter>
 8002e56:	b128      	cbz	r0, 8002e64 <MX_I2C2_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002e58:	2172      	movs	r1, #114	; 0x72
 8002e5a:	4806      	ldr	r0, [pc, #24]	; (8002e74 <MX_I2C2_Init+0x64>)
  }

}
 8002e5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8002e60:	f000 b9b4 	b.w	80031cc <_Error_Handler>
 8002e64:	bd08      	pop	{r3, pc}
 8002e66:	bf00      	nop
 8002e68:	20001558 	.word	0x20001558
 8002e6c:	00c0eaff 	.word	0x00c0eaff
 8002e70:	40005800 	.word	0x40005800
 8002e74:	08006a76 	.word	0x08006a76

08002e78 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 8002e78:	6803      	ldr	r3, [r0, #0]
 8002e7a:	4a1e      	ldr	r2, [pc, #120]	; (8002ef4 <HAL_I2C_MspInit+0x7c>)
 8002e7c:	4293      	cmp	r3, r2
{
 8002e7e:	b500      	push	{lr}
 8002e80:	b089      	sub	sp, #36	; 0x24
  if(i2cHandle->Instance==I2C1)
 8002e82:	d11b      	bne.n	8002ebc <HAL_I2C_MspInit+0x44>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_X_SCL_Pin|I2C1_X_SDA_Pin;
 8002e84:	f44f 7340 	mov.w	r3, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e88:	a903      	add	r1, sp, #12
 8002e8a:	481b      	ldr	r0, [pc, #108]	; (8002ef8 <HAL_I2C_MspInit+0x80>)
    GPIO_InitStruct.Pin = I2C1_X_SCL_Pin|I2C1_X_SDA_Pin;
 8002e8c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e8e:	2312      	movs	r3, #18
 8002e90:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e92:	2301      	movs	r3, #1
 8002e94:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e96:	2303      	movs	r3, #3
 8002e98:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e9a:	2304      	movs	r3, #4
 8002e9c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e9e:	f7fd feb7 	bl	8000c10 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ea2:	4b16      	ldr	r3, [pc, #88]	; (8002efc <HAL_I2C_MspInit+0x84>)
 8002ea4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ea6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002eaa:	641a      	str	r2, [r3, #64]	; 0x40
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eb2:	9301      	str	r3, [sp, #4]
 8002eb4:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002eb6:	b009      	add	sp, #36	; 0x24
 8002eb8:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(i2cHandle->Instance==I2C2)
 8002ebc:	4a10      	ldr	r2, [pc, #64]	; (8002f00 <HAL_I2C_MspInit+0x88>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d1f9      	bne.n	8002eb6 <HAL_I2C_MspInit+0x3e>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ec2:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ec4:	2212      	movs	r2, #18
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ec6:	a903      	add	r1, sp, #12
 8002ec8:	480e      	ldr	r0, [pc, #56]	; (8002f04 <HAL_I2C_MspInit+0x8c>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002eca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ecc:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ece:	2201      	movs	r2, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ed0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002ed2:	2304      	movs	r3, #4
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ed4:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002ed6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ed8:	f7fd fe9a 	bl	8000c10 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002edc:	4b07      	ldr	r3, [pc, #28]	; (8002efc <HAL_I2C_MspInit+0x84>)
 8002ede:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ee0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002ee4:	641a      	str	r2, [r3, #64]	; 0x40
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eec:	9302      	str	r3, [sp, #8]
 8002eee:	9b02      	ldr	r3, [sp, #8]
}
 8002ef0:	e7e1      	b.n	8002eb6 <HAL_I2C_MspInit+0x3e>
 8002ef2:	bf00      	nop
 8002ef4:	40005400 	.word	0x40005400
 8002ef8:	40020400 	.word	0x40020400
 8002efc:	40023800 	.word	0x40023800
 8002f00:	40005800 	.word	0x40005800
 8002f04:	40021400 	.word	0x40021400

08002f08 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f08:	4b33      	ldr	r3, [pc, #204]	; (8002fd8 <SystemClock_Config+0xd0>)
 8002f0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f0c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 8002f10:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f12:	641a      	str	r2, [r3, #64]	; 0x40
{
 8002f14:	b0b9      	sub	sp, #228	; 0xe4
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f18:	2502      	movs	r5, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002f1a:	4a30      	ldr	r2, [pc, #192]	; (8002fdc <SystemClock_Config+0xd4>)
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002f1c:	2404      	movs	r4, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
  RCC_OscInitStruct.PLL.PLLN = 100;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f22:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f24:	9300      	str	r3, [sp, #0]
 8002f26:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002f28:	6813      	ldr	r3, [r2, #0]
 8002f2a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002f2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f32:	6013      	str	r3, [r2, #0]
 8002f34:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f36:	950d      	str	r5, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002f38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002f3c:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f3e:	9511      	str	r5, [sp, #68]	; 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002f40:	9301      	str	r3, [sp, #4]
 8002f42:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002f44:	2309      	movs	r3, #9
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002f46:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002f48:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002f4a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002f4e:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002f50:	2301      	movs	r3, #1
 8002f52:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f54:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f58:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002f5a:	2364      	movs	r3, #100	; 0x64
 8002f5c:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f5e:	f7fe f8bf 	bl	80010e0 <HAL_RCC_OscConfig>
 8002f62:	b100      	cbz	r0, 8002f66 <SystemClock_Config+0x5e>
 8002f64:	e7fe      	b.n	8002f64 <SystemClock_Config+0x5c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Activate the Over-Drive mode
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002f66:	f7fe f883 	bl	8001070 <HAL_PWREx_EnableOverDrive>
 8002f6a:	b100      	cbz	r0, 8002f6e <SystemClock_Config+0x66>
 8002f6c:	e7fe      	b.n	8002f6c <SystemClock_Config+0x64>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f6e:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f70:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f72:	9006      	str	r0, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002f74:	2103      	movs	r1, #3
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f76:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002f78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002f7c:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f7e:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002f80:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002f82:	f7fe fa6f 	bl	8001464 <HAL_RCC_ClockConfig>
 8002f86:	b100      	cbz	r0, 8002f8a <SystemClock_Config+0x82>
 8002f88:	e7fe      	b.n	8002f88 <SystemClock_Config+0x80>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8002f8a:	f64f 53a0 	movw	r3, #64928	; 0xfda0
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART6
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_UART7
                              |RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C2;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002f8e:	9026      	str	r0, [sp, #152]	; 0x98
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002f90:	9027      	str	r0, [sp, #156]	; 0x9c
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8002f92:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002f94:	f44f 7300 	mov.w	r3, #512	; 0x200
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002f98:	9029      	str	r0, [sp, #164]	; 0xa4
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8002f9a:	902a      	str	r0, [sp, #168]	; 0xa8
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8002f9c:	902b      	str	r0, [sp, #172]	; 0xac
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 8002f9e:	902c      	str	r0, [sp, #176]	; 0xb0
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002fa0:	902d      	str	r0, [sp, #180]	; 0xb4
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002fa2:	902e      	str	r0, [sp, #184]	; 0xb8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fa4:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002fa6:	9320      	str	r3, [sp, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fa8:	f7fe fb20 	bl	80015ec <HAL_RCCEx_PeriphCLKConfig>
 8002fac:	4605      	mov	r5, r0
 8002fae:	b100      	cbz	r0, 8002fb2 <SystemClock_Config+0xaa>
 8002fb0:	e7fe      	b.n	8002fb0 <SystemClock_Config+0xa8>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002fb2:	f7fe faf5 	bl	80015a0 <HAL_RCC_GetHCLKFreq>
 8002fb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fba:	fbb0 f0f3 	udiv	r0, r0, r3
 8002fbe:	f7fd fbd7 	bl	8000770 <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002fc2:	4620      	mov	r0, r4
 8002fc4:	f7fd fbea 	bl	800079c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002fc8:	462a      	mov	r2, r5
 8002fca:	4629      	mov	r1, r5
 8002fcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fd0:	f7fd fb7c 	bl	80006cc <HAL_NVIC_SetPriority>
}
 8002fd4:	b039      	add	sp, #228	; 0xe4
 8002fd6:	bd30      	pop	{r4, r5, pc}
 8002fd8:	40023800 	.word	0x40023800
 8002fdc:	40007000 	.word	0x40007000

08002fe0 <USART_PRINT_MSG_Configuration>:
/* USER CODE BEGIN 4 */

#ifdef USART_PRINT_MSG
void USART_PRINT_MSG_Configuration(UART_HandleTypeDef *UART_MsgHandle,
		uint32_t baud_rate) {
	UART_MsgHandle->Instance = WIFI_UART_MSG;
 8002fe0:	4b0d      	ldr	r3, [pc, #52]	; (8003018 <USART_PRINT_MSG_Configuration+0x38>)
		uint32_t baud_rate) {
 8002fe2:	b510      	push	{r4, lr}
	UART_MsgHandle->Instance = WIFI_UART_MSG;
 8002fe4:	6003      	str	r3, [r0, #0]
	UART_MsgHandle->Init.BaudRate = baud_rate;
	UART_MsgHandle->Init.WordLength = UART_WORDLENGTH_8B;
 8002fe6:	2300      	movs	r3, #0
	UART_MsgHandle->Init.BaudRate = baud_rate;
 8002fe8:	6041      	str	r1, [r0, #4]
		uint32_t baud_rate) {
 8002fea:	4604      	mov	r4, r0
	UART_MsgHandle->Init.WordLength = UART_WORDLENGTH_8B;
 8002fec:	6083      	str	r3, [r0, #8]
	UART_MsgHandle->Init.StopBits = UART_STOPBITS_1;
 8002fee:	60c3      	str	r3, [r0, #12]
	UART_MsgHandle->Init.Parity = UART_PARITY_NONE;
 8002ff0:	6103      	str	r3, [r0, #16]
	UART_MsgHandle->Init.HwFlowCtl = UART_HWCONTROL_NONE; // USART_HardwareFlowControl_RTS_CTS;
 8002ff2:	6183      	str	r3, [r0, #24]
	UART_MsgHandle->Init.Mode = UART_MODE_TX_RX;
 8002ff4:	230c      	movs	r3, #12
 8002ff6:	6143      	str	r3, [r0, #20]

	if (HAL_UART_DeInit(UART_MsgHandle) != HAL_OK) {
 8002ff8:	f7ff f87f 	bl	80020fa <HAL_UART_DeInit>
 8002ffc:	b100      	cbz	r0, 8003000 <USART_PRINT_MSG_Configuration+0x20>
 8002ffe:	e7fe      	b.n	8002ffe <USART_PRINT_MSG_Configuration+0x1e>
		Error_Handler();
	}
	if (HAL_UART_Init(UART_MsgHandle) != HAL_OK) {
 8003000:	4620      	mov	r0, r4
 8003002:	f7ff fcc2 	bl	800298a <HAL_UART_Init>
 8003006:	b100      	cbz	r0, 800300a <USART_PRINT_MSG_Configuration+0x2a>
 8003008:	e7fe      	b.n	8003008 <USART_PRINT_MSG_Configuration+0x28>
		Error_Handler();
	}
#ifdef WIFI_USE_VCOM
	/*## -1- Enable USART2 DMAT & DMAR #################################################*/
	UART_MsgHandle->Instance->CR3 |= 0x00000040;
 800300a:	6822      	ldr	r2, [r4, #0]
 800300c:	6893      	ldr	r3, [r2, #8]
 800300e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003012:	6093      	str	r3, [r2, #8]
 8003014:	bd10      	pop	{r4, pc}
 8003016:	bf00      	nop
 8003018:	40004800 	.word	0x40004800

0800301c <main>:
{
 800301c:	b510      	push	{r4, lr}
	setvbuf(stdin, NULL, _IONBF, 0);
 800301e:	4c58      	ldr	r4, [pc, #352]	; (8003180 <main+0x164>)
 8003020:	2300      	movs	r3, #0
 8003022:	2202      	movs	r2, #2
 8003024:	6820      	ldr	r0, [r4, #0]
 8003026:	4619      	mov	r1, r3
{
 8003028:	ed2d 8b04 	vpush	{d8-d9}
	setvbuf(stdin, NULL, _IONBF, 0);
 800302c:	6840      	ldr	r0, [r0, #4]
 800302e:	f001 fe6d 	bl	8004d0c <setvbuf>
	setvbuf(stdout, NULL, _IONBF, 0);
 8003032:	2300      	movs	r3, #0
 8003034:	6820      	ldr	r0, [r4, #0]
 8003036:	2202      	movs	r2, #2
 8003038:	4619      	mov	r1, r3
	 	 ssi_update(locx,locy,locz,accelx,accely,accelz,gyrox,gyroy,gyroz,dist,spd,move,temp,pssr,humd,sts);
 800303a:	ed9f 9a52 	vldr	s18, [pc, #328]	; 8003184 <main+0x168>
	setvbuf(stdout, NULL, _IONBF, 0);
 800303e:	6880      	ldr	r0, [r0, #8]
 8003040:	f001 fe64 	bl	8004d0c <setvbuf>
	setvbuf(stderr, NULL, _IONBF, 0);
 8003044:	2300      	movs	r3, #0
 8003046:	6820      	ldr	r0, [r4, #0]
 8003048:	2202      	movs	r2, #2
 800304a:	4619      	mov	r1, r3
	 	 ssi_update(locx,locy,locz,accelx,accely,accelz,gyrox,gyroy,gyroz,dist,spd,move,temp,pssr,humd,sts);
 800304c:	eddf 8a4e 	vldr	s17, [pc, #312]	; 8003188 <main+0x16c>
	setvbuf(stderr, NULL, _IONBF, 0);
 8003050:	68c0      	ldr	r0, [r0, #12]
 8003052:	f001 fe5b 	bl	8004d0c <setvbuf>
	 	 ssi_update(locx,locy,locz,accelx,accely,accelz,gyrox,gyroy,gyroz,dist,spd,move,temp,pssr,humd,sts);
 8003056:	ed9f 8a4d 	vldr	s16, [pc, #308]	; 800318c <main+0x170>
  HAL_Init();
 800305a:	f7fd faf5 	bl	8000648 <HAL_Init>
  SystemClock_Config();
 800305e:	f7ff ff53 	bl	8002f08 <SystemClock_Config>
  MX_GPIO_Init();
 8003062:	f7ff fdb9 	bl	8002bd8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003066:	f7ff fd87 	bl	8002b78 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800306a:	f000 fc37 	bl	80038dc <MX_USART3_UART_Init>
  MX_CRC_Init();
 800306e:	f7ff fd51 	bl	8002b14 <MX_CRC_Init>
  MX_I2C1_Init();
 8003072:	f7ff fe99 	bl	8002da8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8003076:	f7ff fecb 	bl	8002e10 <MX_I2C2_Init>
  MX_RTC_Init();
 800307a:	f000 f8a9 	bl	80031d0 <MX_RTC_Init>
  MX_SPI1_Init();
 800307e:	f000 f8d3 	bl	8003228 <MX_SPI1_Init>
  MX_SPI2_Init();
 8003082:	f000 f8fb 	bl	800327c <MX_SPI2_Init>
  MX_TIM1_Init();
 8003086:	f000 fa83 	bl	8003590 <MX_TIM1_Init>
  MX_TIM2_Init();
 800308a:	f000 fab7 	bl	80035fc <MX_TIM2_Init>
  MX_TIM3_Init();
 800308e:	f000 fae9 	bl	8003664 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003092:	f000 fb1f 	bl	80036d4 <MX_TIM4_Init>
  MX_UART5_Init();
 8003096:	f000 fb99 	bl	80037cc <MX_UART5_Init>
  MX_UART7_Init();
 800309a:	f000 fbb9 	bl	8003810 <MX_UART7_Init>
  MX_UART8_Init();
 800309e:	f000 fbd9 	bl	8003854 <MX_UART8_Init>
  MX_USART2_UART_Init();
 80030a2:	f000 fbf9 	bl	8003898 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80030a6:	f000 fc3b 	bl	8003920 <MX_USART6_UART_Init>
	USART_PRINT_MSG_Configuration(&huart3, 115200);
 80030aa:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80030ae:	4838      	ldr	r0, [pc, #224]	; (8003190 <main+0x174>)
 80030b0:	f7ff ff96 	bl	8002fe0 <USART_PRINT_MSG_Configuration>
	Set_UartMsgHandle(&huart3); //this is required for the console handler initialization
 80030b4:	4836      	ldr	r0, [pc, #216]	; (8003190 <main+0x174>)
 80030b6:	f7ff fc9b 	bl	80029f0 <Set_UartMsgHandle>
	printf("\r\n Please wait... \r\n");
 80030ba:	4836      	ldr	r0, [pc, #216]	; (8003194 <main+0x178>)
 80030bc:	f001 fe0e 	bl	8004cdc <puts>
	USART2->CR3 |= 0x00000040;
 80030c0:	4a35      	ldr	r2, [pc, #212]	; (8003198 <main+0x17c>)
	HAL_Delay(2000);
 80030c2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
	USART2->CR3 |= 0x00000040;
 80030c6:	6893      	ldr	r3, [r2, #8]
 80030c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030cc:	6093      	str	r3, [r2, #8]
	HAL_Delay(2000);
 80030ce:	f7fd fad9 	bl	8000684 <HAL_Delay>
	printf("\r\n Ready... Updating ... \r\n");
 80030d2:	4832      	ldr	r0, [pc, #200]	; (800319c <main+0x180>)
 80030d4:	f001 fe02 	bl	8004cdc <puts>
 		 strcpy(sts, "Status GOOD");
 80030d8:	2400      	movs	r4, #0
 80030da:	4931      	ldr	r1, [pc, #196]	; (80031a0 <main+0x184>)
 80030dc:	4620      	mov	r0, r4
 80030de:	f001 ff2a 	bl	8004f36 <strcpy>
	 	 ssi_update(locx,locy,locz,accelx,accely,accelz,gyrox,gyroy,gyroz,dist,spd,move,temp,pssr,humd,sts);
 80030e2:	eeb0 7a49 	vmov.f32	s14, s18
 80030e6:	eef0 6a68 	vmov.f32	s13, s17
 80030ea:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80031a4 <main+0x188>
 80030ee:	eeb0 6a48 	vmov.f32	s12, s16
 80030f2:	ed9f 5a2d 	vldr	s10, [pc, #180]	; 80031a8 <main+0x18c>
 80030f6:	eddf 4a2d 	vldr	s9, [pc, #180]	; 80031ac <main+0x190>
 80030fa:	eeb0 2a0c 	vmov.f32	s4, #12	; 0x40600000  3.5
 80030fe:	ed9f 4a2c 	vldr	s8, [pc, #176]	; 80031b0 <main+0x194>
 8003102:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8003106:	eddf 3a2b 	vldr	s7, [pc, #172]	; 80031b4 <main+0x198>
 800310a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800310e:	ed9f 3a2a 	vldr	s6, [pc, #168]	; 80031b8 <main+0x19c>
 8003112:	4620      	mov	r0, r4
 8003114:	eddf 2a29 	vldr	s5, [pc, #164]	; 80031bc <main+0x1a0>
 8003118:	eddf 1a29 	vldr	s3, [pc, #164]	; 80031c0 <main+0x1a4>
 800311c:	ed9f 1a29 	vldr	s2, [pc, #164]	; 80031c4 <main+0x1a8>
 8003120:	f000 fdfa 	bl	8003d18 <ssi_update>
	 	 HAL_Delay(5000);
 8003124:	f241 3088 	movw	r0, #5000	; 0x1388
 8003128:	f7fd faac 	bl	8000684 <HAL_Delay>
 		 strcpy(sts, "Status BAD");
 800312c:	4926      	ldr	r1, [pc, #152]	; (80031c8 <main+0x1ac>)
 800312e:	4620      	mov	r0, r4
 8003130:	f001 ff01 	bl	8004f36 <strcpy>
	 	 ssi_update(locx,locy,locz,accelx,accely,accelz,gyrox,gyroy,gyroz,dist,spd,move,temp,pssr,humd,sts);
 8003134:	4620      	mov	r0, r4
 8003136:	eeb0 7a49 	vmov.f32	s14, s18
 800313a:	eddf 5a1a 	vldr	s11, [pc, #104]	; 80031a4 <main+0x188>
 800313e:	eef0 6a68 	vmov.f32	s13, s17
 8003142:	ed9f 5a19 	vldr	s10, [pc, #100]	; 80031a8 <main+0x18c>
 8003146:	eeb0 6a48 	vmov.f32	s12, s16
 800314a:	eddf 4a18 	vldr	s9, [pc, #96]	; 80031ac <main+0x190>
 800314e:	ed9f 4a18 	vldr	s8, [pc, #96]	; 80031b0 <main+0x194>
 8003152:	eeb0 2a0c 	vmov.f32	s4, #12	; 0x40600000  3.5
 8003156:	eddf 3a17 	vldr	s7, [pc, #92]	; 80031b4 <main+0x198>
 800315a:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 800315e:	ed9f 3a16 	vldr	s6, [pc, #88]	; 80031b8 <main+0x19c>
 8003162:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8003166:	eddf 2a15 	vldr	s5, [pc, #84]	; 80031bc <main+0x1a0>
 800316a:	eddf 1a15 	vldr	s3, [pc, #84]	; 80031c0 <main+0x1a4>
 800316e:	ed9f 1a15 	vldr	s2, [pc, #84]	; 80031c4 <main+0x1a8>
 8003172:	f000 fdd1 	bl	8003d18 <ssi_update>
	 	HAL_Delay(5000);
 8003176:	f241 3088 	movw	r0, #5000	; 0x1388
 800317a:	f7fd fa83 	bl	8000684 <HAL_Delay>
 800317e:	e7ab      	b.n	80030d8 <main+0xbc>
 8003180:	2000000c 	.word	0x2000000c
 8003184:	40875c29 	.word	0x40875c29
 8003188:	447a0000 	.word	0x447a0000
 800318c:	42000000 	.word	0x42000000
 8003190:	200011dc 	.word	0x200011dc
 8003194:	08006a83 	.word	0x08006a83
 8003198:	40004400 	.word	0x40004400
 800319c:	08006a97 	.word	0x08006a97
 80031a0:	08006ab2 	.word	0x08006ab2
 80031a4:	435e0000 	.word	0x435e0000
 80031a8:	42280000 	.word	0x42280000
 80031ac:	42220000 	.word	0x42220000
 80031b0:	408ccccd 	.word	0x408ccccd
 80031b4:	4089999a 	.word	0x4089999a
 80031b8:	40866666 	.word	0x40866666
 80031bc:	00000000 	.word	0x00000000
 80031c0:	40533333 	.word	0x40533333
 80031c4:	41f26666 	.word	0x41f26666
 80031c8:	08006abe 	.word	0x08006abe

080031cc <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80031cc:	e7fe      	b.n	80031cc <_Error_Handler>
	...

080031d0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80031d0:	b508      	push	{r3, lr}

    /**Initialize RTC Only 
    */
  hrtc.Instance = RTC;
 80031d2:	480b      	ldr	r0, [pc, #44]	; (8003200 <MX_RTC_Init+0x30>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
 80031d4:	227f      	movs	r2, #127	; 0x7f
  hrtc.Instance = RTC;
 80031d6:	4b0b      	ldr	r3, [pc, #44]	; (8003204 <MX_RTC_Init+0x34>)
  hrtc.Init.AsynchPrediv = 127;
 80031d8:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 80031da:	22ff      	movs	r2, #255	; 0xff
  hrtc.Instance = RTC;
 80031dc:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80031de:	2300      	movs	r3, #0
  hrtc.Init.SynchPrediv = 255;
 80031e0:	60c2      	str	r2, [r0, #12]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80031e2:	6043      	str	r3, [r0, #4]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80031e4:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80031e6:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80031e8:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80031ea:	f7fe fcc7 	bl	8001b7c <HAL_RTC_Init>
 80031ee:	b128      	cbz	r0, 80031fc <MX_RTC_Init+0x2c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80031f0:	2140      	movs	r1, #64	; 0x40
 80031f2:	4805      	ldr	r0, [pc, #20]	; (8003208 <MX_RTC_Init+0x38>)
  }

}
 80031f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80031f8:	f7ff bfe8 	b.w	80031cc <_Error_Handler>
 80031fc:	bd08      	pop	{r3, pc}
 80031fe:	bf00      	nop
 8003200:	200015a4 	.word	0x200015a4
 8003204:	40002800 	.word	0x40002800
 8003208:	08006ac9 	.word	0x08006ac9

0800320c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 800320c:	6802      	ldr	r2, [r0, #0]
 800320e:	4b04      	ldr	r3, [pc, #16]	; (8003220 <HAL_RTC_MspInit+0x14>)
 8003210:	429a      	cmp	r2, r3
 8003212:	d104      	bne.n	800321e <HAL_RTC_MspInit+0x12>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003214:	4a03      	ldr	r2, [pc, #12]	; (8003224 <HAL_RTC_MspInit+0x18>)
 8003216:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003218:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800321c:	6713      	str	r3, [r2, #112]	; 0x70
 800321e:	4770      	bx	lr
 8003220:	40002800 	.word	0x40002800
 8003224:	40023800 	.word	0x40023800

08003228 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003228:	b508      	push	{r3, lr}

  hspi1.Instance = SPI1;
 800322a:	4811      	ldr	r0, [pc, #68]	; (8003270 <MX_SPI1_Init+0x48>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800322c:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8003230:	f44f 7240 	mov.w	r2, #768	; 0x300
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003234:	490f      	ldr	r1, [pc, #60]	; (8003274 <MX_SPI1_Init+0x4c>)
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8003236:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003238:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800323c:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003240:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003242:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8003244:	2207      	movs	r2, #7
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003246:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003248:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800324a:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800324c:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800324e:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003250:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003252:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003254:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003256:	2308      	movs	r3, #8
  hspi1.Init.CRCPolynomial = 7;
 8003258:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800325a:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800325c:	f7fe fcd0 	bl	8001c00 <HAL_SPI_Init>
 8003260:	b128      	cbz	r0, 800326e <MX_SPI1_Init+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003262:	2148      	movs	r1, #72	; 0x48
 8003264:	4804      	ldr	r0, [pc, #16]	; (8003278 <MX_SPI1_Init+0x50>)
  }

}
 8003266:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 800326a:	f7ff bfaf 	b.w	80031cc <_Error_Handler>
 800326e:	bd08      	pop	{r3, pc}
 8003270:	20001628 	.word	0x20001628
 8003274:	40013000 	.word	0x40013000
 8003278:	08006ad6 	.word	0x08006ad6

0800327c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800327c:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
 800327e:	4811      	ldr	r0, [pc, #68]	; (80032c4 <MX_SPI2_Init+0x48>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003280:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8003284:	f44f 7240 	mov.w	r2, #768	; 0x300
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003288:	490f      	ldr	r1, [pc, #60]	; (80032c8 <MX_SPI2_Init+0x4c>)
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800328a:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800328c:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003290:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003294:	2300      	movs	r3, #0
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003296:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 7;
 8003298:	2207      	movs	r2, #7
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800329a:	6083      	str	r3, [r0, #8]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800329c:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800329e:	6143      	str	r3, [r0, #20]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032a0:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80032a2:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80032a4:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032a6:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80032a8:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80032aa:	2308      	movs	r3, #8
  hspi2.Init.CRCPolynomial = 7;
 80032ac:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80032ae:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80032b0:	f7fe fca6 	bl	8001c00 <HAL_SPI_Init>
 80032b4:	b128      	cbz	r0, 80032c2 <MX_SPI2_Init+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
 80032b6:	2160      	movs	r1, #96	; 0x60
 80032b8:	4804      	ldr	r0, [pc, #16]	; (80032cc <MX_SPI2_Init+0x50>)
  }

}
 80032ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80032be:	f7ff bf85 	b.w	80031cc <_Error_Handler>
 80032c2:	bd08      	pop	{r3, pc}
 80032c4:	200015c4 	.word	0x200015c4
 80032c8:	40003800 	.word	0x40003800
 80032cc:	08006ad6 	.word	0x08006ad6

080032d0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 80032d0:	6803      	ldr	r3, [r0, #0]
 80032d2:	4a27      	ldr	r2, [pc, #156]	; (8003370 <HAL_SPI_MspInit+0xa0>)
 80032d4:	4293      	cmp	r3, r2
{
 80032d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032d8:	b089      	sub	sp, #36	; 0x24
  if(spiHandle->Instance==SPI1)
 80032da:	d123      	bne.n	8003324 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80032dc:	4b25      	ldr	r3, [pc, #148]	; (8003374 <HAL_SPI_MspInit+0xa4>)
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032de:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e0:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032e2:	2503      	movs	r5, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 80032e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80032e6:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032e8:	a903      	add	r1, sp, #12
 80032ea:	4823      	ldr	r0, [pc, #140]	; (8003378 <HAL_SPI_MspInit+0xa8>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80032ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80032f0:	645a      	str	r2, [r3, #68]	; 0x44
 80032f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f4:	9704      	str	r7, [sp, #16]
    __HAL_RCC_SPI1_CLK_ENABLE();
 80032f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fa:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032fc:	9506      	str	r5, [sp, #24]
    __HAL_RCC_SPI1_CLK_ENABLE();
 80032fe:	9301      	str	r3, [sp, #4]
 8003300:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003302:	2360      	movs	r3, #96	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003304:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003306:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003308:	f7fd fc82 	bl	8000c10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800330c:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800330e:	a903      	add	r1, sp, #12
 8003310:	481a      	ldr	r0, [pc, #104]	; (800337c <HAL_SPI_MspInit+0xac>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003312:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003314:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003316:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003318:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800331a:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800331c:	f7fd fc78 	bl	8000c10 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003320:	b009      	add	sp, #36	; 0x24
 8003322:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(spiHandle->Instance==SPI2)
 8003324:	4a16      	ldr	r2, [pc, #88]	; (8003380 <HAL_SPI_MspInit+0xb0>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d1fa      	bne.n	8003320 <HAL_SPI_MspInit+0x50>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800332a:	4b12      	ldr	r3, [pc, #72]	; (8003374 <HAL_SPI_MspInit+0xa4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800332c:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332e:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003330:	2503      	movs	r5, #3
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003332:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003334:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003336:	4813      	ldr	r0, [pc, #76]	; (8003384 <HAL_SPI_MspInit+0xb4>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003338:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800333c:	641a      	str	r2, [r3, #64]	; 0x40
 800333e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003340:	9704      	str	r7, [sp, #16]
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003346:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003348:	9506      	str	r5, [sp, #24]
    __HAL_RCC_SPI2_CLK_ENABLE();
 800334a:	9302      	str	r3, [sp, #8]
 800334c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800334e:	230c      	movs	r3, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003350:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003352:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003356:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003358:	f7fd fc5a 	bl	8000c10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800335c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003360:	9704      	str	r7, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003362:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003364:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003366:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003368:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800336a:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800336c:	4806      	ldr	r0, [pc, #24]	; (8003388 <HAL_SPI_MspInit+0xb8>)
 800336e:	e7d5      	b.n	800331c <HAL_SPI_MspInit+0x4c>
 8003370:	40013000 	.word	0x40013000
 8003374:	40023800 	.word	0x40023800
 8003378:	40020000 	.word	0x40020000
 800337c:	40020c00 	.word	0x40020c00
 8003380:	40003800 	.word	0x40003800
 8003384:	40020800 	.word	0x40020800
 8003388:	40020400 	.word	0x40020400

0800338c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800338c:	4b21      	ldr	r3, [pc, #132]	; (8003414 <HAL_MspInit+0x88>)
{
 800338e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8003390:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003392:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8003394:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003398:	641a      	str	r2, [r3, #64]	; 0x40
 800339a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800339c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80033a0:	9200      	str	r2, [sp, #0]
 80033a2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033aa:	645a      	str	r2, [r3, #68]	; 0x44
 80033ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033b2:	9301      	str	r3, [sp, #4]
 80033b4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033b6:	f7fd f977 	bl	80006a8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80033ba:	2200      	movs	r2, #0
 80033bc:	f06f 000b 	mvn.w	r0, #11
 80033c0:	4611      	mov	r1, r2
 80033c2:	f7fd f983 	bl	80006cc <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80033c6:	2200      	movs	r2, #0
 80033c8:	f06f 000a 	mvn.w	r0, #10
 80033cc:	4611      	mov	r1, r2
 80033ce:	f7fd f97d 	bl	80006cc <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80033d2:	2200      	movs	r2, #0
 80033d4:	f06f 0009 	mvn.w	r0, #9
 80033d8:	4611      	mov	r1, r2
 80033da:	f7fd f977 	bl	80006cc <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80033de:	2200      	movs	r2, #0
 80033e0:	f06f 0004 	mvn.w	r0, #4
 80033e4:	4611      	mov	r1, r2
 80033e6:	f7fd f971 	bl	80006cc <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80033ea:	2200      	movs	r2, #0
 80033ec:	f06f 0003 	mvn.w	r0, #3
 80033f0:	4611      	mov	r1, r2
 80033f2:	f7fd f96b 	bl	80006cc <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80033f6:	2200      	movs	r2, #0
 80033f8:	f06f 0001 	mvn.w	r0, #1
 80033fc:	4611      	mov	r1, r2
 80033fe:	f7fd f965 	bl	80006cc <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003402:	2200      	movs	r2, #0
 8003404:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003408:	4611      	mov	r1, r2
 800340a:	f7fd f95f 	bl	80006cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800340e:	b003      	add	sp, #12
 8003410:	f85d fb04 	ldr.w	pc, [sp], #4
 8003414:	40023800 	.word	0x40023800

08003418 <NMI_Handler>:
 8003418:	4770      	bx	lr

0800341a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800341a:	e7fe      	b.n	800341a <HardFault_Handler>

0800341c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800341c:	e7fe      	b.n	800341c <MemManage_Handler>

0800341e <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800341e:	e7fe      	b.n	800341e <BusFault_Handler>

08003420 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003420:	e7fe      	b.n	8003420 <UsageFault_Handler>

08003422 <SVC_Handler>:
 8003422:	4770      	bx	lr

08003424 <DebugMon_Handler>:
 8003424:	4770      	bx	lr

08003426 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8003426:	4770      	bx	lr

08003428 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003428:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800342a:	f7fd f919 	bl	8000660 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800342e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8003432:	f7fd b9c0 	b.w	80007b6 <HAL_SYSTICK_IRQHandler>
	...

08003438 <TIM3_IRQHandler>:
 * @brief  This function handles TIM interrupt request.
 * @param  None
 * @retval None
 */
void TIM3_IRQHandler(void) {
	HAL_TIM_IRQHandler(&htim3);
 8003438:	4801      	ldr	r0, [pc, #4]	; (8003440 <TIM3_IRQHandler+0x8>)
 800343a:	f7fe bc5e 	b.w	8001cfa <HAL_TIM_IRQHandler>
 800343e:	bf00      	nop
 8003440:	2000168c 	.word	0x2000168c

08003444 <TIM2_IRQHandler>:
 * @brief  This function handles TIM interrupt request.
 * @param  None
 * @retval None
 */
void TIM2_IRQHandler(void) {
	HAL_TIM_IRQHandler(&htim2);
 8003444:	4801      	ldr	r0, [pc, #4]	; (800344c <TIM2_IRQHandler+0x8>)
 8003446:	f7fe bc58 	b.w	8001cfa <HAL_TIM_IRQHandler>
 800344a:	bf00      	nop
 800344c:	200016cc 	.word	0x200016cc

08003450 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003450:	4801      	ldr	r0, [pc, #4]	; (8003458 <DMA1_Stream3_IRQHandler+0x8>)
 8003452:	f7fd bb23 	b.w	8000a9c <HAL_DMA_IRQHandler>
 8003456:	bf00      	nop
 8003458:	20001380 	.word	0x20001380

0800345c <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800345c:	4801      	ldr	r0, [pc, #4]	; (8003464 <DMA1_Stream6_IRQHandler+0x8>)
 800345e:	f7fd bb1d 	b.w	8000a9c <HAL_DMA_IRQHandler>
 8003462:	bf00      	nop
 8003464:	20001440 	.word	0x20001440

08003468 <HAL_UART_RxCpltCallback>:
 8003468:	4770      	bx	lr

0800346a <HAL_UART_TxCpltCallback>:
 * @brief  HAL_UART_TxCpltCallback
 *         Tx Transfer completed callback
 * @param  UsartHandle: UART handle
 * @retval None
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandleArg) {
 800346a:	4770      	bx	lr

0800346c <HAL_UART_ErrorCallback>:
 *         add your own implementation.
 * @retval None
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle) {
	// WiFi_HAL_UART_ErrorCallback(UartHandle);
	printf("UART ERROR!!!");
 800346c:	4801      	ldr	r0, [pc, #4]	; (8003474 <HAL_UART_ErrorCallback+0x8>)
 800346e:	f001 bbc1 	b.w	8004bf4 <iprintf>
 8003472:	bf00      	nop
 8003474:	08006ae3 	.word	0x08006ae3

08003478 <USART2_IRQHandler>:
 * @param  None
 * @retval None
 */
void USARTx_IRQHandler(void) {
	// printf("WIFI UART IRQ");
	HAL_UART_IRQHandler(&huart2);
 8003478:	4801      	ldr	r0, [pc, #4]	; (8003480 <USART2_IRQHandler+0x8>)
 800347a:	f7ff b80f 	b.w	800249c <HAL_UART_IRQHandler>
 800347e:	bf00      	nop
 8003480:	20000204 	.word	0x20000204

08003484 <USART3_IRQHandler>:
 * @retval None
 */
#ifdef USART_PRINT_MSG
void USARTx_PRINT_IRQHandler(void) {
	// printf("CONSOLE UART IRQ");
	HAL_UART_IRQHandler(&huart3);
 8003484:	4801      	ldr	r0, [pc, #4]	; (800348c <USART3_IRQHandler+0x8>)
 8003486:	f7ff b809 	b.w	800249c <HAL_UART_IRQHandler>
 800348a:	bf00      	nop
 800348c:	200011dc 	.word	0x200011dc

08003490 <DMA1_Stream1_IRQHandler>:
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF1)==(DMA_LISR_TCIF1));
 8003490:	4b04      	ldr	r3, [pc, #16]	; (80034a4 <DMA1_Stream1_IRQHandler+0x14>)
 8003492:	681a      	ldr	r2, [r3, #0]

#ifdef USE_STM32F7XX_NUCLEO
// CONSOLE - UART - RX
void DMA1_Stream1_IRQHandler(void) {
	//printf("Reading from console\r\n");
	if (LL_DMA_IsActiveFlag_TC1(DMA1) == 1) {
 8003494:	0512      	lsls	r2, r2, #20
 8003496:	d504      	bpl.n	80034a2 <DMA1_Stream1_IRQHandler+0x12>
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF1);
 8003498:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800349c:	609a      	str	r2, [r3, #8]
		LL_DMA_ClearFlag_TC1(DMA1);
		DMA1_TransferComplete();
 800349e:	f7ff baad 	b.w	80029fc <DMA1_TransferComplete>
 80034a2:	4770      	bx	lr
 80034a4:	40026000 	.word	0x40026000

080034a8 <DMA1_Stream5_IRQHandler>:
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF5)==(DMA_HISR_TCIF5));
 80034a8:	4b04      	ldr	r3, [pc, #16]	; (80034bc <DMA1_Stream5_IRQHandler+0x14>)
 80034aa:	685a      	ldr	r2, [r3, #4]
}

// WIFI - UART - RX
void DMA1_Stream5_IRQHandler(void) {
	// printf("Reading from WIFI UART\r\n");
	if (LL_DMA_IsActiveFlag_TC5(DMA1) == 1) {
 80034ac:	0512      	lsls	r2, r2, #20
 80034ae:	d504      	bpl.n	80034ba <DMA1_Stream5_IRQHandler+0x12>
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF5);
 80034b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034b4:	60da      	str	r2, [r3, #12]
		LL_DMA_ClearFlag_TC5(DMA1);
		DMA2_TransferComplete();
 80034b6:	f7ff bac9 	b.w	8002a4c <DMA2_TransferComplete>
 80034ba:	4770      	bx	lr
 80034bc:	40026000 	.word	0x40026000

080034c0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 80034c0:	b570      	push	{r4, r5, r6, lr}
 80034c2:	460e      	mov	r6, r1
 80034c4:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034c6:	460c      	mov	r4, r1
 80034c8:	1ba3      	subs	r3, r4, r6
 80034ca:	429d      	cmp	r5, r3
 80034cc:	dc01      	bgt.n	80034d2 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80034ce:	4628      	mov	r0, r5
 80034d0:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80034d2:	f7ff fb1d 	bl	8002b10 <__io_getchar>
 80034d6:	f804 0b01 	strb.w	r0, [r4], #1
 80034da:	e7f5      	b.n	80034c8 <_read+0x8>

080034dc <_write>:

int _write(int file, char *ptr, int len)
{
 80034dc:	b570      	push	{r4, r5, r6, lr}
 80034de:	460e      	mov	r6, r1
 80034e0:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034e2:	460c      	mov	r4, r1
 80034e4:	1ba3      	subs	r3, r4, r6
 80034e6:	429d      	cmp	r5, r3
 80034e8:	dc01      	bgt.n	80034ee <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80034ea:	4628      	mov	r0, r5
 80034ec:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80034ee:	f814 0b01 	ldrb.w	r0, [r4], #1
 80034f2:	f7ff fb0b 	bl	8002b0c <__io_putchar>
 80034f6:	e7f5      	b.n	80034e4 <_write+0x8>

080034f8 <_sbrk>:

caddr_t _sbrk(int incr)
{
 80034f8:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80034fa:	4b0a      	ldr	r3, [pc, #40]	; (8003524 <_sbrk+0x2c>)
{
 80034fc:	4602      	mov	r2, r0
	if (heap_end == 0)
 80034fe:	6819      	ldr	r1, [r3, #0]
 8003500:	b909      	cbnz	r1, 8003506 <_sbrk+0xe>
		heap_end = &end;
 8003502:	4909      	ldr	r1, [pc, #36]	; (8003528 <_sbrk+0x30>)
 8003504:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8003506:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8003508:	4669      	mov	r1, sp
 800350a:	4402      	add	r2, r0
 800350c:	428a      	cmp	r2, r1
 800350e:	d906      	bls.n	800351e <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003510:	f000 fcbe 	bl	8003e90 <__errno>
 8003514:	230c      	movs	r3, #12
 8003516:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003518:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800351c:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800351e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8003520:	bd08      	pop	{r3, pc}
 8003522:	bf00      	nop
 8003524:	200001f8 	.word	0x200001f8
 8003528:	20001950 	.word	0x20001950

0800352c <_close>:

int _close(int file)
{
	return -1;
}
 800352c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003530:	4770      	bx	lr

08003532 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003532:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8003536:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8003538:	604b      	str	r3, [r1, #4]
}
 800353a:	4770      	bx	lr

0800353c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800353c:	2001      	movs	r0, #1
 800353e:	4770      	bx	lr

08003540 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003540:	2000      	movs	r0, #0
 8003542:	4770      	bx	lr

08003544 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003544:	490f      	ldr	r1, [pc, #60]	; (8003584 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003546:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003548:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800354c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003550:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8003554:	4b0c      	ldr	r3, [pc, #48]	; (8003588 <SystemInit+0x44>)
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	f042 0201 	orr.w	r2, r2, #1
 800355c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800355e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003566:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800356a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800356c:	4a07      	ldr	r2, [pc, #28]	; (800358c <SystemInit+0x48>)
 800356e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003576:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003578:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800357a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800357e:	608b      	str	r3, [r1, #8]
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	e000ed00 	.word	0xe000ed00
 8003588:	40023800 	.word	0x40023800
 800358c:	24003010 	.word	0x24003010

08003590 <MX_TIM1_Init>:
void MX_TIM1_Init(void)
{
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim1.Instance = TIM1;
 8003590:	4817      	ldr	r0, [pc, #92]	; (80035f0 <MX_TIM1_Init+0x60>)
 8003592:	4b18      	ldr	r3, [pc, #96]	; (80035f4 <MX_TIM1_Init+0x64>)
{
 8003594:	b500      	push	{lr}
  htim1.Instance = TIM1;
 8003596:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 8003598:	2300      	movs	r3, #0
{
 800359a:	b089      	sub	sp, #36	; 0x24
  htim1.Init.Prescaler = 0;
 800359c:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800359e:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 0;
 80035a0:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035a2:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80035a4:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035a6:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80035a8:	f7fe fcc0 	bl	8001f2c <HAL_TIM_Base_Init>
 80035ac:	b118      	cbz	r0, 80035b6 <MX_TIM1_Init+0x26>
  {
    _Error_Handler(__FILE__, __LINE__);
 80035ae:	2143      	movs	r1, #67	; 0x43
 80035b0:	4811      	ldr	r0, [pc, #68]	; (80035f8 <MX_TIM1_Init+0x68>)
 80035b2:	f7ff fe0b 	bl	80031cc <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035b6:	a908      	add	r1, sp, #32
 80035b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80035bc:	480c      	ldr	r0, [pc, #48]	; (80035f0 <MX_TIM1_Init+0x60>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035be:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80035c2:	f7fe fcd7 	bl	8001f74 <HAL_TIM_ConfigClockSource>
 80035c6:	b118      	cbz	r0, 80035d0 <MX_TIM1_Init+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 80035c8:	2149      	movs	r1, #73	; 0x49
 80035ca:	480b      	ldr	r0, [pc, #44]	; (80035f8 <MX_TIM1_Init+0x68>)
 80035cc:	f7ff fdfe 	bl	80031cc <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035d0:	2300      	movs	r3, #0
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80035d2:	a901      	add	r1, sp, #4
 80035d4:	4806      	ldr	r0, [pc, #24]	; (80035f0 <MX_TIM1_Init+0x60>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035d6:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80035d8:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035da:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80035dc:	f7fe fd58 	bl	8002090 <HAL_TIMEx_MasterConfigSynchronization>
 80035e0:	b118      	cbz	r0, 80035ea <MX_TIM1_Init+0x5a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80035e2:	2151      	movs	r1, #81	; 0x51
 80035e4:	4804      	ldr	r0, [pc, #16]	; (80035f8 <MX_TIM1_Init+0x68>)
 80035e6:	f7ff fdf1 	bl	80031cc <_Error_Handler>
  }

}
 80035ea:	b009      	add	sp, #36	; 0x24
 80035ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80035f0:	2000174c 	.word	0x2000174c
 80035f4:	40010000 	.word	0x40010000
 80035f8:	08006b09 	.word	0x08006b09

080035fc <MX_TIM2_Init>:
void MX_TIM2_Init(void)
{
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 80035fc:	4817      	ldr	r0, [pc, #92]	; (800365c <MX_TIM2_Init+0x60>)
 80035fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
 8003602:	b500      	push	{lr}
  htim2.Instance = TIM2;
 8003604:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 0;
 8003606:	2300      	movs	r3, #0
{
 8003608:	b089      	sub	sp, #36	; 0x24
  htim2.Init.Prescaler = 0;
 800360a:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800360c:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 0;
 800360e:	60c3      	str	r3, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003610:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003612:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003614:	f7fe fc8a 	bl	8001f2c <HAL_TIM_Base_Init>
 8003618:	b118      	cbz	r0, 8003622 <MX_TIM2_Init+0x26>
  {
    _Error_Handler(__FILE__, __LINE__);
 800361a:	2163      	movs	r1, #99	; 0x63
 800361c:	4810      	ldr	r0, [pc, #64]	; (8003660 <MX_TIM2_Init+0x64>)
 800361e:	f7ff fdd5 	bl	80031cc <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003622:	a908      	add	r1, sp, #32
 8003624:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003628:	480c      	ldr	r0, [pc, #48]	; (800365c <MX_TIM2_Init+0x60>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800362a:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800362e:	f7fe fca1 	bl	8001f74 <HAL_TIM_ConfigClockSource>
 8003632:	b118      	cbz	r0, 800363c <MX_TIM2_Init+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003634:	2169      	movs	r1, #105	; 0x69
 8003636:	480a      	ldr	r0, [pc, #40]	; (8003660 <MX_TIM2_Init+0x64>)
 8003638:	f7ff fdc8 	bl	80031cc <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800363c:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800363e:	a901      	add	r1, sp, #4
 8003640:	4806      	ldr	r0, [pc, #24]	; (800365c <MX_TIM2_Init+0x60>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003642:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003644:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003646:	f7fe fd23 	bl	8002090 <HAL_TIMEx_MasterConfigSynchronization>
 800364a:	b118      	cbz	r0, 8003654 <MX_TIM2_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 800364c:	2170      	movs	r1, #112	; 0x70
 800364e:	4804      	ldr	r0, [pc, #16]	; (8003660 <MX_TIM2_Init+0x64>)
 8003650:	f7ff fdbc 	bl	80031cc <_Error_Handler>
  }

}
 8003654:	b009      	add	sp, #36	; 0x24
 8003656:	f85d fb04 	ldr.w	pc, [sp], #4
 800365a:	bf00      	nop
 800365c:	200016cc 	.word	0x200016cc
 8003660:	08006b09 	.word	0x08006b09

08003664 <MX_TIM3_Init>:
void MX_TIM3_Init(void)
{
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
 8003664:	4818      	ldr	r0, [pc, #96]	; (80036c8 <MX_TIM3_Init+0x64>)
  htim3.Init.Prescaler = 9999;
 8003666:	f242 730f 	movw	r3, #9999	; 0x270f
 800366a:	4918      	ldr	r1, [pc, #96]	; (80036cc <MX_TIM3_Init+0x68>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 99;
 800366c:	2263      	movs	r2, #99	; 0x63
{
 800366e:	b500      	push	{lr}
  htim3.Init.Prescaler = 9999;
 8003670:	e880 000a 	stmia.w	r0, {r1, r3}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003674:	2300      	movs	r3, #0
{
 8003676:	b089      	sub	sp, #36	; 0x24
  htim3.Init.Period = 99;
 8003678:	60c2      	str	r2, [r0, #12]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800367a:	6083      	str	r3, [r0, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800367c:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800367e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003680:	f7fe fc54 	bl	8001f2c <HAL_TIM_Base_Init>
 8003684:	b118      	cbz	r0, 800368e <MX_TIM3_Init+0x2a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003686:	2182      	movs	r1, #130	; 0x82
 8003688:	4811      	ldr	r0, [pc, #68]	; (80036d0 <MX_TIM3_Init+0x6c>)
 800368a:	f7ff fd9f 	bl	80031cc <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800368e:	a908      	add	r1, sp, #32
 8003690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003694:	480c      	ldr	r0, [pc, #48]	; (80036c8 <MX_TIM3_Init+0x64>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003696:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800369a:	f7fe fc6b 	bl	8001f74 <HAL_TIM_ConfigClockSource>
 800369e:	b118      	cbz	r0, 80036a8 <MX_TIM3_Init+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
 80036a0:	2188      	movs	r1, #136	; 0x88
 80036a2:	480b      	ldr	r0, [pc, #44]	; (80036d0 <MX_TIM3_Init+0x6c>)
 80036a4:	f7ff fd92 	bl	80031cc <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036a8:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80036aa:	a901      	add	r1, sp, #4
 80036ac:	4806      	ldr	r0, [pc, #24]	; (80036c8 <MX_TIM3_Init+0x64>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036ae:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036b0:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80036b2:	f7fe fced 	bl	8002090 <HAL_TIMEx_MasterConfigSynchronization>
 80036b6:	b118      	cbz	r0, 80036c0 <MX_TIM3_Init+0x5c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80036b8:	218f      	movs	r1, #143	; 0x8f
 80036ba:	4805      	ldr	r0, [pc, #20]	; (80036d0 <MX_TIM3_Init+0x6c>)
 80036bc:	f7ff fd86 	bl	80031cc <_Error_Handler>
  }

}
 80036c0:	b009      	add	sp, #36	; 0x24
 80036c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80036c6:	bf00      	nop
 80036c8:	2000168c 	.word	0x2000168c
 80036cc:	40000400 	.word	0x40000400
 80036d0:	08006b09 	.word	0x08006b09

080036d4 <MX_TIM4_Init>:
void MX_TIM4_Init(void)
{
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim4.Instance = TIM4;
 80036d4:	4818      	ldr	r0, [pc, #96]	; (8003738 <MX_TIM4_Init+0x64>)
  htim4.Init.Prescaler = 9999;
 80036d6:	f242 730f 	movw	r3, #9999	; 0x270f
 80036da:	4918      	ldr	r1, [pc, #96]	; (800373c <MX_TIM4_Init+0x68>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 99;
 80036dc:	2263      	movs	r2, #99	; 0x63
{
 80036de:	b500      	push	{lr}
  htim4.Init.Prescaler = 9999;
 80036e0:	e880 000a 	stmia.w	r0, {r1, r3}
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036e4:	2300      	movs	r3, #0
{
 80036e6:	b089      	sub	sp, #36	; 0x24
  htim4.Init.Period = 99;
 80036e8:	60c2      	str	r2, [r0, #12]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036ea:	6083      	str	r3, [r0, #8]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036ec:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036ee:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80036f0:	f7fe fc1c 	bl	8001f2c <HAL_TIM_Base_Init>
 80036f4:	b118      	cbz	r0, 80036fe <MX_TIM4_Init+0x2a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80036f6:	21a1      	movs	r1, #161	; 0xa1
 80036f8:	4811      	ldr	r0, [pc, #68]	; (8003740 <MX_TIM4_Init+0x6c>)
 80036fa:	f7ff fd67 	bl	80031cc <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036fe:	a908      	add	r1, sp, #32
 8003700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003704:	480c      	ldr	r0, [pc, #48]	; (8003738 <MX_TIM4_Init+0x64>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003706:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800370a:	f7fe fc33 	bl	8001f74 <HAL_TIM_ConfigClockSource>
 800370e:	b118      	cbz	r0, 8003718 <MX_TIM4_Init+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003710:	21a7      	movs	r1, #167	; 0xa7
 8003712:	480b      	ldr	r0, [pc, #44]	; (8003740 <MX_TIM4_Init+0x6c>)
 8003714:	f7ff fd5a 	bl	80031cc <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003718:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800371a:	a901      	add	r1, sp, #4
 800371c:	4806      	ldr	r0, [pc, #24]	; (8003738 <MX_TIM4_Init+0x64>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800371e:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003720:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003722:	f7fe fcb5 	bl	8002090 <HAL_TIMEx_MasterConfigSynchronization>
 8003726:	b118      	cbz	r0, 8003730 <MX_TIM4_Init+0x5c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003728:	21ae      	movs	r1, #174	; 0xae
 800372a:	4805      	ldr	r0, [pc, #20]	; (8003740 <MX_TIM4_Init+0x6c>)
 800372c:	f7ff fd4e 	bl	80031cc <_Error_Handler>
  }

}
 8003730:	b009      	add	sp, #36	; 0x24
 8003732:	f85d fb04 	ldr.w	pc, [sp], #4
 8003736:	bf00      	nop
 8003738:	2000170c 	.word	0x2000170c
 800373c:	40000800 	.word	0x40000800
 8003740:	08006b09 	.word	0x08006b09

08003744 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 8003744:	6803      	ldr	r3, [r0, #0]
{
 8003746:	b084      	sub	sp, #16
  if(tim_baseHandle->Instance==TIM1)
 8003748:	4a1c      	ldr	r2, [pc, #112]	; (80037bc <HAL_TIM_Base_MspInit+0x78>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d10b      	bne.n	8003766 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800374e:	4b1c      	ldr	r3, [pc, #112]	; (80037c0 <HAL_TIM_Base_MspInit+0x7c>)
 8003750:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003752:	f042 0201 	orr.w	r2, r2, #1
 8003756:	645a      	str	r2, [r3, #68]	; 0x44
 8003758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003762:	b004      	add	sp, #16
 8003764:	4770      	bx	lr
  else if(tim_baseHandle->Instance==TIM2)
 8003766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800376a:	d10b      	bne.n	8003784 <HAL_TIM_Base_MspInit+0x40>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800376c:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8003770:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003772:	f042 0201 	orr.w	r2, r2, #1
 8003776:	641a      	str	r2, [r3, #64]	; 0x40
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	9301      	str	r3, [sp, #4]
 8003780:	9b01      	ldr	r3, [sp, #4]
 8003782:	e7ee      	b.n	8003762 <HAL_TIM_Base_MspInit+0x1e>
  else if(tim_baseHandle->Instance==TIM3)
 8003784:	4a0f      	ldr	r2, [pc, #60]	; (80037c4 <HAL_TIM_Base_MspInit+0x80>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d10a      	bne.n	80037a0 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800378a:	4b0d      	ldr	r3, [pc, #52]	; (80037c0 <HAL_TIM_Base_MspInit+0x7c>)
 800378c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800378e:	f042 0202 	orr.w	r2, r2, #2
 8003792:	641a      	str	r2, [r3, #64]	; 0x40
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	9302      	str	r3, [sp, #8]
 800379c:	9b02      	ldr	r3, [sp, #8]
 800379e:	e7e0      	b.n	8003762 <HAL_TIM_Base_MspInit+0x1e>
  else if(tim_baseHandle->Instance==TIM4)
 80037a0:	4a09      	ldr	r2, [pc, #36]	; (80037c8 <HAL_TIM_Base_MspInit+0x84>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d1dd      	bne.n	8003762 <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80037a6:	4b06      	ldr	r3, [pc, #24]	; (80037c0 <HAL_TIM_Base_MspInit+0x7c>)
 80037a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037aa:	f042 0204 	orr.w	r2, r2, #4
 80037ae:	641a      	str	r2, [r3, #64]	; 0x40
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	f003 0304 	and.w	r3, r3, #4
 80037b6:	9303      	str	r3, [sp, #12]
 80037b8:	9b03      	ldr	r3, [sp, #12]
}
 80037ba:	e7d2      	b.n	8003762 <HAL_TIM_Base_MspInit+0x1e>
 80037bc:	40010000 	.word	0x40010000
 80037c0:	40023800 	.word	0x40023800
 80037c4:	40000400 	.word	0x40000400
 80037c8:	40000800 	.word	0x40000800

080037cc <MX_UART5_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 80037cc:	b508      	push	{r3, lr}

  huart5.Instance = UART5;
 80037ce:	480d      	ldr	r0, [pc, #52]	; (8003804 <MX_UART5_Init+0x38>)
  huart5.Init.BaudRate = 115200;
 80037d0:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 80037d4:	4b0c      	ldr	r3, [pc, #48]	; (8003808 <MX_UART5_Init+0x3c>)
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
  huart5.Init.StopBits = UART_STOPBITS_1;
  huart5.Init.Parity = UART_PARITY_NONE;
  huart5.Init.Mode = UART_MODE_TX_RX;
 80037d6:	220c      	movs	r2, #12
  huart5.Init.BaudRate = 115200;
 80037d8:	e880 4008 	stmia.w	r0, {r3, lr}
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80037dc:	2300      	movs	r3, #0
  huart5.Init.Mode = UART_MODE_TX_RX;
 80037de:	6142      	str	r2, [r0, #20]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80037e0:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80037e2:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80037e4:	6103      	str	r3, [r0, #16]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037e6:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80037e8:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80037ea:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80037ec:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80037ee:	f7ff f8cc 	bl	800298a <HAL_UART_Init>
 80037f2:	b128      	cbz	r0, 8003800 <MX_UART5_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 80037f4:	214d      	movs	r1, #77	; 0x4d
 80037f6:	4805      	ldr	r0, [pc, #20]	; (800380c <MX_UART5_Init+0x40>)
  }

}
 80037f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80037fc:	f7ff bce6 	b.w	80031cc <_Error_Handler>
 8003800:	bd08      	pop	{r3, pc}
 8003802:	bf00      	nop
 8003804:	200017fc 	.word	0x200017fc
 8003808:	40005000 	.word	0x40005000
 800380c:	08006b16 	.word	0x08006b16

08003810 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8003810:	b508      	push	{r3, lr}

  huart7.Instance = UART7;
 8003812:	480d      	ldr	r0, [pc, #52]	; (8003848 <MX_UART7_Init+0x38>)
  huart7.Init.BaudRate = 115200;
 8003814:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8003818:	4b0c      	ldr	r3, [pc, #48]	; (800384c <MX_UART7_Init+0x3c>)
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
  huart7.Init.StopBits = UART_STOPBITS_1;
  huart7.Init.Parity = UART_PARITY_NONE;
  huart7.Init.Mode = UART_MODE_TX_RX;
 800381a:	220c      	movs	r2, #12
  huart7.Init.BaudRate = 115200;
 800381c:	e880 4008 	stmia.w	r0, {r3, lr}
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8003820:	2300      	movs	r3, #0
  huart7.Init.Mode = UART_MODE_TX_RX;
 8003822:	6142      	str	r2, [r0, #20]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8003824:	6083      	str	r3, [r0, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8003826:	60c3      	str	r3, [r0, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8003828:	6103      	str	r3, [r0, #16]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800382a:	6183      	str	r3, [r0, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800382c:	61c3      	str	r3, [r0, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800382e:	6203      	str	r3, [r0, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003830:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8003832:	f7ff f8aa 	bl	800298a <HAL_UART_Init>
 8003836:	b128      	cbz	r0, 8003844 <MX_UART7_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003838:	2161      	movs	r1, #97	; 0x61
 800383a:	4805      	ldr	r0, [pc, #20]	; (8003850 <MX_UART7_Init+0x40>)
  }

}
 800383c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8003840:	f7ff bcc4 	b.w	80031cc <_Error_Handler>
 8003844:	bd08      	pop	{r3, pc}
 8003846:	bf00      	nop
 8003848:	2000178c 	.word	0x2000178c
 800384c:	40007800 	.word	0x40007800
 8003850:	08006b16 	.word	0x08006b16

08003854 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8003854:	b508      	push	{r3, lr}

  huart8.Instance = UART8;
 8003856:	480d      	ldr	r0, [pc, #52]	; (800388c <MX_UART8_Init+0x38>)
  huart8.Init.BaudRate = 115200;
 8003858:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 800385c:	4b0c      	ldr	r3, [pc, #48]	; (8003890 <MX_UART8_Init+0x3c>)
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
  huart8.Init.StopBits = UART_STOPBITS_1;
  huart8.Init.Parity = UART_PARITY_NONE;
  huart8.Init.Mode = UART_MODE_TX_RX;
 800385e:	220c      	movs	r2, #12
  huart8.Init.BaudRate = 115200;
 8003860:	e880 4008 	stmia.w	r0, {r3, lr}
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8003864:	2300      	movs	r3, #0
  huart8.Init.Mode = UART_MODE_TX_RX;
 8003866:	6142      	str	r2, [r0, #20]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8003868:	6083      	str	r3, [r0, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 800386a:	60c3      	str	r3, [r0, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800386c:	6103      	str	r3, [r0, #16]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800386e:	6183      	str	r3, [r0, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8003870:	61c3      	str	r3, [r0, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003872:	6203      	str	r3, [r0, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003874:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8003876:	f7ff f888 	bl	800298a <HAL_UART_Init>
 800387a:	b128      	cbz	r0, 8003888 <MX_UART8_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 800387c:	2175      	movs	r1, #117	; 0x75
 800387e:	4805      	ldr	r0, [pc, #20]	; (8003894 <MX_UART8_Init+0x40>)
  }

}
 8003880:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8003884:	f7ff bca2 	b.w	80031cc <_Error_Handler>
 8003888:	bd08      	pop	{r3, pc}
 800388a:	bf00      	nop
 800388c:	2000186c 	.word	0x2000186c
 8003890:	40007c00 	.word	0x40007c00
 8003894:	08006b16 	.word	0x08006b16

08003898 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003898:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 800389a:	480d      	ldr	r0, [pc, #52]	; (80038d0 <MX_USART2_UART_Init+0x38>)
  huart2.Init.BaudRate = 115200;
 800389c:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 80038a0:	4b0c      	ldr	r3, [pc, #48]	; (80038d4 <MX_USART2_UART_Init+0x3c>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80038a2:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 115200;
 80038a4:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80038a8:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 80038aa:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80038ac:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80038ae:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80038b0:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038b2:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80038b4:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80038b6:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80038b8:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80038ba:	f7ff f866 	bl	800298a <HAL_UART_Init>
 80038be:	b128      	cbz	r0, 80038cc <MX_USART2_UART_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 80038c0:	218a      	movs	r1, #138	; 0x8a
 80038c2:	4805      	ldr	r0, [pc, #20]	; (80038d8 <MX_USART2_UART_Init+0x40>)
  }

}
 80038c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80038c8:	f7ff bc80 	b.w	80031cc <_Error_Handler>
 80038cc:	bd08      	pop	{r3, pc}
 80038ce:	bf00      	nop
 80038d0:	20000204 	.word	0x20000204
 80038d4:	40004400 	.word	0x40004400
 80038d8:	08006b16 	.word	0x08006b16

080038dc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80038dc:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 80038de:	480d      	ldr	r0, [pc, #52]	; (8003914 <MX_USART3_UART_Init+0x38>)
  huart3.Init.BaudRate = 115200;
 80038e0:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 80038e4:	4b0c      	ldr	r3, [pc, #48]	; (8003918 <MX_USART3_UART_Init+0x3c>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 80038e6:	220c      	movs	r2, #12
  huart3.Init.BaudRate = 115200;
 80038e8:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80038ec:	2300      	movs	r3, #0
  huart3.Init.Mode = UART_MODE_TX_RX;
 80038ee:	6142      	str	r2, [r0, #20]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80038f0:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80038f2:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80038f4:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038f6:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80038f8:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80038fa:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80038fc:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80038fe:	f7ff f844 	bl	800298a <HAL_UART_Init>
 8003902:	b128      	cbz	r0, 8003910 <MX_USART3_UART_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003904:	219f      	movs	r1, #159	; 0x9f
 8003906:	4805      	ldr	r0, [pc, #20]	; (800391c <MX_USART3_UART_Init+0x40>)
  }

}
 8003908:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 800390c:	f7ff bc5e 	b.w	80031cc <_Error_Handler>
 8003910:	bd08      	pop	{r3, pc}
 8003912:	bf00      	nop
 8003914:	200011dc 	.word	0x200011dc
 8003918:	40004800 	.word	0x40004800
 800391c:	08006b16 	.word	0x08006b16

08003920 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003920:	b508      	push	{r3, lr}

  huart6.Instance = USART6;
 8003922:	480d      	ldr	r0, [pc, #52]	; (8003958 <MX_USART6_UART_Init+0x38>)
  huart6.Init.BaudRate = 115200;
 8003924:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8003928:	4b0c      	ldr	r3, [pc, #48]	; (800395c <MX_USART6_UART_Init+0x3c>)
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
  huart6.Init.StopBits = UART_STOPBITS_1;
  huart6.Init.Parity = UART_PARITY_NONE;
  huart6.Init.Mode = UART_MODE_TX_RX;
 800392a:	220c      	movs	r2, #12
  huart6.Init.BaudRate = 115200;
 800392c:	e880 4008 	stmia.w	r0, {r3, lr}
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003930:	2300      	movs	r3, #0
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003932:	6142      	str	r2, [r0, #20]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003934:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003936:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003938:	6103      	str	r3, [r0, #16]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800393a:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800393c:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800393e:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003940:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003942:	f7ff f822 	bl	800298a <HAL_UART_Init>
 8003946:	b128      	cbz	r0, 8003954 <MX_USART6_UART_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003948:	21b4      	movs	r1, #180	; 0xb4
 800394a:	4805      	ldr	r0, [pc, #20]	; (8003960 <MX_USART6_UART_Init+0x40>)
  }

}
 800394c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8003950:	f7ff bc3c 	b.w	80031cc <_Error_Handler>
 8003954:	bd08      	pop	{r3, pc}
 8003956:	bf00      	nop
 8003958:	200018dc 	.word	0x200018dc
 800395c:	40011400 	.word	0x40011400
 8003960:	08006b16 	.word	0x08006b16

08003964 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==UART5)
 8003964:	6803      	ldr	r3, [r0, #0]
 8003966:	4a97      	ldr	r2, [pc, #604]	; (8003bc4 <HAL_UART_MspInit+0x260>)
 8003968:	4293      	cmp	r3, r2
{
 800396a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800396e:	4605      	mov	r5, r0
 8003970:	b08c      	sub	sp, #48	; 0x30
  if(uartHandle->Instance==UART5)
 8003972:	d122      	bne.n	80039ba <HAL_UART_MspInit+0x56>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003974:	4b94      	ldr	r3, [pc, #592]	; (8003bc8 <HAL_UART_MspInit+0x264>)

    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PC12     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003976:	f44f 5880 	mov.w	r8, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800397a:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800397c:	2600      	movs	r6, #0
    __HAL_RCC_UART5_CLK_ENABLE();
 800397e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003980:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003982:	2408      	movs	r4, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003984:	a907      	add	r1, sp, #28
    __HAL_RCC_UART5_CLK_ENABLE();
 8003986:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800398a:	4890      	ldr	r0, [pc, #576]	; (8003bcc <HAL_UART_MspInit+0x268>)
    __HAL_RCC_UART5_CLK_ENABLE();
 800398c:	641a      	str	r2, [r3, #64]	; 0x40
 800398e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003990:	f8cd 801c 	str.w	r8, [sp, #28]
    __HAL_RCC_UART5_CLK_ENABLE();
 8003994:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003998:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800399a:	9609      	str	r6, [sp, #36]	; 0x24
    __HAL_RCC_UART5_CLK_ENABLE();
 800399c:	9301      	str	r3, [sp, #4]
 800399e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039a0:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80039a2:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039a4:	f7fd f934 	bl	8000c10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80039a8:	f8cd 801c 	str.w	r8, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ac:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ae:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039b0:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80039b2:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

 80039b4:	a907      	add	r1, sp, #28
 80039b6:	4886      	ldr	r0, [pc, #536]	; (8003bd0 <HAL_UART_MspInit+0x26c>)
 80039b8:	e018      	b.n	80039ec <HAL_UART_MspInit+0x88>
  else if(uartHandle->Instance==UART7)
 80039ba:	4a86      	ldr	r2, [pc, #536]	; (8003bd4 <HAL_UART_MspInit+0x270>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d118      	bne.n	80039f2 <HAL_UART_MspInit+0x8e>
    __HAL_RCC_UART7_CLK_ENABLE();
 80039c0:	4b81      	ldr	r3, [pc, #516]	; (8003bc8 <HAL_UART_MspInit+0x264>)
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80039c2:	a907      	add	r1, sp, #28
 80039c4:	4884      	ldr	r0, [pc, #528]	; (8003bd8 <HAL_UART_MspInit+0x274>)
    __HAL_RCC_UART7_CLK_ENABLE();
 80039c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039c8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80039cc:	641a      	str	r2, [r3, #64]	; 0x40
 80039ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80039d4:	9302      	str	r3, [sp, #8]
 80039d6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80039d8:	23c0      	movs	r3, #192	; 0xc0
 80039da:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039dc:	2302      	movs	r3, #2
 80039de:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e0:	2300      	movs	r3, #0
 80039e2:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039e4:	2303      	movs	r3, #3
 80039e6:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80039e8:	2308      	movs	r3, #8
 80039ea:	930b      	str	r3, [sp, #44]	; 0x2c

 80039ec:	f7fd f910 	bl	8000c10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}

 80039f0:	e072      	b.n	8003ad8 <HAL_UART_MspInit+0x174>
  else if(uartHandle->Instance==UART8)
 80039f2:	4a7a      	ldr	r2, [pc, #488]	; (8003bdc <HAL_UART_MspInit+0x278>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d115      	bne.n	8003a24 <HAL_UART_MspInit+0xc0>
    __HAL_RCC_UART8_CLK_ENABLE();
 80039f8:	4b73      	ldr	r3, [pc, #460]	; (8003bc8 <HAL_UART_MspInit+0x264>)
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80039fa:	a907      	add	r1, sp, #28
 80039fc:	4878      	ldr	r0, [pc, #480]	; (8003be0 <HAL_UART_MspInit+0x27c>)
    __HAL_RCC_UART8_CLK_ENABLE();
 80039fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a00:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003a04:	641a      	str	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a06:	2202      	movs	r2, #2
    __HAL_RCC_UART8_CLK_ENABLE();
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a0a:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0c:	2200      	movs	r2, #0
    __HAL_RCC_UART8_CLK_ENABLE();
 8003a0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a12:	9209      	str	r2, [sp, #36]	; 0x24
    __HAL_RCC_UART8_CLK_ENABLE();
 8003a14:	9303      	str	r3, [sp, #12]
 8003a16:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a1c:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8003a1e:	2308      	movs	r3, #8
 8003a20:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a22:	e7e3      	b.n	80039ec <HAL_UART_MspInit+0x88>
  else if(uartHandle->Instance==USART2)
 8003a24:	4a6f      	ldr	r2, [pc, #444]	; (8003be4 <HAL_UART_MspInit+0x280>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d159      	bne.n	8003ade <HAL_UART_MspInit+0x17a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a2a:	4b67      	ldr	r3, [pc, #412]	; (8003bc8 <HAL_UART_MspInit+0x264>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a2c:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a2e:	486e      	ldr	r0, [pc, #440]	; (8003be8 <HAL_UART_MspInit+0x284>)
 8003a30:	a907      	add	r1, sp, #28
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003a34:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
		hdma_usart2_rx.Instance = DMA1_Stream5;
 8003a38:	4c6c      	ldr	r4, [pc, #432]	; (8003bec <HAL_UART_MspInit+0x288>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a3a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003a3e:	641a      	str	r2, [r3, #64]	; 0x40
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a42:	9609      	str	r6, [sp, #36]	; 0x24
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a48:	9304      	str	r3, [sp, #16]
 8003a4a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = UART2_WIFI_TX_Pin|UART2_WIFI_RX_Pin;
 8003a4c:	2360      	movs	r3, #96	; 0x60
 8003a4e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a50:	2302      	movs	r3, #2
 8003a52:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a54:	2303      	movs	r3, #3
 8003a56:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a58:	2307      	movs	r3, #7
 8003a5a:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a5c:	f7fd f8d8 	bl	8000c10 <HAL_GPIO_Init>
		hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003a60:	4b63      	ldr	r3, [pc, #396]	; (8003bf0 <HAL_UART_MspInit+0x28c>)

 8003a62:	4620      	mov	r0, r4
		hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a64:	60a6      	str	r6, [r4, #8]
		hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a66:	60e6      	str	r6, [r4, #12]
		hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a68:	6166      	str	r6, [r4, #20]
		hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a6a:	61a6      	str	r6, [r4, #24]
		hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003a6c:	61e6      	str	r6, [r4, #28]
		hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003a6e:	6226      	str	r6, [r4, #32]
		hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a70:	6266      	str	r6, [r4, #36]	; 0x24
		hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003a72:	e884 0088 	stmia.w	r4, {r3, r7}
		hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a7a:	6123      	str	r3, [r4, #16]

 8003a7c:	f7fc ff16 	bl	80008ac <HAL_DMA_Init>
 8003a80:	b120      	cbz	r0, 8003a8c <HAL_UART_MspInit+0x128>
			_Error_Handler(__FILE__, __LINE__);
 8003a82:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8003a86:	485b      	ldr	r0, [pc, #364]	; (8003bf4 <HAL_UART_MspInit+0x290>)
 8003a88:	f7ff fba0 	bl	80031cc <_Error_Handler>
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a8c:	485a      	ldr	r0, [pc, #360]	; (8003bf8 <HAL_UART_MspInit+0x294>)
 8003a8e:	2340      	movs	r3, #64	; 0x40
		__HAL_LINKDMA(uartHandle, hdmarx, hdma_usart2_rx);
 8003a90:	666c      	str	r4, [r5, #100]	; 0x64
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a92:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
		__HAL_LINKDMA(uartHandle, hdmarx, hdma_usart2_rx);
 8003a96:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a98:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003a9c:	4c57      	ldr	r4, [pc, #348]	; (8003bfc <HAL_UART_MspInit+0x298>)
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a9e:	e884 000b 	stmia.w	r4, {r0, r1, r3}
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003aa2:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003aa4:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003aa6:	6122      	str	r2, [r4, #16]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003aa8:	60e3      	str	r3, [r4, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003aaa:	6163      	str	r3, [r4, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003aac:	61a3      	str	r3, [r4, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003aae:	61e3      	str	r3, [r4, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003ab0:	6223      	str	r3, [r4, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ab2:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003ab4:	f7fc fefa 	bl	80008ac <HAL_DMA_Init>
 8003ab8:	b120      	cbz	r0, 8003ac4 <HAL_UART_MspInit+0x160>
      _Error_Handler(__FILE__, __LINE__);
 8003aba:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8003abe:	484d      	ldr	r0, [pc, #308]	; (8003bf4 <HAL_UART_MspInit+0x290>)
 8003ac0:	f7ff fb84 	bl	80031cc <_Error_Handler>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8003ac8:	662c      	str	r4, [r5, #96]	; 0x60
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003aca:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8003acc:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003ace:	f7fc fdfd 	bl	80006cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003ad2:	2026      	movs	r0, #38	; 0x26
  /* USER CODE BEGIN USART3_MspInit 1 */
 8003ad4:	f7fc fe32 	bl	800073c <HAL_NVIC_EnableIRQ>

 8003ad8:	b00c      	add	sp, #48	; 0x30
 8003ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(uartHandle->Instance==USART3)
 8003ade:	4a48      	ldr	r2, [pc, #288]	; (8003c00 <HAL_UART_MspInit+0x29c>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d156      	bne.n	8003b92 <HAL_UART_MspInit+0x22e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003ae4:	4b38      	ldr	r3, [pc, #224]	; (8003bc8 <HAL_UART_MspInit+0x264>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae6:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ae8:	483f      	ldr	r0, [pc, #252]	; (8003be8 <HAL_UART_MspInit+0x284>)
 8003aea:	a907      	add	r1, sp, #28
    __HAL_RCC_USART3_CLK_ENABLE();
 8003aec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		hdma_usart3_rx.Instance = DMA1_Stream1;
 8003aee:	4c45      	ldr	r4, [pc, #276]	; (8003c04 <HAL_UART_MspInit+0x2a0>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8003af0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003af4:	641a      	str	r2, [r3, #64]	; 0x40
 8003af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af8:	9609      	str	r6, [sp, #36]	; 0x24
    __HAL_RCC_USART3_CLK_ENABLE();
 8003afa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003afe:	9305      	str	r3, [sp, #20]
 8003b00:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003b02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003b06:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b08:	2302      	movs	r3, #2
 8003b0a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003b10:	2307      	movs	r3, #7
 8003b12:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b14:	f7fd f87c 	bl	8000c10 <HAL_GPIO_Init>
		hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003b18:	4b3b      	ldr	r3, [pc, #236]	; (8003c08 <HAL_UART_MspInit+0x2a4>)
 8003b1a:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
		if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK) {
 8003b1e:	4620      	mov	r0, r4
		hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b20:	60a6      	str	r6, [r4, #8]
		hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b22:	60e6      	str	r6, [r4, #12]
		hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b24:	6166      	str	r6, [r4, #20]
		hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b26:	61a6      	str	r6, [r4, #24]
		hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003b28:	61e6      	str	r6, [r4, #28]
		hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003b2a:	6226      	str	r6, [r4, #32]
		hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b2c:	6266      	str	r6, [r4, #36]	; 0x24
		hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003b2e:	e884 4008 	stmia.w	r4, {r3, lr}
		hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b36:	6123      	str	r3, [r4, #16]
		if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK) {
 8003b38:	f7fc feb8 	bl	80008ac <HAL_DMA_Init>
 8003b3c:	b120      	cbz	r0, 8003b48 <HAL_UART_MspInit+0x1e4>
		}
 8003b3e:	f240 1169 	movw	r1, #361	; 0x169
 8003b42:	482c      	ldr	r0, [pc, #176]	; (8003bf4 <HAL_UART_MspInit+0x290>)
 8003b44:	f7ff fb42 	bl	80031cc <_Error_Handler>
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b48:	4b30      	ldr	r3, [pc, #192]	; (8003c0c <HAL_UART_MspInit+0x2a8>)
 8003b4a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

 8003b4e:	666c      	str	r4, [r5, #100]	; 0x64
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b50:	2740      	movs	r7, #64	; 0x40

 8003b52:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b54:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8003b58:	4c2d      	ldr	r4, [pc, #180]	; (8003c10 <HAL_UART_MspInit+0x2ac>)
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b5a:	e884 00c8 	stmia.w	r4, {r3, r6, r7}
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b5e:	2300      	movs	r3, #0
    {
 8003b60:	4620      	mov	r0, r4
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b62:	6122      	str	r2, [r4, #16]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b64:	60e3      	str	r3, [r4, #12]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b66:	6163      	str	r3, [r4, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003b68:	61a3      	str	r3, [r4, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003b6a:	61e3      	str	r3, [r4, #28]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b6c:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003b6e:	6263      	str	r3, [r4, #36]	; 0x24
    {
 8003b70:	f7fc fe9c 	bl	80008ac <HAL_DMA_Init>
 8003b74:	b120      	cbz	r0, 8003b80 <HAL_UART_MspInit+0x21c>
    }
 8003b76:	f240 117b 	movw	r1, #379	; 0x17b
 8003b7a:	481e      	ldr	r0, [pc, #120]	; (8003bf4 <HAL_UART_MspInit+0x290>)
 8003b7c:	f7ff fb26 	bl	80031cc <_Error_Handler>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003b80:	2200      	movs	r2, #0
 8003b82:	2027      	movs	r0, #39	; 0x27

 8003b84:	662c      	str	r4, [r5, #96]	; 0x60
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003b86:	4611      	mov	r1, r2

 8003b88:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003b8a:	f7fc fd9f 	bl	80006cc <HAL_NVIC_SetPriority>
  /* USER CODE BEGIN USART3_MspInit 1 */
 8003b8e:	2027      	movs	r0, #39	; 0x27
 8003b90:	e7a0      	b.n	8003ad4 <HAL_UART_MspInit+0x170>
  {
 8003b92:	4a20      	ldr	r2, [pc, #128]	; (8003c14 <HAL_UART_MspInit+0x2b0>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d19f      	bne.n	8003ad8 <HAL_UART_MspInit+0x174>

 8003b98:	4b0b      	ldr	r3, [pc, #44]	; (8003bc8 <HAL_UART_MspInit+0x264>)
 8003b9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b9c:	f042 0220 	orr.w	r2, r2, #32
 8003ba0:	645a      	str	r2, [r3, #68]	; 0x44
 8003ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba4:	f003 0320 	and.w	r3, r3, #32
 8003ba8:	9306      	str	r3, [sp, #24]
 8003baa:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bac:	23c0      	movs	r3, #192	; 0xc0
 8003bae:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bbc:	2308      	movs	r3, #8
 8003bbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8003bc0:	e6f8      	b.n	80039b4 <HAL_UART_MspInit+0x50>
 8003bc2:	bf00      	nop
 8003bc4:	40005000 	.word	0x40005000
 8003bc8:	40023800 	.word	0x40023800
 8003bcc:	40020400 	.word	0x40020400
 8003bd0:	40020800 	.word	0x40020800
 8003bd4:	40007800 	.word	0x40007800
 8003bd8:	40021400 	.word	0x40021400
 8003bdc:	40007c00 	.word	0x40007c00
 8003be0:	40021000 	.word	0x40021000
 8003be4:	40004400 	.word	0x40004400
 8003be8:	40020c00 	.word	0x40020c00
 8003bec:	20001260 	.word	0x20001260
 8003bf0:	40026088 	.word	0x40026088
 8003bf4:	08006b16 	.word	0x08006b16
 8003bf8:	400260a0 	.word	0x400260a0
 8003bfc:	20001440 	.word	0x20001440
 8003c00:	40004800 	.word	0x40004800
 8003c04:	20001320 	.word	0x20001320
 8003c08:	40026028 	.word	0x40026028
 8003c0c:	40026058 	.word	0x40026058
 8003c10:	20001380 	.word	0x20001380
 8003c14:	40011400 	.word	0x40011400

08003c18 <HAL_UART_MspDeInit>:
void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==UART5)
  {
 8003c18:	6803      	ldr	r3, [r0, #0]
 8003c1a:	4a34      	ldr	r2, [pc, #208]	; (8003cec <HAL_UART_MspDeInit+0xd4>)
 8003c1c:	4293      	cmp	r3, r2

 8003c1e:	b510      	push	{r4, lr}
 8003c20:	4604      	mov	r4, r0
  {
 8003c22:	d10e      	bne.n	8003c42 <HAL_UART_MspDeInit+0x2a>
  /* USER CODE BEGIN UART5_MspDeInit 0 */

  /* USER CODE END UART5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART5_CLK_DISABLE();

 8003c24:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PC12     ------> UART5_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);

 8003c28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c2c:	4830      	ldr	r0, [pc, #192]	; (8003cf0 <HAL_UART_MspDeInit+0xd8>)

 8003c2e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003c30:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003c34:	6413      	str	r3, [r2, #64]	; 0x40

 8003c36:	f7fd f8d5 	bl	8000de4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);

 8003c3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6|GPIO_PIN_7);

 8003c3e:	482d      	ldr	r0, [pc, #180]	; (8003cf4 <HAL_UART_MspDeInit+0xdc>)
 8003c40:	e00a      	b.n	8003c58 <HAL_UART_MspDeInit+0x40>
  {
 8003c42:	4a2d      	ldr	r2, [pc, #180]	; (8003cf8 <HAL_UART_MspDeInit+0xe0>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d10b      	bne.n	8003c60 <HAL_UART_MspDeInit+0x48>

 8003c48:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000

 8003c4c:	21c0      	movs	r1, #192	; 0xc0
 8003c4e:	482b      	ldr	r0, [pc, #172]	; (8003cfc <HAL_UART_MspDeInit+0xe4>)

 8003c50:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003c52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c56:	6413      	str	r3, [r2, #64]	; 0x40
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }
}

 8003c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

 8003c5c:	f7fd b8c2 	b.w	8000de4 <HAL_GPIO_DeInit>
  {
 8003c60:	4a27      	ldr	r2, [pc, #156]	; (8003d00 <HAL_UART_MspDeInit+0xe8>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d108      	bne.n	8003c78 <HAL_UART_MspDeInit+0x60>

 8003c66:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00

 8003c6a:	2103      	movs	r1, #3
 8003c6c:	4825      	ldr	r0, [pc, #148]	; (8003d04 <HAL_UART_MspDeInit+0xec>)

 8003c6e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003c70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c74:	6413      	str	r3, [r2, #64]	; 0x40
 8003c76:	e7ef      	b.n	8003c58 <HAL_UART_MspDeInit+0x40>
  {
 8003c78:	4a23      	ldr	r2, [pc, #140]	; (8003d08 <HAL_UART_MspDeInit+0xf0>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d114      	bne.n	8003ca8 <HAL_UART_MspDeInit+0x90>

 8003c7e:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400

 8003c82:	2160      	movs	r1, #96	; 0x60
 8003c84:	4821      	ldr	r0, [pc, #132]	; (8003d0c <HAL_UART_MspDeInit+0xf4>)

 8003c86:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003c88:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003c8c:	6413      	str	r3, [r2, #64]	; 0x40

 8003c8e:	f7fd f8a9 	bl	8000de4 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8003c92:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003c94:	f7fc fe88 	bl	80009a8 <HAL_DMA_DeInit>

 8003c98:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003c9a:	f7fc fe85 	bl	80009a8 <HAL_DMA_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */
 8003c9e:	2026      	movs	r0, #38	; 0x26

 8003ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  /* USER CODE BEGIN USART3_MspDeInit 1 */
 8003ca4:	f7fc bd56 	b.w	8000754 <HAL_NVIC_DisableIRQ>
  {
 8003ca8:	4a19      	ldr	r2, [pc, #100]	; (8003d10 <HAL_UART_MspDeInit+0xf8>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d112      	bne.n	8003cd4 <HAL_UART_MspDeInit+0xbc>

 8003cae:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000

 8003cb2:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003cb6:	4815      	ldr	r0, [pc, #84]	; (8003d0c <HAL_UART_MspDeInit+0xf4>)

 8003cb8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003cba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cbe:	6413      	str	r3, [r2, #64]	; 0x40

 8003cc0:	f7fd f890 	bl	8000de4 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8003cc4:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003cc6:	f7fc fe6f 	bl	80009a8 <HAL_DMA_DeInit>

 8003cca:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003ccc:	f7fc fe6c 	bl	80009a8 <HAL_DMA_DeInit>
  /* USER CODE BEGIN USART3_MspDeInit 1 */
 8003cd0:	2027      	movs	r0, #39	; 0x27
 8003cd2:	e7e5      	b.n	8003ca0 <HAL_UART_MspDeInit+0x88>
  {
 8003cd4:	4a0f      	ldr	r2, [pc, #60]	; (8003d14 <HAL_UART_MspDeInit+0xfc>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d107      	bne.n	8003cea <HAL_UART_MspDeInit+0xd2>

 8003cda:	f502 3292 	add.w	r2, r2, #74752	; 0x12400

 8003cde:	21c0      	movs	r1, #192	; 0xc0

 8003ce0:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8003ce2:	f023 0320 	bic.w	r3, r3, #32
 8003ce6:	6453      	str	r3, [r2, #68]	; 0x44
 8003ce8:	e7a9      	b.n	8003c3e <HAL_UART_MspDeInit+0x26>
 8003cea:	bd10      	pop	{r4, pc}
 8003cec:	40005000 	.word	0x40005000
 8003cf0:	40020400 	.word	0x40020400
 8003cf4:	40020800 	.word	0x40020800
 8003cf8:	40007800 	.word	0x40007800
 8003cfc:	40021400 	.word	0x40021400
 8003d00:	40007c00 	.word	0x40007c00
 8003d04:	40021000 	.word	0x40021000
 8003d08:	40004400 	.word	0x40004400
 8003d0c:	40020c00 	.word	0x40020c00
 8003d10:	40004800 	.word	0x40004800
 8003d14:	40011400 	.word	0x40011400

08003d18 <ssi_update>:

void ssi_update(float locx, float locy, float locz, float accelx,
						float accely, float accelz, float gyrox,
						float gyroy, float gyroz, float dist,
						float spd, float move, float temp, float pssr,
						float humd, char *sts) {
 8003d18:	b530      	push	{r4, r5, lr}
	char Value_Str[400];
	char AT_Rpl[400];

	uint8_t len_at, len_value;

	memset(AT_Str,'\0',400);
 8003d1a:	f44f 74c8 	mov.w	r4, #400	; 0x190
						float humd, char *sts) {
 8003d1e:	4605      	mov	r5, r0
	memset(AT_Str,'\0',400);
 8003d20:	2100      	movs	r1, #0
 8003d22:	4622      	mov	r2, r4
						float humd, char *sts) {
 8003d24:	ed2d 8b10 	vpush	{d8-d15}
 8003d28:	f5ad 7d67 	sub.w	sp, sp, #924	; 0x39c
 8003d2c:	eef0 ea66 	vmov.f32	s29, s13
 8003d30:	eef0 ba63 	vmov.f32	s23, s7
	memset(AT_Str,'\0',400);
 8003d34:	a81e      	add	r0, sp, #120	; 0x78
						float humd, char *sts) {
 8003d36:	eef0 ca64 	vmov.f32	s25, s9
 8003d3a:	eef0 da65 	vmov.f32	s27, s11
 8003d3e:	eef0 aa40 	vmov.f32	s21, s0
 8003d42:	eeb0 8a60 	vmov.f32	s16, s1
 8003d46:	eeb0 ba43 	vmov.f32	s22, s6
 8003d4a:	eeb0 ca44 	vmov.f32	s24, s8
 8003d4e:	eeb0 da45 	vmov.f32	s26, s10
 8003d52:	eeb0 ea46 	vmov.f32	s28, s12
 8003d56:	eeb0 aa62 	vmov.f32	s20, s5
 8003d5a:	eef0 8a41 	vmov.f32	s17, s2
 8003d5e:	eeb0 9a61 	vmov.f32	s18, s3
 8003d62:	eef0 9a42 	vmov.f32	s19, s4
 8003d66:	eeb0 fa47 	vmov.f32	s30, s14
	memset(AT_Str,'\0',400);
 8003d6a:	f000 fa42 	bl	80041f2 <memset>
	memset(Value_Str,'\0',400);
 8003d6e:	4622      	mov	r2, r4
 8003d70:	2100      	movs	r1, #0
 8003d72:	a882      	add	r0, sp, #520	; 0x208
				locx,locy,locz,accelx,accely,accelz,gyrox,gyroy,gyroz,
				dist,spd,move,temp,pssr,humd,sts);

	len_at = sprintf(AT_Str,"AT+S.INPUTSSI=%d\r",len_value);

	HAL_UART_Transmit_DMA(&huart2, (uint8_t *) AT_Str, len_at);
 8003d74:	4c2e      	ldr	r4, [pc, #184]	; (8003e30 <ssi_update+0x118>)
	memset(Value_Str,'\0',400);
 8003d76:	f000 fa3c 	bl	80041f2 <memset>
	len_value = sprintf(Value_Str,
 8003d7a:	eeb7 7aee 	vcvt.f64.f32	d7, s29
 8003d7e:	eeb7 2ae9 	vcvt.f64.f32	d2, s19
 8003d82:	951c      	str	r5, [sp, #112]	; 0x70
 8003d84:	eeb7 1ae8 	vcvt.f64.f32	d1, s17
 8003d88:	492a      	ldr	r1, [pc, #168]	; (8003e34 <ssi_update+0x11c>)
 8003d8a:	eeb7 facf 	vcvt.f64.f32	d15, s30
 8003d8e:	a882      	add	r0, sp, #520	; 0x208
 8003d90:	eeb7 eace 	vcvt.f64.f32	d14, s28
 8003d94:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
 8003d98:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 8003d9c:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 8003da0:	eeb7 7aed 	vcvt.f64.f32	d7, s27
 8003da4:	eeb7 dacd 	vcvt.f64.f32	d13, s26
 8003da8:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8003dac:	eeb7 7aec 	vcvt.f64.f32	d7, s25
 8003db0:	eeb7 cacc 	vcvt.f64.f32	d12, s24
 8003db4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8003db8:	eeb7 7aeb 	vcvt.f64.f32	d7, s23
 8003dbc:	eeb7 bacb 	vcvt.f64.f32	d11, s22
 8003dc0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8003dc4:	eeb7 7aca 	vcvt.f64.f32	d7, s20
 8003dc8:	ed8d 2b06 	vstr	d2, [sp, #24]
 8003dcc:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003dd0:	eeb7 7aea 	vcvt.f64.f32	d7, s21
 8003dd4:	ed8d 1b02 	vstr	d1, [sp, #8]
 8003dd8:	ec53 2b17 	vmov	r2, r3, d7
 8003ddc:	ed8d fb1a 	vstr	d15, [sp, #104]	; 0x68
 8003de0:	ed8d eb16 	vstr	d14, [sp, #88]	; 0x58
 8003de4:	ed8d db12 	vstr	d13, [sp, #72]	; 0x48
 8003de8:	ed8d cb0e 	vstr	d12, [sp, #56]	; 0x38
 8003dec:	ed8d bb0a 	vstr	d11, [sp, #40]	; 0x28
 8003df0:	ed8d 9b04 	vstr	d9, [sp, #16]
 8003df4:	ed8d 8b00 	vstr	d8, [sp]
 8003df8:	f001 f836 	bl	8004e68 <siprintf>
	len_at = sprintf(AT_Str,"AT+S.INPUTSSI=%d\r",len_value);
 8003dfc:	490e      	ldr	r1, [pc, #56]	; (8003e38 <ssi_update+0x120>)
 8003dfe:	b2c5      	uxtb	r5, r0
 8003e00:	a81e      	add	r0, sp, #120	; 0x78
 8003e02:	462a      	mov	r2, r5
 8003e04:	f001 f830 	bl	8004e68 <siprintf>
	HAL_UART_Transmit_DMA(&huart2, (uint8_t *) AT_Str, len_at);
 8003e08:	a91e      	add	r1, sp, #120	; 0x78
 8003e0a:	b2c2      	uxtb	r2, r0
 8003e0c:	4620      	mov	r0, r4
 8003e0e:	f7fe f991 	bl	8002134 <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 8003e12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e16:	f7fc fc35 	bl	8000684 <HAL_Delay>
	HAL_UART_Transmit_DMA(&huart2, (uint8_t *) Value_Str, len_value);
 8003e1a:	462a      	mov	r2, r5
 8003e1c:	a982      	add	r1, sp, #520	; 0x208
 8003e1e:	4620      	mov	r0, r4
 8003e20:	f7fe f988 	bl	8002134 <HAL_UART_Transmit_DMA>

}
 8003e24:	f50d 7d67 	add.w	sp, sp, #924	; 0x39c
 8003e28:	ecbd 8b10 	vpop	{d8-d15}
 8003e2c:	bd30      	pop	{r4, r5, pc}
 8003e2e:	bf00      	nop
 8003e30:	20000204 	.word	0x20000204
 8003e34:	08006b25 	.word	0x08006b25
 8003e38:	08006b58 	.word	0x08006b58

08003e3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003e3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e74 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003e40:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003e42:	e003      	b.n	8003e4c <LoopCopyDataInit>

08003e44 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003e44:	4b0c      	ldr	r3, [pc, #48]	; (8003e78 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003e46:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003e48:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003e4a:	3104      	adds	r1, #4

08003e4c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003e4c:	480b      	ldr	r0, [pc, #44]	; (8003e7c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003e4e:	4b0c      	ldr	r3, [pc, #48]	; (8003e80 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003e50:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003e52:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003e54:	d3f6      	bcc.n	8003e44 <CopyDataInit>
  ldr  r2, =_sbss
 8003e56:	4a0b      	ldr	r2, [pc, #44]	; (8003e84 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003e58:	e002      	b.n	8003e60 <LoopFillZerobss>

08003e5a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003e5a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003e5c:	f842 3b04 	str.w	r3, [r2], #4

08003e60 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003e60:	4b09      	ldr	r3, [pc, #36]	; (8003e88 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003e62:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003e64:	d3f9      	bcc.n	8003e5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003e66:	f7ff fb6d 	bl	8003544 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e6a:	f000 f993 	bl	8004194 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e6e:	f7ff f8d5 	bl	800301c <main>
  bx  lr    
 8003e72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003e74:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003e78:	08006e40 	.word	0x08006e40
  ldr  r0, =_sdata
 8003e7c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003e80:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8003e84:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8003e88:	20001950 	.word	0x20001950

08003e8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e8c:	e7fe      	b.n	8003e8c <ADC_IRQHandler>
	...

08003e90 <__errno>:
 8003e90:	4b01      	ldr	r3, [pc, #4]	; (8003e98 <__errno+0x8>)
 8003e92:	6818      	ldr	r0, [r3, #0]
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	2000000c 	.word	0x2000000c

08003e9c <__sflush_r>:
 8003e9c:	898a      	ldrh	r2, [r1, #12]
 8003e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ea2:	4605      	mov	r5, r0
 8003ea4:	0710      	lsls	r0, r2, #28
 8003ea6:	460c      	mov	r4, r1
 8003ea8:	d45a      	bmi.n	8003f60 <__sflush_r+0xc4>
 8003eaa:	684b      	ldr	r3, [r1, #4]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	dc05      	bgt.n	8003ebc <__sflush_r+0x20>
 8003eb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	dc02      	bgt.n	8003ebc <__sflush_r+0x20>
 8003eb6:	2000      	movs	r0, #0
 8003eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ebc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ebe:	2e00      	cmp	r6, #0
 8003ec0:	d0f9      	beq.n	8003eb6 <__sflush_r+0x1a>
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003ec8:	682f      	ldr	r7, [r5, #0]
 8003eca:	602b      	str	r3, [r5, #0]
 8003ecc:	d033      	beq.n	8003f36 <__sflush_r+0x9a>
 8003ece:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003ed0:	89a3      	ldrh	r3, [r4, #12]
 8003ed2:	075a      	lsls	r2, r3, #29
 8003ed4:	d505      	bpl.n	8003ee2 <__sflush_r+0x46>
 8003ed6:	6863      	ldr	r3, [r4, #4]
 8003ed8:	1ac0      	subs	r0, r0, r3
 8003eda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003edc:	b10b      	cbz	r3, 8003ee2 <__sflush_r+0x46>
 8003ede:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ee0:	1ac0      	subs	r0, r0, r3
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ee8:	6a21      	ldr	r1, [r4, #32]
 8003eea:	4628      	mov	r0, r5
 8003eec:	47b0      	blx	r6
 8003eee:	1c43      	adds	r3, r0, #1
 8003ef0:	89a3      	ldrh	r3, [r4, #12]
 8003ef2:	d106      	bne.n	8003f02 <__sflush_r+0x66>
 8003ef4:	6829      	ldr	r1, [r5, #0]
 8003ef6:	291d      	cmp	r1, #29
 8003ef8:	d84b      	bhi.n	8003f92 <__sflush_r+0xf6>
 8003efa:	4a2b      	ldr	r2, [pc, #172]	; (8003fa8 <__sflush_r+0x10c>)
 8003efc:	40ca      	lsrs	r2, r1
 8003efe:	07d6      	lsls	r6, r2, #31
 8003f00:	d547      	bpl.n	8003f92 <__sflush_r+0xf6>
 8003f02:	2200      	movs	r2, #0
 8003f04:	6062      	str	r2, [r4, #4]
 8003f06:	04d9      	lsls	r1, r3, #19
 8003f08:	6922      	ldr	r2, [r4, #16]
 8003f0a:	6022      	str	r2, [r4, #0]
 8003f0c:	d504      	bpl.n	8003f18 <__sflush_r+0x7c>
 8003f0e:	1c42      	adds	r2, r0, #1
 8003f10:	d101      	bne.n	8003f16 <__sflush_r+0x7a>
 8003f12:	682b      	ldr	r3, [r5, #0]
 8003f14:	b903      	cbnz	r3, 8003f18 <__sflush_r+0x7c>
 8003f16:	6560      	str	r0, [r4, #84]	; 0x54
 8003f18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f1a:	602f      	str	r7, [r5, #0]
 8003f1c:	2900      	cmp	r1, #0
 8003f1e:	d0ca      	beq.n	8003eb6 <__sflush_r+0x1a>
 8003f20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f24:	4299      	cmp	r1, r3
 8003f26:	d002      	beq.n	8003f2e <__sflush_r+0x92>
 8003f28:	4628      	mov	r0, r5
 8003f2a:	f000 f96b 	bl	8004204 <_free_r>
 8003f2e:	2000      	movs	r0, #0
 8003f30:	6360      	str	r0, [r4, #52]	; 0x34
 8003f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f36:	6a21      	ldr	r1, [r4, #32]
 8003f38:	2301      	movs	r3, #1
 8003f3a:	4628      	mov	r0, r5
 8003f3c:	47b0      	blx	r6
 8003f3e:	1c41      	adds	r1, r0, #1
 8003f40:	d1c6      	bne.n	8003ed0 <__sflush_r+0x34>
 8003f42:	682b      	ldr	r3, [r5, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d0c3      	beq.n	8003ed0 <__sflush_r+0x34>
 8003f48:	2b1d      	cmp	r3, #29
 8003f4a:	d001      	beq.n	8003f50 <__sflush_r+0xb4>
 8003f4c:	2b16      	cmp	r3, #22
 8003f4e:	d101      	bne.n	8003f54 <__sflush_r+0xb8>
 8003f50:	602f      	str	r7, [r5, #0]
 8003f52:	e7b0      	b.n	8003eb6 <__sflush_r+0x1a>
 8003f54:	89a3      	ldrh	r3, [r4, #12]
 8003f56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f5a:	81a3      	strh	r3, [r4, #12]
 8003f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f60:	690f      	ldr	r7, [r1, #16]
 8003f62:	2f00      	cmp	r7, #0
 8003f64:	d0a7      	beq.n	8003eb6 <__sflush_r+0x1a>
 8003f66:	0793      	lsls	r3, r2, #30
 8003f68:	680e      	ldr	r6, [r1, #0]
 8003f6a:	bf08      	it	eq
 8003f6c:	694b      	ldreq	r3, [r1, #20]
 8003f6e:	600f      	str	r7, [r1, #0]
 8003f70:	bf18      	it	ne
 8003f72:	2300      	movne	r3, #0
 8003f74:	eba6 0807 	sub.w	r8, r6, r7
 8003f78:	608b      	str	r3, [r1, #8]
 8003f7a:	f1b8 0f00 	cmp.w	r8, #0
 8003f7e:	dd9a      	ble.n	8003eb6 <__sflush_r+0x1a>
 8003f80:	4643      	mov	r3, r8
 8003f82:	463a      	mov	r2, r7
 8003f84:	6a21      	ldr	r1, [r4, #32]
 8003f86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003f88:	4628      	mov	r0, r5
 8003f8a:	47b0      	blx	r6
 8003f8c:	2800      	cmp	r0, #0
 8003f8e:	dc07      	bgt.n	8003fa0 <__sflush_r+0x104>
 8003f90:	89a3      	ldrh	r3, [r4, #12]
 8003f92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f96:	81a3      	strh	r3, [r4, #12]
 8003f98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fa0:	4407      	add	r7, r0
 8003fa2:	eba8 0800 	sub.w	r8, r8, r0
 8003fa6:	e7e8      	b.n	8003f7a <__sflush_r+0xde>
 8003fa8:	20400001 	.word	0x20400001

08003fac <_fflush_r>:
 8003fac:	b538      	push	{r3, r4, r5, lr}
 8003fae:	690b      	ldr	r3, [r1, #16]
 8003fb0:	4605      	mov	r5, r0
 8003fb2:	460c      	mov	r4, r1
 8003fb4:	b1db      	cbz	r3, 8003fee <_fflush_r+0x42>
 8003fb6:	b118      	cbz	r0, 8003fc0 <_fflush_r+0x14>
 8003fb8:	6983      	ldr	r3, [r0, #24]
 8003fba:	b90b      	cbnz	r3, 8003fc0 <_fflush_r+0x14>
 8003fbc:	f000 f860 	bl	8004080 <__sinit>
 8003fc0:	4b0c      	ldr	r3, [pc, #48]	; (8003ff4 <_fflush_r+0x48>)
 8003fc2:	429c      	cmp	r4, r3
 8003fc4:	d109      	bne.n	8003fda <_fflush_r+0x2e>
 8003fc6:	686c      	ldr	r4, [r5, #4]
 8003fc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fcc:	b17b      	cbz	r3, 8003fee <_fflush_r+0x42>
 8003fce:	4621      	mov	r1, r4
 8003fd0:	4628      	mov	r0, r5
 8003fd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003fd6:	f7ff bf61 	b.w	8003e9c <__sflush_r>
 8003fda:	4b07      	ldr	r3, [pc, #28]	; (8003ff8 <_fflush_r+0x4c>)
 8003fdc:	429c      	cmp	r4, r3
 8003fde:	d101      	bne.n	8003fe4 <_fflush_r+0x38>
 8003fe0:	68ac      	ldr	r4, [r5, #8]
 8003fe2:	e7f1      	b.n	8003fc8 <_fflush_r+0x1c>
 8003fe4:	4b05      	ldr	r3, [pc, #20]	; (8003ffc <_fflush_r+0x50>)
 8003fe6:	429c      	cmp	r4, r3
 8003fe8:	bf08      	it	eq
 8003fea:	68ec      	ldreq	r4, [r5, #12]
 8003fec:	e7ec      	b.n	8003fc8 <_fflush_r+0x1c>
 8003fee:	2000      	movs	r0, #0
 8003ff0:	bd38      	pop	{r3, r4, r5, pc}
 8003ff2:	bf00      	nop
 8003ff4:	08006b8c 	.word	0x08006b8c
 8003ff8:	08006bac 	.word	0x08006bac
 8003ffc:	08006b6c 	.word	0x08006b6c

08004000 <_cleanup_r>:
 8004000:	4901      	ldr	r1, [pc, #4]	; (8004008 <_cleanup_r+0x8>)
 8004002:	f000 b8a9 	b.w	8004158 <_fwalk_reent>
 8004006:	bf00      	nop
 8004008:	08003fad 	.word	0x08003fad

0800400c <std.isra.0>:
 800400c:	2300      	movs	r3, #0
 800400e:	b510      	push	{r4, lr}
 8004010:	4604      	mov	r4, r0
 8004012:	6003      	str	r3, [r0, #0]
 8004014:	6043      	str	r3, [r0, #4]
 8004016:	6083      	str	r3, [r0, #8]
 8004018:	8181      	strh	r1, [r0, #12]
 800401a:	6643      	str	r3, [r0, #100]	; 0x64
 800401c:	81c2      	strh	r2, [r0, #14]
 800401e:	6103      	str	r3, [r0, #16]
 8004020:	6143      	str	r3, [r0, #20]
 8004022:	6183      	str	r3, [r0, #24]
 8004024:	4619      	mov	r1, r3
 8004026:	2208      	movs	r2, #8
 8004028:	305c      	adds	r0, #92	; 0x5c
 800402a:	f000 f8e2 	bl	80041f2 <memset>
 800402e:	4b05      	ldr	r3, [pc, #20]	; (8004044 <std.isra.0+0x38>)
 8004030:	6263      	str	r3, [r4, #36]	; 0x24
 8004032:	4b05      	ldr	r3, [pc, #20]	; (8004048 <std.isra.0+0x3c>)
 8004034:	62a3      	str	r3, [r4, #40]	; 0x28
 8004036:	4b05      	ldr	r3, [pc, #20]	; (800404c <std.isra.0+0x40>)
 8004038:	62e3      	str	r3, [r4, #44]	; 0x2c
 800403a:	4b05      	ldr	r3, [pc, #20]	; (8004050 <std.isra.0+0x44>)
 800403c:	6224      	str	r4, [r4, #32]
 800403e:	6323      	str	r3, [r4, #48]	; 0x30
 8004040:	bd10      	pop	{r4, pc}
 8004042:	bf00      	nop
 8004044:	08004eb1 	.word	0x08004eb1
 8004048:	08004ed3 	.word	0x08004ed3
 800404c:	08004f0b 	.word	0x08004f0b
 8004050:	08004f2f 	.word	0x08004f2f

08004054 <__sfmoreglue>:
 8004054:	b570      	push	{r4, r5, r6, lr}
 8004056:	1e4a      	subs	r2, r1, #1
 8004058:	2568      	movs	r5, #104	; 0x68
 800405a:	4355      	muls	r5, r2
 800405c:	460e      	mov	r6, r1
 800405e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004062:	f000 f91d 	bl	80042a0 <_malloc_r>
 8004066:	4604      	mov	r4, r0
 8004068:	b140      	cbz	r0, 800407c <__sfmoreglue+0x28>
 800406a:	2100      	movs	r1, #0
 800406c:	e880 0042 	stmia.w	r0, {r1, r6}
 8004070:	300c      	adds	r0, #12
 8004072:	60a0      	str	r0, [r4, #8]
 8004074:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004078:	f000 f8bb 	bl	80041f2 <memset>
 800407c:	4620      	mov	r0, r4
 800407e:	bd70      	pop	{r4, r5, r6, pc}

08004080 <__sinit>:
 8004080:	6983      	ldr	r3, [r0, #24]
 8004082:	b510      	push	{r4, lr}
 8004084:	4604      	mov	r4, r0
 8004086:	bb33      	cbnz	r3, 80040d6 <__sinit+0x56>
 8004088:	6483      	str	r3, [r0, #72]	; 0x48
 800408a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800408c:	6503      	str	r3, [r0, #80]	; 0x50
 800408e:	4b12      	ldr	r3, [pc, #72]	; (80040d8 <__sinit+0x58>)
 8004090:	4a12      	ldr	r2, [pc, #72]	; (80040dc <__sinit+0x5c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6282      	str	r2, [r0, #40]	; 0x28
 8004096:	4298      	cmp	r0, r3
 8004098:	bf04      	itt	eq
 800409a:	2301      	moveq	r3, #1
 800409c:	6183      	streq	r3, [r0, #24]
 800409e:	f000 f81f 	bl	80040e0 <__sfp>
 80040a2:	6060      	str	r0, [r4, #4]
 80040a4:	4620      	mov	r0, r4
 80040a6:	f000 f81b 	bl	80040e0 <__sfp>
 80040aa:	60a0      	str	r0, [r4, #8]
 80040ac:	4620      	mov	r0, r4
 80040ae:	f000 f817 	bl	80040e0 <__sfp>
 80040b2:	2200      	movs	r2, #0
 80040b4:	60e0      	str	r0, [r4, #12]
 80040b6:	2104      	movs	r1, #4
 80040b8:	6860      	ldr	r0, [r4, #4]
 80040ba:	f7ff ffa7 	bl	800400c <std.isra.0>
 80040be:	2201      	movs	r2, #1
 80040c0:	2109      	movs	r1, #9
 80040c2:	68a0      	ldr	r0, [r4, #8]
 80040c4:	f7ff ffa2 	bl	800400c <std.isra.0>
 80040c8:	2202      	movs	r2, #2
 80040ca:	2112      	movs	r1, #18
 80040cc:	68e0      	ldr	r0, [r4, #12]
 80040ce:	f7ff ff9d 	bl	800400c <std.isra.0>
 80040d2:	2301      	movs	r3, #1
 80040d4:	61a3      	str	r3, [r4, #24]
 80040d6:	bd10      	pop	{r4, pc}
 80040d8:	08006bcc 	.word	0x08006bcc
 80040dc:	08004001 	.word	0x08004001

080040e0 <__sfp>:
 80040e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040e2:	4b1c      	ldr	r3, [pc, #112]	; (8004154 <__sfp+0x74>)
 80040e4:	681e      	ldr	r6, [r3, #0]
 80040e6:	69b3      	ldr	r3, [r6, #24]
 80040e8:	4607      	mov	r7, r0
 80040ea:	b913      	cbnz	r3, 80040f2 <__sfp+0x12>
 80040ec:	4630      	mov	r0, r6
 80040ee:	f7ff ffc7 	bl	8004080 <__sinit>
 80040f2:	3648      	adds	r6, #72	; 0x48
 80040f4:	68b4      	ldr	r4, [r6, #8]
 80040f6:	6873      	ldr	r3, [r6, #4]
 80040f8:	3b01      	subs	r3, #1
 80040fa:	d503      	bpl.n	8004104 <__sfp+0x24>
 80040fc:	6833      	ldr	r3, [r6, #0]
 80040fe:	b133      	cbz	r3, 800410e <__sfp+0x2e>
 8004100:	6836      	ldr	r6, [r6, #0]
 8004102:	e7f7      	b.n	80040f4 <__sfp+0x14>
 8004104:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004108:	b16d      	cbz	r5, 8004126 <__sfp+0x46>
 800410a:	3468      	adds	r4, #104	; 0x68
 800410c:	e7f4      	b.n	80040f8 <__sfp+0x18>
 800410e:	2104      	movs	r1, #4
 8004110:	4638      	mov	r0, r7
 8004112:	f7ff ff9f 	bl	8004054 <__sfmoreglue>
 8004116:	6030      	str	r0, [r6, #0]
 8004118:	2800      	cmp	r0, #0
 800411a:	d1f1      	bne.n	8004100 <__sfp+0x20>
 800411c:	230c      	movs	r3, #12
 800411e:	603b      	str	r3, [r7, #0]
 8004120:	4604      	mov	r4, r0
 8004122:	4620      	mov	r0, r4
 8004124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004126:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800412a:	81e3      	strh	r3, [r4, #14]
 800412c:	2301      	movs	r3, #1
 800412e:	81a3      	strh	r3, [r4, #12]
 8004130:	6665      	str	r5, [r4, #100]	; 0x64
 8004132:	6025      	str	r5, [r4, #0]
 8004134:	60a5      	str	r5, [r4, #8]
 8004136:	6065      	str	r5, [r4, #4]
 8004138:	6125      	str	r5, [r4, #16]
 800413a:	6165      	str	r5, [r4, #20]
 800413c:	61a5      	str	r5, [r4, #24]
 800413e:	2208      	movs	r2, #8
 8004140:	4629      	mov	r1, r5
 8004142:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004146:	f000 f854 	bl	80041f2 <memset>
 800414a:	6365      	str	r5, [r4, #52]	; 0x34
 800414c:	63a5      	str	r5, [r4, #56]	; 0x38
 800414e:	64a5      	str	r5, [r4, #72]	; 0x48
 8004150:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004152:	e7e6      	b.n	8004122 <__sfp+0x42>
 8004154:	08006bcc 	.word	0x08006bcc

08004158 <_fwalk_reent>:
 8004158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800415c:	4680      	mov	r8, r0
 800415e:	4689      	mov	r9, r1
 8004160:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004164:	2600      	movs	r6, #0
 8004166:	b914      	cbnz	r4, 800416e <_fwalk_reent+0x16>
 8004168:	4630      	mov	r0, r6
 800416a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800416e:	68a5      	ldr	r5, [r4, #8]
 8004170:	6867      	ldr	r7, [r4, #4]
 8004172:	3f01      	subs	r7, #1
 8004174:	d501      	bpl.n	800417a <_fwalk_reent+0x22>
 8004176:	6824      	ldr	r4, [r4, #0]
 8004178:	e7f5      	b.n	8004166 <_fwalk_reent+0xe>
 800417a:	89ab      	ldrh	r3, [r5, #12]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d907      	bls.n	8004190 <_fwalk_reent+0x38>
 8004180:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004184:	3301      	adds	r3, #1
 8004186:	d003      	beq.n	8004190 <_fwalk_reent+0x38>
 8004188:	4629      	mov	r1, r5
 800418a:	4640      	mov	r0, r8
 800418c:	47c8      	blx	r9
 800418e:	4306      	orrs	r6, r0
 8004190:	3568      	adds	r5, #104	; 0x68
 8004192:	e7ee      	b.n	8004172 <_fwalk_reent+0x1a>

08004194 <__libc_init_array>:
 8004194:	b570      	push	{r4, r5, r6, lr}
 8004196:	4e0d      	ldr	r6, [pc, #52]	; (80041cc <__libc_init_array+0x38>)
 8004198:	4c0d      	ldr	r4, [pc, #52]	; (80041d0 <__libc_init_array+0x3c>)
 800419a:	1ba4      	subs	r4, r4, r6
 800419c:	10a4      	asrs	r4, r4, #2
 800419e:	2500      	movs	r5, #0
 80041a0:	42a5      	cmp	r5, r4
 80041a2:	d109      	bne.n	80041b8 <__libc_init_array+0x24>
 80041a4:	4e0b      	ldr	r6, [pc, #44]	; (80041d4 <__libc_init_array+0x40>)
 80041a6:	4c0c      	ldr	r4, [pc, #48]	; (80041d8 <__libc_init_array+0x44>)
 80041a8:	f002 fc44 	bl	8006a34 <_init>
 80041ac:	1ba4      	subs	r4, r4, r6
 80041ae:	10a4      	asrs	r4, r4, #2
 80041b0:	2500      	movs	r5, #0
 80041b2:	42a5      	cmp	r5, r4
 80041b4:	d105      	bne.n	80041c2 <__libc_init_array+0x2e>
 80041b6:	bd70      	pop	{r4, r5, r6, pc}
 80041b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80041bc:	4798      	blx	r3
 80041be:	3501      	adds	r5, #1
 80041c0:	e7ee      	b.n	80041a0 <__libc_init_array+0xc>
 80041c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80041c6:	4798      	blx	r3
 80041c8:	3501      	adds	r5, #1
 80041ca:	e7f2      	b.n	80041b2 <__libc_init_array+0x1e>
 80041cc:	08006e38 	.word	0x08006e38
 80041d0:	08006e38 	.word	0x08006e38
 80041d4:	08006e38 	.word	0x08006e38
 80041d8:	08006e3c 	.word	0x08006e3c

080041dc <memcpy>:
 80041dc:	b510      	push	{r4, lr}
 80041de:	1e43      	subs	r3, r0, #1
 80041e0:	440a      	add	r2, r1
 80041e2:	4291      	cmp	r1, r2
 80041e4:	d100      	bne.n	80041e8 <memcpy+0xc>
 80041e6:	bd10      	pop	{r4, pc}
 80041e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041f0:	e7f7      	b.n	80041e2 <memcpy+0x6>

080041f2 <memset>:
 80041f2:	4402      	add	r2, r0
 80041f4:	4603      	mov	r3, r0
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d100      	bne.n	80041fc <memset+0xa>
 80041fa:	4770      	bx	lr
 80041fc:	f803 1b01 	strb.w	r1, [r3], #1
 8004200:	e7f9      	b.n	80041f6 <memset+0x4>
	...

08004204 <_free_r>:
 8004204:	b538      	push	{r3, r4, r5, lr}
 8004206:	4605      	mov	r5, r0
 8004208:	2900      	cmp	r1, #0
 800420a:	d045      	beq.n	8004298 <_free_r+0x94>
 800420c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004210:	1f0c      	subs	r4, r1, #4
 8004212:	2b00      	cmp	r3, #0
 8004214:	bfb8      	it	lt
 8004216:	18e4      	addlt	r4, r4, r3
 8004218:	f001 fe10 	bl	8005e3c <__malloc_lock>
 800421c:	4a1f      	ldr	r2, [pc, #124]	; (800429c <_free_r+0x98>)
 800421e:	6813      	ldr	r3, [r2, #0]
 8004220:	4610      	mov	r0, r2
 8004222:	b933      	cbnz	r3, 8004232 <_free_r+0x2e>
 8004224:	6063      	str	r3, [r4, #4]
 8004226:	6014      	str	r4, [r2, #0]
 8004228:	4628      	mov	r0, r5
 800422a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800422e:	f001 be06 	b.w	8005e3e <__malloc_unlock>
 8004232:	42a3      	cmp	r3, r4
 8004234:	d90c      	bls.n	8004250 <_free_r+0x4c>
 8004236:	6821      	ldr	r1, [r4, #0]
 8004238:	1862      	adds	r2, r4, r1
 800423a:	4293      	cmp	r3, r2
 800423c:	bf04      	itt	eq
 800423e:	681a      	ldreq	r2, [r3, #0]
 8004240:	685b      	ldreq	r3, [r3, #4]
 8004242:	6063      	str	r3, [r4, #4]
 8004244:	bf04      	itt	eq
 8004246:	1852      	addeq	r2, r2, r1
 8004248:	6022      	streq	r2, [r4, #0]
 800424a:	6004      	str	r4, [r0, #0]
 800424c:	e7ec      	b.n	8004228 <_free_r+0x24>
 800424e:	4613      	mov	r3, r2
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	b10a      	cbz	r2, 8004258 <_free_r+0x54>
 8004254:	42a2      	cmp	r2, r4
 8004256:	d9fa      	bls.n	800424e <_free_r+0x4a>
 8004258:	6819      	ldr	r1, [r3, #0]
 800425a:	1858      	adds	r0, r3, r1
 800425c:	42a0      	cmp	r0, r4
 800425e:	d10b      	bne.n	8004278 <_free_r+0x74>
 8004260:	6820      	ldr	r0, [r4, #0]
 8004262:	4401      	add	r1, r0
 8004264:	1858      	adds	r0, r3, r1
 8004266:	4282      	cmp	r2, r0
 8004268:	6019      	str	r1, [r3, #0]
 800426a:	d1dd      	bne.n	8004228 <_free_r+0x24>
 800426c:	6810      	ldr	r0, [r2, #0]
 800426e:	6852      	ldr	r2, [r2, #4]
 8004270:	605a      	str	r2, [r3, #4]
 8004272:	4401      	add	r1, r0
 8004274:	6019      	str	r1, [r3, #0]
 8004276:	e7d7      	b.n	8004228 <_free_r+0x24>
 8004278:	d902      	bls.n	8004280 <_free_r+0x7c>
 800427a:	230c      	movs	r3, #12
 800427c:	602b      	str	r3, [r5, #0]
 800427e:	e7d3      	b.n	8004228 <_free_r+0x24>
 8004280:	6820      	ldr	r0, [r4, #0]
 8004282:	1821      	adds	r1, r4, r0
 8004284:	428a      	cmp	r2, r1
 8004286:	bf04      	itt	eq
 8004288:	6811      	ldreq	r1, [r2, #0]
 800428a:	6852      	ldreq	r2, [r2, #4]
 800428c:	6062      	str	r2, [r4, #4]
 800428e:	bf04      	itt	eq
 8004290:	1809      	addeq	r1, r1, r0
 8004292:	6021      	streq	r1, [r4, #0]
 8004294:	605c      	str	r4, [r3, #4]
 8004296:	e7c7      	b.n	8004228 <_free_r+0x24>
 8004298:	bd38      	pop	{r3, r4, r5, pc}
 800429a:	bf00      	nop
 800429c:	200001fc 	.word	0x200001fc

080042a0 <_malloc_r>:
 80042a0:	b570      	push	{r4, r5, r6, lr}
 80042a2:	1ccd      	adds	r5, r1, #3
 80042a4:	f025 0503 	bic.w	r5, r5, #3
 80042a8:	3508      	adds	r5, #8
 80042aa:	2d0c      	cmp	r5, #12
 80042ac:	bf38      	it	cc
 80042ae:	250c      	movcc	r5, #12
 80042b0:	2d00      	cmp	r5, #0
 80042b2:	4606      	mov	r6, r0
 80042b4:	db01      	blt.n	80042ba <_malloc_r+0x1a>
 80042b6:	42a9      	cmp	r1, r5
 80042b8:	d903      	bls.n	80042c2 <_malloc_r+0x22>
 80042ba:	230c      	movs	r3, #12
 80042bc:	6033      	str	r3, [r6, #0]
 80042be:	2000      	movs	r0, #0
 80042c0:	bd70      	pop	{r4, r5, r6, pc}
 80042c2:	f001 fdbb 	bl	8005e3c <__malloc_lock>
 80042c6:	4a23      	ldr	r2, [pc, #140]	; (8004354 <_malloc_r+0xb4>)
 80042c8:	6814      	ldr	r4, [r2, #0]
 80042ca:	4621      	mov	r1, r4
 80042cc:	b991      	cbnz	r1, 80042f4 <_malloc_r+0x54>
 80042ce:	4c22      	ldr	r4, [pc, #136]	; (8004358 <_malloc_r+0xb8>)
 80042d0:	6823      	ldr	r3, [r4, #0]
 80042d2:	b91b      	cbnz	r3, 80042dc <_malloc_r+0x3c>
 80042d4:	4630      	mov	r0, r6
 80042d6:	f000 fd09 	bl	8004cec <_sbrk_r>
 80042da:	6020      	str	r0, [r4, #0]
 80042dc:	4629      	mov	r1, r5
 80042de:	4630      	mov	r0, r6
 80042e0:	f000 fd04 	bl	8004cec <_sbrk_r>
 80042e4:	1c43      	adds	r3, r0, #1
 80042e6:	d126      	bne.n	8004336 <_malloc_r+0x96>
 80042e8:	230c      	movs	r3, #12
 80042ea:	6033      	str	r3, [r6, #0]
 80042ec:	4630      	mov	r0, r6
 80042ee:	f001 fda6 	bl	8005e3e <__malloc_unlock>
 80042f2:	e7e4      	b.n	80042be <_malloc_r+0x1e>
 80042f4:	680b      	ldr	r3, [r1, #0]
 80042f6:	1b5b      	subs	r3, r3, r5
 80042f8:	d41a      	bmi.n	8004330 <_malloc_r+0x90>
 80042fa:	2b0b      	cmp	r3, #11
 80042fc:	d90f      	bls.n	800431e <_malloc_r+0x7e>
 80042fe:	600b      	str	r3, [r1, #0]
 8004300:	50cd      	str	r5, [r1, r3]
 8004302:	18cc      	adds	r4, r1, r3
 8004304:	4630      	mov	r0, r6
 8004306:	f001 fd9a 	bl	8005e3e <__malloc_unlock>
 800430a:	f104 000b 	add.w	r0, r4, #11
 800430e:	1d23      	adds	r3, r4, #4
 8004310:	f020 0007 	bic.w	r0, r0, #7
 8004314:	1ac3      	subs	r3, r0, r3
 8004316:	d01b      	beq.n	8004350 <_malloc_r+0xb0>
 8004318:	425a      	negs	r2, r3
 800431a:	50e2      	str	r2, [r4, r3]
 800431c:	bd70      	pop	{r4, r5, r6, pc}
 800431e:	428c      	cmp	r4, r1
 8004320:	bf0d      	iteet	eq
 8004322:	6863      	ldreq	r3, [r4, #4]
 8004324:	684b      	ldrne	r3, [r1, #4]
 8004326:	6063      	strne	r3, [r4, #4]
 8004328:	6013      	streq	r3, [r2, #0]
 800432a:	bf18      	it	ne
 800432c:	460c      	movne	r4, r1
 800432e:	e7e9      	b.n	8004304 <_malloc_r+0x64>
 8004330:	460c      	mov	r4, r1
 8004332:	6849      	ldr	r1, [r1, #4]
 8004334:	e7ca      	b.n	80042cc <_malloc_r+0x2c>
 8004336:	1cc4      	adds	r4, r0, #3
 8004338:	f024 0403 	bic.w	r4, r4, #3
 800433c:	42a0      	cmp	r0, r4
 800433e:	d005      	beq.n	800434c <_malloc_r+0xac>
 8004340:	1a21      	subs	r1, r4, r0
 8004342:	4630      	mov	r0, r6
 8004344:	f000 fcd2 	bl	8004cec <_sbrk_r>
 8004348:	3001      	adds	r0, #1
 800434a:	d0cd      	beq.n	80042e8 <_malloc_r+0x48>
 800434c:	6025      	str	r5, [r4, #0]
 800434e:	e7d9      	b.n	8004304 <_malloc_r+0x64>
 8004350:	bd70      	pop	{r4, r5, r6, pc}
 8004352:	bf00      	nop
 8004354:	200001fc 	.word	0x200001fc
 8004358:	20000200 	.word	0x20000200

0800435c <__cvt>:
 800435c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800435e:	ed2d 8b02 	vpush	{d8}
 8004362:	eeb0 8b40 	vmov.f64	d8, d0
 8004366:	b085      	sub	sp, #20
 8004368:	4617      	mov	r7, r2
 800436a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800436c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800436e:	ee18 2a90 	vmov	r2, s17
 8004372:	f025 0520 	bic.w	r5, r5, #32
 8004376:	2a00      	cmp	r2, #0
 8004378:	bfb6      	itet	lt
 800437a:	222d      	movlt	r2, #45	; 0x2d
 800437c:	2200      	movge	r2, #0
 800437e:	eeb1 8b40 	vneglt.f64	d8, d0
 8004382:	2d46      	cmp	r5, #70	; 0x46
 8004384:	460c      	mov	r4, r1
 8004386:	701a      	strb	r2, [r3, #0]
 8004388:	d004      	beq.n	8004394 <__cvt+0x38>
 800438a:	2d45      	cmp	r5, #69	; 0x45
 800438c:	d100      	bne.n	8004390 <__cvt+0x34>
 800438e:	3401      	adds	r4, #1
 8004390:	2102      	movs	r1, #2
 8004392:	e000      	b.n	8004396 <__cvt+0x3a>
 8004394:	2103      	movs	r1, #3
 8004396:	ab03      	add	r3, sp, #12
 8004398:	9301      	str	r3, [sp, #4]
 800439a:	ab02      	add	r3, sp, #8
 800439c:	9300      	str	r3, [sp, #0]
 800439e:	4622      	mov	r2, r4
 80043a0:	4633      	mov	r3, r6
 80043a2:	eeb0 0b48 	vmov.f64	d0, d8
 80043a6:	f000 ff3f 	bl	8005228 <_dtoa_r>
 80043aa:	2d47      	cmp	r5, #71	; 0x47
 80043ac:	d101      	bne.n	80043b2 <__cvt+0x56>
 80043ae:	07fb      	lsls	r3, r7, #31
 80043b0:	d516      	bpl.n	80043e0 <__cvt+0x84>
 80043b2:	2d46      	cmp	r5, #70	; 0x46
 80043b4:	eb00 0304 	add.w	r3, r0, r4
 80043b8:	d10c      	bne.n	80043d4 <__cvt+0x78>
 80043ba:	7802      	ldrb	r2, [r0, #0]
 80043bc:	2a30      	cmp	r2, #48	; 0x30
 80043be:	d107      	bne.n	80043d0 <__cvt+0x74>
 80043c0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80043c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c8:	bf1c      	itt	ne
 80043ca:	f1c4 0401 	rsbne	r4, r4, #1
 80043ce:	6034      	strne	r4, [r6, #0]
 80043d0:	6832      	ldr	r2, [r6, #0]
 80043d2:	4413      	add	r3, r2
 80043d4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80043d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043dc:	d10f      	bne.n	80043fe <__cvt+0xa2>
 80043de:	9303      	str	r3, [sp, #12]
 80043e0:	9b03      	ldr	r3, [sp, #12]
 80043e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80043e4:	1a1b      	subs	r3, r3, r0
 80043e6:	6013      	str	r3, [r2, #0]
 80043e8:	b005      	add	sp, #20
 80043ea:	ecbd 8b02 	vpop	{d8}
 80043ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043f0:	1c54      	adds	r4, r2, #1
 80043f2:	9403      	str	r4, [sp, #12]
 80043f4:	7011      	strb	r1, [r2, #0]
 80043f6:	9a03      	ldr	r2, [sp, #12]
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d8f9      	bhi.n	80043f0 <__cvt+0x94>
 80043fc:	e7f0      	b.n	80043e0 <__cvt+0x84>
 80043fe:	2130      	movs	r1, #48	; 0x30
 8004400:	e7f9      	b.n	80043f6 <__cvt+0x9a>

08004402 <__exponent>:
 8004402:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004404:	4603      	mov	r3, r0
 8004406:	2900      	cmp	r1, #0
 8004408:	bfb8      	it	lt
 800440a:	4249      	neglt	r1, r1
 800440c:	f803 2b02 	strb.w	r2, [r3], #2
 8004410:	bfb4      	ite	lt
 8004412:	222d      	movlt	r2, #45	; 0x2d
 8004414:	222b      	movge	r2, #43	; 0x2b
 8004416:	2909      	cmp	r1, #9
 8004418:	7042      	strb	r2, [r0, #1]
 800441a:	dd20      	ble.n	800445e <__exponent+0x5c>
 800441c:	f10d 0207 	add.w	r2, sp, #7
 8004420:	4617      	mov	r7, r2
 8004422:	260a      	movs	r6, #10
 8004424:	fb91 f5f6 	sdiv	r5, r1, r6
 8004428:	fb06 1115 	mls	r1, r6, r5, r1
 800442c:	3130      	adds	r1, #48	; 0x30
 800442e:	2d09      	cmp	r5, #9
 8004430:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004434:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
 8004438:	4629      	mov	r1, r5
 800443a:	dc09      	bgt.n	8004450 <__exponent+0x4e>
 800443c:	3130      	adds	r1, #48	; 0x30
 800443e:	3a02      	subs	r2, #2
 8004440:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004444:	42ba      	cmp	r2, r7
 8004446:	461c      	mov	r4, r3
 8004448:	d304      	bcc.n	8004454 <__exponent+0x52>
 800444a:	1a20      	subs	r0, r4, r0
 800444c:	b003      	add	sp, #12
 800444e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004450:	4622      	mov	r2, r4
 8004452:	e7e7      	b.n	8004424 <__exponent+0x22>
 8004454:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004458:	f803 1b01 	strb.w	r1, [r3], #1
 800445c:	e7f2      	b.n	8004444 <__exponent+0x42>
 800445e:	2230      	movs	r2, #48	; 0x30
 8004460:	461c      	mov	r4, r3
 8004462:	4411      	add	r1, r2
 8004464:	f804 2b02 	strb.w	r2, [r4], #2
 8004468:	7059      	strb	r1, [r3, #1]
 800446a:	e7ee      	b.n	800444a <__exponent+0x48>
 800446c:	0000      	movs	r0, r0
	...

08004470 <_printf_float>:
 8004470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004474:	b08d      	sub	sp, #52	; 0x34
 8004476:	460c      	mov	r4, r1
 8004478:	4616      	mov	r6, r2
 800447a:	461f      	mov	r7, r3
 800447c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004480:	4605      	mov	r5, r0
 8004482:	f001 fc3d 	bl	8005d00 <_localeconv_r>
 8004486:	f8d0 b000 	ldr.w	fp, [r0]
 800448a:	4658      	mov	r0, fp
 800448c:	f7fb ff28 	bl	80002e0 <strlen>
 8004490:	2300      	movs	r3, #0
 8004492:	930a      	str	r3, [sp, #40]	; 0x28
 8004494:	f8d8 3000 	ldr.w	r3, [r8]
 8004498:	9005      	str	r0, [sp, #20]
 800449a:	3307      	adds	r3, #7
 800449c:	f023 0307 	bic.w	r3, r3, #7
 80044a0:	f103 0108 	add.w	r1, r3, #8
 80044a4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80044a8:	6822      	ldr	r2, [r4, #0]
 80044aa:	f8c8 1000 	str.w	r1, [r8]
 80044ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80044b2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80044b6:	ed9f 7ba0 	vldr	d7, [pc, #640]	; 8004738 <_printf_float+0x2c8>
 80044ba:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80044be:	eeb0 6bc0 	vabs.f64	d6, d0
 80044c2:	eeb4 6b47 	vcmp.f64	d6, d7
 80044c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ca:	f340 81ef 	ble.w	80048ac <_printf_float+0x43c>
 80044ce:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80044d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d6:	d502      	bpl.n	80044de <_printf_float+0x6e>
 80044d8:	232d      	movs	r3, #45	; 0x2d
 80044da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044de:	4b98      	ldr	r3, [pc, #608]	; (8004740 <_printf_float+0x2d0>)
 80044e0:	4998      	ldr	r1, [pc, #608]	; (8004744 <_printf_float+0x2d4>)
 80044e2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80044e6:	bf8c      	ite	hi
 80044e8:	4688      	movhi	r8, r1
 80044ea:	4698      	movls	r8, r3
 80044ec:	f022 0204 	bic.w	r2, r2, #4
 80044f0:	2303      	movs	r3, #3
 80044f2:	6123      	str	r3, [r4, #16]
 80044f4:	6022      	str	r2, [r4, #0]
 80044f6:	f04f 0a00 	mov.w	sl, #0
 80044fa:	9700      	str	r7, [sp, #0]
 80044fc:	4633      	mov	r3, r6
 80044fe:	aa0b      	add	r2, sp, #44	; 0x2c
 8004500:	4621      	mov	r1, r4
 8004502:	4628      	mov	r0, r5
 8004504:	f000 f9e0 	bl	80048c8 <_printf_common>
 8004508:	3001      	adds	r0, #1
 800450a:	f040 8090 	bne.w	800462e <_printf_float+0x1be>
 800450e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004512:	b00d      	add	sp, #52	; 0x34
 8004514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004518:	6861      	ldr	r1, [r4, #4]
 800451a:	1c4b      	adds	r3, r1, #1
 800451c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004520:	a80a      	add	r0, sp, #40	; 0x28
 8004522:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
 8004526:	d13c      	bne.n	80045a2 <_printf_float+0x132>
 8004528:	2306      	movs	r3, #6
 800452a:	6063      	str	r3, [r4, #4]
 800452c:	2300      	movs	r3, #0
 800452e:	9303      	str	r3, [sp, #12]
 8004530:	9002      	str	r0, [sp, #8]
 8004532:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004536:	6022      	str	r2, [r4, #0]
 8004538:	f8cd 9004 	str.w	r9, [sp, #4]
 800453c:	f8cd e000 	str.w	lr, [sp]
 8004540:	6861      	ldr	r1, [r4, #4]
 8004542:	4628      	mov	r0, r5
 8004544:	f7ff ff0a 	bl	800435c <__cvt>
 8004548:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 800454c:	2b47      	cmp	r3, #71	; 0x47
 800454e:	4680      	mov	r8, r0
 8004550:	d109      	bne.n	8004566 <_printf_float+0xf6>
 8004552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004554:	1cd8      	adds	r0, r3, #3
 8004556:	db02      	blt.n	800455e <_printf_float+0xee>
 8004558:	6862      	ldr	r2, [r4, #4]
 800455a:	4293      	cmp	r3, r2
 800455c:	dd54      	ble.n	8004608 <_printf_float+0x198>
 800455e:	f1a9 0902 	sub.w	r9, r9, #2
 8004562:	fa5f f989 	uxtb.w	r9, r9
 8004566:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800456a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800456c:	d831      	bhi.n	80045d2 <_printf_float+0x162>
 800456e:	3901      	subs	r1, #1
 8004570:	464a      	mov	r2, r9
 8004572:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004576:	9109      	str	r1, [sp, #36]	; 0x24
 8004578:	f7ff ff43 	bl	8004402 <__exponent>
 800457c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800457e:	1883      	adds	r3, r0, r2
 8004580:	2a01      	cmp	r2, #1
 8004582:	4682      	mov	sl, r0
 8004584:	6123      	str	r3, [r4, #16]
 8004586:	dc02      	bgt.n	800458e <_printf_float+0x11e>
 8004588:	6822      	ldr	r2, [r4, #0]
 800458a:	07d1      	lsls	r1, r2, #31
 800458c:	d501      	bpl.n	8004592 <_printf_float+0x122>
 800458e:	3301      	adds	r3, #1
 8004590:	6123      	str	r3, [r4, #16]
 8004592:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004596:	2b00      	cmp	r3, #0
 8004598:	d0af      	beq.n	80044fa <_printf_float+0x8a>
 800459a:	232d      	movs	r3, #45	; 0x2d
 800459c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045a0:	e7ab      	b.n	80044fa <_printf_float+0x8a>
 80045a2:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 80045a6:	d002      	beq.n	80045ae <_printf_float+0x13e>
 80045a8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80045ac:	d1be      	bne.n	800452c <_printf_float+0xbc>
 80045ae:	b171      	cbz	r1, 80045ce <_printf_float+0x15e>
 80045b0:	2300      	movs	r3, #0
 80045b2:	9303      	str	r3, [sp, #12]
 80045b4:	9002      	str	r0, [sp, #8]
 80045b6:	6022      	str	r2, [r4, #0]
 80045b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80045bc:	f8cd e000 	str.w	lr, [sp]
 80045c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80045c4:	4628      	mov	r0, r5
 80045c6:	f7ff fec9 	bl	800435c <__cvt>
 80045ca:	4680      	mov	r8, r0
 80045cc:	e7c1      	b.n	8004552 <_printf_float+0xe2>
 80045ce:	2301      	movs	r3, #1
 80045d0:	e7ab      	b.n	800452a <_printf_float+0xba>
 80045d2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80045d6:	d119      	bne.n	800460c <_printf_float+0x19c>
 80045d8:	2900      	cmp	r1, #0
 80045da:	6863      	ldr	r3, [r4, #4]
 80045dc:	dd0c      	ble.n	80045f8 <_printf_float+0x188>
 80045de:	6121      	str	r1, [r4, #16]
 80045e0:	b913      	cbnz	r3, 80045e8 <_printf_float+0x178>
 80045e2:	6822      	ldr	r2, [r4, #0]
 80045e4:	07d2      	lsls	r2, r2, #31
 80045e6:	d502      	bpl.n	80045ee <_printf_float+0x17e>
 80045e8:	3301      	adds	r3, #1
 80045ea:	440b      	add	r3, r1
 80045ec:	6123      	str	r3, [r4, #16]
 80045ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045f0:	65a3      	str	r3, [r4, #88]	; 0x58
 80045f2:	f04f 0a00 	mov.w	sl, #0
 80045f6:	e7cc      	b.n	8004592 <_printf_float+0x122>
 80045f8:	b913      	cbnz	r3, 8004600 <_printf_float+0x190>
 80045fa:	6822      	ldr	r2, [r4, #0]
 80045fc:	07d0      	lsls	r0, r2, #31
 80045fe:	d501      	bpl.n	8004604 <_printf_float+0x194>
 8004600:	3302      	adds	r3, #2
 8004602:	e7f3      	b.n	80045ec <_printf_float+0x17c>
 8004604:	2301      	movs	r3, #1
 8004606:	e7f1      	b.n	80045ec <_printf_float+0x17c>
 8004608:	f04f 0967 	mov.w	r9, #103	; 0x67
 800460c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800460e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004610:	4293      	cmp	r3, r2
 8004612:	db05      	blt.n	8004620 <_printf_float+0x1b0>
 8004614:	6822      	ldr	r2, [r4, #0]
 8004616:	6123      	str	r3, [r4, #16]
 8004618:	07d1      	lsls	r1, r2, #31
 800461a:	d5e8      	bpl.n	80045ee <_printf_float+0x17e>
 800461c:	3301      	adds	r3, #1
 800461e:	e7e5      	b.n	80045ec <_printf_float+0x17c>
 8004620:	2b00      	cmp	r3, #0
 8004622:	bfd4      	ite	le
 8004624:	f1c3 0302 	rsble	r3, r3, #2
 8004628:	2301      	movgt	r3, #1
 800462a:	4413      	add	r3, r2
 800462c:	e7de      	b.n	80045ec <_printf_float+0x17c>
 800462e:	6823      	ldr	r3, [r4, #0]
 8004630:	055a      	lsls	r2, r3, #21
 8004632:	d407      	bmi.n	8004644 <_printf_float+0x1d4>
 8004634:	6923      	ldr	r3, [r4, #16]
 8004636:	4642      	mov	r2, r8
 8004638:	4631      	mov	r1, r6
 800463a:	4628      	mov	r0, r5
 800463c:	47b8      	blx	r7
 800463e:	3001      	adds	r0, #1
 8004640:	d12a      	bne.n	8004698 <_printf_float+0x228>
 8004642:	e764      	b.n	800450e <_printf_float+0x9e>
 8004644:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004648:	f240 80e5 	bls.w	8004816 <_printf_float+0x3a6>
 800464c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004650:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004658:	d13c      	bne.n	80046d4 <_printf_float+0x264>
 800465a:	2301      	movs	r3, #1
 800465c:	4a3a      	ldr	r2, [pc, #232]	; (8004748 <_printf_float+0x2d8>)
 800465e:	4631      	mov	r1, r6
 8004660:	4628      	mov	r0, r5
 8004662:	47b8      	blx	r7
 8004664:	3001      	adds	r0, #1
 8004666:	f43f af52 	beq.w	800450e <_printf_float+0x9e>
 800466a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800466c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800466e:	429a      	cmp	r2, r3
 8004670:	db02      	blt.n	8004678 <_printf_float+0x208>
 8004672:	6823      	ldr	r3, [r4, #0]
 8004674:	07d8      	lsls	r0, r3, #31
 8004676:	d50f      	bpl.n	8004698 <_printf_float+0x228>
 8004678:	9b05      	ldr	r3, [sp, #20]
 800467a:	465a      	mov	r2, fp
 800467c:	4631      	mov	r1, r6
 800467e:	4628      	mov	r0, r5
 8004680:	47b8      	blx	r7
 8004682:	3001      	adds	r0, #1
 8004684:	f43f af43 	beq.w	800450e <_printf_float+0x9e>
 8004688:	f04f 0800 	mov.w	r8, #0
 800468c:	f104 091a 	add.w	r9, r4, #26
 8004690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004692:	3b01      	subs	r3, #1
 8004694:	4598      	cmp	r8, r3
 8004696:	db12      	blt.n	80046be <_printf_float+0x24e>
 8004698:	6823      	ldr	r3, [r4, #0]
 800469a:	079b      	lsls	r3, r3, #30
 800469c:	d509      	bpl.n	80046b2 <_printf_float+0x242>
 800469e:	f04f 0800 	mov.w	r8, #0
 80046a2:	f104 0919 	add.w	r9, r4, #25
 80046a6:	68e3      	ldr	r3, [r4, #12]
 80046a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80046aa:	1a9b      	subs	r3, r3, r2
 80046ac:	4598      	cmp	r8, r3
 80046ae:	f2c0 80f2 	blt.w	8004896 <_printf_float+0x426>
 80046b2:	68e0      	ldr	r0, [r4, #12]
 80046b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046b6:	4298      	cmp	r0, r3
 80046b8:	bfb8      	it	lt
 80046ba:	4618      	movlt	r0, r3
 80046bc:	e729      	b.n	8004512 <_printf_float+0xa2>
 80046be:	2301      	movs	r3, #1
 80046c0:	464a      	mov	r2, r9
 80046c2:	4631      	mov	r1, r6
 80046c4:	4628      	mov	r0, r5
 80046c6:	47b8      	blx	r7
 80046c8:	3001      	adds	r0, #1
 80046ca:	f43f af20 	beq.w	800450e <_printf_float+0x9e>
 80046ce:	f108 0801 	add.w	r8, r8, #1
 80046d2:	e7dd      	b.n	8004690 <_printf_float+0x220>
 80046d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	dc38      	bgt.n	800474c <_printf_float+0x2dc>
 80046da:	2301      	movs	r3, #1
 80046dc:	4a1a      	ldr	r2, [pc, #104]	; (8004748 <_printf_float+0x2d8>)
 80046de:	4631      	mov	r1, r6
 80046e0:	4628      	mov	r0, r5
 80046e2:	47b8      	blx	r7
 80046e4:	3001      	adds	r0, #1
 80046e6:	f43f af12 	beq.w	800450e <_printf_float+0x9e>
 80046ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046ec:	b923      	cbnz	r3, 80046f8 <_printf_float+0x288>
 80046ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046f0:	b913      	cbnz	r3, 80046f8 <_printf_float+0x288>
 80046f2:	6823      	ldr	r3, [r4, #0]
 80046f4:	07d9      	lsls	r1, r3, #31
 80046f6:	d5cf      	bpl.n	8004698 <_printf_float+0x228>
 80046f8:	9b05      	ldr	r3, [sp, #20]
 80046fa:	465a      	mov	r2, fp
 80046fc:	4631      	mov	r1, r6
 80046fe:	4628      	mov	r0, r5
 8004700:	47b8      	blx	r7
 8004702:	3001      	adds	r0, #1
 8004704:	f43f af03 	beq.w	800450e <_printf_float+0x9e>
 8004708:	f04f 0900 	mov.w	r9, #0
 800470c:	f104 0a1a 	add.w	sl, r4, #26
 8004710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004712:	425b      	negs	r3, r3
 8004714:	4599      	cmp	r9, r3
 8004716:	db01      	blt.n	800471c <_printf_float+0x2ac>
 8004718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800471a:	e78c      	b.n	8004636 <_printf_float+0x1c6>
 800471c:	2301      	movs	r3, #1
 800471e:	4652      	mov	r2, sl
 8004720:	4631      	mov	r1, r6
 8004722:	4628      	mov	r0, r5
 8004724:	47b8      	blx	r7
 8004726:	3001      	adds	r0, #1
 8004728:	f43f aef1 	beq.w	800450e <_printf_float+0x9e>
 800472c:	f109 0901 	add.w	r9, r9, #1
 8004730:	e7ee      	b.n	8004710 <_printf_float+0x2a0>
 8004732:	bf00      	nop
 8004734:	f3af 8000 	nop.w
 8004738:	ffffffff 	.word	0xffffffff
 800473c:	7fefffff 	.word	0x7fefffff
 8004740:	08006bd0 	.word	0x08006bd0
 8004744:	08006bd4 	.word	0x08006bd4
 8004748:	08006be0 	.word	0x08006be0
 800474c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800474e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004750:	429a      	cmp	r2, r3
 8004752:	bfa8      	it	ge
 8004754:	461a      	movge	r2, r3
 8004756:	2a00      	cmp	r2, #0
 8004758:	4691      	mov	r9, r2
 800475a:	dc38      	bgt.n	80047ce <_printf_float+0x35e>
 800475c:	f104 031a 	add.w	r3, r4, #26
 8004760:	f04f 0a00 	mov.w	sl, #0
 8004764:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004768:	9307      	str	r3, [sp, #28]
 800476a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800476c:	9306      	str	r3, [sp, #24]
 800476e:	eba3 0309 	sub.w	r3, r3, r9
 8004772:	459a      	cmp	sl, r3
 8004774:	db33      	blt.n	80047de <_printf_float+0x36e>
 8004776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004778:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800477a:	429a      	cmp	r2, r3
 800477c:	db3a      	blt.n	80047f4 <_printf_float+0x384>
 800477e:	6823      	ldr	r3, [r4, #0]
 8004780:	07da      	lsls	r2, r3, #31
 8004782:	d437      	bmi.n	80047f4 <_printf_float+0x384>
 8004784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004786:	9a06      	ldr	r2, [sp, #24]
 8004788:	9909      	ldr	r1, [sp, #36]	; 0x24
 800478a:	1a9a      	subs	r2, r3, r2
 800478c:	eba3 0901 	sub.w	r9, r3, r1
 8004790:	4591      	cmp	r9, r2
 8004792:	bfa8      	it	ge
 8004794:	4691      	movge	r9, r2
 8004796:	f1b9 0f00 	cmp.w	r9, #0
 800479a:	dc33      	bgt.n	8004804 <_printf_float+0x394>
 800479c:	f04f 0800 	mov.w	r8, #0
 80047a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80047a4:	f104 0a1a 	add.w	sl, r4, #26
 80047a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047ac:	1a9b      	subs	r3, r3, r2
 80047ae:	eba3 0309 	sub.w	r3, r3, r9
 80047b2:	4598      	cmp	r8, r3
 80047b4:	f6bf af70 	bge.w	8004698 <_printf_float+0x228>
 80047b8:	2301      	movs	r3, #1
 80047ba:	4652      	mov	r2, sl
 80047bc:	4631      	mov	r1, r6
 80047be:	4628      	mov	r0, r5
 80047c0:	47b8      	blx	r7
 80047c2:	3001      	adds	r0, #1
 80047c4:	f43f aea3 	beq.w	800450e <_printf_float+0x9e>
 80047c8:	f108 0801 	add.w	r8, r8, #1
 80047cc:	e7ec      	b.n	80047a8 <_printf_float+0x338>
 80047ce:	4613      	mov	r3, r2
 80047d0:	4631      	mov	r1, r6
 80047d2:	4642      	mov	r2, r8
 80047d4:	4628      	mov	r0, r5
 80047d6:	47b8      	blx	r7
 80047d8:	3001      	adds	r0, #1
 80047da:	d1bf      	bne.n	800475c <_printf_float+0x2ec>
 80047dc:	e697      	b.n	800450e <_printf_float+0x9e>
 80047de:	2301      	movs	r3, #1
 80047e0:	9a07      	ldr	r2, [sp, #28]
 80047e2:	4631      	mov	r1, r6
 80047e4:	4628      	mov	r0, r5
 80047e6:	47b8      	blx	r7
 80047e8:	3001      	adds	r0, #1
 80047ea:	f43f ae90 	beq.w	800450e <_printf_float+0x9e>
 80047ee:	f10a 0a01 	add.w	sl, sl, #1
 80047f2:	e7ba      	b.n	800476a <_printf_float+0x2fa>
 80047f4:	9b05      	ldr	r3, [sp, #20]
 80047f6:	465a      	mov	r2, fp
 80047f8:	4631      	mov	r1, r6
 80047fa:	4628      	mov	r0, r5
 80047fc:	47b8      	blx	r7
 80047fe:	3001      	adds	r0, #1
 8004800:	d1c0      	bne.n	8004784 <_printf_float+0x314>
 8004802:	e684      	b.n	800450e <_printf_float+0x9e>
 8004804:	9a06      	ldr	r2, [sp, #24]
 8004806:	464b      	mov	r3, r9
 8004808:	4442      	add	r2, r8
 800480a:	4631      	mov	r1, r6
 800480c:	4628      	mov	r0, r5
 800480e:	47b8      	blx	r7
 8004810:	3001      	adds	r0, #1
 8004812:	d1c3      	bne.n	800479c <_printf_float+0x32c>
 8004814:	e67b      	b.n	800450e <_printf_float+0x9e>
 8004816:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004818:	2a01      	cmp	r2, #1
 800481a:	dc01      	bgt.n	8004820 <_printf_float+0x3b0>
 800481c:	07db      	lsls	r3, r3, #31
 800481e:	d537      	bpl.n	8004890 <_printf_float+0x420>
 8004820:	2301      	movs	r3, #1
 8004822:	4642      	mov	r2, r8
 8004824:	4631      	mov	r1, r6
 8004826:	4628      	mov	r0, r5
 8004828:	47b8      	blx	r7
 800482a:	3001      	adds	r0, #1
 800482c:	f43f ae6f 	beq.w	800450e <_printf_float+0x9e>
 8004830:	9b05      	ldr	r3, [sp, #20]
 8004832:	465a      	mov	r2, fp
 8004834:	4631      	mov	r1, r6
 8004836:	4628      	mov	r0, r5
 8004838:	47b8      	blx	r7
 800483a:	3001      	adds	r0, #1
 800483c:	f43f ae67 	beq.w	800450e <_printf_float+0x9e>
 8004840:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004844:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800484c:	d10b      	bne.n	8004866 <_printf_float+0x3f6>
 800484e:	f04f 0800 	mov.w	r8, #0
 8004852:	f104 091a 	add.w	r9, r4, #26
 8004856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004858:	3b01      	subs	r3, #1
 800485a:	4598      	cmp	r8, r3
 800485c:	db0d      	blt.n	800487a <_printf_float+0x40a>
 800485e:	4653      	mov	r3, sl
 8004860:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004864:	e6e8      	b.n	8004638 <_printf_float+0x1c8>
 8004866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004868:	f108 0201 	add.w	r2, r8, #1
 800486c:	3b01      	subs	r3, #1
 800486e:	4631      	mov	r1, r6
 8004870:	4628      	mov	r0, r5
 8004872:	47b8      	blx	r7
 8004874:	3001      	adds	r0, #1
 8004876:	d1f2      	bne.n	800485e <_printf_float+0x3ee>
 8004878:	e649      	b.n	800450e <_printf_float+0x9e>
 800487a:	2301      	movs	r3, #1
 800487c:	464a      	mov	r2, r9
 800487e:	4631      	mov	r1, r6
 8004880:	4628      	mov	r0, r5
 8004882:	47b8      	blx	r7
 8004884:	3001      	adds	r0, #1
 8004886:	f43f ae42 	beq.w	800450e <_printf_float+0x9e>
 800488a:	f108 0801 	add.w	r8, r8, #1
 800488e:	e7e2      	b.n	8004856 <_printf_float+0x3e6>
 8004890:	2301      	movs	r3, #1
 8004892:	4642      	mov	r2, r8
 8004894:	e7eb      	b.n	800486e <_printf_float+0x3fe>
 8004896:	2301      	movs	r3, #1
 8004898:	464a      	mov	r2, r9
 800489a:	4631      	mov	r1, r6
 800489c:	4628      	mov	r0, r5
 800489e:	47b8      	blx	r7
 80048a0:	3001      	adds	r0, #1
 80048a2:	f43f ae34 	beq.w	800450e <_printf_float+0x9e>
 80048a6:	f108 0801 	add.w	r8, r8, #1
 80048aa:	e6fc      	b.n	80046a6 <_printf_float+0x236>
 80048ac:	eeb4 0b40 	vcmp.f64	d0, d0
 80048b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048b4:	f5ff ae30 	bvc.w	8004518 <_printf_float+0xa8>
 80048b8:	4b01      	ldr	r3, [pc, #4]	; (80048c0 <_printf_float+0x450>)
 80048ba:	4902      	ldr	r1, [pc, #8]	; (80048c4 <_printf_float+0x454>)
 80048bc:	e611      	b.n	80044e2 <_printf_float+0x72>
 80048be:	bf00      	nop
 80048c0:	08006bd8 	.word	0x08006bd8
 80048c4:	08006bdc 	.word	0x08006bdc

080048c8 <_printf_common>:
 80048c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048cc:	4691      	mov	r9, r2
 80048ce:	461f      	mov	r7, r3
 80048d0:	688a      	ldr	r2, [r1, #8]
 80048d2:	690b      	ldr	r3, [r1, #16]
 80048d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048d8:	4293      	cmp	r3, r2
 80048da:	bfb8      	it	lt
 80048dc:	4613      	movlt	r3, r2
 80048de:	f8c9 3000 	str.w	r3, [r9]
 80048e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048e6:	4606      	mov	r6, r0
 80048e8:	460c      	mov	r4, r1
 80048ea:	b112      	cbz	r2, 80048f2 <_printf_common+0x2a>
 80048ec:	3301      	adds	r3, #1
 80048ee:	f8c9 3000 	str.w	r3, [r9]
 80048f2:	6823      	ldr	r3, [r4, #0]
 80048f4:	0699      	lsls	r1, r3, #26
 80048f6:	bf42      	ittt	mi
 80048f8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80048fc:	3302      	addmi	r3, #2
 80048fe:	f8c9 3000 	strmi.w	r3, [r9]
 8004902:	6825      	ldr	r5, [r4, #0]
 8004904:	f015 0506 	ands.w	r5, r5, #6
 8004908:	d107      	bne.n	800491a <_printf_common+0x52>
 800490a:	f104 0a19 	add.w	sl, r4, #25
 800490e:	68e3      	ldr	r3, [r4, #12]
 8004910:	f8d9 2000 	ldr.w	r2, [r9]
 8004914:	1a9b      	subs	r3, r3, r2
 8004916:	429d      	cmp	r5, r3
 8004918:	db29      	blt.n	800496e <_printf_common+0xa6>
 800491a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800491e:	6822      	ldr	r2, [r4, #0]
 8004920:	3300      	adds	r3, #0
 8004922:	bf18      	it	ne
 8004924:	2301      	movne	r3, #1
 8004926:	0692      	lsls	r2, r2, #26
 8004928:	d42e      	bmi.n	8004988 <_printf_common+0xc0>
 800492a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800492e:	4639      	mov	r1, r7
 8004930:	4630      	mov	r0, r6
 8004932:	47c0      	blx	r8
 8004934:	3001      	adds	r0, #1
 8004936:	d021      	beq.n	800497c <_printf_common+0xb4>
 8004938:	6823      	ldr	r3, [r4, #0]
 800493a:	68e5      	ldr	r5, [r4, #12]
 800493c:	f8d9 2000 	ldr.w	r2, [r9]
 8004940:	f003 0306 	and.w	r3, r3, #6
 8004944:	2b04      	cmp	r3, #4
 8004946:	bf08      	it	eq
 8004948:	1aad      	subeq	r5, r5, r2
 800494a:	68a3      	ldr	r3, [r4, #8]
 800494c:	6922      	ldr	r2, [r4, #16]
 800494e:	bf0c      	ite	eq
 8004950:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004954:	2500      	movne	r5, #0
 8004956:	4293      	cmp	r3, r2
 8004958:	bfc4      	itt	gt
 800495a:	1a9b      	subgt	r3, r3, r2
 800495c:	18ed      	addgt	r5, r5, r3
 800495e:	f04f 0900 	mov.w	r9, #0
 8004962:	341a      	adds	r4, #26
 8004964:	454d      	cmp	r5, r9
 8004966:	d11b      	bne.n	80049a0 <_printf_common+0xd8>
 8004968:	2000      	movs	r0, #0
 800496a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800496e:	2301      	movs	r3, #1
 8004970:	4652      	mov	r2, sl
 8004972:	4639      	mov	r1, r7
 8004974:	4630      	mov	r0, r6
 8004976:	47c0      	blx	r8
 8004978:	3001      	adds	r0, #1
 800497a:	d103      	bne.n	8004984 <_printf_common+0xbc>
 800497c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004984:	3501      	adds	r5, #1
 8004986:	e7c2      	b.n	800490e <_printf_common+0x46>
 8004988:	18e1      	adds	r1, r4, r3
 800498a:	1c5a      	adds	r2, r3, #1
 800498c:	2030      	movs	r0, #48	; 0x30
 800498e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004992:	4422      	add	r2, r4
 8004994:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004998:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800499c:	3302      	adds	r3, #2
 800499e:	e7c4      	b.n	800492a <_printf_common+0x62>
 80049a0:	2301      	movs	r3, #1
 80049a2:	4622      	mov	r2, r4
 80049a4:	4639      	mov	r1, r7
 80049a6:	4630      	mov	r0, r6
 80049a8:	47c0      	blx	r8
 80049aa:	3001      	adds	r0, #1
 80049ac:	d0e6      	beq.n	800497c <_printf_common+0xb4>
 80049ae:	f109 0901 	add.w	r9, r9, #1
 80049b2:	e7d7      	b.n	8004964 <_printf_common+0x9c>

080049b4 <_printf_i>:
 80049b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80049b8:	4617      	mov	r7, r2
 80049ba:	7e0a      	ldrb	r2, [r1, #24]
 80049bc:	b085      	sub	sp, #20
 80049be:	2a6e      	cmp	r2, #110	; 0x6e
 80049c0:	4698      	mov	r8, r3
 80049c2:	4606      	mov	r6, r0
 80049c4:	460c      	mov	r4, r1
 80049c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80049c8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80049cc:	f000 80bc 	beq.w	8004b48 <_printf_i+0x194>
 80049d0:	d81a      	bhi.n	8004a08 <_printf_i+0x54>
 80049d2:	2a63      	cmp	r2, #99	; 0x63
 80049d4:	d02e      	beq.n	8004a34 <_printf_i+0x80>
 80049d6:	d80a      	bhi.n	80049ee <_printf_i+0x3a>
 80049d8:	2a00      	cmp	r2, #0
 80049da:	f000 80c8 	beq.w	8004b6e <_printf_i+0x1ba>
 80049de:	2a58      	cmp	r2, #88	; 0x58
 80049e0:	f000 808a 	beq.w	8004af8 <_printf_i+0x144>
 80049e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049e8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80049ec:	e02a      	b.n	8004a44 <_printf_i+0x90>
 80049ee:	2a64      	cmp	r2, #100	; 0x64
 80049f0:	d001      	beq.n	80049f6 <_printf_i+0x42>
 80049f2:	2a69      	cmp	r2, #105	; 0x69
 80049f4:	d1f6      	bne.n	80049e4 <_printf_i+0x30>
 80049f6:	6821      	ldr	r1, [r4, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	f011 0f80 	tst.w	r1, #128	; 0x80
 80049fe:	d023      	beq.n	8004a48 <_printf_i+0x94>
 8004a00:	1d11      	adds	r1, r2, #4
 8004a02:	6019      	str	r1, [r3, #0]
 8004a04:	6813      	ldr	r3, [r2, #0]
 8004a06:	e027      	b.n	8004a58 <_printf_i+0xa4>
 8004a08:	2a73      	cmp	r2, #115	; 0x73
 8004a0a:	f000 80b4 	beq.w	8004b76 <_printf_i+0x1c2>
 8004a0e:	d808      	bhi.n	8004a22 <_printf_i+0x6e>
 8004a10:	2a6f      	cmp	r2, #111	; 0x6f
 8004a12:	d02a      	beq.n	8004a6a <_printf_i+0xb6>
 8004a14:	2a70      	cmp	r2, #112	; 0x70
 8004a16:	d1e5      	bne.n	80049e4 <_printf_i+0x30>
 8004a18:	680a      	ldr	r2, [r1, #0]
 8004a1a:	f042 0220 	orr.w	r2, r2, #32
 8004a1e:	600a      	str	r2, [r1, #0]
 8004a20:	e003      	b.n	8004a2a <_printf_i+0x76>
 8004a22:	2a75      	cmp	r2, #117	; 0x75
 8004a24:	d021      	beq.n	8004a6a <_printf_i+0xb6>
 8004a26:	2a78      	cmp	r2, #120	; 0x78
 8004a28:	d1dc      	bne.n	80049e4 <_printf_i+0x30>
 8004a2a:	2278      	movs	r2, #120	; 0x78
 8004a2c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004a30:	496e      	ldr	r1, [pc, #440]	; (8004bec <_printf_i+0x238>)
 8004a32:	e064      	b.n	8004afe <_printf_i+0x14a>
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8004a3a:	1d11      	adds	r1, r2, #4
 8004a3c:	6019      	str	r1, [r3, #0]
 8004a3e:	6813      	ldr	r3, [r2, #0]
 8004a40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a44:	2301      	movs	r3, #1
 8004a46:	e0a3      	b.n	8004b90 <_printf_i+0x1dc>
 8004a48:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004a4c:	f102 0104 	add.w	r1, r2, #4
 8004a50:	6019      	str	r1, [r3, #0]
 8004a52:	d0d7      	beq.n	8004a04 <_printf_i+0x50>
 8004a54:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	da03      	bge.n	8004a64 <_printf_i+0xb0>
 8004a5c:	222d      	movs	r2, #45	; 0x2d
 8004a5e:	425b      	negs	r3, r3
 8004a60:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004a64:	4962      	ldr	r1, [pc, #392]	; (8004bf0 <_printf_i+0x23c>)
 8004a66:	220a      	movs	r2, #10
 8004a68:	e017      	b.n	8004a9a <_printf_i+0xe6>
 8004a6a:	6820      	ldr	r0, [r4, #0]
 8004a6c:	6819      	ldr	r1, [r3, #0]
 8004a6e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004a72:	d003      	beq.n	8004a7c <_printf_i+0xc8>
 8004a74:	1d08      	adds	r0, r1, #4
 8004a76:	6018      	str	r0, [r3, #0]
 8004a78:	680b      	ldr	r3, [r1, #0]
 8004a7a:	e006      	b.n	8004a8a <_printf_i+0xd6>
 8004a7c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a80:	f101 0004 	add.w	r0, r1, #4
 8004a84:	6018      	str	r0, [r3, #0]
 8004a86:	d0f7      	beq.n	8004a78 <_printf_i+0xc4>
 8004a88:	880b      	ldrh	r3, [r1, #0]
 8004a8a:	4959      	ldr	r1, [pc, #356]	; (8004bf0 <_printf_i+0x23c>)
 8004a8c:	2a6f      	cmp	r2, #111	; 0x6f
 8004a8e:	bf14      	ite	ne
 8004a90:	220a      	movne	r2, #10
 8004a92:	2208      	moveq	r2, #8
 8004a94:	2000      	movs	r0, #0
 8004a96:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004a9a:	6865      	ldr	r5, [r4, #4]
 8004a9c:	60a5      	str	r5, [r4, #8]
 8004a9e:	2d00      	cmp	r5, #0
 8004aa0:	f2c0 809c 	blt.w	8004bdc <_printf_i+0x228>
 8004aa4:	6820      	ldr	r0, [r4, #0]
 8004aa6:	f020 0004 	bic.w	r0, r0, #4
 8004aaa:	6020      	str	r0, [r4, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d13f      	bne.n	8004b30 <_printf_i+0x17c>
 8004ab0:	2d00      	cmp	r5, #0
 8004ab2:	f040 8095 	bne.w	8004be0 <_printf_i+0x22c>
 8004ab6:	4675      	mov	r5, lr
 8004ab8:	2a08      	cmp	r2, #8
 8004aba:	d10b      	bne.n	8004ad4 <_printf_i+0x120>
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	07da      	lsls	r2, r3, #31
 8004ac0:	d508      	bpl.n	8004ad4 <_printf_i+0x120>
 8004ac2:	6923      	ldr	r3, [r4, #16]
 8004ac4:	6862      	ldr	r2, [r4, #4]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	bfde      	ittt	le
 8004aca:	2330      	movle	r3, #48	; 0x30
 8004acc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ad0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004ad4:	ebae 0305 	sub.w	r3, lr, r5
 8004ad8:	6123      	str	r3, [r4, #16]
 8004ada:	f8cd 8000 	str.w	r8, [sp]
 8004ade:	463b      	mov	r3, r7
 8004ae0:	aa03      	add	r2, sp, #12
 8004ae2:	4621      	mov	r1, r4
 8004ae4:	4630      	mov	r0, r6
 8004ae6:	f7ff feef 	bl	80048c8 <_printf_common>
 8004aea:	3001      	adds	r0, #1
 8004aec:	d155      	bne.n	8004b9a <_printf_i+0x1e6>
 8004aee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004af2:	b005      	add	sp, #20
 8004af4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004af8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004afc:	493c      	ldr	r1, [pc, #240]	; (8004bf0 <_printf_i+0x23c>)
 8004afe:	6822      	ldr	r2, [r4, #0]
 8004b00:	6818      	ldr	r0, [r3, #0]
 8004b02:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004b06:	f100 0504 	add.w	r5, r0, #4
 8004b0a:	601d      	str	r5, [r3, #0]
 8004b0c:	d001      	beq.n	8004b12 <_printf_i+0x15e>
 8004b0e:	6803      	ldr	r3, [r0, #0]
 8004b10:	e002      	b.n	8004b18 <_printf_i+0x164>
 8004b12:	0655      	lsls	r5, r2, #25
 8004b14:	d5fb      	bpl.n	8004b0e <_printf_i+0x15a>
 8004b16:	8803      	ldrh	r3, [r0, #0]
 8004b18:	07d0      	lsls	r0, r2, #31
 8004b1a:	bf44      	itt	mi
 8004b1c:	f042 0220 	orrmi.w	r2, r2, #32
 8004b20:	6022      	strmi	r2, [r4, #0]
 8004b22:	b91b      	cbnz	r3, 8004b2c <_printf_i+0x178>
 8004b24:	6822      	ldr	r2, [r4, #0]
 8004b26:	f022 0220 	bic.w	r2, r2, #32
 8004b2a:	6022      	str	r2, [r4, #0]
 8004b2c:	2210      	movs	r2, #16
 8004b2e:	e7b1      	b.n	8004a94 <_printf_i+0xe0>
 8004b30:	4675      	mov	r5, lr
 8004b32:	fbb3 f0f2 	udiv	r0, r3, r2
 8004b36:	fb02 3310 	mls	r3, r2, r0, r3
 8004b3a:	5ccb      	ldrb	r3, [r1, r3]
 8004b3c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004b40:	4603      	mov	r3, r0
 8004b42:	2800      	cmp	r0, #0
 8004b44:	d1f5      	bne.n	8004b32 <_printf_i+0x17e>
 8004b46:	e7b7      	b.n	8004ab8 <_printf_i+0x104>
 8004b48:	6808      	ldr	r0, [r1, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	6949      	ldr	r1, [r1, #20]
 8004b4e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004b52:	d004      	beq.n	8004b5e <_printf_i+0x1aa>
 8004b54:	1d10      	adds	r0, r2, #4
 8004b56:	6018      	str	r0, [r3, #0]
 8004b58:	6813      	ldr	r3, [r2, #0]
 8004b5a:	6019      	str	r1, [r3, #0]
 8004b5c:	e007      	b.n	8004b6e <_printf_i+0x1ba>
 8004b5e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b62:	f102 0004 	add.w	r0, r2, #4
 8004b66:	6018      	str	r0, [r3, #0]
 8004b68:	6813      	ldr	r3, [r2, #0]
 8004b6a:	d0f6      	beq.n	8004b5a <_printf_i+0x1a6>
 8004b6c:	8019      	strh	r1, [r3, #0]
 8004b6e:	2300      	movs	r3, #0
 8004b70:	6123      	str	r3, [r4, #16]
 8004b72:	4675      	mov	r5, lr
 8004b74:	e7b1      	b.n	8004ada <_printf_i+0x126>
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	1d11      	adds	r1, r2, #4
 8004b7a:	6019      	str	r1, [r3, #0]
 8004b7c:	6815      	ldr	r5, [r2, #0]
 8004b7e:	6862      	ldr	r2, [r4, #4]
 8004b80:	2100      	movs	r1, #0
 8004b82:	4628      	mov	r0, r5
 8004b84:	f7fb fb5c 	bl	8000240 <memchr>
 8004b88:	b108      	cbz	r0, 8004b8e <_printf_i+0x1da>
 8004b8a:	1b40      	subs	r0, r0, r5
 8004b8c:	6060      	str	r0, [r4, #4]
 8004b8e:	6863      	ldr	r3, [r4, #4]
 8004b90:	6123      	str	r3, [r4, #16]
 8004b92:	2300      	movs	r3, #0
 8004b94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b98:	e79f      	b.n	8004ada <_printf_i+0x126>
 8004b9a:	6923      	ldr	r3, [r4, #16]
 8004b9c:	462a      	mov	r2, r5
 8004b9e:	4639      	mov	r1, r7
 8004ba0:	4630      	mov	r0, r6
 8004ba2:	47c0      	blx	r8
 8004ba4:	3001      	adds	r0, #1
 8004ba6:	d0a2      	beq.n	8004aee <_printf_i+0x13a>
 8004ba8:	6823      	ldr	r3, [r4, #0]
 8004baa:	079b      	lsls	r3, r3, #30
 8004bac:	d507      	bpl.n	8004bbe <_printf_i+0x20a>
 8004bae:	2500      	movs	r5, #0
 8004bb0:	f104 0919 	add.w	r9, r4, #25
 8004bb4:	68e3      	ldr	r3, [r4, #12]
 8004bb6:	9a03      	ldr	r2, [sp, #12]
 8004bb8:	1a9b      	subs	r3, r3, r2
 8004bba:	429d      	cmp	r5, r3
 8004bbc:	db05      	blt.n	8004bca <_printf_i+0x216>
 8004bbe:	68e0      	ldr	r0, [r4, #12]
 8004bc0:	9b03      	ldr	r3, [sp, #12]
 8004bc2:	4298      	cmp	r0, r3
 8004bc4:	bfb8      	it	lt
 8004bc6:	4618      	movlt	r0, r3
 8004bc8:	e793      	b.n	8004af2 <_printf_i+0x13e>
 8004bca:	2301      	movs	r3, #1
 8004bcc:	464a      	mov	r2, r9
 8004bce:	4639      	mov	r1, r7
 8004bd0:	4630      	mov	r0, r6
 8004bd2:	47c0      	blx	r8
 8004bd4:	3001      	adds	r0, #1
 8004bd6:	d08a      	beq.n	8004aee <_printf_i+0x13a>
 8004bd8:	3501      	adds	r5, #1
 8004bda:	e7eb      	b.n	8004bb4 <_printf_i+0x200>
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1a7      	bne.n	8004b30 <_printf_i+0x17c>
 8004be0:	780b      	ldrb	r3, [r1, #0]
 8004be2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004be6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bea:	e765      	b.n	8004ab8 <_printf_i+0x104>
 8004bec:	08006bf3 	.word	0x08006bf3
 8004bf0:	08006be2 	.word	0x08006be2

08004bf4 <iprintf>:
 8004bf4:	b40f      	push	{r0, r1, r2, r3}
 8004bf6:	4b0a      	ldr	r3, [pc, #40]	; (8004c20 <iprintf+0x2c>)
 8004bf8:	b513      	push	{r0, r1, r4, lr}
 8004bfa:	681c      	ldr	r4, [r3, #0]
 8004bfc:	b124      	cbz	r4, 8004c08 <iprintf+0x14>
 8004bfe:	69a3      	ldr	r3, [r4, #24]
 8004c00:	b913      	cbnz	r3, 8004c08 <iprintf+0x14>
 8004c02:	4620      	mov	r0, r4
 8004c04:	f7ff fa3c 	bl	8004080 <__sinit>
 8004c08:	ab05      	add	r3, sp, #20
 8004c0a:	9a04      	ldr	r2, [sp, #16]
 8004c0c:	68a1      	ldr	r1, [r4, #8]
 8004c0e:	9301      	str	r3, [sp, #4]
 8004c10:	4620      	mov	r0, r4
 8004c12:	f001 fd6d 	bl	80066f0 <_vfiprintf_r>
 8004c16:	b002      	add	sp, #8
 8004c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c1c:	b004      	add	sp, #16
 8004c1e:	4770      	bx	lr
 8004c20:	2000000c 	.word	0x2000000c

08004c24 <_puts_r>:
 8004c24:	b570      	push	{r4, r5, r6, lr}
 8004c26:	460e      	mov	r6, r1
 8004c28:	4605      	mov	r5, r0
 8004c2a:	b118      	cbz	r0, 8004c34 <_puts_r+0x10>
 8004c2c:	6983      	ldr	r3, [r0, #24]
 8004c2e:	b90b      	cbnz	r3, 8004c34 <_puts_r+0x10>
 8004c30:	f7ff fa26 	bl	8004080 <__sinit>
 8004c34:	69ab      	ldr	r3, [r5, #24]
 8004c36:	68ac      	ldr	r4, [r5, #8]
 8004c38:	b913      	cbnz	r3, 8004c40 <_puts_r+0x1c>
 8004c3a:	4628      	mov	r0, r5
 8004c3c:	f7ff fa20 	bl	8004080 <__sinit>
 8004c40:	4b23      	ldr	r3, [pc, #140]	; (8004cd0 <_puts_r+0xac>)
 8004c42:	429c      	cmp	r4, r3
 8004c44:	d117      	bne.n	8004c76 <_puts_r+0x52>
 8004c46:	686c      	ldr	r4, [r5, #4]
 8004c48:	89a3      	ldrh	r3, [r4, #12]
 8004c4a:	071b      	lsls	r3, r3, #28
 8004c4c:	d51d      	bpl.n	8004c8a <_puts_r+0x66>
 8004c4e:	6923      	ldr	r3, [r4, #16]
 8004c50:	b1db      	cbz	r3, 8004c8a <_puts_r+0x66>
 8004c52:	3e01      	subs	r6, #1
 8004c54:	68a3      	ldr	r3, [r4, #8]
 8004c56:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	60a3      	str	r3, [r4, #8]
 8004c5e:	b9e9      	cbnz	r1, 8004c9c <_puts_r+0x78>
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	da2e      	bge.n	8004cc2 <_puts_r+0x9e>
 8004c64:	4622      	mov	r2, r4
 8004c66:	210a      	movs	r1, #10
 8004c68:	4628      	mov	r0, r5
 8004c6a:	f000 f96d 	bl	8004f48 <__swbuf_r>
 8004c6e:	3001      	adds	r0, #1
 8004c70:	d011      	beq.n	8004c96 <_puts_r+0x72>
 8004c72:	200a      	movs	r0, #10
 8004c74:	bd70      	pop	{r4, r5, r6, pc}
 8004c76:	4b17      	ldr	r3, [pc, #92]	; (8004cd4 <_puts_r+0xb0>)
 8004c78:	429c      	cmp	r4, r3
 8004c7a:	d101      	bne.n	8004c80 <_puts_r+0x5c>
 8004c7c:	68ac      	ldr	r4, [r5, #8]
 8004c7e:	e7e3      	b.n	8004c48 <_puts_r+0x24>
 8004c80:	4b15      	ldr	r3, [pc, #84]	; (8004cd8 <_puts_r+0xb4>)
 8004c82:	429c      	cmp	r4, r3
 8004c84:	bf08      	it	eq
 8004c86:	68ec      	ldreq	r4, [r5, #12]
 8004c88:	e7de      	b.n	8004c48 <_puts_r+0x24>
 8004c8a:	4621      	mov	r1, r4
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	f000 f9bf 	bl	8005010 <__swsetup_r>
 8004c92:	2800      	cmp	r0, #0
 8004c94:	d0dd      	beq.n	8004c52 <_puts_r+0x2e>
 8004c96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c9a:	bd70      	pop	{r4, r5, r6, pc}
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	da04      	bge.n	8004caa <_puts_r+0x86>
 8004ca0:	69a2      	ldr	r2, [r4, #24]
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	db06      	blt.n	8004cb4 <_puts_r+0x90>
 8004ca6:	290a      	cmp	r1, #10
 8004ca8:	d004      	beq.n	8004cb4 <_puts_r+0x90>
 8004caa:	6823      	ldr	r3, [r4, #0]
 8004cac:	1c5a      	adds	r2, r3, #1
 8004cae:	6022      	str	r2, [r4, #0]
 8004cb0:	7019      	strb	r1, [r3, #0]
 8004cb2:	e7cf      	b.n	8004c54 <_puts_r+0x30>
 8004cb4:	4622      	mov	r2, r4
 8004cb6:	4628      	mov	r0, r5
 8004cb8:	f000 f946 	bl	8004f48 <__swbuf_r>
 8004cbc:	3001      	adds	r0, #1
 8004cbe:	d1c9      	bne.n	8004c54 <_puts_r+0x30>
 8004cc0:	e7e9      	b.n	8004c96 <_puts_r+0x72>
 8004cc2:	6823      	ldr	r3, [r4, #0]
 8004cc4:	200a      	movs	r0, #10
 8004cc6:	1c5a      	adds	r2, r3, #1
 8004cc8:	6022      	str	r2, [r4, #0]
 8004cca:	7018      	strb	r0, [r3, #0]
 8004ccc:	bd70      	pop	{r4, r5, r6, pc}
 8004cce:	bf00      	nop
 8004cd0:	08006b8c 	.word	0x08006b8c
 8004cd4:	08006bac 	.word	0x08006bac
 8004cd8:	08006b6c 	.word	0x08006b6c

08004cdc <puts>:
 8004cdc:	4b02      	ldr	r3, [pc, #8]	; (8004ce8 <puts+0xc>)
 8004cde:	4601      	mov	r1, r0
 8004ce0:	6818      	ldr	r0, [r3, #0]
 8004ce2:	f7ff bf9f 	b.w	8004c24 <_puts_r>
 8004ce6:	bf00      	nop
 8004ce8:	2000000c 	.word	0x2000000c

08004cec <_sbrk_r>:
 8004cec:	b538      	push	{r3, r4, r5, lr}
 8004cee:	4c06      	ldr	r4, [pc, #24]	; (8004d08 <_sbrk_r+0x1c>)
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	4605      	mov	r5, r0
 8004cf4:	4608      	mov	r0, r1
 8004cf6:	6023      	str	r3, [r4, #0]
 8004cf8:	f7fe fbfe 	bl	80034f8 <_sbrk>
 8004cfc:	1c43      	adds	r3, r0, #1
 8004cfe:	d102      	bne.n	8004d06 <_sbrk_r+0x1a>
 8004d00:	6823      	ldr	r3, [r4, #0]
 8004d02:	b103      	cbz	r3, 8004d06 <_sbrk_r+0x1a>
 8004d04:	602b      	str	r3, [r5, #0]
 8004d06:	bd38      	pop	{r3, r4, r5, pc}
 8004d08:	2000194c 	.word	0x2000194c

08004d0c <setvbuf>:
 8004d0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004d10:	461d      	mov	r5, r3
 8004d12:	4b51      	ldr	r3, [pc, #324]	; (8004e58 <setvbuf+0x14c>)
 8004d14:	681e      	ldr	r6, [r3, #0]
 8004d16:	4604      	mov	r4, r0
 8004d18:	460f      	mov	r7, r1
 8004d1a:	4690      	mov	r8, r2
 8004d1c:	b126      	cbz	r6, 8004d28 <setvbuf+0x1c>
 8004d1e:	69b3      	ldr	r3, [r6, #24]
 8004d20:	b913      	cbnz	r3, 8004d28 <setvbuf+0x1c>
 8004d22:	4630      	mov	r0, r6
 8004d24:	f7ff f9ac 	bl	8004080 <__sinit>
 8004d28:	4b4c      	ldr	r3, [pc, #304]	; (8004e5c <setvbuf+0x150>)
 8004d2a:	429c      	cmp	r4, r3
 8004d2c:	d152      	bne.n	8004dd4 <setvbuf+0xc8>
 8004d2e:	6874      	ldr	r4, [r6, #4]
 8004d30:	f1b8 0f02 	cmp.w	r8, #2
 8004d34:	d006      	beq.n	8004d44 <setvbuf+0x38>
 8004d36:	f1b8 0f01 	cmp.w	r8, #1
 8004d3a:	f200 8089 	bhi.w	8004e50 <setvbuf+0x144>
 8004d3e:	2d00      	cmp	r5, #0
 8004d40:	f2c0 8086 	blt.w	8004e50 <setvbuf+0x144>
 8004d44:	4621      	mov	r1, r4
 8004d46:	4630      	mov	r0, r6
 8004d48:	f7ff f930 	bl	8003fac <_fflush_r>
 8004d4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d4e:	b141      	cbz	r1, 8004d62 <setvbuf+0x56>
 8004d50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d54:	4299      	cmp	r1, r3
 8004d56:	d002      	beq.n	8004d5e <setvbuf+0x52>
 8004d58:	4630      	mov	r0, r6
 8004d5a:	f7ff fa53 	bl	8004204 <_free_r>
 8004d5e:	2300      	movs	r3, #0
 8004d60:	6363      	str	r3, [r4, #52]	; 0x34
 8004d62:	2300      	movs	r3, #0
 8004d64:	61a3      	str	r3, [r4, #24]
 8004d66:	6063      	str	r3, [r4, #4]
 8004d68:	89a3      	ldrh	r3, [r4, #12]
 8004d6a:	061b      	lsls	r3, r3, #24
 8004d6c:	d503      	bpl.n	8004d76 <setvbuf+0x6a>
 8004d6e:	6921      	ldr	r1, [r4, #16]
 8004d70:	4630      	mov	r0, r6
 8004d72:	f7ff fa47 	bl	8004204 <_free_r>
 8004d76:	89a3      	ldrh	r3, [r4, #12]
 8004d78:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004d7c:	f023 0303 	bic.w	r3, r3, #3
 8004d80:	f1b8 0f02 	cmp.w	r8, #2
 8004d84:	81a3      	strh	r3, [r4, #12]
 8004d86:	d05d      	beq.n	8004e44 <setvbuf+0x138>
 8004d88:	ab01      	add	r3, sp, #4
 8004d8a:	466a      	mov	r2, sp
 8004d8c:	4621      	mov	r1, r4
 8004d8e:	4630      	mov	r0, r6
 8004d90:	f000 ffd6 	bl	8005d40 <__swhatbuf_r>
 8004d94:	89a3      	ldrh	r3, [r4, #12]
 8004d96:	4318      	orrs	r0, r3
 8004d98:	81a0      	strh	r0, [r4, #12]
 8004d9a:	bb2d      	cbnz	r5, 8004de8 <setvbuf+0xdc>
 8004d9c:	9d00      	ldr	r5, [sp, #0]
 8004d9e:	4628      	mov	r0, r5
 8004da0:	f001 f832 	bl	8005e08 <malloc>
 8004da4:	4607      	mov	r7, r0
 8004da6:	2800      	cmp	r0, #0
 8004da8:	d14e      	bne.n	8004e48 <setvbuf+0x13c>
 8004daa:	f8dd 9000 	ldr.w	r9, [sp]
 8004dae:	45a9      	cmp	r9, r5
 8004db0:	d13c      	bne.n	8004e2c <setvbuf+0x120>
 8004db2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004db6:	89a3      	ldrh	r3, [r4, #12]
 8004db8:	f043 0302 	orr.w	r3, r3, #2
 8004dbc:	81a3      	strh	r3, [r4, #12]
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60a3      	str	r3, [r4, #8]
 8004dc2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004dc6:	6023      	str	r3, [r4, #0]
 8004dc8:	6123      	str	r3, [r4, #16]
 8004dca:	2301      	movs	r3, #1
 8004dcc:	6163      	str	r3, [r4, #20]
 8004dce:	b003      	add	sp, #12
 8004dd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004dd4:	4b22      	ldr	r3, [pc, #136]	; (8004e60 <setvbuf+0x154>)
 8004dd6:	429c      	cmp	r4, r3
 8004dd8:	d101      	bne.n	8004dde <setvbuf+0xd2>
 8004dda:	68b4      	ldr	r4, [r6, #8]
 8004ddc:	e7a8      	b.n	8004d30 <setvbuf+0x24>
 8004dde:	4b21      	ldr	r3, [pc, #132]	; (8004e64 <setvbuf+0x158>)
 8004de0:	429c      	cmp	r4, r3
 8004de2:	bf08      	it	eq
 8004de4:	68f4      	ldreq	r4, [r6, #12]
 8004de6:	e7a3      	b.n	8004d30 <setvbuf+0x24>
 8004de8:	2f00      	cmp	r7, #0
 8004dea:	d0d8      	beq.n	8004d9e <setvbuf+0x92>
 8004dec:	69b3      	ldr	r3, [r6, #24]
 8004dee:	b913      	cbnz	r3, 8004df6 <setvbuf+0xea>
 8004df0:	4630      	mov	r0, r6
 8004df2:	f7ff f945 	bl	8004080 <__sinit>
 8004df6:	f1b8 0f01 	cmp.w	r8, #1
 8004dfa:	bf08      	it	eq
 8004dfc:	89a3      	ldrheq	r3, [r4, #12]
 8004dfe:	6027      	str	r7, [r4, #0]
 8004e00:	bf04      	itt	eq
 8004e02:	f043 0301 	orreq.w	r3, r3, #1
 8004e06:	81a3      	strheq	r3, [r4, #12]
 8004e08:	89a3      	ldrh	r3, [r4, #12]
 8004e0a:	6127      	str	r7, [r4, #16]
 8004e0c:	f013 0008 	ands.w	r0, r3, #8
 8004e10:	6165      	str	r5, [r4, #20]
 8004e12:	d01b      	beq.n	8004e4c <setvbuf+0x140>
 8004e14:	f013 0001 	ands.w	r0, r3, #1
 8004e18:	bf18      	it	ne
 8004e1a:	426d      	negne	r5, r5
 8004e1c:	f04f 0300 	mov.w	r3, #0
 8004e20:	bf1d      	ittte	ne
 8004e22:	60a3      	strne	r3, [r4, #8]
 8004e24:	61a5      	strne	r5, [r4, #24]
 8004e26:	4618      	movne	r0, r3
 8004e28:	60a5      	streq	r5, [r4, #8]
 8004e2a:	e7d0      	b.n	8004dce <setvbuf+0xc2>
 8004e2c:	4648      	mov	r0, r9
 8004e2e:	f000 ffeb 	bl	8005e08 <malloc>
 8004e32:	4607      	mov	r7, r0
 8004e34:	2800      	cmp	r0, #0
 8004e36:	d0bc      	beq.n	8004db2 <setvbuf+0xa6>
 8004e38:	89a3      	ldrh	r3, [r4, #12]
 8004e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e3e:	81a3      	strh	r3, [r4, #12]
 8004e40:	464d      	mov	r5, r9
 8004e42:	e7d3      	b.n	8004dec <setvbuf+0xe0>
 8004e44:	2000      	movs	r0, #0
 8004e46:	e7b6      	b.n	8004db6 <setvbuf+0xaa>
 8004e48:	46a9      	mov	r9, r5
 8004e4a:	e7f5      	b.n	8004e38 <setvbuf+0x12c>
 8004e4c:	60a0      	str	r0, [r4, #8]
 8004e4e:	e7be      	b.n	8004dce <setvbuf+0xc2>
 8004e50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e54:	e7bb      	b.n	8004dce <setvbuf+0xc2>
 8004e56:	bf00      	nop
 8004e58:	2000000c 	.word	0x2000000c
 8004e5c:	08006b8c 	.word	0x08006b8c
 8004e60:	08006bac 	.word	0x08006bac
 8004e64:	08006b6c 	.word	0x08006b6c

08004e68 <siprintf>:
 8004e68:	b40e      	push	{r1, r2, r3}
 8004e6a:	b500      	push	{lr}
 8004e6c:	b09c      	sub	sp, #112	; 0x70
 8004e6e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004e72:	ab1d      	add	r3, sp, #116	; 0x74
 8004e74:	f8ad 1014 	strh.w	r1, [sp, #20]
 8004e78:	9002      	str	r0, [sp, #8]
 8004e7a:	9006      	str	r0, [sp, #24]
 8004e7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e80:	480a      	ldr	r0, [pc, #40]	; (8004eac <siprintf+0x44>)
 8004e82:	9104      	str	r1, [sp, #16]
 8004e84:	9107      	str	r1, [sp, #28]
 8004e86:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004e8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e8e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8004e92:	6800      	ldr	r0, [r0, #0]
 8004e94:	9301      	str	r3, [sp, #4]
 8004e96:	a902      	add	r1, sp, #8
 8004e98:	f001 fb0c 	bl	80064b4 <_svfiprintf_r>
 8004e9c:	9b02      	ldr	r3, [sp, #8]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	701a      	strb	r2, [r3, #0]
 8004ea2:	b01c      	add	sp, #112	; 0x70
 8004ea4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ea8:	b003      	add	sp, #12
 8004eaa:	4770      	bx	lr
 8004eac:	2000000c 	.word	0x2000000c

08004eb0 <__sread>:
 8004eb0:	b510      	push	{r4, lr}
 8004eb2:	460c      	mov	r4, r1
 8004eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eb8:	f001 fd30 	bl	800691c <_read_r>
 8004ebc:	2800      	cmp	r0, #0
 8004ebe:	bfab      	itete	ge
 8004ec0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004ec2:	89a3      	ldrhlt	r3, [r4, #12]
 8004ec4:	181b      	addge	r3, r3, r0
 8004ec6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004eca:	bfac      	ite	ge
 8004ecc:	6563      	strge	r3, [r4, #84]	; 0x54
 8004ece:	81a3      	strhlt	r3, [r4, #12]
 8004ed0:	bd10      	pop	{r4, pc}

08004ed2 <__swrite>:
 8004ed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ed6:	461f      	mov	r7, r3
 8004ed8:	898b      	ldrh	r3, [r1, #12]
 8004eda:	05db      	lsls	r3, r3, #23
 8004edc:	4605      	mov	r5, r0
 8004ede:	460c      	mov	r4, r1
 8004ee0:	4616      	mov	r6, r2
 8004ee2:	d505      	bpl.n	8004ef0 <__swrite+0x1e>
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eec:	f000 ff16 	bl	8005d1c <_lseek_r>
 8004ef0:	89a3      	ldrh	r3, [r4, #12]
 8004ef2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ef6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004efa:	81a3      	strh	r3, [r4, #12]
 8004efc:	4632      	mov	r2, r6
 8004efe:	463b      	mov	r3, r7
 8004f00:	4628      	mov	r0, r5
 8004f02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f06:	f000 b871 	b.w	8004fec <_write_r>

08004f0a <__sseek>:
 8004f0a:	b510      	push	{r4, lr}
 8004f0c:	460c      	mov	r4, r1
 8004f0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f12:	f000 ff03 	bl	8005d1c <_lseek_r>
 8004f16:	1c43      	adds	r3, r0, #1
 8004f18:	89a3      	ldrh	r3, [r4, #12]
 8004f1a:	bf15      	itete	ne
 8004f1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004f1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004f22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f26:	81a3      	strheq	r3, [r4, #12]
 8004f28:	bf18      	it	ne
 8004f2a:	81a3      	strhne	r3, [r4, #12]
 8004f2c:	bd10      	pop	{r4, pc}

08004f2e <__sclose>:
 8004f2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f32:	f000 b8db 	b.w	80050ec <_close_r>

08004f36 <strcpy>:
 8004f36:	4603      	mov	r3, r0
 8004f38:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f3c:	f803 2b01 	strb.w	r2, [r3], #1
 8004f40:	2a00      	cmp	r2, #0
 8004f42:	d1f9      	bne.n	8004f38 <strcpy+0x2>
 8004f44:	4770      	bx	lr
	...

08004f48 <__swbuf_r>:
 8004f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f4a:	460e      	mov	r6, r1
 8004f4c:	4614      	mov	r4, r2
 8004f4e:	4605      	mov	r5, r0
 8004f50:	b118      	cbz	r0, 8004f5a <__swbuf_r+0x12>
 8004f52:	6983      	ldr	r3, [r0, #24]
 8004f54:	b90b      	cbnz	r3, 8004f5a <__swbuf_r+0x12>
 8004f56:	f7ff f893 	bl	8004080 <__sinit>
 8004f5a:	4b21      	ldr	r3, [pc, #132]	; (8004fe0 <__swbuf_r+0x98>)
 8004f5c:	429c      	cmp	r4, r3
 8004f5e:	d12a      	bne.n	8004fb6 <__swbuf_r+0x6e>
 8004f60:	686c      	ldr	r4, [r5, #4]
 8004f62:	69a3      	ldr	r3, [r4, #24]
 8004f64:	60a3      	str	r3, [r4, #8]
 8004f66:	89a3      	ldrh	r3, [r4, #12]
 8004f68:	071a      	lsls	r2, r3, #28
 8004f6a:	d52e      	bpl.n	8004fca <__swbuf_r+0x82>
 8004f6c:	6923      	ldr	r3, [r4, #16]
 8004f6e:	b363      	cbz	r3, 8004fca <__swbuf_r+0x82>
 8004f70:	6923      	ldr	r3, [r4, #16]
 8004f72:	6820      	ldr	r0, [r4, #0]
 8004f74:	1ac0      	subs	r0, r0, r3
 8004f76:	6963      	ldr	r3, [r4, #20]
 8004f78:	b2f6      	uxtb	r6, r6
 8004f7a:	4298      	cmp	r0, r3
 8004f7c:	4637      	mov	r7, r6
 8004f7e:	db04      	blt.n	8004f8a <__swbuf_r+0x42>
 8004f80:	4621      	mov	r1, r4
 8004f82:	4628      	mov	r0, r5
 8004f84:	f7ff f812 	bl	8003fac <_fflush_r>
 8004f88:	bb28      	cbnz	r0, 8004fd6 <__swbuf_r+0x8e>
 8004f8a:	68a3      	ldr	r3, [r4, #8]
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	60a3      	str	r3, [r4, #8]
 8004f90:	6823      	ldr	r3, [r4, #0]
 8004f92:	1c5a      	adds	r2, r3, #1
 8004f94:	6022      	str	r2, [r4, #0]
 8004f96:	701e      	strb	r6, [r3, #0]
 8004f98:	6963      	ldr	r3, [r4, #20]
 8004f9a:	3001      	adds	r0, #1
 8004f9c:	4298      	cmp	r0, r3
 8004f9e:	d004      	beq.n	8004faa <__swbuf_r+0x62>
 8004fa0:	89a3      	ldrh	r3, [r4, #12]
 8004fa2:	07db      	lsls	r3, r3, #31
 8004fa4:	d519      	bpl.n	8004fda <__swbuf_r+0x92>
 8004fa6:	2e0a      	cmp	r6, #10
 8004fa8:	d117      	bne.n	8004fda <__swbuf_r+0x92>
 8004faa:	4621      	mov	r1, r4
 8004fac:	4628      	mov	r0, r5
 8004fae:	f7fe fffd 	bl	8003fac <_fflush_r>
 8004fb2:	b190      	cbz	r0, 8004fda <__swbuf_r+0x92>
 8004fb4:	e00f      	b.n	8004fd6 <__swbuf_r+0x8e>
 8004fb6:	4b0b      	ldr	r3, [pc, #44]	; (8004fe4 <__swbuf_r+0x9c>)
 8004fb8:	429c      	cmp	r4, r3
 8004fba:	d101      	bne.n	8004fc0 <__swbuf_r+0x78>
 8004fbc:	68ac      	ldr	r4, [r5, #8]
 8004fbe:	e7d0      	b.n	8004f62 <__swbuf_r+0x1a>
 8004fc0:	4b09      	ldr	r3, [pc, #36]	; (8004fe8 <__swbuf_r+0xa0>)
 8004fc2:	429c      	cmp	r4, r3
 8004fc4:	bf08      	it	eq
 8004fc6:	68ec      	ldreq	r4, [r5, #12]
 8004fc8:	e7cb      	b.n	8004f62 <__swbuf_r+0x1a>
 8004fca:	4621      	mov	r1, r4
 8004fcc:	4628      	mov	r0, r5
 8004fce:	f000 f81f 	bl	8005010 <__swsetup_r>
 8004fd2:	2800      	cmp	r0, #0
 8004fd4:	d0cc      	beq.n	8004f70 <__swbuf_r+0x28>
 8004fd6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004fda:	4638      	mov	r0, r7
 8004fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	08006b8c 	.word	0x08006b8c
 8004fe4:	08006bac 	.word	0x08006bac
 8004fe8:	08006b6c 	.word	0x08006b6c

08004fec <_write_r>:
 8004fec:	b538      	push	{r3, r4, r5, lr}
 8004fee:	4c07      	ldr	r4, [pc, #28]	; (800500c <_write_r+0x20>)
 8004ff0:	4605      	mov	r5, r0
 8004ff2:	4608      	mov	r0, r1
 8004ff4:	4611      	mov	r1, r2
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	6022      	str	r2, [r4, #0]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	f7fe fa6e 	bl	80034dc <_write>
 8005000:	1c43      	adds	r3, r0, #1
 8005002:	d102      	bne.n	800500a <_write_r+0x1e>
 8005004:	6823      	ldr	r3, [r4, #0]
 8005006:	b103      	cbz	r3, 800500a <_write_r+0x1e>
 8005008:	602b      	str	r3, [r5, #0]
 800500a:	bd38      	pop	{r3, r4, r5, pc}
 800500c:	2000194c 	.word	0x2000194c

08005010 <__swsetup_r>:
 8005010:	4b32      	ldr	r3, [pc, #200]	; (80050dc <__swsetup_r+0xcc>)
 8005012:	b570      	push	{r4, r5, r6, lr}
 8005014:	681d      	ldr	r5, [r3, #0]
 8005016:	4606      	mov	r6, r0
 8005018:	460c      	mov	r4, r1
 800501a:	b125      	cbz	r5, 8005026 <__swsetup_r+0x16>
 800501c:	69ab      	ldr	r3, [r5, #24]
 800501e:	b913      	cbnz	r3, 8005026 <__swsetup_r+0x16>
 8005020:	4628      	mov	r0, r5
 8005022:	f7ff f82d 	bl	8004080 <__sinit>
 8005026:	4b2e      	ldr	r3, [pc, #184]	; (80050e0 <__swsetup_r+0xd0>)
 8005028:	429c      	cmp	r4, r3
 800502a:	d10f      	bne.n	800504c <__swsetup_r+0x3c>
 800502c:	686c      	ldr	r4, [r5, #4]
 800502e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005032:	b29a      	uxth	r2, r3
 8005034:	0715      	lsls	r5, r2, #28
 8005036:	d42c      	bmi.n	8005092 <__swsetup_r+0x82>
 8005038:	06d0      	lsls	r0, r2, #27
 800503a:	d411      	bmi.n	8005060 <__swsetup_r+0x50>
 800503c:	2209      	movs	r2, #9
 800503e:	6032      	str	r2, [r6, #0]
 8005040:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005044:	81a3      	strh	r3, [r4, #12]
 8005046:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800504a:	bd70      	pop	{r4, r5, r6, pc}
 800504c:	4b25      	ldr	r3, [pc, #148]	; (80050e4 <__swsetup_r+0xd4>)
 800504e:	429c      	cmp	r4, r3
 8005050:	d101      	bne.n	8005056 <__swsetup_r+0x46>
 8005052:	68ac      	ldr	r4, [r5, #8]
 8005054:	e7eb      	b.n	800502e <__swsetup_r+0x1e>
 8005056:	4b24      	ldr	r3, [pc, #144]	; (80050e8 <__swsetup_r+0xd8>)
 8005058:	429c      	cmp	r4, r3
 800505a:	bf08      	it	eq
 800505c:	68ec      	ldreq	r4, [r5, #12]
 800505e:	e7e6      	b.n	800502e <__swsetup_r+0x1e>
 8005060:	0751      	lsls	r1, r2, #29
 8005062:	d512      	bpl.n	800508a <__swsetup_r+0x7a>
 8005064:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005066:	b141      	cbz	r1, 800507a <__swsetup_r+0x6a>
 8005068:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800506c:	4299      	cmp	r1, r3
 800506e:	d002      	beq.n	8005076 <__swsetup_r+0x66>
 8005070:	4630      	mov	r0, r6
 8005072:	f7ff f8c7 	bl	8004204 <_free_r>
 8005076:	2300      	movs	r3, #0
 8005078:	6363      	str	r3, [r4, #52]	; 0x34
 800507a:	89a3      	ldrh	r3, [r4, #12]
 800507c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005080:	81a3      	strh	r3, [r4, #12]
 8005082:	2300      	movs	r3, #0
 8005084:	6063      	str	r3, [r4, #4]
 8005086:	6923      	ldr	r3, [r4, #16]
 8005088:	6023      	str	r3, [r4, #0]
 800508a:	89a3      	ldrh	r3, [r4, #12]
 800508c:	f043 0308 	orr.w	r3, r3, #8
 8005090:	81a3      	strh	r3, [r4, #12]
 8005092:	6923      	ldr	r3, [r4, #16]
 8005094:	b94b      	cbnz	r3, 80050aa <__swsetup_r+0x9a>
 8005096:	89a3      	ldrh	r3, [r4, #12]
 8005098:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800509c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050a0:	d003      	beq.n	80050aa <__swsetup_r+0x9a>
 80050a2:	4621      	mov	r1, r4
 80050a4:	4630      	mov	r0, r6
 80050a6:	f000 fe6f 	bl	8005d88 <__smakebuf_r>
 80050aa:	89a2      	ldrh	r2, [r4, #12]
 80050ac:	f012 0301 	ands.w	r3, r2, #1
 80050b0:	d00c      	beq.n	80050cc <__swsetup_r+0xbc>
 80050b2:	2300      	movs	r3, #0
 80050b4:	60a3      	str	r3, [r4, #8]
 80050b6:	6963      	ldr	r3, [r4, #20]
 80050b8:	425b      	negs	r3, r3
 80050ba:	61a3      	str	r3, [r4, #24]
 80050bc:	6923      	ldr	r3, [r4, #16]
 80050be:	b953      	cbnz	r3, 80050d6 <__swsetup_r+0xc6>
 80050c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050c4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80050c8:	d1ba      	bne.n	8005040 <__swsetup_r+0x30>
 80050ca:	bd70      	pop	{r4, r5, r6, pc}
 80050cc:	0792      	lsls	r2, r2, #30
 80050ce:	bf58      	it	pl
 80050d0:	6963      	ldrpl	r3, [r4, #20]
 80050d2:	60a3      	str	r3, [r4, #8]
 80050d4:	e7f2      	b.n	80050bc <__swsetup_r+0xac>
 80050d6:	2000      	movs	r0, #0
 80050d8:	e7f7      	b.n	80050ca <__swsetup_r+0xba>
 80050da:	bf00      	nop
 80050dc:	2000000c 	.word	0x2000000c
 80050e0:	08006b8c 	.word	0x08006b8c
 80050e4:	08006bac 	.word	0x08006bac
 80050e8:	08006b6c 	.word	0x08006b6c

080050ec <_close_r>:
 80050ec:	b538      	push	{r3, r4, r5, lr}
 80050ee:	4c06      	ldr	r4, [pc, #24]	; (8005108 <_close_r+0x1c>)
 80050f0:	2300      	movs	r3, #0
 80050f2:	4605      	mov	r5, r0
 80050f4:	4608      	mov	r0, r1
 80050f6:	6023      	str	r3, [r4, #0]
 80050f8:	f7fe fa18 	bl	800352c <_close>
 80050fc:	1c43      	adds	r3, r0, #1
 80050fe:	d102      	bne.n	8005106 <_close_r+0x1a>
 8005100:	6823      	ldr	r3, [r4, #0]
 8005102:	b103      	cbz	r3, 8005106 <_close_r+0x1a>
 8005104:	602b      	str	r3, [r5, #0]
 8005106:	bd38      	pop	{r3, r4, r5, pc}
 8005108:	2000194c 	.word	0x2000194c

0800510c <quorem>:
 800510c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005110:	6903      	ldr	r3, [r0, #16]
 8005112:	690c      	ldr	r4, [r1, #16]
 8005114:	429c      	cmp	r4, r3
 8005116:	4680      	mov	r8, r0
 8005118:	f300 8082 	bgt.w	8005220 <quorem+0x114>
 800511c:	3c01      	subs	r4, #1
 800511e:	f101 0714 	add.w	r7, r1, #20
 8005122:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8005126:	f100 0614 	add.w	r6, r0, #20
 800512a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800512e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005132:	eb06 030e 	add.w	r3, r6, lr
 8005136:	3501      	adds	r5, #1
 8005138:	eb07 090e 	add.w	r9, r7, lr
 800513c:	9301      	str	r3, [sp, #4]
 800513e:	fbb0 f5f5 	udiv	r5, r0, r5
 8005142:	b395      	cbz	r5, 80051aa <quorem+0x9e>
 8005144:	f04f 0a00 	mov.w	sl, #0
 8005148:	4638      	mov	r0, r7
 800514a:	46b4      	mov	ip, r6
 800514c:	46d3      	mov	fp, sl
 800514e:	f850 2b04 	ldr.w	r2, [r0], #4
 8005152:	b293      	uxth	r3, r2
 8005154:	fb05 a303 	mla	r3, r5, r3, sl
 8005158:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800515c:	b29b      	uxth	r3, r3
 800515e:	ebab 0303 	sub.w	r3, fp, r3
 8005162:	0c12      	lsrs	r2, r2, #16
 8005164:	f8bc b000 	ldrh.w	fp, [ip]
 8005168:	fb05 a202 	mla	r2, r5, r2, sl
 800516c:	fa13 f38b 	uxtah	r3, r3, fp
 8005170:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005174:	fa1f fb82 	uxth.w	fp, r2
 8005178:	f8dc 2000 	ldr.w	r2, [ip]
 800517c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005180:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005184:	b29b      	uxth	r3, r3
 8005186:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800518a:	4581      	cmp	r9, r0
 800518c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005190:	f84c 3b04 	str.w	r3, [ip], #4
 8005194:	d2db      	bcs.n	800514e <quorem+0x42>
 8005196:	f856 300e 	ldr.w	r3, [r6, lr]
 800519a:	b933      	cbnz	r3, 80051aa <quorem+0x9e>
 800519c:	9b01      	ldr	r3, [sp, #4]
 800519e:	3b04      	subs	r3, #4
 80051a0:	429e      	cmp	r6, r3
 80051a2:	461a      	mov	r2, r3
 80051a4:	d330      	bcc.n	8005208 <quorem+0xfc>
 80051a6:	f8c8 4010 	str.w	r4, [r8, #16]
 80051aa:	4640      	mov	r0, r8
 80051ac:	f001 f851 	bl	8006252 <__mcmp>
 80051b0:	2800      	cmp	r0, #0
 80051b2:	db25      	blt.n	8005200 <quorem+0xf4>
 80051b4:	3501      	adds	r5, #1
 80051b6:	4630      	mov	r0, r6
 80051b8:	f04f 0e00 	mov.w	lr, #0
 80051bc:	f857 2b04 	ldr.w	r2, [r7], #4
 80051c0:	f8d0 c000 	ldr.w	ip, [r0]
 80051c4:	b293      	uxth	r3, r2
 80051c6:	ebae 0303 	sub.w	r3, lr, r3
 80051ca:	0c12      	lsrs	r2, r2, #16
 80051cc:	fa13 f38c 	uxtah	r3, r3, ip
 80051d0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80051d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80051d8:	b29b      	uxth	r3, r3
 80051da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80051de:	45b9      	cmp	r9, r7
 80051e0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80051e4:	f840 3b04 	str.w	r3, [r0], #4
 80051e8:	d2e8      	bcs.n	80051bc <quorem+0xb0>
 80051ea:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80051ee:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80051f2:	b92a      	cbnz	r2, 8005200 <quorem+0xf4>
 80051f4:	3b04      	subs	r3, #4
 80051f6:	429e      	cmp	r6, r3
 80051f8:	461a      	mov	r2, r3
 80051fa:	d30b      	bcc.n	8005214 <quorem+0x108>
 80051fc:	f8c8 4010 	str.w	r4, [r8, #16]
 8005200:	4628      	mov	r0, r5
 8005202:	b003      	add	sp, #12
 8005204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005208:	6812      	ldr	r2, [r2, #0]
 800520a:	3b04      	subs	r3, #4
 800520c:	2a00      	cmp	r2, #0
 800520e:	d1ca      	bne.n	80051a6 <quorem+0x9a>
 8005210:	3c01      	subs	r4, #1
 8005212:	e7c5      	b.n	80051a0 <quorem+0x94>
 8005214:	6812      	ldr	r2, [r2, #0]
 8005216:	3b04      	subs	r3, #4
 8005218:	2a00      	cmp	r2, #0
 800521a:	d1ef      	bne.n	80051fc <quorem+0xf0>
 800521c:	3c01      	subs	r4, #1
 800521e:	e7ea      	b.n	80051f6 <quorem+0xea>
 8005220:	2000      	movs	r0, #0
 8005222:	e7ee      	b.n	8005202 <quorem+0xf6>
 8005224:	0000      	movs	r0, r0
	...

08005228 <_dtoa_r>:
 8005228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800522c:	ec57 6b10 	vmov	r6, r7, d0
 8005230:	b095      	sub	sp, #84	; 0x54
 8005232:	e9cd 6700 	strd	r6, r7, [sp]
 8005236:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005238:	9107      	str	r1, [sp, #28]
 800523a:	4605      	mov	r5, r0
 800523c:	920b      	str	r2, [sp, #44]	; 0x2c
 800523e:	9310      	str	r3, [sp, #64]	; 0x40
 8005240:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8005242:	b93e      	cbnz	r6, 8005254 <_dtoa_r+0x2c>
 8005244:	2010      	movs	r0, #16
 8005246:	f000 fddf 	bl	8005e08 <malloc>
 800524a:	6268      	str	r0, [r5, #36]	; 0x24
 800524c:	6046      	str	r6, [r0, #4]
 800524e:	6086      	str	r6, [r0, #8]
 8005250:	6006      	str	r6, [r0, #0]
 8005252:	60c6      	str	r6, [r0, #12]
 8005254:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005256:	6819      	ldr	r1, [r3, #0]
 8005258:	b151      	cbz	r1, 8005270 <_dtoa_r+0x48>
 800525a:	685a      	ldr	r2, [r3, #4]
 800525c:	604a      	str	r2, [r1, #4]
 800525e:	2301      	movs	r3, #1
 8005260:	4093      	lsls	r3, r2
 8005262:	608b      	str	r3, [r1, #8]
 8005264:	4628      	mov	r0, r5
 8005266:	f000 fe1f 	bl	8005ea8 <_Bfree>
 800526a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800526c:	2200      	movs	r2, #0
 800526e:	601a      	str	r2, [r3, #0]
 8005270:	9b01      	ldr	r3, [sp, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	bfbf      	itttt	lt
 8005276:	2301      	movlt	r3, #1
 8005278:	6023      	strlt	r3, [r4, #0]
 800527a:	9b01      	ldrlt	r3, [sp, #4]
 800527c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005280:	bfb2      	itee	lt
 8005282:	9301      	strlt	r3, [sp, #4]
 8005284:	2300      	movge	r3, #0
 8005286:	6023      	strge	r3, [r4, #0]
 8005288:	9c01      	ldr	r4, [sp, #4]
 800528a:	4b73      	ldr	r3, [pc, #460]	; (8005458 <_dtoa_r+0x230>)
 800528c:	43a3      	bics	r3, r4
 800528e:	d118      	bne.n	80052c2 <_dtoa_r+0x9a>
 8005290:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005292:	f242 730f 	movw	r3, #9999	; 0x270f
 8005296:	6013      	str	r3, [r2, #0]
 8005298:	9b00      	ldr	r3, [sp, #0]
 800529a:	b923      	cbnz	r3, 80052a6 <_dtoa_r+0x7e>
 800529c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80052a0:	2c00      	cmp	r4, #0
 80052a2:	f000 8518 	beq.w	8005cd6 <_dtoa_r+0xaae>
 80052a6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80052a8:	b93b      	cbnz	r3, 80052ba <_dtoa_r+0x92>
 80052aa:	4b6c      	ldr	r3, [pc, #432]	; (800545c <_dtoa_r+0x234>)
 80052ac:	e01d      	b.n	80052ea <_dtoa_r+0xc2>
 80052ae:	4b6c      	ldr	r3, [pc, #432]	; (8005460 <_dtoa_r+0x238>)
 80052b0:	9304      	str	r3, [sp, #16]
 80052b2:	3308      	adds	r3, #8
 80052b4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80052b6:	6013      	str	r3, [r2, #0]
 80052b8:	e2a6      	b.n	8005808 <_dtoa_r+0x5e0>
 80052ba:	4b68      	ldr	r3, [pc, #416]	; (800545c <_dtoa_r+0x234>)
 80052bc:	9304      	str	r3, [sp, #16]
 80052be:	3303      	adds	r3, #3
 80052c0:	e7f8      	b.n	80052b4 <_dtoa_r+0x8c>
 80052c2:	ed9d 7b00 	vldr	d7, [sp]
 80052c6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80052ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ce:	ed8d 7b04 	vstr	d7, [sp, #16]
 80052d2:	d10c      	bne.n	80052ee <_dtoa_r+0xc6>
 80052d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80052d6:	2301      	movs	r3, #1
 80052d8:	6013      	str	r3, [r2, #0]
 80052da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f000 84f7 	beq.w	8005cd0 <_dtoa_r+0xaa8>
 80052e2:	4b60      	ldr	r3, [pc, #384]	; (8005464 <_dtoa_r+0x23c>)
 80052e4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80052e6:	6013      	str	r3, [r2, #0]
 80052e8:	3b01      	subs	r3, #1
 80052ea:	9304      	str	r3, [sp, #16]
 80052ec:	e28c      	b.n	8005808 <_dtoa_r+0x5e0>
 80052ee:	a913      	add	r1, sp, #76	; 0x4c
 80052f0:	aa12      	add	r2, sp, #72	; 0x48
 80052f2:	ed9d 0b04 	vldr	d0, [sp, #16]
 80052f6:	4628      	mov	r0, r5
 80052f8:	f001 f823 	bl	8006342 <__d2b>
 80052fc:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8005300:	9003      	str	r0, [sp, #12]
 8005302:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005304:	2900      	cmp	r1, #0
 8005306:	d046      	beq.n	8005396 <_dtoa_r+0x16e>
 8005308:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800530c:	f3c3 0413 	ubfx	r4, r3, #0, #20
 8005310:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8005314:	f2a1 3aff 	subw	sl, r1, #1023	; 0x3ff
 8005318:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800531c:	2100      	movs	r1, #0
 800531e:	ee07 aa90 	vmov	s15, sl
 8005322:	ec43 2b16 	vmov	d6, r2, r3
 8005326:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800532a:	ed9f 4b45 	vldr	d4, [pc, #276]	; 8005440 <_dtoa_r+0x218>
 800532e:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8005332:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005336:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8005448 <_dtoa_r+0x220>
 800533a:	eea7 6b04 	vfma.f64	d6, d7, d4
 800533e:	eeb0 7b46 	vmov.f64	d7, d6
 8005342:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8005450 <_dtoa_r+0x228>
 8005346:	eea5 7b06 	vfma.f64	d7, d5, d6
 800534a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800534e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005356:	9111      	str	r1, [sp, #68]	; 0x44
 8005358:	ee16 ba90 	vmov	fp, s13
 800535c:	d508      	bpl.n	8005370 <_dtoa_r+0x148>
 800535e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8005362:	eeb4 7b46 	vcmp.f64	d7, d6
 8005366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800536a:	bf18      	it	ne
 800536c:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8005370:	f1bb 0f16 	cmp.w	fp, #22
 8005374:	d831      	bhi.n	80053da <_dtoa_r+0x1b2>
 8005376:	4b3c      	ldr	r3, [pc, #240]	; (8005468 <_dtoa_r+0x240>)
 8005378:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800537c:	ed93 7b00 	vldr	d7, [r3]
 8005380:	ed9d 6b00 	vldr	d6, [sp]
 8005384:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800538c:	dd01      	ble.n	8005392 <_dtoa_r+0x16a>
 800538e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005392:	2300      	movs	r3, #0
 8005394:	e022      	b.n	80053dc <_dtoa_r+0x1b4>
 8005396:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005398:	4401      	add	r1, r0
 800539a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800539e:	2b20      	cmp	r3, #32
 80053a0:	dd15      	ble.n	80053ce <_dtoa_r+0x1a6>
 80053a2:	9e00      	ldr	r6, [sp, #0]
 80053a4:	f201 4212 	addw	r2, r1, #1042	; 0x412
 80053a8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80053ac:	fa26 f202 	lsr.w	r2, r6, r2
 80053b0:	fa04 f303 	lsl.w	r3, r4, r3
 80053b4:	431a      	orrs	r2, r3
 80053b6:	ee07 2a90 	vmov	s15, r2
 80053ba:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80053be:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 80053c2:	ec53 2b17 	vmov	r2, r3, d7
 80053c6:	2101      	movs	r1, #1
 80053c8:	f1a3 73f8 	sub.w	r3, r3, #32505856	; 0x1f00000
 80053cc:	e7a7      	b.n	800531e <_dtoa_r+0xf6>
 80053ce:	f1c3 0220 	rsb	r2, r3, #32
 80053d2:	9b00      	ldr	r3, [sp, #0]
 80053d4:	fa03 f202 	lsl.w	r2, r3, r2
 80053d8:	e7ed      	b.n	80053b6 <_dtoa_r+0x18e>
 80053da:	2301      	movs	r3, #1
 80053dc:	eba0 0a0a 	sub.w	sl, r0, sl
 80053e0:	f1ba 0701 	subs.w	r7, sl, #1
 80053e4:	bf46      	itte	mi
 80053e6:	f1ca 0a01 	rsbmi	sl, sl, #1
 80053ea:	2700      	movmi	r7, #0
 80053ec:	f04f 0a00 	movpl.w	sl, #0
 80053f0:	f1bb 0f00 	cmp.w	fp, #0
 80053f4:	930d      	str	r3, [sp, #52]	; 0x34
 80053f6:	bfbc      	itt	lt
 80053f8:	2300      	movlt	r3, #0
 80053fa:	930c      	strlt	r3, [sp, #48]	; 0x30
 80053fc:	9b07      	ldr	r3, [sp, #28]
 80053fe:	bfa3      	ittte	ge
 8005400:	f8cd b030 	strge.w	fp, [sp, #48]	; 0x30
 8005404:	445f      	addge	r7, fp
 8005406:	f04f 0800 	movge.w	r8, #0
 800540a:	ebaa 0a0b 	sublt.w	sl, sl, fp
 800540e:	bfb8      	it	lt
 8005410:	f1cb 0800 	rsblt	r8, fp, #0
 8005414:	2b09      	cmp	r3, #9
 8005416:	f200 80f8 	bhi.w	800560a <_dtoa_r+0x3e2>
 800541a:	2b05      	cmp	r3, #5
 800541c:	bfc4      	itt	gt
 800541e:	3b04      	subgt	r3, #4
 8005420:	9307      	strgt	r3, [sp, #28]
 8005422:	9b07      	ldr	r3, [sp, #28]
 8005424:	f1a3 0302 	sub.w	r3, r3, #2
 8005428:	bfcc      	ite	gt
 800542a:	2400      	movgt	r4, #0
 800542c:	2401      	movle	r4, #1
 800542e:	2b03      	cmp	r3, #3
 8005430:	f200 80f7 	bhi.w	8005622 <_dtoa_r+0x3fa>
 8005434:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005438:	00e700e5 	.word	0x00e700e5
 800543c:	00d9001a 	.word	0x00d9001a
 8005440:	636f4361 	.word	0x636f4361
 8005444:	3fd287a7 	.word	0x3fd287a7
 8005448:	8b60c8b3 	.word	0x8b60c8b3
 800544c:	3fc68a28 	.word	0x3fc68a28
 8005450:	509f79fb 	.word	0x509f79fb
 8005454:	3fd34413 	.word	0x3fd34413
 8005458:	7ff00000 	.word	0x7ff00000
 800545c:	08006c0d 	.word	0x08006c0d
 8005460:	08006c04 	.word	0x08006c04
 8005464:	08006be1 	.word	0x08006be1
 8005468:	08006c48 	.word	0x08006c48
 800546c:	2301      	movs	r3, #1
 800546e:	930a      	str	r3, [sp, #40]	; 0x28
 8005470:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005472:	2b00      	cmp	r3, #0
 8005474:	f340 80d8 	ble.w	8005628 <_dtoa_r+0x400>
 8005478:	9306      	str	r3, [sp, #24]
 800547a:	4699      	mov	r9, r3
 800547c:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 800547e:	2200      	movs	r2, #0
 8005480:	6072      	str	r2, [r6, #4]
 8005482:	2104      	movs	r1, #4
 8005484:	f101 0214 	add.w	r2, r1, #20
 8005488:	429a      	cmp	r2, r3
 800548a:	f240 80d2 	bls.w	8005632 <_dtoa_r+0x40a>
 800548e:	6871      	ldr	r1, [r6, #4]
 8005490:	4628      	mov	r0, r5
 8005492:	f000 fcd5 	bl	8005e40 <_Balloc>
 8005496:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005498:	6030      	str	r0, [r6, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	9304      	str	r3, [sp, #16]
 800549e:	f1b9 0f0e 	cmp.w	r9, #14
 80054a2:	d875      	bhi.n	8005590 <_dtoa_r+0x368>
 80054a4:	2c00      	cmp	r4, #0
 80054a6:	d073      	beq.n	8005590 <_dtoa_r+0x368>
 80054a8:	ed9d 7b00 	vldr	d7, [sp]
 80054ac:	f1bb 0f00 	cmp.w	fp, #0
 80054b0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80054b4:	f340 80ce 	ble.w	8005654 <_dtoa_r+0x42c>
 80054b8:	4ab5      	ldr	r2, [pc, #724]	; (8005790 <_dtoa_r+0x568>)
 80054ba:	f00b 030f 	and.w	r3, fp, #15
 80054be:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80054c2:	ea4f 122b 	mov.w	r2, fp, asr #4
 80054c6:	ed93 7b00 	vldr	d7, [r3]
 80054ca:	06d3      	lsls	r3, r2, #27
 80054cc:	f140 80b6 	bpl.w	800563c <_dtoa_r+0x414>
 80054d0:	4bb0      	ldr	r3, [pc, #704]	; (8005794 <_dtoa_r+0x56c>)
 80054d2:	ed9d 4b0e 	vldr	d4, [sp, #56]	; 0x38
 80054d6:	ed93 6b08 	vldr	d6, [r3, #32]
 80054da:	ee84 5b06 	vdiv.f64	d5, d4, d6
 80054de:	ed8d 5b00 	vstr	d5, [sp]
 80054e2:	f002 020f 	and.w	r2, r2, #15
 80054e6:	2303      	movs	r3, #3
 80054e8:	49aa      	ldr	r1, [pc, #680]	; (8005794 <_dtoa_r+0x56c>)
 80054ea:	2a00      	cmp	r2, #0
 80054ec:	f040 80a8 	bne.w	8005640 <_dtoa_r+0x418>
 80054f0:	ed9d 5b00 	vldr	d5, [sp]
 80054f4:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80054f8:	ed8d 6b00 	vstr	d6, [sp]
 80054fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80054fe:	2a00      	cmp	r2, #0
 8005500:	f000 80da 	beq.w	80056b8 <_dtoa_r+0x490>
 8005504:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005508:	ed9d 7b00 	vldr	d7, [sp]
 800550c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005514:	f140 80d0 	bpl.w	80056b8 <_dtoa_r+0x490>
 8005518:	f1b9 0f00 	cmp.w	r9, #0
 800551c:	f000 80cc 	beq.w	80056b8 <_dtoa_r+0x490>
 8005520:	9a06      	ldr	r2, [sp, #24]
 8005522:	2a00      	cmp	r2, #0
 8005524:	dd30      	ble.n	8005588 <_dtoa_r+0x360>
 8005526:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800552a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800552e:	ed8d 7b00 	vstr	d7, [sp]
 8005532:	9c06      	ldr	r4, [sp, #24]
 8005534:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8005538:	3301      	adds	r3, #1
 800553a:	ed9d 6b00 	vldr	d6, [sp]
 800553e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8005542:	ee07 3a90 	vmov	s15, r3
 8005546:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800554a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800554e:	ed8d 5b00 	vstr	d5, [sp]
 8005552:	9b01      	ldr	r3, [sp, #4]
 8005554:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8005558:	9301      	str	r3, [sp, #4]
 800555a:	2c00      	cmp	r4, #0
 800555c:	f040 80af 	bne.w	80056be <_dtoa_r+0x496>
 8005560:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8005564:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005568:	ed9d 7b00 	vldr	d7, [sp]
 800556c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005574:	f300 8300 	bgt.w	8005b78 <_dtoa_r+0x950>
 8005578:	eeb1 7b47 	vneg.f64	d7, d7
 800557c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005584:	f100 82f6 	bmi.w	8005b74 <_dtoa_r+0x94c>
 8005588:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 800558c:	e88d 0018 	stmia.w	sp, {r3, r4}
 8005590:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005592:	2b00      	cmp	r3, #0
 8005594:	f2c0 8158 	blt.w	8005848 <_dtoa_r+0x620>
 8005598:	f1bb 0f0e 	cmp.w	fp, #14
 800559c:	f300 8154 	bgt.w	8005848 <_dtoa_r+0x620>
 80055a0:	4b7b      	ldr	r3, [pc, #492]	; (8005790 <_dtoa_r+0x568>)
 80055a2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80055a6:	ed93 6b00 	vldr	d6, [r3]
 80055aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f280 80f3 	bge.w	8005798 <_dtoa_r+0x570>
 80055b2:	f1b9 0f00 	cmp.w	r9, #0
 80055b6:	f300 80ef 	bgt.w	8005798 <_dtoa_r+0x570>
 80055ba:	f040 82da 	bne.w	8005b72 <_dtoa_r+0x94a>
 80055be:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80055c2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80055c6:	ed9d 7b00 	vldr	d7, [sp]
 80055ca:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80055ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055d2:	464c      	mov	r4, r9
 80055d4:	464e      	mov	r6, r9
 80055d6:	f280 82ac 	bge.w	8005b32 <_dtoa_r+0x90a>
 80055da:	9b04      	ldr	r3, [sp, #16]
 80055dc:	9904      	ldr	r1, [sp, #16]
 80055de:	2231      	movs	r2, #49	; 0x31
 80055e0:	3301      	adds	r3, #1
 80055e2:	700a      	strb	r2, [r1, #0]
 80055e4:	f10b 0b01 	add.w	fp, fp, #1
 80055e8:	e2a7      	b.n	8005b3a <_dtoa_r+0x912>
 80055ea:	2301      	movs	r3, #1
 80055ec:	930a      	str	r3, [sp, #40]	; 0x28
 80055ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055f0:	445b      	add	r3, fp
 80055f2:	f103 0901 	add.w	r9, r3, #1
 80055f6:	9306      	str	r3, [sp, #24]
 80055f8:	464b      	mov	r3, r9
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	bfb8      	it	lt
 80055fe:	2301      	movlt	r3, #1
 8005600:	e73c      	b.n	800547c <_dtoa_r+0x254>
 8005602:	2300      	movs	r3, #0
 8005604:	e733      	b.n	800546e <_dtoa_r+0x246>
 8005606:	2300      	movs	r3, #0
 8005608:	e7f0      	b.n	80055ec <_dtoa_r+0x3c4>
 800560a:	2401      	movs	r4, #1
 800560c:	2300      	movs	r3, #0
 800560e:	9307      	str	r3, [sp, #28]
 8005610:	940a      	str	r4, [sp, #40]	; 0x28
 8005612:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005616:	9306      	str	r3, [sp, #24]
 8005618:	4699      	mov	r9, r3
 800561a:	2200      	movs	r2, #0
 800561c:	2312      	movs	r3, #18
 800561e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005620:	e72c      	b.n	800547c <_dtoa_r+0x254>
 8005622:	2301      	movs	r3, #1
 8005624:	930a      	str	r3, [sp, #40]	; 0x28
 8005626:	e7f4      	b.n	8005612 <_dtoa_r+0x3ea>
 8005628:	2301      	movs	r3, #1
 800562a:	9306      	str	r3, [sp, #24]
 800562c:	4699      	mov	r9, r3
 800562e:	461a      	mov	r2, r3
 8005630:	e7f5      	b.n	800561e <_dtoa_r+0x3f6>
 8005632:	6872      	ldr	r2, [r6, #4]
 8005634:	3201      	adds	r2, #1
 8005636:	6072      	str	r2, [r6, #4]
 8005638:	0049      	lsls	r1, r1, #1
 800563a:	e723      	b.n	8005484 <_dtoa_r+0x25c>
 800563c:	2302      	movs	r3, #2
 800563e:	e753      	b.n	80054e8 <_dtoa_r+0x2c0>
 8005640:	07d6      	lsls	r6, r2, #31
 8005642:	d504      	bpl.n	800564e <_dtoa_r+0x426>
 8005644:	ed91 6b00 	vldr	d6, [r1]
 8005648:	3301      	adds	r3, #1
 800564a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800564e:	1052      	asrs	r2, r2, #1
 8005650:	3108      	adds	r1, #8
 8005652:	e74a      	b.n	80054ea <_dtoa_r+0x2c2>
 8005654:	d02e      	beq.n	80056b4 <_dtoa_r+0x48c>
 8005656:	f1cb 0200 	rsb	r2, fp, #0
 800565a:	4b4d      	ldr	r3, [pc, #308]	; (8005790 <_dtoa_r+0x568>)
 800565c:	f002 010f 	and.w	r1, r2, #15
 8005660:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005664:	ed93 7b00 	vldr	d7, [r3]
 8005668:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800566c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005670:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005674:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8005678:	4946      	ldr	r1, [pc, #280]	; (8005794 <_dtoa_r+0x56c>)
 800567a:	e88d 0018 	stmia.w	sp, {r3, r4}
 800567e:	1112      	asrs	r2, r2, #4
 8005680:	2000      	movs	r0, #0
 8005682:	2302      	movs	r3, #2
 8005684:	b93a      	cbnz	r2, 8005696 <_dtoa_r+0x46e>
 8005686:	2800      	cmp	r0, #0
 8005688:	f43f af38 	beq.w	80054fc <_dtoa_r+0x2d4>
 800568c:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8005690:	e88d 0006 	stmia.w	sp, {r1, r2}
 8005694:	e732      	b.n	80054fc <_dtoa_r+0x2d4>
 8005696:	07d4      	lsls	r4, r2, #31
 8005698:	d509      	bpl.n	80056ae <_dtoa_r+0x486>
 800569a:	ed9d 6b08 	vldr	d6, [sp, #32]
 800569e:	ed91 7b00 	vldr	d7, [r1]
 80056a2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80056a6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80056aa:	3301      	adds	r3, #1
 80056ac:	2001      	movs	r0, #1
 80056ae:	1052      	asrs	r2, r2, #1
 80056b0:	3108      	adds	r1, #8
 80056b2:	e7e7      	b.n	8005684 <_dtoa_r+0x45c>
 80056b4:	2302      	movs	r3, #2
 80056b6:	e721      	b.n	80054fc <_dtoa_r+0x2d4>
 80056b8:	465a      	mov	r2, fp
 80056ba:	464c      	mov	r4, r9
 80056bc:	e73d      	b.n	800553a <_dtoa_r+0x312>
 80056be:	9804      	ldr	r0, [sp, #16]
 80056c0:	4b33      	ldr	r3, [pc, #204]	; (8005790 <_dtoa_r+0x568>)
 80056c2:	1e61      	subs	r1, r4, #1
 80056c4:	4404      	add	r4, r0
 80056c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80056c8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80056cc:	ed93 5b00 	vldr	d5, [r3]
 80056d0:	b358      	cbz	r0, 800572a <_dtoa_r+0x502>
 80056d2:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80056d6:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80056da:	ed9d 5b00 	vldr	d5, [sp]
 80056de:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80056e2:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80056e6:	9b04      	ldr	r3, [sp, #16]
 80056e8:	ee37 7b45 	vsub.f64	d7, d7, d5
 80056ec:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80056f0:	ee14 1a90 	vmov	r1, s9
 80056f4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80056f8:	3130      	adds	r1, #48	; 0x30
 80056fa:	ee36 6b45 	vsub.f64	d6, d6, d5
 80056fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005706:	f803 1b01 	strb.w	r1, [r3], #1
 800570a:	d439      	bmi.n	8005780 <_dtoa_r+0x558>
 800570c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8005710:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8005714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005718:	d47b      	bmi.n	8005812 <_dtoa_r+0x5ea>
 800571a:	42a3      	cmp	r3, r4
 800571c:	f43f af34 	beq.w	8005588 <_dtoa_r+0x360>
 8005720:	ee27 7b03 	vmul.f64	d7, d7, d3
 8005724:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005728:	e7e0      	b.n	80056ec <_dtoa_r+0x4c4>
 800572a:	ed9d 7b00 	vldr	d7, [sp]
 800572e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005732:	9b04      	ldr	r3, [sp, #16]
 8005734:	ee25 5b07 	vmul.f64	d5, d5, d7
 8005738:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800573c:	ee14 1a90 	vmov	r1, s9
 8005740:	3130      	adds	r1, #48	; 0x30
 8005742:	f803 1b01 	strb.w	r1, [r3], #1
 8005746:	429c      	cmp	r4, r3
 8005748:	eeb8 7be4 	vcvt.f64.s32	d7, s9
 800574c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005750:	d11a      	bne.n	8005788 <_dtoa_r+0x560>
 8005752:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8005756:	ee35 4b07 	vadd.f64	d4, d5, d7
 800575a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800575e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005762:	dc56      	bgt.n	8005812 <_dtoa_r+0x5ea>
 8005764:	ee37 5b45 	vsub.f64	d5, d7, d5
 8005768:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800576c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005770:	f57f af0a 	bpl.w	8005588 <_dtoa_r+0x360>
 8005774:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8005778:	2930      	cmp	r1, #48	; 0x30
 800577a:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 800577e:	d001      	beq.n	8005784 <_dtoa_r+0x55c>
 8005780:	4693      	mov	fp, r2
 8005782:	e031      	b.n	80057e8 <_dtoa_r+0x5c0>
 8005784:	4603      	mov	r3, r0
 8005786:	e7f5      	b.n	8005774 <_dtoa_r+0x54c>
 8005788:	ee26 6b03 	vmul.f64	d6, d6, d3
 800578c:	e7d4      	b.n	8005738 <_dtoa_r+0x510>
 800578e:	bf00      	nop
 8005790:	08006c48 	.word	0x08006c48
 8005794:	08006c20 	.word	0x08006c20
 8005798:	ed9d 7b00 	vldr	d7, [sp]
 800579c:	eeb1 3b46 	vneg.f64	d3, d6
 80057a0:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80057a4:	9b04      	ldr	r3, [sp, #16]
 80057a6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80057aa:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80057ae:	ee15 2a10 	vmov	r2, s10
 80057b2:	3230      	adds	r2, #48	; 0x30
 80057b4:	f803 2b01 	strb.w	r2, [r3], #1
 80057b8:	9a04      	ldr	r2, [sp, #16]
 80057ba:	1a9a      	subs	r2, r3, r2
 80057bc:	4591      	cmp	r9, r2
 80057be:	eeb8 2bc5 	vcvt.f64.s32	d2, s10
 80057c2:	eea3 7b02 	vfma.f64	d7, d3, d2
 80057c6:	d137      	bne.n	8005838 <_dtoa_r+0x610>
 80057c8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80057cc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80057d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057d4:	d41c      	bmi.n	8005810 <_dtoa_r+0x5e8>
 80057d6:	eeb4 6b47 	vcmp.f64	d6, d7
 80057da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057de:	d103      	bne.n	80057e8 <_dtoa_r+0x5c0>
 80057e0:	ee15 2a10 	vmov	r2, s10
 80057e4:	07d2      	lsls	r2, r2, #31
 80057e6:	d413      	bmi.n	8005810 <_dtoa_r+0x5e8>
 80057e8:	9903      	ldr	r1, [sp, #12]
 80057ea:	9300      	str	r3, [sp, #0]
 80057ec:	4628      	mov	r0, r5
 80057ee:	f000 fb5b 	bl	8005ea8 <_Bfree>
 80057f2:	9b00      	ldr	r3, [sp, #0]
 80057f4:	9910      	ldr	r1, [sp, #64]	; 0x40
 80057f6:	2200      	movs	r2, #0
 80057f8:	701a      	strb	r2, [r3, #0]
 80057fa:	f10b 0201 	add.w	r2, fp, #1
 80057fe:	600a      	str	r2, [r1, #0]
 8005800:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005802:	2a00      	cmp	r2, #0
 8005804:	f47f ad57 	bne.w	80052b6 <_dtoa_r+0x8e>
 8005808:	9804      	ldr	r0, [sp, #16]
 800580a:	b015      	add	sp, #84	; 0x54
 800580c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005810:	465a      	mov	r2, fp
 8005812:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8005816:	2839      	cmp	r0, #57	; 0x39
 8005818:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 800581c:	d106      	bne.n	800582c <_dtoa_r+0x604>
 800581e:	9804      	ldr	r0, [sp, #16]
 8005820:	4288      	cmp	r0, r1
 8005822:	d107      	bne.n	8005834 <_dtoa_r+0x60c>
 8005824:	2130      	movs	r1, #48	; 0x30
 8005826:	7001      	strb	r1, [r0, #0]
 8005828:	3201      	adds	r2, #1
 800582a:	4601      	mov	r1, r0
 800582c:	7808      	ldrb	r0, [r1, #0]
 800582e:	3001      	adds	r0, #1
 8005830:	7008      	strb	r0, [r1, #0]
 8005832:	e7a5      	b.n	8005780 <_dtoa_r+0x558>
 8005834:	460b      	mov	r3, r1
 8005836:	e7ec      	b.n	8005812 <_dtoa_r+0x5ea>
 8005838:	ee27 7b04 	vmul.f64	d7, d7, d4
 800583c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005844:	d1af      	bne.n	80057a6 <_dtoa_r+0x57e>
 8005846:	e7cf      	b.n	80057e8 <_dtoa_r+0x5c0>
 8005848:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800584a:	2a00      	cmp	r2, #0
 800584c:	f000 8129 	beq.w	8005aa2 <_dtoa_r+0x87a>
 8005850:	9a07      	ldr	r2, [sp, #28]
 8005852:	2a01      	cmp	r2, #1
 8005854:	f300 810b 	bgt.w	8005a6e <_dtoa_r+0x846>
 8005858:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800585a:	2a00      	cmp	r2, #0
 800585c:	f000 8103 	beq.w	8005a66 <_dtoa_r+0x83e>
 8005860:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005864:	4644      	mov	r4, r8
 8005866:	f8cd a020 	str.w	sl, [sp, #32]
 800586a:	2101      	movs	r1, #1
 800586c:	4628      	mov	r0, r5
 800586e:	449a      	add	sl, r3
 8005870:	441f      	add	r7, r3
 8005872:	f000 fbb9 	bl	8005fe8 <__i2b>
 8005876:	4606      	mov	r6, r0
 8005878:	9b08      	ldr	r3, [sp, #32]
 800587a:	2b00      	cmp	r3, #0
 800587c:	dd0a      	ble.n	8005894 <_dtoa_r+0x66c>
 800587e:	2f00      	cmp	r7, #0
 8005880:	dd08      	ble.n	8005894 <_dtoa_r+0x66c>
 8005882:	42bb      	cmp	r3, r7
 8005884:	9a08      	ldr	r2, [sp, #32]
 8005886:	bfa8      	it	ge
 8005888:	463b      	movge	r3, r7
 800588a:	1ad2      	subs	r2, r2, r3
 800588c:	ebaa 0a03 	sub.w	sl, sl, r3
 8005890:	9208      	str	r2, [sp, #32]
 8005892:	1aff      	subs	r7, r7, r3
 8005894:	f1b8 0f00 	cmp.w	r8, #0
 8005898:	d01f      	beq.n	80058da <_dtoa_r+0x6b2>
 800589a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800589c:	2b00      	cmp	r3, #0
 800589e:	f000 8105 	beq.w	8005aac <_dtoa_r+0x884>
 80058a2:	2c00      	cmp	r4, #0
 80058a4:	dd11      	ble.n	80058ca <_dtoa_r+0x6a2>
 80058a6:	4631      	mov	r1, r6
 80058a8:	4622      	mov	r2, r4
 80058aa:	4628      	mov	r0, r5
 80058ac:	f000 fc32 	bl	8006114 <__pow5mult>
 80058b0:	9a03      	ldr	r2, [sp, #12]
 80058b2:	4601      	mov	r1, r0
 80058b4:	4606      	mov	r6, r0
 80058b6:	4628      	mov	r0, r5
 80058b8:	f000 fb9f 	bl	8005ffa <__multiply>
 80058bc:	9903      	ldr	r1, [sp, #12]
 80058be:	900e      	str	r0, [sp, #56]	; 0x38
 80058c0:	4628      	mov	r0, r5
 80058c2:	f000 faf1 	bl	8005ea8 <_Bfree>
 80058c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058c8:	9303      	str	r3, [sp, #12]
 80058ca:	ebb8 0204 	subs.w	r2, r8, r4
 80058ce:	d004      	beq.n	80058da <_dtoa_r+0x6b2>
 80058d0:	9903      	ldr	r1, [sp, #12]
 80058d2:	4628      	mov	r0, r5
 80058d4:	f000 fc1e 	bl	8006114 <__pow5mult>
 80058d8:	9003      	str	r0, [sp, #12]
 80058da:	2101      	movs	r1, #1
 80058dc:	4628      	mov	r0, r5
 80058de:	f000 fb83 	bl	8005fe8 <__i2b>
 80058e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	4604      	mov	r4, r0
 80058e8:	f340 80e2 	ble.w	8005ab0 <_dtoa_r+0x888>
 80058ec:	461a      	mov	r2, r3
 80058ee:	4601      	mov	r1, r0
 80058f0:	4628      	mov	r0, r5
 80058f2:	f000 fc0f 	bl	8006114 <__pow5mult>
 80058f6:	9b07      	ldr	r3, [sp, #28]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	4604      	mov	r4, r0
 80058fc:	f340 80db 	ble.w	8005ab6 <_dtoa_r+0x88e>
 8005900:	f04f 0800 	mov.w	r8, #0
 8005904:	6923      	ldr	r3, [r4, #16]
 8005906:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800590a:	6918      	ldr	r0, [r3, #16]
 800590c:	f000 fb1e 	bl	8005f4c <__hi0bits>
 8005910:	f1c0 0020 	rsb	r0, r0, #32
 8005914:	4438      	add	r0, r7
 8005916:	f010 001f 	ands.w	r0, r0, #31
 800591a:	f000 80f1 	beq.w	8005b00 <_dtoa_r+0x8d8>
 800591e:	f1c0 0320 	rsb	r3, r0, #32
 8005922:	2b04      	cmp	r3, #4
 8005924:	f340 80e3 	ble.w	8005aee <_dtoa_r+0x8c6>
 8005928:	9b08      	ldr	r3, [sp, #32]
 800592a:	f1c0 001c 	rsb	r0, r0, #28
 800592e:	4403      	add	r3, r0
 8005930:	4482      	add	sl, r0
 8005932:	9308      	str	r3, [sp, #32]
 8005934:	4407      	add	r7, r0
 8005936:	f1ba 0f00 	cmp.w	sl, #0
 800593a:	dd05      	ble.n	8005948 <_dtoa_r+0x720>
 800593c:	4652      	mov	r2, sl
 800593e:	9903      	ldr	r1, [sp, #12]
 8005940:	4628      	mov	r0, r5
 8005942:	f000 fc35 	bl	80061b0 <__lshift>
 8005946:	9003      	str	r0, [sp, #12]
 8005948:	2f00      	cmp	r7, #0
 800594a:	dd05      	ble.n	8005958 <_dtoa_r+0x730>
 800594c:	4621      	mov	r1, r4
 800594e:	463a      	mov	r2, r7
 8005950:	4628      	mov	r0, r5
 8005952:	f000 fc2d 	bl	80061b0 <__lshift>
 8005956:	4604      	mov	r4, r0
 8005958:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800595a:	2b00      	cmp	r3, #0
 800595c:	f000 80d2 	beq.w	8005b04 <_dtoa_r+0x8dc>
 8005960:	4621      	mov	r1, r4
 8005962:	9803      	ldr	r0, [sp, #12]
 8005964:	f000 fc75 	bl	8006252 <__mcmp>
 8005968:	2800      	cmp	r0, #0
 800596a:	f280 80cb 	bge.w	8005b04 <_dtoa_r+0x8dc>
 800596e:	2300      	movs	r3, #0
 8005970:	220a      	movs	r2, #10
 8005972:	9903      	ldr	r1, [sp, #12]
 8005974:	4628      	mov	r0, r5
 8005976:	f000 faae 	bl	8005ed6 <__multadd>
 800597a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800597c:	9003      	str	r0, [sp, #12]
 800597e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005982:	2b00      	cmp	r3, #0
 8005984:	f000 81ae 	beq.w	8005ce4 <_dtoa_r+0xabc>
 8005988:	2300      	movs	r3, #0
 800598a:	4631      	mov	r1, r6
 800598c:	220a      	movs	r2, #10
 800598e:	4628      	mov	r0, r5
 8005990:	f000 faa1 	bl	8005ed6 <__multadd>
 8005994:	9b06      	ldr	r3, [sp, #24]
 8005996:	2b00      	cmp	r3, #0
 8005998:	4606      	mov	r6, r0
 800599a:	dc03      	bgt.n	80059a4 <_dtoa_r+0x77c>
 800599c:	9b07      	ldr	r3, [sp, #28]
 800599e:	2b02      	cmp	r3, #2
 80059a0:	f300 80b8 	bgt.w	8005b14 <_dtoa_r+0x8ec>
 80059a4:	9b08      	ldr	r3, [sp, #32]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	dd05      	ble.n	80059b6 <_dtoa_r+0x78e>
 80059aa:	4631      	mov	r1, r6
 80059ac:	461a      	mov	r2, r3
 80059ae:	4628      	mov	r0, r5
 80059b0:	f000 fbfe 	bl	80061b0 <__lshift>
 80059b4:	4606      	mov	r6, r0
 80059b6:	f1b8 0f00 	cmp.w	r8, #0
 80059ba:	f000 8115 	beq.w	8005be8 <_dtoa_r+0x9c0>
 80059be:	6871      	ldr	r1, [r6, #4]
 80059c0:	4628      	mov	r0, r5
 80059c2:	f000 fa3d 	bl	8005e40 <_Balloc>
 80059c6:	6932      	ldr	r2, [r6, #16]
 80059c8:	3202      	adds	r2, #2
 80059ca:	4607      	mov	r7, r0
 80059cc:	0092      	lsls	r2, r2, #2
 80059ce:	f106 010c 	add.w	r1, r6, #12
 80059d2:	300c      	adds	r0, #12
 80059d4:	f7fe fc02 	bl	80041dc <memcpy>
 80059d8:	2201      	movs	r2, #1
 80059da:	4639      	mov	r1, r7
 80059dc:	4628      	mov	r0, r5
 80059de:	f000 fbe7 	bl	80061b0 <__lshift>
 80059e2:	9b00      	ldr	r3, [sp, #0]
 80059e4:	9f04      	ldr	r7, [sp, #16]
 80059e6:	f003 0301 	and.w	r3, r3, #1
 80059ea:	46b1      	mov	r9, r6
 80059ec:	9308      	str	r3, [sp, #32]
 80059ee:	4606      	mov	r6, r0
 80059f0:	4621      	mov	r1, r4
 80059f2:	9803      	ldr	r0, [sp, #12]
 80059f4:	f7ff fb8a 	bl	800510c <quorem>
 80059f8:	4649      	mov	r1, r9
 80059fa:	4682      	mov	sl, r0
 80059fc:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005a00:	9803      	ldr	r0, [sp, #12]
 8005a02:	f000 fc26 	bl	8006252 <__mcmp>
 8005a06:	4632      	mov	r2, r6
 8005a08:	9000      	str	r0, [sp, #0]
 8005a0a:	4621      	mov	r1, r4
 8005a0c:	4628      	mov	r0, r5
 8005a0e:	f000 fc3a 	bl	8006286 <__mdiff>
 8005a12:	68c3      	ldr	r3, [r0, #12]
 8005a14:	4602      	mov	r2, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	f040 80e8 	bne.w	8005bec <_dtoa_r+0x9c4>
 8005a1c:	4601      	mov	r1, r0
 8005a1e:	900a      	str	r0, [sp, #40]	; 0x28
 8005a20:	9803      	ldr	r0, [sp, #12]
 8005a22:	f000 fc16 	bl	8006252 <__mcmp>
 8005a26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a28:	4603      	mov	r3, r0
 8005a2a:	4611      	mov	r1, r2
 8005a2c:	4628      	mov	r0, r5
 8005a2e:	930a      	str	r3, [sp, #40]	; 0x28
 8005a30:	f000 fa3a 	bl	8005ea8 <_Bfree>
 8005a34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	f040 80da 	bne.w	8005bf0 <_dtoa_r+0x9c8>
 8005a3c:	9a07      	ldr	r2, [sp, #28]
 8005a3e:	2a00      	cmp	r2, #0
 8005a40:	f040 80d6 	bne.w	8005bf0 <_dtoa_r+0x9c8>
 8005a44:	9a08      	ldr	r2, [sp, #32]
 8005a46:	2a00      	cmp	r2, #0
 8005a48:	f040 80d2 	bne.w	8005bf0 <_dtoa_r+0x9c8>
 8005a4c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005a50:	f000 80ee 	beq.w	8005c30 <_dtoa_r+0xa08>
 8005a54:	9b00      	ldr	r3, [sp, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	dd01      	ble.n	8005a5e <_dtoa_r+0x836>
 8005a5a:	f10a 0831 	add.w	r8, sl, #49	; 0x31
 8005a5e:	1c7b      	adds	r3, r7, #1
 8005a60:	f887 8000 	strb.w	r8, [r7]
 8005a64:	e06b      	b.n	8005b3e <_dtoa_r+0x916>
 8005a66:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005a68:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005a6c:	e6fa      	b.n	8005864 <_dtoa_r+0x63c>
 8005a6e:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 8005a72:	45a0      	cmp	r8, r4
 8005a74:	bfbf      	itttt	lt
 8005a76:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8005a78:	eba4 0808 	sublt.w	r8, r4, r8
 8005a7c:	4443      	addlt	r3, r8
 8005a7e:	930c      	strlt	r3, [sp, #48]	; 0x30
 8005a80:	bfb6      	itet	lt
 8005a82:	46a0      	movlt	r8, r4
 8005a84:	eba8 0404 	subge.w	r4, r8, r4
 8005a88:	2400      	movlt	r4, #0
 8005a8a:	f1b9 0f00 	cmp.w	r9, #0
 8005a8e:	bfbb      	ittet	lt
 8005a90:	ebaa 0309 	sublt.w	r3, sl, r9
 8005a94:	9308      	strlt	r3, [sp, #32]
 8005a96:	f8cd a020 	strge.w	sl, [sp, #32]
 8005a9a:	2300      	movlt	r3, #0
 8005a9c:	bfa8      	it	ge
 8005a9e:	464b      	movge	r3, r9
 8005aa0:	e6e3      	b.n	800586a <_dtoa_r+0x642>
 8005aa2:	4644      	mov	r4, r8
 8005aa4:	f8cd a020 	str.w	sl, [sp, #32]
 8005aa8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005aaa:	e6e5      	b.n	8005878 <_dtoa_r+0x650>
 8005aac:	4642      	mov	r2, r8
 8005aae:	e70f      	b.n	80058d0 <_dtoa_r+0x6a8>
 8005ab0:	9b07      	ldr	r3, [sp, #28]
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	dc16      	bgt.n	8005ae4 <_dtoa_r+0x8bc>
 8005ab6:	9b00      	ldr	r3, [sp, #0]
 8005ab8:	b9a3      	cbnz	r3, 8005ae4 <_dtoa_r+0x8bc>
 8005aba:	9b01      	ldr	r3, [sp, #4]
 8005abc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ac0:	b983      	cbnz	r3, 8005ae4 <_dtoa_r+0x8bc>
 8005ac2:	9b01      	ldr	r3, [sp, #4]
 8005ac4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ac8:	0d1b      	lsrs	r3, r3, #20
 8005aca:	051b      	lsls	r3, r3, #20
 8005acc:	b16b      	cbz	r3, 8005aea <_dtoa_r+0x8c2>
 8005ace:	f10a 0a01 	add.w	sl, sl, #1
 8005ad2:	3701      	adds	r7, #1
 8005ad4:	f04f 0801 	mov.w	r8, #1
 8005ad8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	f47f af12 	bne.w	8005904 <_dtoa_r+0x6dc>
 8005ae0:	2001      	movs	r0, #1
 8005ae2:	e717      	b.n	8005914 <_dtoa_r+0x6ec>
 8005ae4:	f04f 0800 	mov.w	r8, #0
 8005ae8:	e7f6      	b.n	8005ad8 <_dtoa_r+0x8b0>
 8005aea:	4698      	mov	r8, r3
 8005aec:	e7f4      	b.n	8005ad8 <_dtoa_r+0x8b0>
 8005aee:	f43f af22 	beq.w	8005936 <_dtoa_r+0x70e>
 8005af2:	9a08      	ldr	r2, [sp, #32]
 8005af4:	331c      	adds	r3, #28
 8005af6:	441a      	add	r2, r3
 8005af8:	449a      	add	sl, r3
 8005afa:	9208      	str	r2, [sp, #32]
 8005afc:	441f      	add	r7, r3
 8005afe:	e71a      	b.n	8005936 <_dtoa_r+0x70e>
 8005b00:	4603      	mov	r3, r0
 8005b02:	e7f6      	b.n	8005af2 <_dtoa_r+0x8ca>
 8005b04:	f1b9 0f00 	cmp.w	r9, #0
 8005b08:	dc39      	bgt.n	8005b7e <_dtoa_r+0x956>
 8005b0a:	9b07      	ldr	r3, [sp, #28]
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	dd36      	ble.n	8005b7e <_dtoa_r+0x956>
 8005b10:	f8cd 9018 	str.w	r9, [sp, #24]
 8005b14:	9b06      	ldr	r3, [sp, #24]
 8005b16:	b963      	cbnz	r3, 8005b32 <_dtoa_r+0x90a>
 8005b18:	4621      	mov	r1, r4
 8005b1a:	2205      	movs	r2, #5
 8005b1c:	4628      	mov	r0, r5
 8005b1e:	f000 f9da 	bl	8005ed6 <__multadd>
 8005b22:	4601      	mov	r1, r0
 8005b24:	4604      	mov	r4, r0
 8005b26:	9803      	ldr	r0, [sp, #12]
 8005b28:	f000 fb93 	bl	8006252 <__mcmp>
 8005b2c:	2800      	cmp	r0, #0
 8005b2e:	f73f ad54 	bgt.w	80055da <_dtoa_r+0x3b2>
 8005b32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b34:	ea6f 0b03 	mvn.w	fp, r3
 8005b38:	9b04      	ldr	r3, [sp, #16]
 8005b3a:	f04f 0900 	mov.w	r9, #0
 8005b3e:	4621      	mov	r1, r4
 8005b40:	4628      	mov	r0, r5
 8005b42:	9300      	str	r3, [sp, #0]
 8005b44:	f000 f9b0 	bl	8005ea8 <_Bfree>
 8005b48:	9b00      	ldr	r3, [sp, #0]
 8005b4a:	2e00      	cmp	r6, #0
 8005b4c:	f43f ae4c 	beq.w	80057e8 <_dtoa_r+0x5c0>
 8005b50:	f1b9 0f00 	cmp.w	r9, #0
 8005b54:	d006      	beq.n	8005b64 <_dtoa_r+0x93c>
 8005b56:	45b1      	cmp	r9, r6
 8005b58:	d004      	beq.n	8005b64 <_dtoa_r+0x93c>
 8005b5a:	4649      	mov	r1, r9
 8005b5c:	4628      	mov	r0, r5
 8005b5e:	f000 f9a3 	bl	8005ea8 <_Bfree>
 8005b62:	9b00      	ldr	r3, [sp, #0]
 8005b64:	9300      	str	r3, [sp, #0]
 8005b66:	4631      	mov	r1, r6
 8005b68:	4628      	mov	r0, r5
 8005b6a:	f000 f99d 	bl	8005ea8 <_Bfree>
 8005b6e:	9b00      	ldr	r3, [sp, #0]
 8005b70:	e63a      	b.n	80057e8 <_dtoa_r+0x5c0>
 8005b72:	2400      	movs	r4, #0
 8005b74:	4626      	mov	r6, r4
 8005b76:	e7dc      	b.n	8005b32 <_dtoa_r+0x90a>
 8005b78:	4693      	mov	fp, r2
 8005b7a:	4626      	mov	r6, r4
 8005b7c:	e52d      	b.n	80055da <_dtoa_r+0x3b2>
 8005b7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b80:	f8cd 9018 	str.w	r9, [sp, #24]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f47f af0d 	bne.w	80059a4 <_dtoa_r+0x77c>
 8005b8a:	9f04      	ldr	r7, [sp, #16]
 8005b8c:	9803      	ldr	r0, [sp, #12]
 8005b8e:	4621      	mov	r1, r4
 8005b90:	f7ff fabc 	bl	800510c <quorem>
 8005b94:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005b98:	f807 8b01 	strb.w	r8, [r7], #1
 8005b9c:	9b04      	ldr	r3, [sp, #16]
 8005b9e:	9a06      	ldr	r2, [sp, #24]
 8005ba0:	1afb      	subs	r3, r7, r3
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	f300 8081 	bgt.w	8005caa <_dtoa_r+0xa82>
 8005ba8:	9b04      	ldr	r3, [sp, #16]
 8005baa:	2a01      	cmp	r2, #1
 8005bac:	bfac      	ite	ge
 8005bae:	189b      	addge	r3, r3, r2
 8005bb0:	3301      	addlt	r3, #1
 8005bb2:	461f      	mov	r7, r3
 8005bb4:	f04f 0900 	mov.w	r9, #0
 8005bb8:	2201      	movs	r2, #1
 8005bba:	9903      	ldr	r1, [sp, #12]
 8005bbc:	4628      	mov	r0, r5
 8005bbe:	f000 faf7 	bl	80061b0 <__lshift>
 8005bc2:	4621      	mov	r1, r4
 8005bc4:	9003      	str	r0, [sp, #12]
 8005bc6:	f000 fb44 	bl	8006252 <__mcmp>
 8005bca:	2800      	cmp	r0, #0
 8005bcc:	dc33      	bgt.n	8005c36 <_dtoa_r+0xa0e>
 8005bce:	d102      	bne.n	8005bd6 <_dtoa_r+0x9ae>
 8005bd0:	f018 0f01 	tst.w	r8, #1
 8005bd4:	d12f      	bne.n	8005c36 <_dtoa_r+0xa0e>
 8005bd6:	463b      	mov	r3, r7
 8005bd8:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8005bdc:	2a30      	cmp	r2, #48	; 0x30
 8005bde:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8005be2:	d1ac      	bne.n	8005b3e <_dtoa_r+0x916>
 8005be4:	460b      	mov	r3, r1
 8005be6:	e7f7      	b.n	8005bd8 <_dtoa_r+0x9b0>
 8005be8:	4630      	mov	r0, r6
 8005bea:	e6fa      	b.n	80059e2 <_dtoa_r+0x7ba>
 8005bec:	2301      	movs	r3, #1
 8005bee:	e71c      	b.n	8005a2a <_dtoa_r+0x802>
 8005bf0:	9a00      	ldr	r2, [sp, #0]
 8005bf2:	2a00      	cmp	r2, #0
 8005bf4:	db04      	blt.n	8005c00 <_dtoa_r+0x9d8>
 8005bf6:	d127      	bne.n	8005c48 <_dtoa_r+0xa20>
 8005bf8:	9a07      	ldr	r2, [sp, #28]
 8005bfa:	bb2a      	cbnz	r2, 8005c48 <_dtoa_r+0xa20>
 8005bfc:	9a08      	ldr	r2, [sp, #32]
 8005bfe:	bb1a      	cbnz	r2, 8005c48 <_dtoa_r+0xa20>
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f77f af2c 	ble.w	8005a5e <_dtoa_r+0x836>
 8005c06:	2201      	movs	r2, #1
 8005c08:	9903      	ldr	r1, [sp, #12]
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	f000 fad0 	bl	80061b0 <__lshift>
 8005c10:	4621      	mov	r1, r4
 8005c12:	9003      	str	r0, [sp, #12]
 8005c14:	f000 fb1d 	bl	8006252 <__mcmp>
 8005c18:	2800      	cmp	r0, #0
 8005c1a:	dc05      	bgt.n	8005c28 <_dtoa_r+0xa00>
 8005c1c:	f47f af1f 	bne.w	8005a5e <_dtoa_r+0x836>
 8005c20:	f018 0f01 	tst.w	r8, #1
 8005c24:	f43f af1b 	beq.w	8005a5e <_dtoa_r+0x836>
 8005c28:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005c2c:	f47f af15 	bne.w	8005a5a <_dtoa_r+0x832>
 8005c30:	2339      	movs	r3, #57	; 0x39
 8005c32:	703b      	strb	r3, [r7, #0]
 8005c34:	3701      	adds	r7, #1
 8005c36:	463b      	mov	r3, r7
 8005c38:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8005c3c:	2a39      	cmp	r2, #57	; 0x39
 8005c3e:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8005c42:	d03a      	beq.n	8005cba <_dtoa_r+0xa92>
 8005c44:	3201      	adds	r2, #1
 8005c46:	e03f      	b.n	8005cc8 <_dtoa_r+0xaa0>
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f107 0301 	add.w	r3, r7, #1
 8005c4e:	dd05      	ble.n	8005c5c <_dtoa_r+0xa34>
 8005c50:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005c54:	d0ec      	beq.n	8005c30 <_dtoa_r+0xa08>
 8005c56:	f108 0801 	add.w	r8, r8, #1
 8005c5a:	e701      	b.n	8005a60 <_dtoa_r+0x838>
 8005c5c:	461f      	mov	r7, r3
 8005c5e:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005c62:	9b04      	ldr	r3, [sp, #16]
 8005c64:	9a06      	ldr	r2, [sp, #24]
 8005c66:	1afb      	subs	r3, r7, r3
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d0a5      	beq.n	8005bb8 <_dtoa_r+0x990>
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	220a      	movs	r2, #10
 8005c70:	9903      	ldr	r1, [sp, #12]
 8005c72:	4628      	mov	r0, r5
 8005c74:	f000 f92f 	bl	8005ed6 <__multadd>
 8005c78:	45b1      	cmp	r9, r6
 8005c7a:	9003      	str	r0, [sp, #12]
 8005c7c:	f04f 0300 	mov.w	r3, #0
 8005c80:	f04f 020a 	mov.w	r2, #10
 8005c84:	4649      	mov	r1, r9
 8005c86:	4628      	mov	r0, r5
 8005c88:	d104      	bne.n	8005c94 <_dtoa_r+0xa6c>
 8005c8a:	f000 f924 	bl	8005ed6 <__multadd>
 8005c8e:	4681      	mov	r9, r0
 8005c90:	4606      	mov	r6, r0
 8005c92:	e6ad      	b.n	80059f0 <_dtoa_r+0x7c8>
 8005c94:	f000 f91f 	bl	8005ed6 <__multadd>
 8005c98:	4631      	mov	r1, r6
 8005c9a:	4681      	mov	r9, r0
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	220a      	movs	r2, #10
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	f000 f918 	bl	8005ed6 <__multadd>
 8005ca6:	4606      	mov	r6, r0
 8005ca8:	e6a2      	b.n	80059f0 <_dtoa_r+0x7c8>
 8005caa:	2300      	movs	r3, #0
 8005cac:	220a      	movs	r2, #10
 8005cae:	9903      	ldr	r1, [sp, #12]
 8005cb0:	4628      	mov	r0, r5
 8005cb2:	f000 f910 	bl	8005ed6 <__multadd>
 8005cb6:	9003      	str	r0, [sp, #12]
 8005cb8:	e768      	b.n	8005b8c <_dtoa_r+0x964>
 8005cba:	9a04      	ldr	r2, [sp, #16]
 8005cbc:	428a      	cmp	r2, r1
 8005cbe:	d105      	bne.n	8005ccc <_dtoa_r+0xaa4>
 8005cc0:	9904      	ldr	r1, [sp, #16]
 8005cc2:	f10b 0b01 	add.w	fp, fp, #1
 8005cc6:	2231      	movs	r2, #49	; 0x31
 8005cc8:	700a      	strb	r2, [r1, #0]
 8005cca:	e738      	b.n	8005b3e <_dtoa_r+0x916>
 8005ccc:	460b      	mov	r3, r1
 8005cce:	e7b3      	b.n	8005c38 <_dtoa_r+0xa10>
 8005cd0:	4b09      	ldr	r3, [pc, #36]	; (8005cf8 <_dtoa_r+0xad0>)
 8005cd2:	f7ff bb0a 	b.w	80052ea <_dtoa_r+0xc2>
 8005cd6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f47f aae8 	bne.w	80052ae <_dtoa_r+0x86>
 8005cde:	4b07      	ldr	r3, [pc, #28]	; (8005cfc <_dtoa_r+0xad4>)
 8005ce0:	f7ff bb03 	b.w	80052ea <_dtoa_r+0xc2>
 8005ce4:	9b06      	ldr	r3, [sp, #24]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f73f af4f 	bgt.w	8005b8a <_dtoa_r+0x962>
 8005cec:	9b07      	ldr	r3, [sp, #28]
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	f77f af4b 	ble.w	8005b8a <_dtoa_r+0x962>
 8005cf4:	e70e      	b.n	8005b14 <_dtoa_r+0x8ec>
 8005cf6:	bf00      	nop
 8005cf8:	08006be0 	.word	0x08006be0
 8005cfc:	08006c04 	.word	0x08006c04

08005d00 <_localeconv_r>:
 8005d00:	4b04      	ldr	r3, [pc, #16]	; (8005d14 <_localeconv_r+0x14>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	6a18      	ldr	r0, [r3, #32]
 8005d06:	4b04      	ldr	r3, [pc, #16]	; (8005d18 <_localeconv_r+0x18>)
 8005d08:	2800      	cmp	r0, #0
 8005d0a:	bf08      	it	eq
 8005d0c:	4618      	moveq	r0, r3
 8005d0e:	30f0      	adds	r0, #240	; 0xf0
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	2000000c 	.word	0x2000000c
 8005d18:	20000070 	.word	0x20000070

08005d1c <_lseek_r>:
 8005d1c:	b538      	push	{r3, r4, r5, lr}
 8005d1e:	4c07      	ldr	r4, [pc, #28]	; (8005d3c <_lseek_r+0x20>)
 8005d20:	4605      	mov	r5, r0
 8005d22:	4608      	mov	r0, r1
 8005d24:	4611      	mov	r1, r2
 8005d26:	2200      	movs	r2, #0
 8005d28:	6022      	str	r2, [r4, #0]
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	f7fd fc08 	bl	8003540 <_lseek>
 8005d30:	1c43      	adds	r3, r0, #1
 8005d32:	d102      	bne.n	8005d3a <_lseek_r+0x1e>
 8005d34:	6823      	ldr	r3, [r4, #0]
 8005d36:	b103      	cbz	r3, 8005d3a <_lseek_r+0x1e>
 8005d38:	602b      	str	r3, [r5, #0]
 8005d3a:	bd38      	pop	{r3, r4, r5, pc}
 8005d3c:	2000194c 	.word	0x2000194c

08005d40 <__swhatbuf_r>:
 8005d40:	b570      	push	{r4, r5, r6, lr}
 8005d42:	460e      	mov	r6, r1
 8005d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d48:	2900      	cmp	r1, #0
 8005d4a:	b090      	sub	sp, #64	; 0x40
 8005d4c:	4614      	mov	r4, r2
 8005d4e:	461d      	mov	r5, r3
 8005d50:	da07      	bge.n	8005d62 <__swhatbuf_r+0x22>
 8005d52:	2300      	movs	r3, #0
 8005d54:	602b      	str	r3, [r5, #0]
 8005d56:	89b3      	ldrh	r3, [r6, #12]
 8005d58:	061a      	lsls	r2, r3, #24
 8005d5a:	d410      	bmi.n	8005d7e <__swhatbuf_r+0x3e>
 8005d5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d60:	e00e      	b.n	8005d80 <__swhatbuf_r+0x40>
 8005d62:	aa01      	add	r2, sp, #4
 8005d64:	f000 fdfa 	bl	800695c <_fstat_r>
 8005d68:	2800      	cmp	r0, #0
 8005d6a:	dbf2      	blt.n	8005d52 <__swhatbuf_r+0x12>
 8005d6c:	9a02      	ldr	r2, [sp, #8]
 8005d6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005d72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005d76:	425a      	negs	r2, r3
 8005d78:	415a      	adcs	r2, r3
 8005d7a:	602a      	str	r2, [r5, #0]
 8005d7c:	e7ee      	b.n	8005d5c <__swhatbuf_r+0x1c>
 8005d7e:	2340      	movs	r3, #64	; 0x40
 8005d80:	2000      	movs	r0, #0
 8005d82:	6023      	str	r3, [r4, #0]
 8005d84:	b010      	add	sp, #64	; 0x40
 8005d86:	bd70      	pop	{r4, r5, r6, pc}

08005d88 <__smakebuf_r>:
 8005d88:	898b      	ldrh	r3, [r1, #12]
 8005d8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d8c:	079d      	lsls	r5, r3, #30
 8005d8e:	4606      	mov	r6, r0
 8005d90:	460c      	mov	r4, r1
 8005d92:	d507      	bpl.n	8005da4 <__smakebuf_r+0x1c>
 8005d94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005d98:	6023      	str	r3, [r4, #0]
 8005d9a:	6123      	str	r3, [r4, #16]
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	6163      	str	r3, [r4, #20]
 8005da0:	b002      	add	sp, #8
 8005da2:	bd70      	pop	{r4, r5, r6, pc}
 8005da4:	ab01      	add	r3, sp, #4
 8005da6:	466a      	mov	r2, sp
 8005da8:	f7ff ffca 	bl	8005d40 <__swhatbuf_r>
 8005dac:	9900      	ldr	r1, [sp, #0]
 8005dae:	4605      	mov	r5, r0
 8005db0:	4630      	mov	r0, r6
 8005db2:	f7fe fa75 	bl	80042a0 <_malloc_r>
 8005db6:	b948      	cbnz	r0, 8005dcc <__smakebuf_r+0x44>
 8005db8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dbc:	059a      	lsls	r2, r3, #22
 8005dbe:	d4ef      	bmi.n	8005da0 <__smakebuf_r+0x18>
 8005dc0:	f023 0303 	bic.w	r3, r3, #3
 8005dc4:	f043 0302 	orr.w	r3, r3, #2
 8005dc8:	81a3      	strh	r3, [r4, #12]
 8005dca:	e7e3      	b.n	8005d94 <__smakebuf_r+0xc>
 8005dcc:	4b0d      	ldr	r3, [pc, #52]	; (8005e04 <__smakebuf_r+0x7c>)
 8005dce:	62b3      	str	r3, [r6, #40]	; 0x28
 8005dd0:	89a3      	ldrh	r3, [r4, #12]
 8005dd2:	6020      	str	r0, [r4, #0]
 8005dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dd8:	81a3      	strh	r3, [r4, #12]
 8005dda:	9b00      	ldr	r3, [sp, #0]
 8005ddc:	6163      	str	r3, [r4, #20]
 8005dde:	9b01      	ldr	r3, [sp, #4]
 8005de0:	6120      	str	r0, [r4, #16]
 8005de2:	b15b      	cbz	r3, 8005dfc <__smakebuf_r+0x74>
 8005de4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005de8:	4630      	mov	r0, r6
 8005dea:	f000 fdc9 	bl	8006980 <_isatty_r>
 8005dee:	b128      	cbz	r0, 8005dfc <__smakebuf_r+0x74>
 8005df0:	89a3      	ldrh	r3, [r4, #12]
 8005df2:	f023 0303 	bic.w	r3, r3, #3
 8005df6:	f043 0301 	orr.w	r3, r3, #1
 8005dfa:	81a3      	strh	r3, [r4, #12]
 8005dfc:	89a3      	ldrh	r3, [r4, #12]
 8005dfe:	431d      	orrs	r5, r3
 8005e00:	81a5      	strh	r5, [r4, #12]
 8005e02:	e7cd      	b.n	8005da0 <__smakebuf_r+0x18>
 8005e04:	08004001 	.word	0x08004001

08005e08 <malloc>:
 8005e08:	4b02      	ldr	r3, [pc, #8]	; (8005e14 <malloc+0xc>)
 8005e0a:	4601      	mov	r1, r0
 8005e0c:	6818      	ldr	r0, [r3, #0]
 8005e0e:	f7fe ba47 	b.w	80042a0 <_malloc_r>
 8005e12:	bf00      	nop
 8005e14:	2000000c 	.word	0x2000000c

08005e18 <__ascii_mbtowc>:
 8005e18:	b082      	sub	sp, #8
 8005e1a:	b901      	cbnz	r1, 8005e1e <__ascii_mbtowc+0x6>
 8005e1c:	a901      	add	r1, sp, #4
 8005e1e:	b142      	cbz	r2, 8005e32 <__ascii_mbtowc+0x1a>
 8005e20:	b14b      	cbz	r3, 8005e36 <__ascii_mbtowc+0x1e>
 8005e22:	7813      	ldrb	r3, [r2, #0]
 8005e24:	600b      	str	r3, [r1, #0]
 8005e26:	7812      	ldrb	r2, [r2, #0]
 8005e28:	1c10      	adds	r0, r2, #0
 8005e2a:	bf18      	it	ne
 8005e2c:	2001      	movne	r0, #1
 8005e2e:	b002      	add	sp, #8
 8005e30:	4770      	bx	lr
 8005e32:	4610      	mov	r0, r2
 8005e34:	e7fb      	b.n	8005e2e <__ascii_mbtowc+0x16>
 8005e36:	f06f 0001 	mvn.w	r0, #1
 8005e3a:	e7f8      	b.n	8005e2e <__ascii_mbtowc+0x16>

08005e3c <__malloc_lock>:
 8005e3c:	4770      	bx	lr

08005e3e <__malloc_unlock>:
 8005e3e:	4770      	bx	lr

08005e40 <_Balloc>:
 8005e40:	b570      	push	{r4, r5, r6, lr}
 8005e42:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005e44:	4604      	mov	r4, r0
 8005e46:	460e      	mov	r6, r1
 8005e48:	b93d      	cbnz	r5, 8005e5a <_Balloc+0x1a>
 8005e4a:	2010      	movs	r0, #16
 8005e4c:	f7ff ffdc 	bl	8005e08 <malloc>
 8005e50:	6260      	str	r0, [r4, #36]	; 0x24
 8005e52:	6045      	str	r5, [r0, #4]
 8005e54:	6085      	str	r5, [r0, #8]
 8005e56:	6005      	str	r5, [r0, #0]
 8005e58:	60c5      	str	r5, [r0, #12]
 8005e5a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005e5c:	68eb      	ldr	r3, [r5, #12]
 8005e5e:	b183      	cbz	r3, 8005e82 <_Balloc+0x42>
 8005e60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005e68:	b9b8      	cbnz	r0, 8005e9a <_Balloc+0x5a>
 8005e6a:	2101      	movs	r1, #1
 8005e6c:	fa01 f506 	lsl.w	r5, r1, r6
 8005e70:	1d6a      	adds	r2, r5, #5
 8005e72:	0092      	lsls	r2, r2, #2
 8005e74:	4620      	mov	r0, r4
 8005e76:	f000 fab3 	bl	80063e0 <_calloc_r>
 8005e7a:	b160      	cbz	r0, 8005e96 <_Balloc+0x56>
 8005e7c:	6046      	str	r6, [r0, #4]
 8005e7e:	6085      	str	r5, [r0, #8]
 8005e80:	e00e      	b.n	8005ea0 <_Balloc+0x60>
 8005e82:	2221      	movs	r2, #33	; 0x21
 8005e84:	2104      	movs	r1, #4
 8005e86:	4620      	mov	r0, r4
 8005e88:	f000 faaa 	bl	80063e0 <_calloc_r>
 8005e8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e8e:	60e8      	str	r0, [r5, #12]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1e4      	bne.n	8005e60 <_Balloc+0x20>
 8005e96:	2000      	movs	r0, #0
 8005e98:	bd70      	pop	{r4, r5, r6, pc}
 8005e9a:	6802      	ldr	r2, [r0, #0]
 8005e9c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	6103      	str	r3, [r0, #16]
 8005ea4:	60c3      	str	r3, [r0, #12]
 8005ea6:	bd70      	pop	{r4, r5, r6, pc}

08005ea8 <_Bfree>:
 8005ea8:	b570      	push	{r4, r5, r6, lr}
 8005eaa:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005eac:	4606      	mov	r6, r0
 8005eae:	460d      	mov	r5, r1
 8005eb0:	b93c      	cbnz	r4, 8005ec2 <_Bfree+0x1a>
 8005eb2:	2010      	movs	r0, #16
 8005eb4:	f7ff ffa8 	bl	8005e08 <malloc>
 8005eb8:	6270      	str	r0, [r6, #36]	; 0x24
 8005eba:	6044      	str	r4, [r0, #4]
 8005ebc:	6084      	str	r4, [r0, #8]
 8005ebe:	6004      	str	r4, [r0, #0]
 8005ec0:	60c4      	str	r4, [r0, #12]
 8005ec2:	b13d      	cbz	r5, 8005ed4 <_Bfree+0x2c>
 8005ec4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005ec6:	686a      	ldr	r2, [r5, #4]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ece:	6029      	str	r1, [r5, #0]
 8005ed0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005ed4:	bd70      	pop	{r4, r5, r6, pc}

08005ed6 <__multadd>:
 8005ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eda:	690d      	ldr	r5, [r1, #16]
 8005edc:	461f      	mov	r7, r3
 8005ede:	4606      	mov	r6, r0
 8005ee0:	460c      	mov	r4, r1
 8005ee2:	f101 0e14 	add.w	lr, r1, #20
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	f8de 0000 	ldr.w	r0, [lr]
 8005eec:	b281      	uxth	r1, r0
 8005eee:	fb02 7101 	mla	r1, r2, r1, r7
 8005ef2:	0c0f      	lsrs	r7, r1, #16
 8005ef4:	0c00      	lsrs	r0, r0, #16
 8005ef6:	fb02 7000 	mla	r0, r2, r0, r7
 8005efa:	b289      	uxth	r1, r1
 8005efc:	3301      	adds	r3, #1
 8005efe:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005f02:	429d      	cmp	r5, r3
 8005f04:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005f08:	f84e 1b04 	str.w	r1, [lr], #4
 8005f0c:	dcec      	bgt.n	8005ee8 <__multadd+0x12>
 8005f0e:	b1d7      	cbz	r7, 8005f46 <__multadd+0x70>
 8005f10:	68a3      	ldr	r3, [r4, #8]
 8005f12:	429d      	cmp	r5, r3
 8005f14:	db12      	blt.n	8005f3c <__multadd+0x66>
 8005f16:	6861      	ldr	r1, [r4, #4]
 8005f18:	4630      	mov	r0, r6
 8005f1a:	3101      	adds	r1, #1
 8005f1c:	f7ff ff90 	bl	8005e40 <_Balloc>
 8005f20:	6922      	ldr	r2, [r4, #16]
 8005f22:	3202      	adds	r2, #2
 8005f24:	f104 010c 	add.w	r1, r4, #12
 8005f28:	4680      	mov	r8, r0
 8005f2a:	0092      	lsls	r2, r2, #2
 8005f2c:	300c      	adds	r0, #12
 8005f2e:	f7fe f955 	bl	80041dc <memcpy>
 8005f32:	4621      	mov	r1, r4
 8005f34:	4630      	mov	r0, r6
 8005f36:	f7ff ffb7 	bl	8005ea8 <_Bfree>
 8005f3a:	4644      	mov	r4, r8
 8005f3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005f40:	3501      	adds	r5, #1
 8005f42:	615f      	str	r7, [r3, #20]
 8005f44:	6125      	str	r5, [r4, #16]
 8005f46:	4620      	mov	r0, r4
 8005f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005f4c <__hi0bits>:
 8005f4c:	0c02      	lsrs	r2, r0, #16
 8005f4e:	0412      	lsls	r2, r2, #16
 8005f50:	4603      	mov	r3, r0
 8005f52:	b9b2      	cbnz	r2, 8005f82 <__hi0bits+0x36>
 8005f54:	0403      	lsls	r3, r0, #16
 8005f56:	2010      	movs	r0, #16
 8005f58:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005f5c:	bf04      	itt	eq
 8005f5e:	021b      	lsleq	r3, r3, #8
 8005f60:	3008      	addeq	r0, #8
 8005f62:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005f66:	bf04      	itt	eq
 8005f68:	011b      	lsleq	r3, r3, #4
 8005f6a:	3004      	addeq	r0, #4
 8005f6c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005f70:	bf04      	itt	eq
 8005f72:	009b      	lsleq	r3, r3, #2
 8005f74:	3002      	addeq	r0, #2
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	db06      	blt.n	8005f88 <__hi0bits+0x3c>
 8005f7a:	005b      	lsls	r3, r3, #1
 8005f7c:	d503      	bpl.n	8005f86 <__hi0bits+0x3a>
 8005f7e:	3001      	adds	r0, #1
 8005f80:	4770      	bx	lr
 8005f82:	2000      	movs	r0, #0
 8005f84:	e7e8      	b.n	8005f58 <__hi0bits+0xc>
 8005f86:	2020      	movs	r0, #32
 8005f88:	4770      	bx	lr

08005f8a <__lo0bits>:
 8005f8a:	6803      	ldr	r3, [r0, #0]
 8005f8c:	f013 0207 	ands.w	r2, r3, #7
 8005f90:	4601      	mov	r1, r0
 8005f92:	d00b      	beq.n	8005fac <__lo0bits+0x22>
 8005f94:	07da      	lsls	r2, r3, #31
 8005f96:	d423      	bmi.n	8005fe0 <__lo0bits+0x56>
 8005f98:	0798      	lsls	r0, r3, #30
 8005f9a:	bf49      	itett	mi
 8005f9c:	085b      	lsrmi	r3, r3, #1
 8005f9e:	089b      	lsrpl	r3, r3, #2
 8005fa0:	2001      	movmi	r0, #1
 8005fa2:	600b      	strmi	r3, [r1, #0]
 8005fa4:	bf5c      	itt	pl
 8005fa6:	600b      	strpl	r3, [r1, #0]
 8005fa8:	2002      	movpl	r0, #2
 8005faa:	4770      	bx	lr
 8005fac:	b298      	uxth	r0, r3
 8005fae:	b9a8      	cbnz	r0, 8005fdc <__lo0bits+0x52>
 8005fb0:	0c1b      	lsrs	r3, r3, #16
 8005fb2:	2010      	movs	r0, #16
 8005fb4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005fb8:	bf04      	itt	eq
 8005fba:	0a1b      	lsreq	r3, r3, #8
 8005fbc:	3008      	addeq	r0, #8
 8005fbe:	071a      	lsls	r2, r3, #28
 8005fc0:	bf04      	itt	eq
 8005fc2:	091b      	lsreq	r3, r3, #4
 8005fc4:	3004      	addeq	r0, #4
 8005fc6:	079a      	lsls	r2, r3, #30
 8005fc8:	bf04      	itt	eq
 8005fca:	089b      	lsreq	r3, r3, #2
 8005fcc:	3002      	addeq	r0, #2
 8005fce:	07da      	lsls	r2, r3, #31
 8005fd0:	d402      	bmi.n	8005fd8 <__lo0bits+0x4e>
 8005fd2:	085b      	lsrs	r3, r3, #1
 8005fd4:	d006      	beq.n	8005fe4 <__lo0bits+0x5a>
 8005fd6:	3001      	adds	r0, #1
 8005fd8:	600b      	str	r3, [r1, #0]
 8005fda:	4770      	bx	lr
 8005fdc:	4610      	mov	r0, r2
 8005fde:	e7e9      	b.n	8005fb4 <__lo0bits+0x2a>
 8005fe0:	2000      	movs	r0, #0
 8005fe2:	4770      	bx	lr
 8005fe4:	2020      	movs	r0, #32
 8005fe6:	4770      	bx	lr

08005fe8 <__i2b>:
 8005fe8:	b510      	push	{r4, lr}
 8005fea:	460c      	mov	r4, r1
 8005fec:	2101      	movs	r1, #1
 8005fee:	f7ff ff27 	bl	8005e40 <_Balloc>
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	6144      	str	r4, [r0, #20]
 8005ff6:	6102      	str	r2, [r0, #16]
 8005ff8:	bd10      	pop	{r4, pc}

08005ffa <__multiply>:
 8005ffa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ffe:	4614      	mov	r4, r2
 8006000:	690a      	ldr	r2, [r1, #16]
 8006002:	6923      	ldr	r3, [r4, #16]
 8006004:	429a      	cmp	r2, r3
 8006006:	bfb8      	it	lt
 8006008:	460b      	movlt	r3, r1
 800600a:	4689      	mov	r9, r1
 800600c:	bfbc      	itt	lt
 800600e:	46a1      	movlt	r9, r4
 8006010:	461c      	movlt	r4, r3
 8006012:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006016:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800601a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800601e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006022:	eb07 060a 	add.w	r6, r7, sl
 8006026:	429e      	cmp	r6, r3
 8006028:	bfc8      	it	gt
 800602a:	3101      	addgt	r1, #1
 800602c:	f7ff ff08 	bl	8005e40 <_Balloc>
 8006030:	f100 0514 	add.w	r5, r0, #20
 8006034:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006038:	462b      	mov	r3, r5
 800603a:	2200      	movs	r2, #0
 800603c:	4543      	cmp	r3, r8
 800603e:	d316      	bcc.n	800606e <__multiply+0x74>
 8006040:	f104 0214 	add.w	r2, r4, #20
 8006044:	f109 0114 	add.w	r1, r9, #20
 8006048:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 800604c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006050:	9301      	str	r3, [sp, #4]
 8006052:	9c01      	ldr	r4, [sp, #4]
 8006054:	4294      	cmp	r4, r2
 8006056:	4613      	mov	r3, r2
 8006058:	d80c      	bhi.n	8006074 <__multiply+0x7a>
 800605a:	2e00      	cmp	r6, #0
 800605c:	dd03      	ble.n	8006066 <__multiply+0x6c>
 800605e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006062:	2b00      	cmp	r3, #0
 8006064:	d054      	beq.n	8006110 <__multiply+0x116>
 8006066:	6106      	str	r6, [r0, #16]
 8006068:	b003      	add	sp, #12
 800606a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800606e:	f843 2b04 	str.w	r2, [r3], #4
 8006072:	e7e3      	b.n	800603c <__multiply+0x42>
 8006074:	f8b3 a000 	ldrh.w	sl, [r3]
 8006078:	3204      	adds	r2, #4
 800607a:	f1ba 0f00 	cmp.w	sl, #0
 800607e:	d020      	beq.n	80060c2 <__multiply+0xc8>
 8006080:	46ae      	mov	lr, r5
 8006082:	4689      	mov	r9, r1
 8006084:	f04f 0c00 	mov.w	ip, #0
 8006088:	f859 4b04 	ldr.w	r4, [r9], #4
 800608c:	f8be b000 	ldrh.w	fp, [lr]
 8006090:	b2a3      	uxth	r3, r4
 8006092:	fb0a b303 	mla	r3, sl, r3, fp
 8006096:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 800609a:	f8de 4000 	ldr.w	r4, [lr]
 800609e:	4463      	add	r3, ip
 80060a0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80060a4:	fb0a c40b 	mla	r4, sl, fp, ip
 80060a8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80060b2:	454f      	cmp	r7, r9
 80060b4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80060b8:	f84e 3b04 	str.w	r3, [lr], #4
 80060bc:	d8e4      	bhi.n	8006088 <__multiply+0x8e>
 80060be:	f8ce c000 	str.w	ip, [lr]
 80060c2:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 80060c6:	f1b9 0f00 	cmp.w	r9, #0
 80060ca:	d01f      	beq.n	800610c <__multiply+0x112>
 80060cc:	682b      	ldr	r3, [r5, #0]
 80060ce:	46ae      	mov	lr, r5
 80060d0:	468c      	mov	ip, r1
 80060d2:	f04f 0a00 	mov.w	sl, #0
 80060d6:	f8bc 4000 	ldrh.w	r4, [ip]
 80060da:	f8be b002 	ldrh.w	fp, [lr, #2]
 80060de:	fb09 b404 	mla	r4, r9, r4, fp
 80060e2:	44a2      	add	sl, r4
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80060ea:	f84e 3b04 	str.w	r3, [lr], #4
 80060ee:	f85c 3b04 	ldr.w	r3, [ip], #4
 80060f2:	f8be 4000 	ldrh.w	r4, [lr]
 80060f6:	0c1b      	lsrs	r3, r3, #16
 80060f8:	fb09 4303 	mla	r3, r9, r3, r4
 80060fc:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8006100:	4567      	cmp	r7, ip
 8006102:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006106:	d8e6      	bhi.n	80060d6 <__multiply+0xdc>
 8006108:	f8ce 3000 	str.w	r3, [lr]
 800610c:	3504      	adds	r5, #4
 800610e:	e7a0      	b.n	8006052 <__multiply+0x58>
 8006110:	3e01      	subs	r6, #1
 8006112:	e7a2      	b.n	800605a <__multiply+0x60>

08006114 <__pow5mult>:
 8006114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006118:	4615      	mov	r5, r2
 800611a:	f012 0203 	ands.w	r2, r2, #3
 800611e:	4606      	mov	r6, r0
 8006120:	460f      	mov	r7, r1
 8006122:	d007      	beq.n	8006134 <__pow5mult+0x20>
 8006124:	3a01      	subs	r2, #1
 8006126:	4c21      	ldr	r4, [pc, #132]	; (80061ac <__pow5mult+0x98>)
 8006128:	2300      	movs	r3, #0
 800612a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800612e:	f7ff fed2 	bl	8005ed6 <__multadd>
 8006132:	4607      	mov	r7, r0
 8006134:	10ad      	asrs	r5, r5, #2
 8006136:	d035      	beq.n	80061a4 <__pow5mult+0x90>
 8006138:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800613a:	b93c      	cbnz	r4, 800614c <__pow5mult+0x38>
 800613c:	2010      	movs	r0, #16
 800613e:	f7ff fe63 	bl	8005e08 <malloc>
 8006142:	6270      	str	r0, [r6, #36]	; 0x24
 8006144:	6044      	str	r4, [r0, #4]
 8006146:	6084      	str	r4, [r0, #8]
 8006148:	6004      	str	r4, [r0, #0]
 800614a:	60c4      	str	r4, [r0, #12]
 800614c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006150:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006154:	b94c      	cbnz	r4, 800616a <__pow5mult+0x56>
 8006156:	f240 2171 	movw	r1, #625	; 0x271
 800615a:	4630      	mov	r0, r6
 800615c:	f7ff ff44 	bl	8005fe8 <__i2b>
 8006160:	2300      	movs	r3, #0
 8006162:	f8c8 0008 	str.w	r0, [r8, #8]
 8006166:	4604      	mov	r4, r0
 8006168:	6003      	str	r3, [r0, #0]
 800616a:	f04f 0800 	mov.w	r8, #0
 800616e:	07eb      	lsls	r3, r5, #31
 8006170:	d50a      	bpl.n	8006188 <__pow5mult+0x74>
 8006172:	4639      	mov	r1, r7
 8006174:	4622      	mov	r2, r4
 8006176:	4630      	mov	r0, r6
 8006178:	f7ff ff3f 	bl	8005ffa <__multiply>
 800617c:	4639      	mov	r1, r7
 800617e:	4681      	mov	r9, r0
 8006180:	4630      	mov	r0, r6
 8006182:	f7ff fe91 	bl	8005ea8 <_Bfree>
 8006186:	464f      	mov	r7, r9
 8006188:	106d      	asrs	r5, r5, #1
 800618a:	d00b      	beq.n	80061a4 <__pow5mult+0x90>
 800618c:	6820      	ldr	r0, [r4, #0]
 800618e:	b938      	cbnz	r0, 80061a0 <__pow5mult+0x8c>
 8006190:	4622      	mov	r2, r4
 8006192:	4621      	mov	r1, r4
 8006194:	4630      	mov	r0, r6
 8006196:	f7ff ff30 	bl	8005ffa <__multiply>
 800619a:	6020      	str	r0, [r4, #0]
 800619c:	f8c0 8000 	str.w	r8, [r0]
 80061a0:	4604      	mov	r4, r0
 80061a2:	e7e4      	b.n	800616e <__pow5mult+0x5a>
 80061a4:	4638      	mov	r0, r7
 80061a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061aa:	bf00      	nop
 80061ac:	08006d10 	.word	0x08006d10

080061b0 <__lshift>:
 80061b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061b4:	460c      	mov	r4, r1
 80061b6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80061ba:	6923      	ldr	r3, [r4, #16]
 80061bc:	6849      	ldr	r1, [r1, #4]
 80061be:	eb0a 0903 	add.w	r9, sl, r3
 80061c2:	68a3      	ldr	r3, [r4, #8]
 80061c4:	4607      	mov	r7, r0
 80061c6:	4616      	mov	r6, r2
 80061c8:	f109 0501 	add.w	r5, r9, #1
 80061cc:	42ab      	cmp	r3, r5
 80061ce:	db31      	blt.n	8006234 <__lshift+0x84>
 80061d0:	4638      	mov	r0, r7
 80061d2:	f7ff fe35 	bl	8005e40 <_Balloc>
 80061d6:	2200      	movs	r2, #0
 80061d8:	4680      	mov	r8, r0
 80061da:	f100 0314 	add.w	r3, r0, #20
 80061de:	4611      	mov	r1, r2
 80061e0:	4552      	cmp	r2, sl
 80061e2:	db2a      	blt.n	800623a <__lshift+0x8a>
 80061e4:	6920      	ldr	r0, [r4, #16]
 80061e6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80061ea:	f104 0114 	add.w	r1, r4, #20
 80061ee:	f016 021f 	ands.w	r2, r6, #31
 80061f2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80061f6:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80061fa:	d022      	beq.n	8006242 <__lshift+0x92>
 80061fc:	f1c2 0c20 	rsb	ip, r2, #32
 8006200:	2000      	movs	r0, #0
 8006202:	680e      	ldr	r6, [r1, #0]
 8006204:	4096      	lsls	r6, r2
 8006206:	4330      	orrs	r0, r6
 8006208:	f843 0b04 	str.w	r0, [r3], #4
 800620c:	f851 0b04 	ldr.w	r0, [r1], #4
 8006210:	458e      	cmp	lr, r1
 8006212:	fa20 f00c 	lsr.w	r0, r0, ip
 8006216:	d8f4      	bhi.n	8006202 <__lshift+0x52>
 8006218:	6018      	str	r0, [r3, #0]
 800621a:	b108      	cbz	r0, 8006220 <__lshift+0x70>
 800621c:	f109 0502 	add.w	r5, r9, #2
 8006220:	3d01      	subs	r5, #1
 8006222:	4638      	mov	r0, r7
 8006224:	f8c8 5010 	str.w	r5, [r8, #16]
 8006228:	4621      	mov	r1, r4
 800622a:	f7ff fe3d 	bl	8005ea8 <_Bfree>
 800622e:	4640      	mov	r0, r8
 8006230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006234:	3101      	adds	r1, #1
 8006236:	005b      	lsls	r3, r3, #1
 8006238:	e7c8      	b.n	80061cc <__lshift+0x1c>
 800623a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800623e:	3201      	adds	r2, #1
 8006240:	e7ce      	b.n	80061e0 <__lshift+0x30>
 8006242:	3b04      	subs	r3, #4
 8006244:	f851 2b04 	ldr.w	r2, [r1], #4
 8006248:	f843 2f04 	str.w	r2, [r3, #4]!
 800624c:	458e      	cmp	lr, r1
 800624e:	d8f9      	bhi.n	8006244 <__lshift+0x94>
 8006250:	e7e6      	b.n	8006220 <__lshift+0x70>

08006252 <__mcmp>:
 8006252:	6903      	ldr	r3, [r0, #16]
 8006254:	690a      	ldr	r2, [r1, #16]
 8006256:	1a9b      	subs	r3, r3, r2
 8006258:	b530      	push	{r4, r5, lr}
 800625a:	d10c      	bne.n	8006276 <__mcmp+0x24>
 800625c:	0092      	lsls	r2, r2, #2
 800625e:	3014      	adds	r0, #20
 8006260:	3114      	adds	r1, #20
 8006262:	1884      	adds	r4, r0, r2
 8006264:	4411      	add	r1, r2
 8006266:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800626a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800626e:	4295      	cmp	r5, r2
 8006270:	d003      	beq.n	800627a <__mcmp+0x28>
 8006272:	d305      	bcc.n	8006280 <__mcmp+0x2e>
 8006274:	2301      	movs	r3, #1
 8006276:	4618      	mov	r0, r3
 8006278:	bd30      	pop	{r4, r5, pc}
 800627a:	42a0      	cmp	r0, r4
 800627c:	d3f3      	bcc.n	8006266 <__mcmp+0x14>
 800627e:	e7fa      	b.n	8006276 <__mcmp+0x24>
 8006280:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006284:	e7f7      	b.n	8006276 <__mcmp+0x24>

08006286 <__mdiff>:
 8006286:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800628a:	460d      	mov	r5, r1
 800628c:	4607      	mov	r7, r0
 800628e:	4611      	mov	r1, r2
 8006290:	4628      	mov	r0, r5
 8006292:	4614      	mov	r4, r2
 8006294:	f7ff ffdd 	bl	8006252 <__mcmp>
 8006298:	1e06      	subs	r6, r0, #0
 800629a:	d108      	bne.n	80062ae <__mdiff+0x28>
 800629c:	4631      	mov	r1, r6
 800629e:	4638      	mov	r0, r7
 80062a0:	f7ff fdce 	bl	8005e40 <_Balloc>
 80062a4:	2301      	movs	r3, #1
 80062a6:	6103      	str	r3, [r0, #16]
 80062a8:	6146      	str	r6, [r0, #20]
 80062aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062ae:	bfa4      	itt	ge
 80062b0:	4623      	movge	r3, r4
 80062b2:	462c      	movge	r4, r5
 80062b4:	4638      	mov	r0, r7
 80062b6:	6861      	ldr	r1, [r4, #4]
 80062b8:	bfa6      	itte	ge
 80062ba:	461d      	movge	r5, r3
 80062bc:	2600      	movge	r6, #0
 80062be:	2601      	movlt	r6, #1
 80062c0:	f7ff fdbe 	bl	8005e40 <_Balloc>
 80062c4:	692b      	ldr	r3, [r5, #16]
 80062c6:	60c6      	str	r6, [r0, #12]
 80062c8:	6926      	ldr	r6, [r4, #16]
 80062ca:	f105 0914 	add.w	r9, r5, #20
 80062ce:	f104 0214 	add.w	r2, r4, #20
 80062d2:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80062d6:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80062da:	f100 0514 	add.w	r5, r0, #20
 80062de:	f04f 0c00 	mov.w	ip, #0
 80062e2:	f852 ab04 	ldr.w	sl, [r2], #4
 80062e6:	f859 4b04 	ldr.w	r4, [r9], #4
 80062ea:	fa1c f18a 	uxtah	r1, ip, sl
 80062ee:	b2a3      	uxth	r3, r4
 80062f0:	1ac9      	subs	r1, r1, r3
 80062f2:	0c23      	lsrs	r3, r4, #16
 80062f4:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80062f8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80062fc:	b289      	uxth	r1, r1
 80062fe:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006302:	45c8      	cmp	r8, r9
 8006304:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006308:	4696      	mov	lr, r2
 800630a:	f845 3b04 	str.w	r3, [r5], #4
 800630e:	d8e8      	bhi.n	80062e2 <__mdiff+0x5c>
 8006310:	45be      	cmp	lr, r7
 8006312:	d305      	bcc.n	8006320 <__mdiff+0x9a>
 8006314:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006318:	b18b      	cbz	r3, 800633e <__mdiff+0xb8>
 800631a:	6106      	str	r6, [r0, #16]
 800631c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006320:	f85e 1b04 	ldr.w	r1, [lr], #4
 8006324:	fa1c f381 	uxtah	r3, ip, r1
 8006328:	141a      	asrs	r2, r3, #16
 800632a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800632e:	b29b      	uxth	r3, r3
 8006330:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006334:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006338:	f845 3b04 	str.w	r3, [r5], #4
 800633c:	e7e8      	b.n	8006310 <__mdiff+0x8a>
 800633e:	3e01      	subs	r6, #1
 8006340:	e7e8      	b.n	8006314 <__mdiff+0x8e>

08006342 <__d2b>:
 8006342:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006346:	460e      	mov	r6, r1
 8006348:	2101      	movs	r1, #1
 800634a:	ec59 8b10 	vmov	r8, r9, d0
 800634e:	4615      	mov	r5, r2
 8006350:	f7ff fd76 	bl	8005e40 <_Balloc>
 8006354:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006358:	4607      	mov	r7, r0
 800635a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800635e:	bb34      	cbnz	r4, 80063ae <__d2b+0x6c>
 8006360:	9301      	str	r3, [sp, #4]
 8006362:	f1b8 0f00 	cmp.w	r8, #0
 8006366:	d027      	beq.n	80063b8 <__d2b+0x76>
 8006368:	a802      	add	r0, sp, #8
 800636a:	f840 8d08 	str.w	r8, [r0, #-8]!
 800636e:	f7ff fe0c 	bl	8005f8a <__lo0bits>
 8006372:	9900      	ldr	r1, [sp, #0]
 8006374:	b1f0      	cbz	r0, 80063b4 <__d2b+0x72>
 8006376:	9a01      	ldr	r2, [sp, #4]
 8006378:	f1c0 0320 	rsb	r3, r0, #32
 800637c:	fa02 f303 	lsl.w	r3, r2, r3
 8006380:	430b      	orrs	r3, r1
 8006382:	40c2      	lsrs	r2, r0
 8006384:	617b      	str	r3, [r7, #20]
 8006386:	9201      	str	r2, [sp, #4]
 8006388:	9b01      	ldr	r3, [sp, #4]
 800638a:	61bb      	str	r3, [r7, #24]
 800638c:	2b00      	cmp	r3, #0
 800638e:	bf14      	ite	ne
 8006390:	2102      	movne	r1, #2
 8006392:	2101      	moveq	r1, #1
 8006394:	6139      	str	r1, [r7, #16]
 8006396:	b1c4      	cbz	r4, 80063ca <__d2b+0x88>
 8006398:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800639c:	4404      	add	r4, r0
 800639e:	6034      	str	r4, [r6, #0]
 80063a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80063a4:	6028      	str	r0, [r5, #0]
 80063a6:	4638      	mov	r0, r7
 80063a8:	b003      	add	sp, #12
 80063aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80063ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063b2:	e7d5      	b.n	8006360 <__d2b+0x1e>
 80063b4:	6179      	str	r1, [r7, #20]
 80063b6:	e7e7      	b.n	8006388 <__d2b+0x46>
 80063b8:	a801      	add	r0, sp, #4
 80063ba:	f7ff fde6 	bl	8005f8a <__lo0bits>
 80063be:	9b01      	ldr	r3, [sp, #4]
 80063c0:	617b      	str	r3, [r7, #20]
 80063c2:	2101      	movs	r1, #1
 80063c4:	6139      	str	r1, [r7, #16]
 80063c6:	3020      	adds	r0, #32
 80063c8:	e7e5      	b.n	8006396 <__d2b+0x54>
 80063ca:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80063ce:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80063d2:	6030      	str	r0, [r6, #0]
 80063d4:	6918      	ldr	r0, [r3, #16]
 80063d6:	f7ff fdb9 	bl	8005f4c <__hi0bits>
 80063da:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80063de:	e7e1      	b.n	80063a4 <__d2b+0x62>

080063e0 <_calloc_r>:
 80063e0:	b538      	push	{r3, r4, r5, lr}
 80063e2:	fb02 f401 	mul.w	r4, r2, r1
 80063e6:	4621      	mov	r1, r4
 80063e8:	f7fd ff5a 	bl	80042a0 <_malloc_r>
 80063ec:	4605      	mov	r5, r0
 80063ee:	b118      	cbz	r0, 80063f8 <_calloc_r+0x18>
 80063f0:	4622      	mov	r2, r4
 80063f2:	2100      	movs	r1, #0
 80063f4:	f7fd fefd 	bl	80041f2 <memset>
 80063f8:	4628      	mov	r0, r5
 80063fa:	bd38      	pop	{r3, r4, r5, pc}

080063fc <__ssputs_r>:
 80063fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006400:	688e      	ldr	r6, [r1, #8]
 8006402:	429e      	cmp	r6, r3
 8006404:	4682      	mov	sl, r0
 8006406:	460c      	mov	r4, r1
 8006408:	4691      	mov	r9, r2
 800640a:	4698      	mov	r8, r3
 800640c:	d835      	bhi.n	800647a <__ssputs_r+0x7e>
 800640e:	898a      	ldrh	r2, [r1, #12]
 8006410:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006414:	d031      	beq.n	800647a <__ssputs_r+0x7e>
 8006416:	6825      	ldr	r5, [r4, #0]
 8006418:	6909      	ldr	r1, [r1, #16]
 800641a:	1a6f      	subs	r7, r5, r1
 800641c:	6965      	ldr	r5, [r4, #20]
 800641e:	2302      	movs	r3, #2
 8006420:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006424:	fb95 f5f3 	sdiv	r5, r5, r3
 8006428:	f108 0301 	add.w	r3, r8, #1
 800642c:	443b      	add	r3, r7
 800642e:	429d      	cmp	r5, r3
 8006430:	bf38      	it	cc
 8006432:	461d      	movcc	r5, r3
 8006434:	0553      	lsls	r3, r2, #21
 8006436:	d531      	bpl.n	800649c <__ssputs_r+0xa0>
 8006438:	4629      	mov	r1, r5
 800643a:	f7fd ff31 	bl	80042a0 <_malloc_r>
 800643e:	4606      	mov	r6, r0
 8006440:	b950      	cbnz	r0, 8006458 <__ssputs_r+0x5c>
 8006442:	230c      	movs	r3, #12
 8006444:	f8ca 3000 	str.w	r3, [sl]
 8006448:	89a3      	ldrh	r3, [r4, #12]
 800644a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800644e:	81a3      	strh	r3, [r4, #12]
 8006450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006458:	463a      	mov	r2, r7
 800645a:	6921      	ldr	r1, [r4, #16]
 800645c:	f7fd febe 	bl	80041dc <memcpy>
 8006460:	89a3      	ldrh	r3, [r4, #12]
 8006462:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800646a:	81a3      	strh	r3, [r4, #12]
 800646c:	6126      	str	r6, [r4, #16]
 800646e:	6165      	str	r5, [r4, #20]
 8006470:	443e      	add	r6, r7
 8006472:	1bed      	subs	r5, r5, r7
 8006474:	6026      	str	r6, [r4, #0]
 8006476:	60a5      	str	r5, [r4, #8]
 8006478:	4646      	mov	r6, r8
 800647a:	4546      	cmp	r6, r8
 800647c:	bf28      	it	cs
 800647e:	4646      	movcs	r6, r8
 8006480:	4632      	mov	r2, r6
 8006482:	4649      	mov	r1, r9
 8006484:	6820      	ldr	r0, [r4, #0]
 8006486:	f000 fa8b 	bl	80069a0 <memmove>
 800648a:	68a3      	ldr	r3, [r4, #8]
 800648c:	1b9b      	subs	r3, r3, r6
 800648e:	60a3      	str	r3, [r4, #8]
 8006490:	6823      	ldr	r3, [r4, #0]
 8006492:	441e      	add	r6, r3
 8006494:	6026      	str	r6, [r4, #0]
 8006496:	2000      	movs	r0, #0
 8006498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800649c:	462a      	mov	r2, r5
 800649e:	f000 fa99 	bl	80069d4 <_realloc_r>
 80064a2:	4606      	mov	r6, r0
 80064a4:	2800      	cmp	r0, #0
 80064a6:	d1e1      	bne.n	800646c <__ssputs_r+0x70>
 80064a8:	6921      	ldr	r1, [r4, #16]
 80064aa:	4650      	mov	r0, sl
 80064ac:	f7fd feaa 	bl	8004204 <_free_r>
 80064b0:	e7c7      	b.n	8006442 <__ssputs_r+0x46>
	...

080064b4 <_svfiprintf_r>:
 80064b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b8:	b09d      	sub	sp, #116	; 0x74
 80064ba:	4680      	mov	r8, r0
 80064bc:	9303      	str	r3, [sp, #12]
 80064be:	898b      	ldrh	r3, [r1, #12]
 80064c0:	061c      	lsls	r4, r3, #24
 80064c2:	460d      	mov	r5, r1
 80064c4:	4616      	mov	r6, r2
 80064c6:	d50f      	bpl.n	80064e8 <_svfiprintf_r+0x34>
 80064c8:	690b      	ldr	r3, [r1, #16]
 80064ca:	b96b      	cbnz	r3, 80064e8 <_svfiprintf_r+0x34>
 80064cc:	2140      	movs	r1, #64	; 0x40
 80064ce:	f7fd fee7 	bl	80042a0 <_malloc_r>
 80064d2:	6028      	str	r0, [r5, #0]
 80064d4:	6128      	str	r0, [r5, #16]
 80064d6:	b928      	cbnz	r0, 80064e4 <_svfiprintf_r+0x30>
 80064d8:	230c      	movs	r3, #12
 80064da:	f8c8 3000 	str.w	r3, [r8]
 80064de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064e2:	e0c5      	b.n	8006670 <_svfiprintf_r+0x1bc>
 80064e4:	2340      	movs	r3, #64	; 0x40
 80064e6:	616b      	str	r3, [r5, #20]
 80064e8:	2300      	movs	r3, #0
 80064ea:	9309      	str	r3, [sp, #36]	; 0x24
 80064ec:	2320      	movs	r3, #32
 80064ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064f2:	2330      	movs	r3, #48	; 0x30
 80064f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064f8:	f04f 0b01 	mov.w	fp, #1
 80064fc:	4637      	mov	r7, r6
 80064fe:	463c      	mov	r4, r7
 8006500:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006504:	2b00      	cmp	r3, #0
 8006506:	d13c      	bne.n	8006582 <_svfiprintf_r+0xce>
 8006508:	ebb7 0a06 	subs.w	sl, r7, r6
 800650c:	d00b      	beq.n	8006526 <_svfiprintf_r+0x72>
 800650e:	4653      	mov	r3, sl
 8006510:	4632      	mov	r2, r6
 8006512:	4629      	mov	r1, r5
 8006514:	4640      	mov	r0, r8
 8006516:	f7ff ff71 	bl	80063fc <__ssputs_r>
 800651a:	3001      	adds	r0, #1
 800651c:	f000 80a3 	beq.w	8006666 <_svfiprintf_r+0x1b2>
 8006520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006522:	4453      	add	r3, sl
 8006524:	9309      	str	r3, [sp, #36]	; 0x24
 8006526:	783b      	ldrb	r3, [r7, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	f000 809c 	beq.w	8006666 <_svfiprintf_r+0x1b2>
 800652e:	2300      	movs	r3, #0
 8006530:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006534:	9304      	str	r3, [sp, #16]
 8006536:	9307      	str	r3, [sp, #28]
 8006538:	9205      	str	r2, [sp, #20]
 800653a:	9306      	str	r3, [sp, #24]
 800653c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006540:	931a      	str	r3, [sp, #104]	; 0x68
 8006542:	2205      	movs	r2, #5
 8006544:	7821      	ldrb	r1, [r4, #0]
 8006546:	4850      	ldr	r0, [pc, #320]	; (8006688 <_svfiprintf_r+0x1d4>)
 8006548:	f7f9 fe7a 	bl	8000240 <memchr>
 800654c:	1c67      	adds	r7, r4, #1
 800654e:	9b04      	ldr	r3, [sp, #16]
 8006550:	b9d8      	cbnz	r0, 800658a <_svfiprintf_r+0xd6>
 8006552:	06d9      	lsls	r1, r3, #27
 8006554:	bf44      	itt	mi
 8006556:	2220      	movmi	r2, #32
 8006558:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800655c:	071a      	lsls	r2, r3, #28
 800655e:	bf44      	itt	mi
 8006560:	222b      	movmi	r2, #43	; 0x2b
 8006562:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006566:	7822      	ldrb	r2, [r4, #0]
 8006568:	2a2a      	cmp	r2, #42	; 0x2a
 800656a:	d016      	beq.n	800659a <_svfiprintf_r+0xe6>
 800656c:	9a07      	ldr	r2, [sp, #28]
 800656e:	2100      	movs	r1, #0
 8006570:	200a      	movs	r0, #10
 8006572:	4627      	mov	r7, r4
 8006574:	3401      	adds	r4, #1
 8006576:	783b      	ldrb	r3, [r7, #0]
 8006578:	3b30      	subs	r3, #48	; 0x30
 800657a:	2b09      	cmp	r3, #9
 800657c:	d951      	bls.n	8006622 <_svfiprintf_r+0x16e>
 800657e:	b1c9      	cbz	r1, 80065b4 <_svfiprintf_r+0x100>
 8006580:	e011      	b.n	80065a6 <_svfiprintf_r+0xf2>
 8006582:	2b25      	cmp	r3, #37	; 0x25
 8006584:	d0c0      	beq.n	8006508 <_svfiprintf_r+0x54>
 8006586:	4627      	mov	r7, r4
 8006588:	e7b9      	b.n	80064fe <_svfiprintf_r+0x4a>
 800658a:	4a3f      	ldr	r2, [pc, #252]	; (8006688 <_svfiprintf_r+0x1d4>)
 800658c:	1a80      	subs	r0, r0, r2
 800658e:	fa0b f000 	lsl.w	r0, fp, r0
 8006592:	4318      	orrs	r0, r3
 8006594:	9004      	str	r0, [sp, #16]
 8006596:	463c      	mov	r4, r7
 8006598:	e7d3      	b.n	8006542 <_svfiprintf_r+0x8e>
 800659a:	9a03      	ldr	r2, [sp, #12]
 800659c:	1d11      	adds	r1, r2, #4
 800659e:	6812      	ldr	r2, [r2, #0]
 80065a0:	9103      	str	r1, [sp, #12]
 80065a2:	2a00      	cmp	r2, #0
 80065a4:	db01      	blt.n	80065aa <_svfiprintf_r+0xf6>
 80065a6:	9207      	str	r2, [sp, #28]
 80065a8:	e004      	b.n	80065b4 <_svfiprintf_r+0x100>
 80065aa:	4252      	negs	r2, r2
 80065ac:	f043 0302 	orr.w	r3, r3, #2
 80065b0:	9207      	str	r2, [sp, #28]
 80065b2:	9304      	str	r3, [sp, #16]
 80065b4:	783b      	ldrb	r3, [r7, #0]
 80065b6:	2b2e      	cmp	r3, #46	; 0x2e
 80065b8:	d10e      	bne.n	80065d8 <_svfiprintf_r+0x124>
 80065ba:	787b      	ldrb	r3, [r7, #1]
 80065bc:	2b2a      	cmp	r3, #42	; 0x2a
 80065be:	f107 0101 	add.w	r1, r7, #1
 80065c2:	d132      	bne.n	800662a <_svfiprintf_r+0x176>
 80065c4:	9b03      	ldr	r3, [sp, #12]
 80065c6:	1d1a      	adds	r2, r3, #4
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	9203      	str	r2, [sp, #12]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	bfb8      	it	lt
 80065d0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80065d4:	3702      	adds	r7, #2
 80065d6:	9305      	str	r3, [sp, #20]
 80065d8:	4c2c      	ldr	r4, [pc, #176]	; (800668c <_svfiprintf_r+0x1d8>)
 80065da:	7839      	ldrb	r1, [r7, #0]
 80065dc:	2203      	movs	r2, #3
 80065de:	4620      	mov	r0, r4
 80065e0:	f7f9 fe2e 	bl	8000240 <memchr>
 80065e4:	b138      	cbz	r0, 80065f6 <_svfiprintf_r+0x142>
 80065e6:	2340      	movs	r3, #64	; 0x40
 80065e8:	1b00      	subs	r0, r0, r4
 80065ea:	fa03 f000 	lsl.w	r0, r3, r0
 80065ee:	9b04      	ldr	r3, [sp, #16]
 80065f0:	4303      	orrs	r3, r0
 80065f2:	9304      	str	r3, [sp, #16]
 80065f4:	3701      	adds	r7, #1
 80065f6:	7839      	ldrb	r1, [r7, #0]
 80065f8:	4825      	ldr	r0, [pc, #148]	; (8006690 <_svfiprintf_r+0x1dc>)
 80065fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065fe:	2206      	movs	r2, #6
 8006600:	1c7e      	adds	r6, r7, #1
 8006602:	f7f9 fe1d 	bl	8000240 <memchr>
 8006606:	2800      	cmp	r0, #0
 8006608:	d035      	beq.n	8006676 <_svfiprintf_r+0x1c2>
 800660a:	4b22      	ldr	r3, [pc, #136]	; (8006694 <_svfiprintf_r+0x1e0>)
 800660c:	b9fb      	cbnz	r3, 800664e <_svfiprintf_r+0x19a>
 800660e:	9b03      	ldr	r3, [sp, #12]
 8006610:	3307      	adds	r3, #7
 8006612:	f023 0307 	bic.w	r3, r3, #7
 8006616:	3308      	adds	r3, #8
 8006618:	9303      	str	r3, [sp, #12]
 800661a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800661c:	444b      	add	r3, r9
 800661e:	9309      	str	r3, [sp, #36]	; 0x24
 8006620:	e76c      	b.n	80064fc <_svfiprintf_r+0x48>
 8006622:	fb00 3202 	mla	r2, r0, r2, r3
 8006626:	2101      	movs	r1, #1
 8006628:	e7a3      	b.n	8006572 <_svfiprintf_r+0xbe>
 800662a:	2300      	movs	r3, #0
 800662c:	9305      	str	r3, [sp, #20]
 800662e:	4618      	mov	r0, r3
 8006630:	240a      	movs	r4, #10
 8006632:	460f      	mov	r7, r1
 8006634:	3101      	adds	r1, #1
 8006636:	783a      	ldrb	r2, [r7, #0]
 8006638:	3a30      	subs	r2, #48	; 0x30
 800663a:	2a09      	cmp	r2, #9
 800663c:	d903      	bls.n	8006646 <_svfiprintf_r+0x192>
 800663e:	2b00      	cmp	r3, #0
 8006640:	d0ca      	beq.n	80065d8 <_svfiprintf_r+0x124>
 8006642:	9005      	str	r0, [sp, #20]
 8006644:	e7c8      	b.n	80065d8 <_svfiprintf_r+0x124>
 8006646:	fb04 2000 	mla	r0, r4, r0, r2
 800664a:	2301      	movs	r3, #1
 800664c:	e7f1      	b.n	8006632 <_svfiprintf_r+0x17e>
 800664e:	ab03      	add	r3, sp, #12
 8006650:	9300      	str	r3, [sp, #0]
 8006652:	462a      	mov	r2, r5
 8006654:	4b10      	ldr	r3, [pc, #64]	; (8006698 <_svfiprintf_r+0x1e4>)
 8006656:	a904      	add	r1, sp, #16
 8006658:	4640      	mov	r0, r8
 800665a:	f7fd ff09 	bl	8004470 <_printf_float>
 800665e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006662:	4681      	mov	r9, r0
 8006664:	d1d9      	bne.n	800661a <_svfiprintf_r+0x166>
 8006666:	89ab      	ldrh	r3, [r5, #12]
 8006668:	065b      	lsls	r3, r3, #25
 800666a:	f53f af38 	bmi.w	80064de <_svfiprintf_r+0x2a>
 800666e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006670:	b01d      	add	sp, #116	; 0x74
 8006672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006676:	ab03      	add	r3, sp, #12
 8006678:	9300      	str	r3, [sp, #0]
 800667a:	462a      	mov	r2, r5
 800667c:	4b06      	ldr	r3, [pc, #24]	; (8006698 <_svfiprintf_r+0x1e4>)
 800667e:	a904      	add	r1, sp, #16
 8006680:	4640      	mov	r0, r8
 8006682:	f7fe f997 	bl	80049b4 <_printf_i>
 8006686:	e7ea      	b.n	800665e <_svfiprintf_r+0x1aa>
 8006688:	08006d1c 	.word	0x08006d1c
 800668c:	08006d22 	.word	0x08006d22
 8006690:	08006d26 	.word	0x08006d26
 8006694:	08004471 	.word	0x08004471
 8006698:	080063fd 	.word	0x080063fd

0800669c <__sfputc_r>:
 800669c:	6893      	ldr	r3, [r2, #8]
 800669e:	3b01      	subs	r3, #1
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	b410      	push	{r4}
 80066a4:	6093      	str	r3, [r2, #8]
 80066a6:	da09      	bge.n	80066bc <__sfputc_r+0x20>
 80066a8:	6994      	ldr	r4, [r2, #24]
 80066aa:	42a3      	cmp	r3, r4
 80066ac:	db02      	blt.n	80066b4 <__sfputc_r+0x18>
 80066ae:	b2cb      	uxtb	r3, r1
 80066b0:	2b0a      	cmp	r3, #10
 80066b2:	d103      	bne.n	80066bc <__sfputc_r+0x20>
 80066b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066b8:	f7fe bc46 	b.w	8004f48 <__swbuf_r>
 80066bc:	6813      	ldr	r3, [r2, #0]
 80066be:	1c58      	adds	r0, r3, #1
 80066c0:	6010      	str	r0, [r2, #0]
 80066c2:	7019      	strb	r1, [r3, #0]
 80066c4:	b2c8      	uxtb	r0, r1
 80066c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <__sfputs_r>:
 80066cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ce:	4606      	mov	r6, r0
 80066d0:	460f      	mov	r7, r1
 80066d2:	4614      	mov	r4, r2
 80066d4:	18d5      	adds	r5, r2, r3
 80066d6:	42ac      	cmp	r4, r5
 80066d8:	d101      	bne.n	80066de <__sfputs_r+0x12>
 80066da:	2000      	movs	r0, #0
 80066dc:	e007      	b.n	80066ee <__sfputs_r+0x22>
 80066de:	463a      	mov	r2, r7
 80066e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066e4:	4630      	mov	r0, r6
 80066e6:	f7ff ffd9 	bl	800669c <__sfputc_r>
 80066ea:	1c43      	adds	r3, r0, #1
 80066ec:	d1f3      	bne.n	80066d6 <__sfputs_r+0xa>
 80066ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080066f0 <_vfiprintf_r>:
 80066f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066f4:	b09d      	sub	sp, #116	; 0x74
 80066f6:	460c      	mov	r4, r1
 80066f8:	4617      	mov	r7, r2
 80066fa:	9303      	str	r3, [sp, #12]
 80066fc:	4606      	mov	r6, r0
 80066fe:	b118      	cbz	r0, 8006708 <_vfiprintf_r+0x18>
 8006700:	6983      	ldr	r3, [r0, #24]
 8006702:	b90b      	cbnz	r3, 8006708 <_vfiprintf_r+0x18>
 8006704:	f7fd fcbc 	bl	8004080 <__sinit>
 8006708:	4b7c      	ldr	r3, [pc, #496]	; (80068fc <_vfiprintf_r+0x20c>)
 800670a:	429c      	cmp	r4, r3
 800670c:	d157      	bne.n	80067be <_vfiprintf_r+0xce>
 800670e:	6874      	ldr	r4, [r6, #4]
 8006710:	89a3      	ldrh	r3, [r4, #12]
 8006712:	0718      	lsls	r0, r3, #28
 8006714:	d55d      	bpl.n	80067d2 <_vfiprintf_r+0xe2>
 8006716:	6923      	ldr	r3, [r4, #16]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d05a      	beq.n	80067d2 <_vfiprintf_r+0xe2>
 800671c:	2300      	movs	r3, #0
 800671e:	9309      	str	r3, [sp, #36]	; 0x24
 8006720:	2320      	movs	r3, #32
 8006722:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006726:	2330      	movs	r3, #48	; 0x30
 8006728:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800672c:	f04f 0b01 	mov.w	fp, #1
 8006730:	46b8      	mov	r8, r7
 8006732:	4645      	mov	r5, r8
 8006734:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006738:	2b00      	cmp	r3, #0
 800673a:	d155      	bne.n	80067e8 <_vfiprintf_r+0xf8>
 800673c:	ebb8 0a07 	subs.w	sl, r8, r7
 8006740:	d00b      	beq.n	800675a <_vfiprintf_r+0x6a>
 8006742:	4653      	mov	r3, sl
 8006744:	463a      	mov	r2, r7
 8006746:	4621      	mov	r1, r4
 8006748:	4630      	mov	r0, r6
 800674a:	f7ff ffbf 	bl	80066cc <__sfputs_r>
 800674e:	3001      	adds	r0, #1
 8006750:	f000 80c4 	beq.w	80068dc <_vfiprintf_r+0x1ec>
 8006754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006756:	4453      	add	r3, sl
 8006758:	9309      	str	r3, [sp, #36]	; 0x24
 800675a:	f898 3000 	ldrb.w	r3, [r8]
 800675e:	2b00      	cmp	r3, #0
 8006760:	f000 80bc 	beq.w	80068dc <_vfiprintf_r+0x1ec>
 8006764:	2300      	movs	r3, #0
 8006766:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800676a:	9304      	str	r3, [sp, #16]
 800676c:	9307      	str	r3, [sp, #28]
 800676e:	9205      	str	r2, [sp, #20]
 8006770:	9306      	str	r3, [sp, #24]
 8006772:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006776:	931a      	str	r3, [sp, #104]	; 0x68
 8006778:	2205      	movs	r2, #5
 800677a:	7829      	ldrb	r1, [r5, #0]
 800677c:	4860      	ldr	r0, [pc, #384]	; (8006900 <_vfiprintf_r+0x210>)
 800677e:	f7f9 fd5f 	bl	8000240 <memchr>
 8006782:	f105 0801 	add.w	r8, r5, #1
 8006786:	9b04      	ldr	r3, [sp, #16]
 8006788:	2800      	cmp	r0, #0
 800678a:	d131      	bne.n	80067f0 <_vfiprintf_r+0x100>
 800678c:	06d9      	lsls	r1, r3, #27
 800678e:	bf44      	itt	mi
 8006790:	2220      	movmi	r2, #32
 8006792:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006796:	071a      	lsls	r2, r3, #28
 8006798:	bf44      	itt	mi
 800679a:	222b      	movmi	r2, #43	; 0x2b
 800679c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80067a0:	782a      	ldrb	r2, [r5, #0]
 80067a2:	2a2a      	cmp	r2, #42	; 0x2a
 80067a4:	d02c      	beq.n	8006800 <_vfiprintf_r+0x110>
 80067a6:	9a07      	ldr	r2, [sp, #28]
 80067a8:	2100      	movs	r1, #0
 80067aa:	200a      	movs	r0, #10
 80067ac:	46a8      	mov	r8, r5
 80067ae:	3501      	adds	r5, #1
 80067b0:	f898 3000 	ldrb.w	r3, [r8]
 80067b4:	3b30      	subs	r3, #48	; 0x30
 80067b6:	2b09      	cmp	r3, #9
 80067b8:	d96d      	bls.n	8006896 <_vfiprintf_r+0x1a6>
 80067ba:	b371      	cbz	r1, 800681a <_vfiprintf_r+0x12a>
 80067bc:	e026      	b.n	800680c <_vfiprintf_r+0x11c>
 80067be:	4b51      	ldr	r3, [pc, #324]	; (8006904 <_vfiprintf_r+0x214>)
 80067c0:	429c      	cmp	r4, r3
 80067c2:	d101      	bne.n	80067c8 <_vfiprintf_r+0xd8>
 80067c4:	68b4      	ldr	r4, [r6, #8]
 80067c6:	e7a3      	b.n	8006710 <_vfiprintf_r+0x20>
 80067c8:	4b4f      	ldr	r3, [pc, #316]	; (8006908 <_vfiprintf_r+0x218>)
 80067ca:	429c      	cmp	r4, r3
 80067cc:	bf08      	it	eq
 80067ce:	68f4      	ldreq	r4, [r6, #12]
 80067d0:	e79e      	b.n	8006710 <_vfiprintf_r+0x20>
 80067d2:	4621      	mov	r1, r4
 80067d4:	4630      	mov	r0, r6
 80067d6:	f7fe fc1b 	bl	8005010 <__swsetup_r>
 80067da:	2800      	cmp	r0, #0
 80067dc:	d09e      	beq.n	800671c <_vfiprintf_r+0x2c>
 80067de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067e2:	b01d      	add	sp, #116	; 0x74
 80067e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067e8:	2b25      	cmp	r3, #37	; 0x25
 80067ea:	d0a7      	beq.n	800673c <_vfiprintf_r+0x4c>
 80067ec:	46a8      	mov	r8, r5
 80067ee:	e7a0      	b.n	8006732 <_vfiprintf_r+0x42>
 80067f0:	4a43      	ldr	r2, [pc, #268]	; (8006900 <_vfiprintf_r+0x210>)
 80067f2:	1a80      	subs	r0, r0, r2
 80067f4:	fa0b f000 	lsl.w	r0, fp, r0
 80067f8:	4318      	orrs	r0, r3
 80067fa:	9004      	str	r0, [sp, #16]
 80067fc:	4645      	mov	r5, r8
 80067fe:	e7bb      	b.n	8006778 <_vfiprintf_r+0x88>
 8006800:	9a03      	ldr	r2, [sp, #12]
 8006802:	1d11      	adds	r1, r2, #4
 8006804:	6812      	ldr	r2, [r2, #0]
 8006806:	9103      	str	r1, [sp, #12]
 8006808:	2a00      	cmp	r2, #0
 800680a:	db01      	blt.n	8006810 <_vfiprintf_r+0x120>
 800680c:	9207      	str	r2, [sp, #28]
 800680e:	e004      	b.n	800681a <_vfiprintf_r+0x12a>
 8006810:	4252      	negs	r2, r2
 8006812:	f043 0302 	orr.w	r3, r3, #2
 8006816:	9207      	str	r2, [sp, #28]
 8006818:	9304      	str	r3, [sp, #16]
 800681a:	f898 3000 	ldrb.w	r3, [r8]
 800681e:	2b2e      	cmp	r3, #46	; 0x2e
 8006820:	d110      	bne.n	8006844 <_vfiprintf_r+0x154>
 8006822:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006826:	2b2a      	cmp	r3, #42	; 0x2a
 8006828:	f108 0101 	add.w	r1, r8, #1
 800682c:	d137      	bne.n	800689e <_vfiprintf_r+0x1ae>
 800682e:	9b03      	ldr	r3, [sp, #12]
 8006830:	1d1a      	adds	r2, r3, #4
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	9203      	str	r2, [sp, #12]
 8006836:	2b00      	cmp	r3, #0
 8006838:	bfb8      	it	lt
 800683a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800683e:	f108 0802 	add.w	r8, r8, #2
 8006842:	9305      	str	r3, [sp, #20]
 8006844:	4d31      	ldr	r5, [pc, #196]	; (800690c <_vfiprintf_r+0x21c>)
 8006846:	f898 1000 	ldrb.w	r1, [r8]
 800684a:	2203      	movs	r2, #3
 800684c:	4628      	mov	r0, r5
 800684e:	f7f9 fcf7 	bl	8000240 <memchr>
 8006852:	b140      	cbz	r0, 8006866 <_vfiprintf_r+0x176>
 8006854:	2340      	movs	r3, #64	; 0x40
 8006856:	1b40      	subs	r0, r0, r5
 8006858:	fa03 f000 	lsl.w	r0, r3, r0
 800685c:	9b04      	ldr	r3, [sp, #16]
 800685e:	4303      	orrs	r3, r0
 8006860:	9304      	str	r3, [sp, #16]
 8006862:	f108 0801 	add.w	r8, r8, #1
 8006866:	f898 1000 	ldrb.w	r1, [r8]
 800686a:	4829      	ldr	r0, [pc, #164]	; (8006910 <_vfiprintf_r+0x220>)
 800686c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006870:	2206      	movs	r2, #6
 8006872:	f108 0701 	add.w	r7, r8, #1
 8006876:	f7f9 fce3 	bl	8000240 <memchr>
 800687a:	2800      	cmp	r0, #0
 800687c:	d034      	beq.n	80068e8 <_vfiprintf_r+0x1f8>
 800687e:	4b25      	ldr	r3, [pc, #148]	; (8006914 <_vfiprintf_r+0x224>)
 8006880:	bb03      	cbnz	r3, 80068c4 <_vfiprintf_r+0x1d4>
 8006882:	9b03      	ldr	r3, [sp, #12]
 8006884:	3307      	adds	r3, #7
 8006886:	f023 0307 	bic.w	r3, r3, #7
 800688a:	3308      	adds	r3, #8
 800688c:	9303      	str	r3, [sp, #12]
 800688e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006890:	444b      	add	r3, r9
 8006892:	9309      	str	r3, [sp, #36]	; 0x24
 8006894:	e74c      	b.n	8006730 <_vfiprintf_r+0x40>
 8006896:	fb00 3202 	mla	r2, r0, r2, r3
 800689a:	2101      	movs	r1, #1
 800689c:	e786      	b.n	80067ac <_vfiprintf_r+0xbc>
 800689e:	2300      	movs	r3, #0
 80068a0:	9305      	str	r3, [sp, #20]
 80068a2:	4618      	mov	r0, r3
 80068a4:	250a      	movs	r5, #10
 80068a6:	4688      	mov	r8, r1
 80068a8:	3101      	adds	r1, #1
 80068aa:	f898 2000 	ldrb.w	r2, [r8]
 80068ae:	3a30      	subs	r2, #48	; 0x30
 80068b0:	2a09      	cmp	r2, #9
 80068b2:	d903      	bls.n	80068bc <_vfiprintf_r+0x1cc>
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d0c5      	beq.n	8006844 <_vfiprintf_r+0x154>
 80068b8:	9005      	str	r0, [sp, #20]
 80068ba:	e7c3      	b.n	8006844 <_vfiprintf_r+0x154>
 80068bc:	fb05 2000 	mla	r0, r5, r0, r2
 80068c0:	2301      	movs	r3, #1
 80068c2:	e7f0      	b.n	80068a6 <_vfiprintf_r+0x1b6>
 80068c4:	ab03      	add	r3, sp, #12
 80068c6:	9300      	str	r3, [sp, #0]
 80068c8:	4622      	mov	r2, r4
 80068ca:	4b13      	ldr	r3, [pc, #76]	; (8006918 <_vfiprintf_r+0x228>)
 80068cc:	a904      	add	r1, sp, #16
 80068ce:	4630      	mov	r0, r6
 80068d0:	f7fd fdce 	bl	8004470 <_printf_float>
 80068d4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80068d8:	4681      	mov	r9, r0
 80068da:	d1d8      	bne.n	800688e <_vfiprintf_r+0x19e>
 80068dc:	89a3      	ldrh	r3, [r4, #12]
 80068de:	065b      	lsls	r3, r3, #25
 80068e0:	f53f af7d 	bmi.w	80067de <_vfiprintf_r+0xee>
 80068e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068e6:	e77c      	b.n	80067e2 <_vfiprintf_r+0xf2>
 80068e8:	ab03      	add	r3, sp, #12
 80068ea:	9300      	str	r3, [sp, #0]
 80068ec:	4622      	mov	r2, r4
 80068ee:	4b0a      	ldr	r3, [pc, #40]	; (8006918 <_vfiprintf_r+0x228>)
 80068f0:	a904      	add	r1, sp, #16
 80068f2:	4630      	mov	r0, r6
 80068f4:	f7fe f85e 	bl	80049b4 <_printf_i>
 80068f8:	e7ec      	b.n	80068d4 <_vfiprintf_r+0x1e4>
 80068fa:	bf00      	nop
 80068fc:	08006b8c 	.word	0x08006b8c
 8006900:	08006d1c 	.word	0x08006d1c
 8006904:	08006bac 	.word	0x08006bac
 8006908:	08006b6c 	.word	0x08006b6c
 800690c:	08006d22 	.word	0x08006d22
 8006910:	08006d26 	.word	0x08006d26
 8006914:	08004471 	.word	0x08004471
 8006918:	080066cd 	.word	0x080066cd

0800691c <_read_r>:
 800691c:	b538      	push	{r3, r4, r5, lr}
 800691e:	4c07      	ldr	r4, [pc, #28]	; (800693c <_read_r+0x20>)
 8006920:	4605      	mov	r5, r0
 8006922:	4608      	mov	r0, r1
 8006924:	4611      	mov	r1, r2
 8006926:	2200      	movs	r2, #0
 8006928:	6022      	str	r2, [r4, #0]
 800692a:	461a      	mov	r2, r3
 800692c:	f7fc fdc8 	bl	80034c0 <_read>
 8006930:	1c43      	adds	r3, r0, #1
 8006932:	d102      	bne.n	800693a <_read_r+0x1e>
 8006934:	6823      	ldr	r3, [r4, #0]
 8006936:	b103      	cbz	r3, 800693a <_read_r+0x1e>
 8006938:	602b      	str	r3, [r5, #0]
 800693a:	bd38      	pop	{r3, r4, r5, pc}
 800693c:	2000194c 	.word	0x2000194c

08006940 <__ascii_wctomb>:
 8006940:	b149      	cbz	r1, 8006956 <__ascii_wctomb+0x16>
 8006942:	2aff      	cmp	r2, #255	; 0xff
 8006944:	bf85      	ittet	hi
 8006946:	238a      	movhi	r3, #138	; 0x8a
 8006948:	6003      	strhi	r3, [r0, #0]
 800694a:	700a      	strbls	r2, [r1, #0]
 800694c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006950:	bf98      	it	ls
 8006952:	2001      	movls	r0, #1
 8006954:	4770      	bx	lr
 8006956:	4608      	mov	r0, r1
 8006958:	4770      	bx	lr
	...

0800695c <_fstat_r>:
 800695c:	b538      	push	{r3, r4, r5, lr}
 800695e:	4c07      	ldr	r4, [pc, #28]	; (800697c <_fstat_r+0x20>)
 8006960:	2300      	movs	r3, #0
 8006962:	4605      	mov	r5, r0
 8006964:	4608      	mov	r0, r1
 8006966:	4611      	mov	r1, r2
 8006968:	6023      	str	r3, [r4, #0]
 800696a:	f7fc fde2 	bl	8003532 <_fstat>
 800696e:	1c43      	adds	r3, r0, #1
 8006970:	d102      	bne.n	8006978 <_fstat_r+0x1c>
 8006972:	6823      	ldr	r3, [r4, #0]
 8006974:	b103      	cbz	r3, 8006978 <_fstat_r+0x1c>
 8006976:	602b      	str	r3, [r5, #0]
 8006978:	bd38      	pop	{r3, r4, r5, pc}
 800697a:	bf00      	nop
 800697c:	2000194c 	.word	0x2000194c

08006980 <_isatty_r>:
 8006980:	b538      	push	{r3, r4, r5, lr}
 8006982:	4c06      	ldr	r4, [pc, #24]	; (800699c <_isatty_r+0x1c>)
 8006984:	2300      	movs	r3, #0
 8006986:	4605      	mov	r5, r0
 8006988:	4608      	mov	r0, r1
 800698a:	6023      	str	r3, [r4, #0]
 800698c:	f7fc fdd6 	bl	800353c <_isatty>
 8006990:	1c43      	adds	r3, r0, #1
 8006992:	d102      	bne.n	800699a <_isatty_r+0x1a>
 8006994:	6823      	ldr	r3, [r4, #0]
 8006996:	b103      	cbz	r3, 800699a <_isatty_r+0x1a>
 8006998:	602b      	str	r3, [r5, #0]
 800699a:	bd38      	pop	{r3, r4, r5, pc}
 800699c:	2000194c 	.word	0x2000194c

080069a0 <memmove>:
 80069a0:	4288      	cmp	r0, r1
 80069a2:	b510      	push	{r4, lr}
 80069a4:	eb01 0302 	add.w	r3, r1, r2
 80069a8:	d803      	bhi.n	80069b2 <memmove+0x12>
 80069aa:	1e42      	subs	r2, r0, #1
 80069ac:	4299      	cmp	r1, r3
 80069ae:	d10c      	bne.n	80069ca <memmove+0x2a>
 80069b0:	bd10      	pop	{r4, pc}
 80069b2:	4298      	cmp	r0, r3
 80069b4:	d2f9      	bcs.n	80069aa <memmove+0xa>
 80069b6:	1881      	adds	r1, r0, r2
 80069b8:	1ad2      	subs	r2, r2, r3
 80069ba:	42d3      	cmn	r3, r2
 80069bc:	d100      	bne.n	80069c0 <memmove+0x20>
 80069be:	bd10      	pop	{r4, pc}
 80069c0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069c4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80069c8:	e7f7      	b.n	80069ba <memmove+0x1a>
 80069ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069ce:	f802 4f01 	strb.w	r4, [r2, #1]!
 80069d2:	e7eb      	b.n	80069ac <memmove+0xc>

080069d4 <_realloc_r>:
 80069d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069d6:	4607      	mov	r7, r0
 80069d8:	4614      	mov	r4, r2
 80069da:	460e      	mov	r6, r1
 80069dc:	b921      	cbnz	r1, 80069e8 <_realloc_r+0x14>
 80069de:	4611      	mov	r1, r2
 80069e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80069e4:	f7fd bc5c 	b.w	80042a0 <_malloc_r>
 80069e8:	b922      	cbnz	r2, 80069f4 <_realloc_r+0x20>
 80069ea:	f7fd fc0b 	bl	8004204 <_free_r>
 80069ee:	4625      	mov	r5, r4
 80069f0:	4628      	mov	r0, r5
 80069f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069f4:	f000 f814 	bl	8006a20 <_malloc_usable_size_r>
 80069f8:	4284      	cmp	r4, r0
 80069fa:	d90f      	bls.n	8006a1c <_realloc_r+0x48>
 80069fc:	4621      	mov	r1, r4
 80069fe:	4638      	mov	r0, r7
 8006a00:	f7fd fc4e 	bl	80042a0 <_malloc_r>
 8006a04:	4605      	mov	r5, r0
 8006a06:	2800      	cmp	r0, #0
 8006a08:	d0f2      	beq.n	80069f0 <_realloc_r+0x1c>
 8006a0a:	4631      	mov	r1, r6
 8006a0c:	4622      	mov	r2, r4
 8006a0e:	f7fd fbe5 	bl	80041dc <memcpy>
 8006a12:	4631      	mov	r1, r6
 8006a14:	4638      	mov	r0, r7
 8006a16:	f7fd fbf5 	bl	8004204 <_free_r>
 8006a1a:	e7e9      	b.n	80069f0 <_realloc_r+0x1c>
 8006a1c:	4635      	mov	r5, r6
 8006a1e:	e7e7      	b.n	80069f0 <_realloc_r+0x1c>

08006a20 <_malloc_usable_size_r>:
 8006a20:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8006a24:	2800      	cmp	r0, #0
 8006a26:	f1a0 0004 	sub.w	r0, r0, #4
 8006a2a:	bfbc      	itt	lt
 8006a2c:	580b      	ldrlt	r3, [r1, r0]
 8006a2e:	18c0      	addlt	r0, r0, r3
 8006a30:	4770      	bx	lr
	...

08006a34 <_init>:
 8006a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a36:	bf00      	nop
 8006a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a3a:	bc08      	pop	{r3}
 8006a3c:	469e      	mov	lr, r3
 8006a3e:	4770      	bx	lr

08006a40 <_fini>:
 8006a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a42:	bf00      	nop
 8006a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a46:	bc08      	pop	{r3}
 8006a48:	469e      	mov	lr, r3
 8006a4a:	4770      	bx	lr
