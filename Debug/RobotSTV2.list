
RobotSTV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ad8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08004cd8  08004cd8  00014cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004e74  08004e74  00014e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004e7c  08004e7c  00014e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004e80  08004e80  00014e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08004e84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001774  20000070  08004ef4  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200017e4  08004ef4  000217e4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003cdca  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005e53  00000000  00000000  0005ce68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000104e7  00000000  00000000  00062cbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001668  00000000  00000000  000731a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001be8  00000000  00000000  00074810  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000d613  00000000  00000000  000763f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000960f  00000000  00000000  00083a0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0008d01a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004d18  00000000  00000000  0008d098  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08004cc0 	.word	0x08004cc0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08004cc0 	.word	0x08004cc0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b97a 	b.w	80005ec <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	468c      	mov	ip, r1
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	9e08      	ldr	r6, [sp, #32]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d151      	bne.n	80003c4 <__udivmoddi4+0xb4>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d96d      	bls.n	8000402 <__udivmoddi4+0xf2>
 8000326:	fab2 fe82 	clz	lr, r2
 800032a:	f1be 0f00 	cmp.w	lr, #0
 800032e:	d00b      	beq.n	8000348 <__udivmoddi4+0x38>
 8000330:	f1ce 0c20 	rsb	ip, lr, #32
 8000334:	fa01 f50e 	lsl.w	r5, r1, lr
 8000338:	fa20 fc0c 	lsr.w	ip, r0, ip
 800033c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000340:	ea4c 0c05 	orr.w	ip, ip, r5
 8000344:	fa00 f40e 	lsl.w	r4, r0, lr
 8000348:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800034c:	0c25      	lsrs	r5, r4, #16
 800034e:	fbbc f8fa 	udiv	r8, ip, sl
 8000352:	fa1f f987 	uxth.w	r9, r7
 8000356:	fb0a cc18 	mls	ip, sl, r8, ip
 800035a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035e:	fb08 f309 	mul.w	r3, r8, r9
 8000362:	42ab      	cmp	r3, r5
 8000364:	d90a      	bls.n	800037c <__udivmoddi4+0x6c>
 8000366:	19ed      	adds	r5, r5, r7
 8000368:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800036c:	f080 8123 	bcs.w	80005b6 <__udivmoddi4+0x2a6>
 8000370:	42ab      	cmp	r3, r5
 8000372:	f240 8120 	bls.w	80005b6 <__udivmoddi4+0x2a6>
 8000376:	f1a8 0802 	sub.w	r8, r8, #2
 800037a:	443d      	add	r5, r7
 800037c:	1aed      	subs	r5, r5, r3
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb5 f0fa 	udiv	r0, r5, sl
 8000384:	fb0a 5510 	mls	r5, sl, r0, r5
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb00 f909 	mul.w	r9, r0, r9
 8000390:	45a1      	cmp	r9, r4
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x98>
 8000394:	19e4      	adds	r4, r4, r7
 8000396:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039a:	f080 810a 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8107 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 0409 	sub.w	r4, r4, r9
 80003ac:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003b0:	2100      	movs	r1, #0
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d061      	beq.n	800047a <__udivmoddi4+0x16a>
 80003b6:	fa24 f40e 	lsr.w	r4, r4, lr
 80003ba:	2300      	movs	r3, #0
 80003bc:	6034      	str	r4, [r6, #0]
 80003be:	6073      	str	r3, [r6, #4]
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d907      	bls.n	80003d8 <__udivmoddi4+0xc8>
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d054      	beq.n	8000476 <__udivmoddi4+0x166>
 80003cc:	2100      	movs	r1, #0
 80003ce:	e886 0021 	stmia.w	r6, {r0, r5}
 80003d2:	4608      	mov	r0, r1
 80003d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d8:	fab3 f183 	clz	r1, r3
 80003dc:	2900      	cmp	r1, #0
 80003de:	f040 808e 	bne.w	80004fe <__udivmoddi4+0x1ee>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xdc>
 80003e6:	4282      	cmp	r2, r0
 80003e8:	f200 80fa 	bhi.w	80005e0 <__udivmoddi4+0x2d0>
 80003ec:	1a84      	subs	r4, r0, r2
 80003ee:	eb65 0503 	sbc.w	r5, r5, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	46ac      	mov	ip, r5
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	d03f      	beq.n	800047a <__udivmoddi4+0x16a>
 80003fa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	b912      	cbnz	r2, 800040a <__udivmoddi4+0xfa>
 8000404:	2701      	movs	r7, #1
 8000406:	fbb7 f7f2 	udiv	r7, r7, r2
 800040a:	fab7 fe87 	clz	lr, r7
 800040e:	f1be 0f00 	cmp.w	lr, #0
 8000412:	d134      	bne.n	800047e <__udivmoddi4+0x16e>
 8000414:	1beb      	subs	r3, r5, r7
 8000416:	0c3a      	lsrs	r2, r7, #16
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	2101      	movs	r1, #1
 800041e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000422:	0c25      	lsrs	r5, r4, #16
 8000424:	fb02 3318 	mls	r3, r2, r8, r3
 8000428:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800042c:	fb0c f308 	mul.w	r3, ip, r8
 8000430:	42ab      	cmp	r3, r5
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x134>
 8000434:	19ed      	adds	r5, r5, r7
 8000436:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x132>
 800043c:	42ab      	cmp	r3, r5
 800043e:	f200 80d1 	bhi.w	80005e4 <__udivmoddi4+0x2d4>
 8000442:	4680      	mov	r8, r0
 8000444:	1aed      	subs	r5, r5, r3
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb5 f0f2 	udiv	r0, r5, r2
 800044c:	fb02 5510 	mls	r5, r2, r0, r5
 8000450:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000454:	fb0c fc00 	mul.w	ip, ip, r0
 8000458:	45a4      	cmp	ip, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x15c>
 800045c:	19e4      	adds	r4, r4, r7
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x15a>
 8000464:	45a4      	cmp	ip, r4
 8000466:	f200 80b8 	bhi.w	80005da <__udivmoddi4+0x2ca>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 040c 	sub.w	r4, r4, ip
 8000470:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000474:	e79d      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000476:	4631      	mov	r1, r6
 8000478:	4630      	mov	r0, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	f1ce 0420 	rsb	r4, lr, #32
 8000482:	fa05 f30e 	lsl.w	r3, r5, lr
 8000486:	fa07 f70e 	lsl.w	r7, r7, lr
 800048a:	fa20 f804 	lsr.w	r8, r0, r4
 800048e:	0c3a      	lsrs	r2, r7, #16
 8000490:	fa25 f404 	lsr.w	r4, r5, r4
 8000494:	ea48 0803 	orr.w	r8, r8, r3
 8000498:	fbb4 f1f2 	udiv	r1, r4, r2
 800049c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80004a0:	fb02 4411 	mls	r4, r2, r1, r4
 80004a4:	fa1f fc87 	uxth.w	ip, r7
 80004a8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004ac:	fb01 f30c 	mul.w	r3, r1, ip
 80004b0:	42ab      	cmp	r3, r5
 80004b2:	fa00 f40e 	lsl.w	r4, r0, lr
 80004b6:	d909      	bls.n	80004cc <__udivmoddi4+0x1bc>
 80004b8:	19ed      	adds	r5, r5, r7
 80004ba:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80004be:	f080 808a 	bcs.w	80005d6 <__udivmoddi4+0x2c6>
 80004c2:	42ab      	cmp	r3, r5
 80004c4:	f240 8087 	bls.w	80005d6 <__udivmoddi4+0x2c6>
 80004c8:	3902      	subs	r1, #2
 80004ca:	443d      	add	r5, r7
 80004cc:	1aeb      	subs	r3, r5, r3
 80004ce:	fa1f f588 	uxth.w	r5, r8
 80004d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004d6:	fb02 3310 	mls	r3, r2, r0, r3
 80004da:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004de:	fb00 f30c 	mul.w	r3, r0, ip
 80004e2:	42ab      	cmp	r3, r5
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x1e6>
 80004e6:	19ed      	adds	r5, r5, r7
 80004e8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ec:	d26f      	bcs.n	80005ce <__udivmoddi4+0x2be>
 80004ee:	42ab      	cmp	r3, r5
 80004f0:	d96d      	bls.n	80005ce <__udivmoddi4+0x2be>
 80004f2:	3802      	subs	r0, #2
 80004f4:	443d      	add	r5, r7
 80004f6:	1aeb      	subs	r3, r5, r3
 80004f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004fc:	e78f      	b.n	800041e <__udivmoddi4+0x10e>
 80004fe:	f1c1 0720 	rsb	r7, r1, #32
 8000502:	fa22 f807 	lsr.w	r8, r2, r7
 8000506:	408b      	lsls	r3, r1
 8000508:	fa05 f401 	lsl.w	r4, r5, r1
 800050c:	ea48 0303 	orr.w	r3, r8, r3
 8000510:	fa20 fe07 	lsr.w	lr, r0, r7
 8000514:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000518:	40fd      	lsrs	r5, r7
 800051a:	ea4e 0e04 	orr.w	lr, lr, r4
 800051e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000522:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000526:	fb0c 5519 	mls	r5, ip, r9, r5
 800052a:	fa1f f883 	uxth.w	r8, r3
 800052e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000532:	fb09 f408 	mul.w	r4, r9, r8
 8000536:	42ac      	cmp	r4, r5
 8000538:	fa02 f201 	lsl.w	r2, r2, r1
 800053c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x244>
 8000542:	18ed      	adds	r5, r5, r3
 8000544:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000548:	d243      	bcs.n	80005d2 <__udivmoddi4+0x2c2>
 800054a:	42ac      	cmp	r4, r5
 800054c:	d941      	bls.n	80005d2 <__udivmoddi4+0x2c2>
 800054e:	f1a9 0902 	sub.w	r9, r9, #2
 8000552:	441d      	add	r5, r3
 8000554:	1b2d      	subs	r5, r5, r4
 8000556:	fa1f fe8e 	uxth.w	lr, lr
 800055a:	fbb5 f0fc 	udiv	r0, r5, ip
 800055e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000562:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000566:	fb00 f808 	mul.w	r8, r0, r8
 800056a:	45a0      	cmp	r8, r4
 800056c:	d907      	bls.n	800057e <__udivmoddi4+0x26e>
 800056e:	18e4      	adds	r4, r4, r3
 8000570:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000574:	d229      	bcs.n	80005ca <__udivmoddi4+0x2ba>
 8000576:	45a0      	cmp	r8, r4
 8000578:	d927      	bls.n	80005ca <__udivmoddi4+0x2ba>
 800057a:	3802      	subs	r0, #2
 800057c:	441c      	add	r4, r3
 800057e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000582:	eba4 0408 	sub.w	r4, r4, r8
 8000586:	fba0 8902 	umull	r8, r9, r0, r2
 800058a:	454c      	cmp	r4, r9
 800058c:	46c6      	mov	lr, r8
 800058e:	464d      	mov	r5, r9
 8000590:	d315      	bcc.n	80005be <__udivmoddi4+0x2ae>
 8000592:	d012      	beq.n	80005ba <__udivmoddi4+0x2aa>
 8000594:	b156      	cbz	r6, 80005ac <__udivmoddi4+0x29c>
 8000596:	ebba 030e 	subs.w	r3, sl, lr
 800059a:	eb64 0405 	sbc.w	r4, r4, r5
 800059e:	fa04 f707 	lsl.w	r7, r4, r7
 80005a2:	40cb      	lsrs	r3, r1
 80005a4:	431f      	orrs	r7, r3
 80005a6:	40cc      	lsrs	r4, r1
 80005a8:	6037      	str	r7, [r6, #0]
 80005aa:	6074      	str	r4, [r6, #4]
 80005ac:	2100      	movs	r1, #0
 80005ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005b2:	4618      	mov	r0, r3
 80005b4:	e6f8      	b.n	80003a8 <__udivmoddi4+0x98>
 80005b6:	4690      	mov	r8, r2
 80005b8:	e6e0      	b.n	800037c <__udivmoddi4+0x6c>
 80005ba:	45c2      	cmp	sl, r8
 80005bc:	d2ea      	bcs.n	8000594 <__udivmoddi4+0x284>
 80005be:	ebb8 0e02 	subs.w	lr, r8, r2
 80005c2:	eb69 0503 	sbc.w	r5, r9, r3
 80005c6:	3801      	subs	r0, #1
 80005c8:	e7e4      	b.n	8000594 <__udivmoddi4+0x284>
 80005ca:	4628      	mov	r0, r5
 80005cc:	e7d7      	b.n	800057e <__udivmoddi4+0x26e>
 80005ce:	4640      	mov	r0, r8
 80005d0:	e791      	b.n	80004f6 <__udivmoddi4+0x1e6>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e7be      	b.n	8000554 <__udivmoddi4+0x244>
 80005d6:	4601      	mov	r1, r0
 80005d8:	e778      	b.n	80004cc <__udivmoddi4+0x1bc>
 80005da:	3802      	subs	r0, #2
 80005dc:	443c      	add	r4, r7
 80005de:	e745      	b.n	800046c <__udivmoddi4+0x15c>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e708      	b.n	80003f6 <__udivmoddi4+0xe6>
 80005e4:	f1a8 0802 	sub.w	r8, r8, #2
 80005e8:	443d      	add	r5, r7
 80005ea:	e72b      	b.n	8000444 <__udivmoddi4+0x134>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005f2:	4b0e      	ldr	r3, [pc, #56]	; (800062c <HAL_InitTick+0x3c>)
{
 80005f4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005f6:	4a0e      	ldr	r2, [pc, #56]	; (8000630 <HAL_InitTick+0x40>)
 80005f8:	7818      	ldrb	r0, [r3, #0]
 80005fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fe:	fbb3 f3f0 	udiv	r3, r3, r0
 8000602:	6810      	ldr	r0, [r2, #0]
 8000604:	fbb0 f0f3 	udiv	r0, r0, r3
 8000608:	f000 f8aa 	bl	8000760 <HAL_SYSTICK_Config>
 800060c:	4604      	mov	r4, r0
 800060e:	b958      	cbnz	r0, 8000628 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000610:	2d0f      	cmp	r5, #15
 8000612:	d809      	bhi.n	8000628 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000614:	4602      	mov	r2, r0
 8000616:	4629      	mov	r1, r5
 8000618:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800061c:	f000 f84e 	bl	80006bc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000620:	4b04      	ldr	r3, [pc, #16]	; (8000634 <HAL_InitTick+0x44>)
 8000622:	4620      	mov	r0, r4
 8000624:	601d      	str	r5, [r3, #0]
 8000626:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000628:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800062a:	bd38      	pop	{r3, r4, r5, pc}
 800062c:	20000000 	.word	0x20000000
 8000630:	20000008 	.word	0x20000008
 8000634:	20000004 	.word	0x20000004

08000638 <HAL_Init>:
{
 8000638:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800063a:	2003      	movs	r0, #3
 800063c:	f000 f82c 	bl	8000698 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000640:	2000      	movs	r0, #0
 8000642:	f7ff ffd5 	bl	80005f0 <HAL_InitTick>
  HAL_MspInit();
 8000646:	f002 fe07 	bl	8003258 <HAL_MspInit>
}
 800064a:	2000      	movs	r0, #0
 800064c:	bd08      	pop	{r3, pc}
	...

08000650 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000650:	4a03      	ldr	r2, [pc, #12]	; (8000660 <HAL_IncTick+0x10>)
 8000652:	4b04      	ldr	r3, [pc, #16]	; (8000664 <HAL_IncTick+0x14>)
 8000654:	6811      	ldr	r1, [r2, #0]
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	440b      	add	r3, r1
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	20000108 	.word	0x20000108
 8000664:	20000000 	.word	0x20000000

08000668 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000668:	4b01      	ldr	r3, [pc, #4]	; (8000670 <HAL_GetTick+0x8>)
 800066a:	6818      	ldr	r0, [r3, #0]
}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20000108 	.word	0x20000108

08000674 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000674:	b538      	push	{r3, r4, r5, lr}
 8000676:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000678:	f7ff fff6 	bl	8000668 <HAL_GetTick>
 800067c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800067e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000680:	bf1e      	ittt	ne
 8000682:	4b04      	ldrne	r3, [pc, #16]	; (8000694 <HAL_Delay+0x20>)
 8000684:	781b      	ldrbne	r3, [r3, #0]
 8000686:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000688:	f7ff ffee 	bl	8000668 <HAL_GetTick>
 800068c:	1b40      	subs	r0, r0, r5
 800068e:	4284      	cmp	r4, r0
 8000690:	d8fa      	bhi.n	8000688 <HAL_Delay+0x14>
  {
  }
}
 8000692:	bd38      	pop	{r3, r4, r5, pc}
 8000694:	20000000 	.word	0x20000000

08000698 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000698:	4a07      	ldr	r2, [pc, #28]	; (80006b8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800069a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800069c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800069e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006a2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006a6:	041b      	lsls	r3, r3, #16
 80006a8:	0c1b      	lsrs	r3, r3, #16
 80006aa:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80006b2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80006b4:	60d3      	str	r3, [r2, #12]
 80006b6:	4770      	bx	lr
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006bc:	4b19      	ldr	r3, [pc, #100]	; (8000724 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006be:	b530      	push	{r4, r5, lr}
 80006c0:	68dc      	ldr	r4, [r3, #12]
 80006c2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ca:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006cc:	2b04      	cmp	r3, #4
 80006ce:	bf28      	it	cs
 80006d0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d4:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d8:	bf8c      	ite	hi
 80006da:	3c03      	subhi	r4, #3
 80006dc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006de:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) < 0)
 80006e2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80006e8:	ea01 0103 	and.w	r1, r1, r3
 80006ec:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f0:	fa05 f404 	lsl.w	r4, r5, r4
 80006f4:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80006f8:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006fc:	ea42 0201 	orr.w	r2, r2, r1
 8000700:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) < 0)
 8000704:	da05      	bge.n	8000712 <HAL_NVIC_SetPriority+0x56>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000706:	f000 000f 	and.w	r0, r0, #15
 800070a:	b2d2      	uxtb	r2, r2
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <HAL_NVIC_SetPriority+0x6c>)
 800070e:	541a      	strb	r2, [r3, r0]
 8000710:	bd30      	pop	{r4, r5, pc}
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000712:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000716:	b2d2      	uxtb	r2, r2
 8000718:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800071c:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	bf00      	nop
 8000724:	e000ed00 	.word	0xe000ed00
 8000728:	e000ed14 	.word	0xe000ed14

0800072c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800072c:	0942      	lsrs	r2, r0, #5
 800072e:	2301      	movs	r3, #1
 8000730:	f000 001f 	and.w	r0, r0, #31
 8000734:	fa03 f000 	lsl.w	r0, r3, r0
 8000738:	4b01      	ldr	r3, [pc, #4]	; (8000740 <HAL_NVIC_EnableIRQ+0x14>)
 800073a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800073e:	4770      	bx	lr
 8000740:	e000e100 	.word	0xe000e100

08000744 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000744:	0943      	lsrs	r3, r0, #5
 8000746:	2201      	movs	r2, #1
 8000748:	f000 001f 	and.w	r0, r0, #31
 800074c:	3320      	adds	r3, #32
 800074e:	fa02 f000 	lsl.w	r0, r2, r0
 8000752:	4a02      	ldr	r2, [pc, #8]	; (800075c <HAL_NVIC_DisableIRQ+0x18>)
 8000754:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	e000e100 	.word	0xe000e100

08000760 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000760:	3801      	subs	r0, #1
 8000762:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000766:	d20a      	bcs.n	800077e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076a:	21f0      	movs	r1, #240	; 0xf0
 800076c:	4a06      	ldr	r2, [pc, #24]	; (8000788 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800076e:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000770:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000772:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000776:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000778:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800077e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	e000e010 	.word	0xe000e010
 8000788:	e000ed00 	.word	0xe000ed00

0800078c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800078c:	4b04      	ldr	r3, [pc, #16]	; (80007a0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800078e:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000790:	681a      	ldr	r2, [r3, #0]
 8000792:	bf0c      	ite	eq
 8000794:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000798:	f022 0204 	bicne.w	r2, r2, #4
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	4770      	bx	lr
 80007a0:	e000e010 	.word	0xe000e010

080007a4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80007a4:	4770      	bx	lr

080007a6 <HAL_SYSTICK_IRQHandler>:
{
 80007a6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80007a8:	f7ff fffc 	bl	80007a4 <HAL_SYSTICK_Callback>
 80007ac:	bd08      	pop	{r3, pc}
	...

080007b0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80007b0:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 80007b2:	4604      	mov	r4, r0
 80007b4:	b908      	cbnz	r0, 80007ba <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 80007b6:	2001      	movs	r0, #1
 80007b8:	bd10      	pop	{r4, pc}
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if(hcrc->State == HAL_CRC_STATE_RESET)
 80007ba:	7f43      	ldrb	r3, [r0, #29]
 80007bc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80007c0:	b913      	cbnz	r3, 80007c8 <HAL_CRC_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80007c2:	7702      	strb	r2, [r0, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80007c4:	f002 f998 	bl	8002af8 <HAL_CRC_MspInit>
  }
  
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80007c8:	2302      	movs	r3, #2
 80007ca:	7763      	strb	r3, [r4, #29]
  
  /* check whether or not non-default generating polynomial has been 
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse)); 
  if(hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80007cc:	7923      	ldrb	r3, [r4, #4]
 80007ce:	b9e3      	cbnz	r3, 800080a <HAL_CRC_Init+0x5a>
  {
    /* initialize IP with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 80007d0:	6823      	ldr	r3, [r4, #0]
 80007d2:	4a13      	ldr	r2, [pc, #76]	; (8000820 <HAL_CRC_Init+0x70>)
 80007d4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80007d6:	689a      	ldr	r2, [r3, #8]
 80007d8:	f022 0218 	bic.w	r2, r2, #24
 80007dc:	609a      	str	r2, [r3, #8]
  }
  
  /* check whether or not non-default CRC initial value has been 
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if(hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80007de:	7962      	ldrb	r2, [r4, #5]
 80007e0:	6823      	ldr	r3, [r4, #0]
 80007e2:	b9d2      	cbnz	r2, 800081a <HAL_CRC_Init+0x6a>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 80007e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80007e8:	611a      	str	r2, [r3, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
  
  /* Return function status */
  return HAL_OK;
 80007ea:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 80007ec:	689a      	ldr	r2, [r3, #8]
 80007ee:	6961      	ldr	r1, [r4, #20]
 80007f0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80007f4:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 80007f6:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 80007f8:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 80007fa:	689a      	ldr	r2, [r3, #8]
 80007fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000800:	430a      	orrs	r2, r1
 8000802:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8000804:	2301      	movs	r3, #1
 8000806:	7763      	strb	r3, [r4, #29]
}
 8000808:	bd10      	pop	{r4, pc}
    if(HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800080a:	68e2      	ldr	r2, [r4, #12]
 800080c:	4620      	mov	r0, r4
 800080e:	68a1      	ldr	r1, [r4, #8]
 8000810:	f000 f808 	bl	8000824 <HAL_CRCEx_Polynomial_Set>
 8000814:	2800      	cmp	r0, #0
 8000816:	d0e2      	beq.n	80007de <HAL_CRC_Init+0x2e>
 8000818:	e7cd      	b.n	80007b6 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800081a:	6922      	ldr	r2, [r4, #16]
 800081c:	e7e4      	b.n	80007e8 <HAL_CRC_Init+0x38>
 800081e:	bf00      	nop
 8000820:	04c11db7 	.word	0x04c11db7

08000824 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000824:	231f      	movs	r3, #31
{
 8000826:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & ((uint32_t)(0x1) << msb)) == 0) && (msb-- > 0))
 8000828:	fa21 f403 	lsr.w	r4, r1, r3
 800082c:	07e4      	lsls	r4, r4, #31
 800082e:	d40a      	bmi.n	8000846 <HAL_CRCEx_Polynomial_Set+0x22>
 8000830:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8000834:	d2f8      	bcs.n	8000828 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8000836:	2a10      	cmp	r2, #16
 8000838:	d003      	beq.n	8000842 <HAL_CRCEx_Polynomial_Set+0x1e>
 800083a:	2a18      	cmp	r2, #24
 800083c:	d001      	beq.n	8000842 <HAL_CRCEx_Polynomial_Set+0x1e>
 800083e:	2a08      	cmp	r2, #8
 8000840:	d10b      	bne.n	800085a <HAL_CRCEx_Polynomial_Set+0x36>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
      { 
        return  HAL_ERROR;
 8000842:	2001      	movs	r0, #1
 8000844:	bd10      	pop	{r4, pc}
  switch (PolyLength)
 8000846:	2a10      	cmp	r2, #16
 8000848:	d010      	beq.n	800086c <HAL_CRCEx_Polynomial_Set+0x48>
 800084a:	2a18      	cmp	r2, #24
 800084c:	d003      	beq.n	8000856 <HAL_CRCEx_Polynomial_Set+0x32>
 800084e:	2a08      	cmp	r2, #8
 8000850:	d103      	bne.n	800085a <HAL_CRCEx_Polynomial_Set+0x36>
      {
        return  HAL_ERROR;
      }
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8000852:	2b0f      	cmp	r3, #15
 8000854:	e000      	b.n	8000858 <HAL_CRCEx_Polynomial_Set+0x34>
      if (msb >= HAL_CRC_LENGTH_7B)
 8000856:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8000858:	d8f3      	bhi.n	8000842 <HAL_CRCEx_Polynomial_Set+0x1e>
  default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 800085a:	6800      	ldr	r0, [r0, #0]
 800085c:	6141      	str	r1, [r0, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 800085e:	6883      	ldr	r3, [r0, #8]
 8000860:	f023 0318 	bic.w	r3, r3, #24
 8000864:	431a      	orrs	r2, r3
 8000866:	6082      	str	r2, [r0, #8]
  
  /* Return function status */
  return HAL_OK;
 8000868:	2000      	movs	r0, #0
 800086a:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 800086c:	2b07      	cmp	r3, #7
 800086e:	e7f3      	b.n	8000858 <HAL_CRCEx_Polynomial_Set+0x34>

08000870 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000870:	6803      	ldr	r3, [r0, #0]
 8000872:	2118      	movs	r1, #24
 8000874:	b2da      	uxtb	r2, r3
 8000876:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800087a:	3a10      	subs	r2, #16
 800087c:	f023 0303 	bic.w	r3, r3, #3
 8000880:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000884:	4904      	ldr	r1, [pc, #16]	; (8000898 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8000886:	2a03      	cmp	r2, #3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000888:	5c89      	ldrb	r1, [r1, r2]
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800088a:	bf88      	it	hi
 800088c:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800088e:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000890:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8000892:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	08004cd8 	.word	0x08004cd8

0800089c <HAL_DMA_Init>:
{
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80008a0:	f7ff fee2 	bl	8000668 <HAL_GetTick>
 80008a4:	4605      	mov	r5, r0
  if(hdma == NULL)
 80008a6:	2c00      	cmp	r4, #0
 80008a8:	d071      	beq.n	800098e <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 80008aa:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 80008ac:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 80008ae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80008b2:	2302      	movs	r3, #2
 80008b4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80008b8:	6813      	ldr	r3, [r2, #0]
 80008ba:	f023 0301 	bic.w	r3, r3, #1
 80008be:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80008c0:	6821      	ldr	r1, [r4, #0]
 80008c2:	680b      	ldr	r3, [r1, #0]
 80008c4:	07d8      	lsls	r0, r3, #31
 80008c6:	d43c      	bmi.n	8000942 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 80008c8:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80008ca:	4d32      	ldr	r5, [pc, #200]	; (8000994 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008cc:	6862      	ldr	r2, [r4, #4]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80008ce:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008d0:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008d2:	69a0      	ldr	r0, [r4, #24]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008d4:	4313      	orrs	r3, r2
 80008d6:	68e2      	ldr	r2, [r4, #12]
 80008d8:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008da:	6922      	ldr	r2, [r4, #16]
 80008dc:	4313      	orrs	r3, r2
 80008de:	6962      	ldr	r2, [r4, #20]
 80008e0:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008e2:	69e2      	ldr	r2, [r4, #28]
 80008e4:	4303      	orrs	r3, r0
 80008e6:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80008e8:	6a22      	ldr	r2, [r4, #32]
 80008ea:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80008ee:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008f0:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80008f4:	bf01      	itttt	eq
 80008f6:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 80008f8:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 80008fa:	4335      	orreq	r5, r6
 80008fc:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008fe:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 8000900:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8000902:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000904:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8000908:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800090c:	d10b      	bne.n	8000926 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 800090e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000910:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8000912:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000914:	b13d      	cbz	r5, 8000926 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000916:	b9f8      	cbnz	r0, 8000958 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8000918:	2a01      	cmp	r2, #1
 800091a:	d02d      	beq.n	8000978 <HAL_DMA_Init+0xdc>
 800091c:	d301      	bcc.n	8000922 <HAL_DMA_Init+0x86>
 800091e:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000920:	d101      	bne.n	8000926 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000922:	01ea      	lsls	r2, r5, #7
 8000924:	d42b      	bmi.n	800097e <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8000926:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000928:	4620      	mov	r0, r4
 800092a:	f7ff ffa1 	bl	8000870 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800092e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000930:	233f      	movs	r3, #63	; 0x3f
 8000932:	4093      	lsls	r3, r2
 8000934:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000936:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000938:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800093a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800093c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000940:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000942:	f7ff fe91 	bl	8000668 <HAL_GetTick>
 8000946:	1b40      	subs	r0, r0, r5
 8000948:	2805      	cmp	r0, #5
 800094a:	d9b9      	bls.n	80008c0 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800094c:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800094e:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000950:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000952:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000956:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000958:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800095c:	d113      	bne.n	8000986 <HAL_DMA_Init+0xea>
    switch (tmp)
 800095e:	2a03      	cmp	r2, #3
 8000960:	d8e1      	bhi.n	8000926 <HAL_DMA_Init+0x8a>
 8000962:	a001      	add	r0, pc, #4	; (adr r0, 8000968 <HAL_DMA_Init+0xcc>)
 8000964:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000968:	0800097f 	.word	0x0800097f
 800096c:	08000923 	.word	0x08000923
 8000970:	0800097f 	.word	0x0800097f
 8000974:	08000979 	.word	0x08000979
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000978:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800097c:	d1d3      	bne.n	8000926 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800097e:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8000980:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000982:	6563      	str	r3, [r4, #84]	; 0x54
 8000984:	e7e5      	b.n	8000952 <HAL_DMA_Init+0xb6>
    switch (tmp)
 8000986:	2a02      	cmp	r2, #2
 8000988:	d9f9      	bls.n	800097e <HAL_DMA_Init+0xe2>
 800098a:	2a03      	cmp	r2, #3
 800098c:	e7c8      	b.n	8000920 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 800098e:	2001      	movs	r0, #1
 8000990:	bd70      	pop	{r4, r5, r6, pc}
 8000992:	bf00      	nop
 8000994:	e010803f 	.word	0xe010803f

08000998 <HAL_DMA_DeInit>:
{
 8000998:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 800099a:	4605      	mov	r5, r0
 800099c:	b320      	cbz	r0, 80009e8 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800099e:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 80009a2:	b2e4      	uxtb	r4, r4
 80009a4:	2c02      	cmp	r4, #2
 80009a6:	d01d      	beq.n	80009e4 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 80009a8:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
 80009aa:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	f022 0201 	bic.w	r2, r2, #1
 80009b2:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80009b4:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 80009b6:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 80009b8:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 80009ba:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 80009bc:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 80009be:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80009c0:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80009c2:	f7ff ff55 	bl	8000870 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009c6:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80009c8:	233f      	movs	r3, #63	; 0x3f
 80009ca:	4093      	lsls	r3, r2
 80009cc:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009ce:	656c      	str	r4, [r5, #84]	; 0x54
  hdma->XferCpltCallback = NULL;
 80009d0:	63ec      	str	r4, [r5, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80009d2:	642c      	str	r4, [r5, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80009d4:	646c      	str	r4, [r5, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80009d6:	64ac      	str	r4, [r5, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80009d8:	64ec      	str	r4, [r5, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80009da:	652c      	str	r4, [r5, #80]	; 0x50
  hdma->State = HAL_DMA_STATE_RESET;
 80009dc:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 80009e0:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
    return HAL_BUSY;
 80009e4:	4620      	mov	r0, r4
}
 80009e6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80009e8:	2001      	movs	r0, #1
 80009ea:	bd38      	pop	{r3, r4, r5, pc}

080009ec <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009ec:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80009f0:	2b02      	cmp	r3, #2
 80009f2:	d003      	beq.n	80009fc <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009f4:	2380      	movs	r3, #128	; 0x80
 80009f6:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80009f8:	2001      	movs	r0, #1
 80009fa:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80009fc:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80009fe:	2305      	movs	r3, #5
 8000a00:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  return HAL_OK;
 8000a04:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8000a06:	6813      	ldr	r3, [r2, #0]
 8000a08:	f023 0301 	bic.w	r3, r3, #1
 8000a0c:	6013      	str	r3, [r2, #0]
}
 8000a0e:	4770      	bx	lr

08000a10 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 8000a10:	2300      	movs	r3, #0
{
 8000a12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8000a14:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a16:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8000a18:	4b59      	ldr	r3, [pc, #356]	; (8000b80 <HAL_DMA_IRQHandler+0x170>)
{
 8000a1a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a1c:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 8000a1e:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a20:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8000a22:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a24:	409a      	lsls	r2, r3
 8000a26:	4216      	tst	r6, r2
 8000a28:	d00c      	beq.n	8000a44 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000a2a:	6801      	ldr	r1, [r0, #0]
 8000a2c:	6808      	ldr	r0, [r1, #0]
 8000a2e:	0740      	lsls	r0, r0, #29
 8000a30:	d508      	bpl.n	8000a44 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000a32:	6808      	ldr	r0, [r1, #0]
 8000a34:	f020 0004 	bic.w	r0, r0, #4
 8000a38:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000a3a:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000a3c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000a3e:	f042 0201 	orr.w	r2, r2, #1
 8000a42:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a44:	2201      	movs	r2, #1
 8000a46:	409a      	lsls	r2, r3
 8000a48:	4216      	tst	r6, r2
 8000a4a:	d008      	beq.n	8000a5e <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000a4c:	6821      	ldr	r1, [r4, #0]
 8000a4e:	6949      	ldr	r1, [r1, #20]
 8000a50:	0609      	lsls	r1, r1, #24
 8000a52:	d504      	bpl.n	8000a5e <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000a54:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000a56:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000a58:	f042 0202 	orr.w	r2, r2, #2
 8000a5c:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a5e:	2204      	movs	r2, #4
 8000a60:	409a      	lsls	r2, r3
 8000a62:	4216      	tst	r6, r2
 8000a64:	d008      	beq.n	8000a78 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000a66:	6821      	ldr	r1, [r4, #0]
 8000a68:	6809      	ldr	r1, [r1, #0]
 8000a6a:	0788      	lsls	r0, r1, #30
 8000a6c:	d504      	bpl.n	8000a78 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000a6e:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000a70:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000a72:	f042 0204 	orr.w	r2, r2, #4
 8000a76:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000a78:	2210      	movs	r2, #16
 8000a7a:	409a      	lsls	r2, r3
 8000a7c:	4216      	tst	r6, r2
 8000a7e:	d010      	beq.n	8000aa2 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000a80:	6823      	ldr	r3, [r4, #0]
 8000a82:	6819      	ldr	r1, [r3, #0]
 8000a84:	0709      	lsls	r1, r1, #28
 8000a86:	d50c      	bpl.n	8000aa2 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000a88:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	0350      	lsls	r0, r2, #13
 8000a8e:	d535      	bpl.n	8000afc <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	0319      	lsls	r1, r3, #12
 8000a94:	d401      	bmi.n	8000a9a <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8000a96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a98:	e000      	b.n	8000a9c <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000a9a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8000a9c:	b10b      	cbz	r3, 8000aa2 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8000a9e:	4620      	mov	r0, r4
 8000aa0:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000aa2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000aa4:	2220      	movs	r2, #32
 8000aa6:	408a      	lsls	r2, r1
 8000aa8:	4216      	tst	r6, r2
 8000aaa:	d038      	beq.n	8000b1e <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000aac:	6823      	ldr	r3, [r4, #0]
 8000aae:	6818      	ldr	r0, [r3, #0]
 8000ab0:	06c6      	lsls	r6, r0, #27
 8000ab2:	d534      	bpl.n	8000b1e <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000ab4:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000ab6:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8000aba:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000abc:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000abe:	d125      	bne.n	8000b0c <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ac0:	f022 0216 	bic.w	r2, r2, #22
 8000ac4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ac6:	695a      	ldr	r2, [r3, #20]
 8000ac8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000acc:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ace:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000ad0:	b90a      	cbnz	r2, 8000ad6 <HAL_DMA_IRQHandler+0xc6>
 8000ad2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000ad4:	b11a      	cbz	r2, 8000ade <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	f022 0208 	bic.w	r2, r2, #8
 8000adc:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ade:	233f      	movs	r3, #63	; 0x3f
 8000ae0:	408b      	lsls	r3, r1
 8000ae2:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000aea:	2301      	movs	r3, #1
 8000aec:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000af0:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8000af2:	b10b      	cbz	r3, 8000af8 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8000af4:	4620      	mov	r0, r4
 8000af6:	4798      	blx	r3
}
 8000af8:	b003      	add	sp, #12
 8000afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	05d2      	lsls	r2, r2, #23
 8000b00:	d4c9      	bmi.n	8000a96 <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	f022 0208 	bic.w	r2, r2, #8
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	e7c4      	b.n	8000a96 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000b0c:	0350      	lsls	r0, r2, #13
 8000b0e:	d528      	bpl.n	8000b62 <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	0319      	lsls	r1, r3, #12
 8000b14:	d432      	bmi.n	8000b7c <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8000b16:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8000b18:	b10b      	cbz	r3, 8000b1e <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8000b1a:	4620      	mov	r0, r4
 8000b1c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000b1e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d0e9      	beq.n	8000af8 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000b24:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b26:	07da      	lsls	r2, r3, #31
 8000b28:	d519      	bpl.n	8000b5e <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000b2a:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8000b2c:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8000b2e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000b32:	6813      	ldr	r3, [r2, #0]
 8000b34:	f023 0301 	bic.w	r3, r3, #1
 8000b38:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8000b3a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000b3e:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8000b42:	9b01      	ldr	r3, [sp, #4]
 8000b44:	3301      	adds	r3, #1
 8000b46:	429f      	cmp	r7, r3
 8000b48:	9301      	str	r3, [sp, #4]
 8000b4a:	d302      	bcc.n	8000b52 <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000b4c:	6813      	ldr	r3, [r2, #0]
 8000b4e:	07db      	lsls	r3, r3, #31
 8000b50:	d4f7      	bmi.n	8000b42 <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 8000b52:	2300      	movs	r3, #0
 8000b54:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000b5e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000b60:	e7c7      	b.n	8000af2 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000b68:	d108      	bne.n	8000b7c <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000b6a:	6819      	ldr	r1, [r3, #0]
 8000b6c:	f021 0110 	bic.w	r1, r1, #16
 8000b70:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000b72:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8000b74:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000b78:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000b7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000b7e:	e7cb      	b.n	8000b18 <HAL_DMA_IRQHandler+0x108>
 8000b80:	20000008 	.word	0x20000008

08000b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b88:	680b      	ldr	r3, [r1, #0]
{
 8000b8a:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000d50 <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b90:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000b92:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b94:	4a6c      	ldr	r2, [pc, #432]	; (8000d48 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000b96:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8000d54 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8000b9a:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b9e:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8000ba0:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ba4:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000ba8:	45b6      	cmp	lr, r6
 8000baa:	f040 80b3 	bne.w	8000d14 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bae:	684c      	ldr	r4, [r1, #4]
 8000bb0:	f024 0710 	bic.w	r7, r4, #16
 8000bb4:	2f02      	cmp	r7, #2
 8000bb6:	d116      	bne.n	8000be6 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8000bb8:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000bbc:	f003 0b07 	and.w	fp, r3, #7
 8000bc0:	f04f 0c0f 	mov.w	ip, #15
 8000bc4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000bc8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000bcc:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000bd0:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000bd4:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000bd8:	690d      	ldr	r5, [r1, #16]
 8000bda:	fa05 f50b 	lsl.w	r5, r5, fp
 8000bde:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000be2:	f8ca 5020 	str.w	r5, [sl, #32]
 8000be6:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000bea:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000bec:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000bf0:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000bf4:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bf8:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000bfa:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000bfe:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c00:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c02:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c06:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 8000c0a:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c0e:	d811      	bhi.n	8000c34 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000c10:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000c12:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8000c16:	68cf      	ldr	r7, [r1, #12]
 8000c18:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000c1c:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000c20:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000c22:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c24:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000c28:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000c2c:	409f      	lsls	r7, r3
 8000c2e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000c32:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000c34:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000c36:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000c38:	688f      	ldr	r7, [r1, #8]
 8000c3a:	fa07 f70a 	lsl.w	r7, r7, sl
 8000c3e:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000c40:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c42:	00e5      	lsls	r5, r4, #3
 8000c44:	d566      	bpl.n	8000d14 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c46:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8000c4a:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c4e:	f003 0e03 	and.w	lr, r3, #3
 8000c52:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c56:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 8000c5a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c5e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c62:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 8000c66:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000c6a:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8000c6e:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8000c72:	9503      	str	r5, [sp, #12]
 8000c74:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c76:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 8000c7a:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c7e:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c82:	4d32      	ldr	r5, [pc, #200]	; (8000d4c <HAL_GPIO_Init+0x1c8>)
 8000c84:	42a8      	cmp	r0, r5
 8000c86:	d04c      	beq.n	8000d22 <HAL_GPIO_Init+0x19e>
 8000c88:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c8c:	42a8      	cmp	r0, r5
 8000c8e:	d04a      	beq.n	8000d26 <HAL_GPIO_Init+0x1a2>
 8000c90:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c94:	42a8      	cmp	r0, r5
 8000c96:	d048      	beq.n	8000d2a <HAL_GPIO_Init+0x1a6>
 8000c98:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c9c:	42a8      	cmp	r0, r5
 8000c9e:	d046      	beq.n	8000d2e <HAL_GPIO_Init+0x1aa>
 8000ca0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ca4:	42a8      	cmp	r0, r5
 8000ca6:	d044      	beq.n	8000d32 <HAL_GPIO_Init+0x1ae>
 8000ca8:	4548      	cmp	r0, r9
 8000caa:	d044      	beq.n	8000d36 <HAL_GPIO_Init+0x1b2>
 8000cac:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000cb0:	42a8      	cmp	r0, r5
 8000cb2:	d042      	beq.n	8000d3a <HAL_GPIO_Init+0x1b6>
 8000cb4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000cb8:	42a8      	cmp	r0, r5
 8000cba:	d040      	beq.n	8000d3e <HAL_GPIO_Init+0x1ba>
 8000cbc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000cc0:	42a8      	cmp	r0, r5
 8000cc2:	d03e      	beq.n	8000d42 <HAL_GPIO_Init+0x1be>
 8000cc4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000cc8:	42a8      	cmp	r0, r5
 8000cca:	bf14      	ite	ne
 8000ccc:	250a      	movne	r5, #10
 8000cce:	2509      	moveq	r5, #9
 8000cd0:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cd4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000cd8:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000cdc:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8000cde:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 8000ce2:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000ce4:	bf0c      	ite	eq
 8000ce6:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000ce8:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cea:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8000cee:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000cf0:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000cf2:	bf0c      	ite	eq
 8000cf4:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000cf6:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cf8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8000cfc:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000cfe:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000d00:	bf0c      	ite	eq
 8000d02:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000d04:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d06:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8000d08:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000d0a:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000d0c:	bf54      	ite	pl
 8000d0e:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000d10:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000d12:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000d14:	3301      	adds	r3, #1
 8000d16:	2b10      	cmp	r3, #16
 8000d18:	f47f af3f 	bne.w	8000b9a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000d1c:	b005      	add	sp, #20
 8000d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d22:	2500      	movs	r5, #0
 8000d24:	e7d4      	b.n	8000cd0 <HAL_GPIO_Init+0x14c>
 8000d26:	2501      	movs	r5, #1
 8000d28:	e7d2      	b.n	8000cd0 <HAL_GPIO_Init+0x14c>
 8000d2a:	2502      	movs	r5, #2
 8000d2c:	e7d0      	b.n	8000cd0 <HAL_GPIO_Init+0x14c>
 8000d2e:	2503      	movs	r5, #3
 8000d30:	e7ce      	b.n	8000cd0 <HAL_GPIO_Init+0x14c>
 8000d32:	2504      	movs	r5, #4
 8000d34:	e7cc      	b.n	8000cd0 <HAL_GPIO_Init+0x14c>
 8000d36:	2505      	movs	r5, #5
 8000d38:	e7ca      	b.n	8000cd0 <HAL_GPIO_Init+0x14c>
 8000d3a:	2506      	movs	r5, #6
 8000d3c:	e7c8      	b.n	8000cd0 <HAL_GPIO_Init+0x14c>
 8000d3e:	2507      	movs	r5, #7
 8000d40:	e7c6      	b.n	8000cd0 <HAL_GPIO_Init+0x14c>
 8000d42:	2508      	movs	r5, #8
 8000d44:	e7c4      	b.n	8000cd0 <HAL_GPIO_Init+0x14c>
 8000d46:	bf00      	nop
 8000d48:	40013c00 	.word	0x40013c00
 8000d4c:	40020000 	.word	0x40020000
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40021400 	.word	0x40021400

08000d58 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000d5c:	2400      	movs	r4, #0
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8000d5e:	4e4c      	ldr	r6, [pc, #304]	; (8000e90 <HAL_GPIO_DeInit+0x138>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8000d60:	f8df a134 	ldr.w	sl, [pc, #308]	; 8000e98 <HAL_GPIO_DeInit+0x140>
 8000d64:	f8df b134 	ldr.w	fp, [pc, #308]	; 8000e9c <HAL_GPIO_DeInit+0x144>
    ioposition = ((uint32_t)0x01) << position;
 8000d68:	f04f 0901 	mov.w	r9, #1
 8000d6c:	fa09 f204 	lsl.w	r2, r9, r4
    if(iocurrent == ioposition)
 8000d70:	ea32 0301 	bics.w	r3, r2, r1
 8000d74:	d174      	bne.n	8000e60 <HAL_GPIO_DeInit+0x108>
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000d76:	2303      	movs	r3, #3
 8000d78:	fa04 f509 	lsl.w	r5, r4, r9
 8000d7c:	6807      	ldr	r7, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000d7e:	f004 0e07 	and.w	lr, r4, #7
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000d82:	fa03 f505 	lsl.w	r5, r3, r5
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000d86:	fa24 fc03 	lsr.w	ip, r4, r3
 8000d8a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d8e:	43d2      	mvns	r2, r2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000d90:	43ed      	mvns	r5, r5
 8000d92:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8000d96:	402f      	ands	r7, r5
 8000d98:	6007      	str	r7, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000d9a:	270f      	movs	r7, #15
 8000d9c:	f8dc 8020 	ldr.w	r8, [ip, #32]
 8000da0:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000da4:	ea28 0e0e 	bic.w	lr, r8, lr
 8000da8:	f8cc e020 	str.w	lr, [ip, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000dac:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8000db0:	ea05 0e0e 	and.w	lr, r5, lr
 8000db4:	f8c0 e008 	str.w	lr, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000db8:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8000dbc:	ea02 0e0e 	and.w	lr, r2, lr
 8000dc0:	f8c0 e004 	str.w	lr, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000dc4:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8000dc8:	ea05 050e 	and.w	r5, r5, lr
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000dcc:	ea04 0e03 	and.w	lr, r4, r3
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8000dd0:	4b30      	ldr	r3, [pc, #192]	; (8000e94 <HAL_GPIO_DeInit+0x13c>)
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000dd2:	60c5      	str	r5, [r0, #12]
 8000dd4:	f024 0503 	bic.w	r5, r4, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000dd8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000de2:	fa07 f70e 	lsl.w	r7, r7, lr
 8000de6:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp = SYSCFG->EXTICR[position >> 2];
 8000dea:	f8d5 c008 	ldr.w	ip, [r5, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000dee:	ea0c 0c07 	and.w	ip, ip, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8000df2:	d03a      	beq.n	8000e6a <HAL_GPIO_DeInit+0x112>
 8000df4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000df8:	4298      	cmp	r0, r3
 8000dfa:	d038      	beq.n	8000e6e <HAL_GPIO_DeInit+0x116>
 8000dfc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e00:	4298      	cmp	r0, r3
 8000e02:	d036      	beq.n	8000e72 <HAL_GPIO_DeInit+0x11a>
 8000e04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e08:	4298      	cmp	r0, r3
 8000e0a:	d034      	beq.n	8000e76 <HAL_GPIO_DeInit+0x11e>
 8000e0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e10:	4298      	cmp	r0, r3
 8000e12:	d032      	beq.n	8000e7a <HAL_GPIO_DeInit+0x122>
 8000e14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e18:	4298      	cmp	r0, r3
 8000e1a:	d030      	beq.n	8000e7e <HAL_GPIO_DeInit+0x126>
 8000e1c:	4550      	cmp	r0, sl
 8000e1e:	d030      	beq.n	8000e82 <HAL_GPIO_DeInit+0x12a>
 8000e20:	4558      	cmp	r0, fp
 8000e22:	d030      	beq.n	8000e86 <HAL_GPIO_DeInit+0x12e>
 8000e24:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8000e28:	4298      	cmp	r0, r3
 8000e2a:	d02e      	beq.n	8000e8a <HAL_GPIO_DeInit+0x132>
 8000e2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e30:	4298      	cmp	r0, r3
 8000e32:	bf0c      	ite	eq
 8000e34:	2309      	moveq	r3, #9
 8000e36:	230a      	movne	r3, #10
 8000e38:	fa03 f30e 	lsl.w	r3, r3, lr
 8000e3c:	459c      	cmp	ip, r3
 8000e3e:	d10f      	bne.n	8000e60 <HAL_GPIO_DeInit+0x108>
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8000e40:	68ab      	ldr	r3, [r5, #8]
 8000e42:	ea23 0707 	bic.w	r7, r3, r7
 8000e46:	60af      	str	r7, [r5, #8]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8000e48:	6833      	ldr	r3, [r6, #0]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	6033      	str	r3, [r6, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8000e4e:	6873      	ldr	r3, [r6, #4]
 8000e50:	4013      	ands	r3, r2
 8000e52:	6073      	str	r3, [r6, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8000e54:	68b3      	ldr	r3, [r6, #8]
 8000e56:	4013      	ands	r3, r2
 8000e58:	60b3      	str	r3, [r6, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8000e5a:	68f3      	ldr	r3, [r6, #12]
 8000e5c:	401a      	ands	r2, r3
 8000e5e:	60f2      	str	r2, [r6, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e60:	3401      	adds	r4, #1
 8000e62:	2c10      	cmp	r4, #16
 8000e64:	d180      	bne.n	8000d68 <HAL_GPIO_DeInit+0x10>
	  }
    }
  }
}
 8000e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e7e4      	b.n	8000e38 <HAL_GPIO_DeInit+0xe0>
 8000e6e:	464b      	mov	r3, r9
 8000e70:	e7e2      	b.n	8000e38 <HAL_GPIO_DeInit+0xe0>
 8000e72:	2302      	movs	r3, #2
 8000e74:	e7e0      	b.n	8000e38 <HAL_GPIO_DeInit+0xe0>
 8000e76:	2303      	movs	r3, #3
 8000e78:	e7de      	b.n	8000e38 <HAL_GPIO_DeInit+0xe0>
 8000e7a:	2304      	movs	r3, #4
 8000e7c:	e7dc      	b.n	8000e38 <HAL_GPIO_DeInit+0xe0>
 8000e7e:	2305      	movs	r3, #5
 8000e80:	e7da      	b.n	8000e38 <HAL_GPIO_DeInit+0xe0>
 8000e82:	2306      	movs	r3, #6
 8000e84:	e7d8      	b.n	8000e38 <HAL_GPIO_DeInit+0xe0>
 8000e86:	2307      	movs	r3, #7
 8000e88:	e7d6      	b.n	8000e38 <HAL_GPIO_DeInit+0xe0>
 8000e8a:	2308      	movs	r3, #8
 8000e8c:	e7d4      	b.n	8000e38 <HAL_GPIO_DeInit+0xe0>
 8000e8e:	bf00      	nop
 8000e90:	40013c00 	.word	0x40013c00
 8000e94:	40020000 	.word	0x40020000
 8000e98:	40021800 	.word	0x40021800
 8000e9c:	40021c00 	.word	0x40021c00

08000ea0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ea0:	b10a      	cbz	r2, 8000ea6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000ea2:	6181      	str	r1, [r0, #24]
 8000ea4:	4770      	bx	lr
 8000ea6:	0409      	lsls	r1, r1, #16
 8000ea8:	e7fb      	b.n	8000ea2 <HAL_GPIO_WritePin+0x2>

08000eaa <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000eaa:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000eac:	4604      	mov	r4, r0
 8000eae:	2800      	cmp	r0, #0
 8000eb0:	d04a      	beq.n	8000f48 <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000eb2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000eb6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000eba:	b91b      	cbnz	r3, 8000ec4 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ebc:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000ec0:	f001 ffb0 	bl	8002e24 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ec4:	2324      	movs	r3, #36	; 0x24
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000ec6:	68e1      	ldr	r1, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ec8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000ecc:	2901      	cmp	r1, #1
  __HAL_I2C_DISABLE(hi2c);
 8000ece:	6823      	ldr	r3, [r4, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	f022 0201 	bic.w	r2, r2, #1
 8000ed6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000ed8:	6862      	ldr	r2, [r4, #4]
 8000eda:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000ede:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000ee0:	689a      	ldr	r2, [r3, #8]
 8000ee2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000eea:	d124      	bne.n	8000f36 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000eec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ef0:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000ef2:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ef4:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000ef6:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000ef8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000efc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f00:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f02:	68da      	ldr	r2, [r3, #12]
 8000f04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f08:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000f0a:	6922      	ldr	r2, [r4, #16]
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	69a1      	ldr	r1, [r4, #24]
 8000f10:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f14:	6a21      	ldr	r1, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000f16:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f18:	69e2      	ldr	r2, [r4, #28]
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	f042 0201 	orr.w	r2, r2, #1
 8000f24:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000f26:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f28:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000f2a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f2e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f30:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 8000f34:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f36:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f3a:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f3c:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f3e:	d1d8      	bne.n	8000ef2 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000f40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	e7d4      	b.n	8000ef2 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8000f48:	2001      	movs	r0, #1
}
 8000f4a:	bd10      	pop	{r4, pc}

08000f4c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f4c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8000f50:	b2d2      	uxtb	r2, r2
 8000f52:	2a20      	cmp	r2, #32
{
 8000f54:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f56:	d11d      	bne.n	8000f94 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f58:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d019      	beq.n	8000f94 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000f60:	2324      	movs	r3, #36	; 0x24
 8000f62:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000f66:	6803      	ldr	r3, [r0, #0]
 8000f68:	681c      	ldr	r4, [r3, #0]
 8000f6a:	f024 0401 	bic.w	r4, r4, #1
 8000f6e:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000f70:	681c      	ldr	r4, [r3, #0]
 8000f72:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8000f76:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000f78:	681c      	ldr	r4, [r3, #0]
 8000f7a:	4321      	orrs	r1, r4
 8000f7c:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000f7e:	6819      	ldr	r1, [r3, #0]
 8000f80:	f041 0101 	orr.w	r1, r1, #1
 8000f84:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f86:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000f88:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000f8c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8000f90:	4618      	mov	r0, r3
 8000f92:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8000f94:	2002      	movs	r0, #2
  }
}
 8000f96:	bd10      	pop	{r4, pc}

08000f98 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000f98:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f9a:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8000f9e:	b2e4      	uxtb	r4, r4
 8000fa0:	2c20      	cmp	r4, #32
 8000fa2:	d11c      	bne.n	8000fde <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fa4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d018      	beq.n	8000fde <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000fac:	2324      	movs	r3, #36	; 0x24
 8000fae:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000fb2:	6803      	ldr	r3, [r0, #0]
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	f022 0201 	bic.w	r2, r2, #1
 8000fba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000fbc:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000fbe:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000fc2:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000fc6:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	f042 0201 	orr.w	r2, r2, #1
 8000fce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000fd0:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000fd2:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000fd6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8000fda:	4618      	mov	r0, r3
 8000fdc:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8000fde:	2002      	movs	r0, #2
  }
}
 8000fe0:	bd10      	pop	{r4, pc}
	...

08000fe4 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe4:	4b19      	ldr	r3, [pc, #100]	; (800104c <HAL_PWREx_EnableOverDrive+0x68>)
{
 8000fe6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000fea:	4c19      	ldr	r4, [pc, #100]	; (8001050 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ff0:	641a      	str	r2, [r3, #64]	; 0x40
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff8:	9301      	str	r3, [sp, #4]
 8000ffa:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000ffc:	6823      	ldr	r3, [r4, #0]
 8000ffe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001002:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001004:	f7ff fb30 	bl	8000668 <HAL_GetTick>
 8001008:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800100a:	6863      	ldr	r3, [r4, #4]
 800100c:	03da      	lsls	r2, r3, #15
 800100e:	d50c      	bpl.n	800102a <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001010:	6823      	ldr	r3, [r4, #0]
 8001012:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001016:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001018:	f7ff fb26 	bl	8000668 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800101c:	4c0c      	ldr	r4, [pc, #48]	; (8001050 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 800101e:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001020:	6863      	ldr	r3, [r4, #4]
 8001022:	039b      	lsls	r3, r3, #14
 8001024:	d50a      	bpl.n	800103c <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8001026:	2000      	movs	r0, #0
 8001028:	e006      	b.n	8001038 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800102a:	f7ff fb1d 	bl	8000668 <HAL_GetTick>
 800102e:	1b40      	subs	r0, r0, r5
 8001030:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001034:	d9e9      	bls.n	800100a <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8001036:	2003      	movs	r0, #3
}
 8001038:	b003      	add	sp, #12
 800103a:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800103c:	f7ff fb14 	bl	8000668 <HAL_GetTick>
 8001040:	1b40      	subs	r0, r0, r5
 8001042:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001046:	d9eb      	bls.n	8001020 <HAL_PWREx_EnableOverDrive+0x3c>
 8001048:	e7f5      	b.n	8001036 <HAL_PWREx_EnableOverDrive+0x52>
 800104a:	bf00      	nop
 800104c:	40023800 	.word	0x40023800
 8001050:	40007000 	.word	0x40007000

08001054 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001054:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001058:	4604      	mov	r4, r0
 800105a:	b918      	cbnz	r0, 8001064 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800105c:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800105e:	b002      	add	sp, #8
 8001060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001064:	6803      	ldr	r3, [r0, #0]
 8001066:	07d8      	lsls	r0, r3, #31
 8001068:	d410      	bmi.n	800108c <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800106a:	6823      	ldr	r3, [r4, #0]
 800106c:	0799      	lsls	r1, r3, #30
 800106e:	d45e      	bmi.n	800112e <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001070:	6823      	ldr	r3, [r4, #0]
 8001072:	0719      	lsls	r1, r3, #28
 8001074:	f100 80a3 	bmi.w	80011be <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001078:	6823      	ldr	r3, [r4, #0]
 800107a:	075a      	lsls	r2, r3, #29
 800107c:	f100 80c4 	bmi.w	8001208 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001080:	69a2      	ldr	r2, [r4, #24]
 8001082:	2a00      	cmp	r2, #0
 8001084:	f040 812e 	bne.w	80012e4 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 8001088:	2000      	movs	r0, #0
 800108a:	e7e8      	b.n	800105e <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800108c:	4b93      	ldr	r3, [pc, #588]	; (80012dc <HAL_RCC_OscConfig+0x288>)
 800108e:	689a      	ldr	r2, [r3, #8]
 8001090:	f002 020c 	and.w	r2, r2, #12
 8001094:	2a04      	cmp	r2, #4
 8001096:	d007      	beq.n	80010a8 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001098:	689a      	ldr	r2, [r3, #8]
 800109a:	f002 020c 	and.w	r2, r2, #12
 800109e:	2a08      	cmp	r2, #8
 80010a0:	d10a      	bne.n	80010b8 <HAL_RCC_OscConfig+0x64>
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	025a      	lsls	r2, r3, #9
 80010a6:	d507      	bpl.n	80010b8 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a8:	4b8c      	ldr	r3, [pc, #560]	; (80012dc <HAL_RCC_OscConfig+0x288>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	039b      	lsls	r3, r3, #14
 80010ae:	d5dc      	bpl.n	800106a <HAL_RCC_OscConfig+0x16>
 80010b0:	6863      	ldr	r3, [r4, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d1d9      	bne.n	800106a <HAL_RCC_OscConfig+0x16>
 80010b6:	e7d1      	b.n	800105c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010b8:	6863      	ldr	r3, [r4, #4]
 80010ba:	4d88      	ldr	r5, [pc, #544]	; (80012dc <HAL_RCC_OscConfig+0x288>)
 80010bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010c0:	d111      	bne.n	80010e6 <HAL_RCC_OscConfig+0x92>
 80010c2:	682b      	ldr	r3, [r5, #0]
 80010c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80010ca:	f7ff facd 	bl	8000668 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ce:	4d83      	ldr	r5, [pc, #524]	; (80012dc <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 80010d0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010d2:	682b      	ldr	r3, [r5, #0]
 80010d4:	039f      	lsls	r7, r3, #14
 80010d6:	d4c8      	bmi.n	800106a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010d8:	f7ff fac6 	bl	8000668 <HAL_GetTick>
 80010dc:	1b80      	subs	r0, r0, r6
 80010de:	2864      	cmp	r0, #100	; 0x64
 80010e0:	d9f7      	bls.n	80010d2 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80010e2:	2003      	movs	r0, #3
 80010e4:	e7bb      	b.n	800105e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010e6:	b99b      	cbnz	r3, 8001110 <HAL_RCC_OscConfig+0xbc>
 80010e8:	682b      	ldr	r3, [r5, #0]
 80010ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010ee:	602b      	str	r3, [r5, #0]
 80010f0:	682b      	ldr	r3, [r5, #0]
 80010f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010f6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80010f8:	f7ff fab6 	bl	8000668 <HAL_GetTick>
 80010fc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010fe:	682b      	ldr	r3, [r5, #0]
 8001100:	0398      	lsls	r0, r3, #14
 8001102:	d5b2      	bpl.n	800106a <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001104:	f7ff fab0 	bl	8000668 <HAL_GetTick>
 8001108:	1b80      	subs	r0, r0, r6
 800110a:	2864      	cmp	r0, #100	; 0x64
 800110c:	d9f7      	bls.n	80010fe <HAL_RCC_OscConfig+0xaa>
 800110e:	e7e8      	b.n	80010e2 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001110:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001114:	682b      	ldr	r3, [r5, #0]
 8001116:	d103      	bne.n	8001120 <HAL_RCC_OscConfig+0xcc>
 8001118:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800111c:	602b      	str	r3, [r5, #0]
 800111e:	e7d0      	b.n	80010c2 <HAL_RCC_OscConfig+0x6e>
 8001120:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001124:	602b      	str	r3, [r5, #0]
 8001126:	682b      	ldr	r3, [r5, #0]
 8001128:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800112c:	e7cc      	b.n	80010c8 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800112e:	4b6b      	ldr	r3, [pc, #428]	; (80012dc <HAL_RCC_OscConfig+0x288>)
 8001130:	689a      	ldr	r2, [r3, #8]
 8001132:	f012 0f0c 	tst.w	r2, #12
 8001136:	d007      	beq.n	8001148 <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001138:	689a      	ldr	r2, [r3, #8]
 800113a:	f002 020c 	and.w	r2, r2, #12
 800113e:	2a08      	cmp	r2, #8
 8001140:	d111      	bne.n	8001166 <HAL_RCC_OscConfig+0x112>
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	0259      	lsls	r1, r3, #9
 8001146:	d40e      	bmi.n	8001166 <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001148:	4b64      	ldr	r3, [pc, #400]	; (80012dc <HAL_RCC_OscConfig+0x288>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	0792      	lsls	r2, r2, #30
 800114e:	d502      	bpl.n	8001156 <HAL_RCC_OscConfig+0x102>
 8001150:	68e2      	ldr	r2, [r4, #12]
 8001152:	2a01      	cmp	r2, #1
 8001154:	d182      	bne.n	800105c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	6921      	ldr	r1, [r4, #16]
 800115a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800115e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001162:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001164:	e784      	b.n	8001070 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001166:	68e3      	ldr	r3, [r4, #12]
 8001168:	4d5c      	ldr	r5, [pc, #368]	; (80012dc <HAL_RCC_OscConfig+0x288>)
 800116a:	b1bb      	cbz	r3, 800119c <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 800116c:	682b      	ldr	r3, [r5, #0]
 800116e:	f043 0301 	orr.w	r3, r3, #1
 8001172:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001174:	f7ff fa78 	bl	8000668 <HAL_GetTick>
 8001178:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800117a:	682b      	ldr	r3, [r5, #0]
 800117c:	079f      	lsls	r7, r3, #30
 800117e:	d507      	bpl.n	8001190 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001180:	682b      	ldr	r3, [r5, #0]
 8001182:	6922      	ldr	r2, [r4, #16]
 8001184:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001188:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800118c:	602b      	str	r3, [r5, #0]
 800118e:	e76f      	b.n	8001070 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001190:	f7ff fa6a 	bl	8000668 <HAL_GetTick>
 8001194:	1b80      	subs	r0, r0, r6
 8001196:	2802      	cmp	r0, #2
 8001198:	d9ef      	bls.n	800117a <HAL_RCC_OscConfig+0x126>
 800119a:	e7a2      	b.n	80010e2 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 800119c:	682b      	ldr	r3, [r5, #0]
 800119e:	f023 0301 	bic.w	r3, r3, #1
 80011a2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80011a4:	f7ff fa60 	bl	8000668 <HAL_GetTick>
 80011a8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011aa:	682b      	ldr	r3, [r5, #0]
 80011ac:	0798      	lsls	r0, r3, #30
 80011ae:	f57f af5f 	bpl.w	8001070 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011b2:	f7ff fa59 	bl	8000668 <HAL_GetTick>
 80011b6:	1b80      	subs	r0, r0, r6
 80011b8:	2802      	cmp	r0, #2
 80011ba:	d9f6      	bls.n	80011aa <HAL_RCC_OscConfig+0x156>
 80011bc:	e791      	b.n	80010e2 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011be:	6963      	ldr	r3, [r4, #20]
 80011c0:	4d46      	ldr	r5, [pc, #280]	; (80012dc <HAL_RCC_OscConfig+0x288>)
 80011c2:	b183      	cbz	r3, 80011e6 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 80011c4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80011cc:	f7ff fa4c 	bl	8000668 <HAL_GetTick>
 80011d0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011d2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80011d4:	079b      	lsls	r3, r3, #30
 80011d6:	f53f af4f 	bmi.w	8001078 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011da:	f7ff fa45 	bl	8000668 <HAL_GetTick>
 80011de:	1b80      	subs	r0, r0, r6
 80011e0:	2802      	cmp	r0, #2
 80011e2:	d9f6      	bls.n	80011d2 <HAL_RCC_OscConfig+0x17e>
 80011e4:	e77d      	b.n	80010e2 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80011e6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80011e8:	f023 0301 	bic.w	r3, r3, #1
 80011ec:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80011ee:	f7ff fa3b 	bl	8000668 <HAL_GetTick>
 80011f2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011f4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80011f6:	079f      	lsls	r7, r3, #30
 80011f8:	f57f af3e 	bpl.w	8001078 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011fc:	f7ff fa34 	bl	8000668 <HAL_GetTick>
 8001200:	1b80      	subs	r0, r0, r6
 8001202:	2802      	cmp	r0, #2
 8001204:	d9f6      	bls.n	80011f4 <HAL_RCC_OscConfig+0x1a0>
 8001206:	e76c      	b.n	80010e2 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001208:	4b34      	ldr	r3, [pc, #208]	; (80012dc <HAL_RCC_OscConfig+0x288>)
 800120a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800120c:	00d0      	lsls	r0, r2, #3
 800120e:	d427      	bmi.n	8001260 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001210:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8001212:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001214:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001218:	641a      	str	r2, [r3, #64]	; 0x40
 800121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001220:	9301      	str	r3, [sp, #4]
 8001222:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001224:	4d2e      	ldr	r5, [pc, #184]	; (80012e0 <HAL_RCC_OscConfig+0x28c>)
 8001226:	682b      	ldr	r3, [r5, #0]
 8001228:	05d9      	lsls	r1, r3, #23
 800122a:	d51b      	bpl.n	8001264 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800122c:	68a3      	ldr	r3, [r4, #8]
 800122e:	4d2b      	ldr	r5, [pc, #172]	; (80012dc <HAL_RCC_OscConfig+0x288>)
 8001230:	2b01      	cmp	r3, #1
 8001232:	d127      	bne.n	8001284 <HAL_RCC_OscConfig+0x230>
 8001234:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800123c:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001240:	f7ff fa12 	bl	8000668 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001244:	4f25      	ldr	r7, [pc, #148]	; (80012dc <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8001246:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001248:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800124a:	079b      	lsls	r3, r3, #30
 800124c:	d53f      	bpl.n	80012ce <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 800124e:	2e00      	cmp	r6, #0
 8001250:	f43f af16 	beq.w	8001080 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001254:	4a21      	ldr	r2, [pc, #132]	; (80012dc <HAL_RCC_OscConfig+0x288>)
 8001256:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001258:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800125c:	6413      	str	r3, [r2, #64]	; 0x40
 800125e:	e70f      	b.n	8001080 <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 8001260:	2600      	movs	r6, #0
 8001262:	e7df      	b.n	8001224 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8001264:	682b      	ldr	r3, [r5, #0]
 8001266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800126a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800126c:	f7ff f9fc 	bl	8000668 <HAL_GetTick>
 8001270:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001272:	682b      	ldr	r3, [r5, #0]
 8001274:	05da      	lsls	r2, r3, #23
 8001276:	d4d9      	bmi.n	800122c <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001278:	f7ff f9f6 	bl	8000668 <HAL_GetTick>
 800127c:	1bc0      	subs	r0, r0, r7
 800127e:	2864      	cmp	r0, #100	; 0x64
 8001280:	d9f7      	bls.n	8001272 <HAL_RCC_OscConfig+0x21e>
 8001282:	e72e      	b.n	80010e2 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001284:	b9ab      	cbnz	r3, 80012b2 <HAL_RCC_OscConfig+0x25e>
 8001286:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001288:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800128c:	f023 0301 	bic.w	r3, r3, #1
 8001290:	672b      	str	r3, [r5, #112]	; 0x70
 8001292:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001294:	f023 0304 	bic.w	r3, r3, #4
 8001298:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800129a:	f7ff f9e5 	bl	8000668 <HAL_GetTick>
 800129e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012a0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80012a2:	0798      	lsls	r0, r3, #30
 80012a4:	d5d3      	bpl.n	800124e <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012a6:	f7ff f9df 	bl	8000668 <HAL_GetTick>
 80012aa:	1bc0      	subs	r0, r0, r7
 80012ac:	4540      	cmp	r0, r8
 80012ae:	d9f7      	bls.n	80012a0 <HAL_RCC_OscConfig+0x24c>
 80012b0:	e717      	b.n	80010e2 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012b2:	2b05      	cmp	r3, #5
 80012b4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80012b6:	d103      	bne.n	80012c0 <HAL_RCC_OscConfig+0x26c>
 80012b8:	f043 0304 	orr.w	r3, r3, #4
 80012bc:	672b      	str	r3, [r5, #112]	; 0x70
 80012be:	e7b9      	b.n	8001234 <HAL_RCC_OscConfig+0x1e0>
 80012c0:	f023 0301 	bic.w	r3, r3, #1
 80012c4:	672b      	str	r3, [r5, #112]	; 0x70
 80012c6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80012c8:	f023 0304 	bic.w	r3, r3, #4
 80012cc:	e7b5      	b.n	800123a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012ce:	f7ff f9cb 	bl	8000668 <HAL_GetTick>
 80012d2:	eba0 0008 	sub.w	r0, r0, r8
 80012d6:	42a8      	cmp	r0, r5
 80012d8:	d9b6      	bls.n	8001248 <HAL_RCC_OscConfig+0x1f4>
 80012da:	e702      	b.n	80010e2 <HAL_RCC_OscConfig+0x8e>
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012e4:	4d24      	ldr	r5, [pc, #144]	; (8001378 <HAL_RCC_OscConfig+0x324>)
 80012e6:	68ab      	ldr	r3, [r5, #8]
 80012e8:	f003 030c 	and.w	r3, r3, #12
 80012ec:	2b08      	cmp	r3, #8
 80012ee:	f43f aeb5 	beq.w	800105c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 80012f2:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012f4:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80012f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012fa:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012fc:	d12f      	bne.n	800135e <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 80012fe:	f7ff f9b3 	bl	8000668 <HAL_GetTick>
 8001302:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001304:	682b      	ldr	r3, [r5, #0]
 8001306:	0199      	lsls	r1, r3, #6
 8001308:	d423      	bmi.n	8001352 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800130a:	6a22      	ldr	r2, [r4, #32]
 800130c:	69e3      	ldr	r3, [r4, #28]
 800130e:	4313      	orrs	r3, r2
 8001310:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001312:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001316:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001318:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800131c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800131e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001322:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001324:	4c14      	ldr	r4, [pc, #80]	; (8001378 <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001326:	0852      	lsrs	r2, r2, #1
 8001328:	3a01      	subs	r2, #1
 800132a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800132e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001330:	682b      	ldr	r3, [r5, #0]
 8001332:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001336:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001338:	f7ff f996 	bl	8000668 <HAL_GetTick>
 800133c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800133e:	6823      	ldr	r3, [r4, #0]
 8001340:	019a      	lsls	r2, r3, #6
 8001342:	f53f aea1 	bmi.w	8001088 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001346:	f7ff f98f 	bl	8000668 <HAL_GetTick>
 800134a:	1b40      	subs	r0, r0, r5
 800134c:	2802      	cmp	r0, #2
 800134e:	d9f6      	bls.n	800133e <HAL_RCC_OscConfig+0x2ea>
 8001350:	e6c7      	b.n	80010e2 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001352:	f7ff f989 	bl	8000668 <HAL_GetTick>
 8001356:	1b80      	subs	r0, r0, r6
 8001358:	2802      	cmp	r0, #2
 800135a:	d9d3      	bls.n	8001304 <HAL_RCC_OscConfig+0x2b0>
 800135c:	e6c1      	b.n	80010e2 <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 800135e:	f7ff f983 	bl	8000668 <HAL_GetTick>
 8001362:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001364:	682b      	ldr	r3, [r5, #0]
 8001366:	019b      	lsls	r3, r3, #6
 8001368:	f57f ae8e 	bpl.w	8001088 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800136c:	f7ff f97c 	bl	8000668 <HAL_GetTick>
 8001370:	1b00      	subs	r0, r0, r4
 8001372:	2802      	cmp	r0, #2
 8001374:	d9f6      	bls.n	8001364 <HAL_RCC_OscConfig+0x310>
 8001376:	e6b4      	b.n	80010e2 <HAL_RCC_OscConfig+0x8e>
 8001378:	40023800 	.word	0x40023800

0800137c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800137c:	4913      	ldr	r1, [pc, #76]	; (80013cc <HAL_RCC_GetSysClockFreq+0x50>)
{
 800137e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001380:	688b      	ldr	r3, [r1, #8]
 8001382:	f003 030c 	and.w	r3, r3, #12
 8001386:	2b04      	cmp	r3, #4
 8001388:	d003      	beq.n	8001392 <HAL_RCC_GetSysClockFreq+0x16>
 800138a:	2b08      	cmp	r3, #8
 800138c:	d003      	beq.n	8001396 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800138e:	4810      	ldr	r0, [pc, #64]	; (80013d0 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001390:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001392:	4810      	ldr	r0, [pc, #64]	; (80013d4 <HAL_RCC_GetSysClockFreq+0x58>)
 8001394:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001396:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001398:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800139a:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800139c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80013a0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013a4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80013a8:	bf1a      	itte	ne
 80013aa:	480a      	ldrne	r0, [pc, #40]	; (80013d4 <HAL_RCC_GetSysClockFreq+0x58>)
 80013ac:	2300      	movne	r3, #0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013ae:	4808      	ldreq	r0, [pc, #32]	; (80013d0 <HAL_RCC_GetSysClockFreq+0x54>)
 80013b0:	fba1 0100 	umull	r0, r1, r1, r0
 80013b4:	f7fe ff94 	bl	80002e0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80013b8:	4b04      	ldr	r3, [pc, #16]	; (80013cc <HAL_RCC_GetSysClockFreq+0x50>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80013c0:	3301      	adds	r3, #1
 80013c2:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80013c4:	fbb0 f0f3 	udiv	r0, r0, r3
 80013c8:	bd08      	pop	{r3, pc}
 80013ca:	bf00      	nop
 80013cc:	40023800 	.word	0x40023800
 80013d0:	00f42400 	.word	0x00f42400
 80013d4:	007a1200 	.word	0x007a1200

080013d8 <HAL_RCC_ClockConfig>:
{
 80013d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013dc:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80013de:	4604      	mov	r4, r0
 80013e0:	b910      	cbnz	r0, 80013e8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80013e2:	2001      	movs	r0, #1
 80013e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013e8:	4a46      	ldr	r2, [pc, #280]	; (8001504 <HAL_RCC_ClockConfig+0x12c>)
 80013ea:	6813      	ldr	r3, [r2, #0]
 80013ec:	f003 030f 	and.w	r3, r3, #15
 80013f0:	428b      	cmp	r3, r1
 80013f2:	d328      	bcc.n	8001446 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013f4:	6821      	ldr	r1, [r4, #0]
 80013f6:	078f      	lsls	r7, r1, #30
 80013f8:	d430      	bmi.n	800145c <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013fa:	07c8      	lsls	r0, r1, #31
 80013fc:	d443      	bmi.n	8001486 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013fe:	4a41      	ldr	r2, [pc, #260]	; (8001504 <HAL_RCC_ClockConfig+0x12c>)
 8001400:	6813      	ldr	r3, [r2, #0]
 8001402:	f003 030f 	and.w	r3, r3, #15
 8001406:	429d      	cmp	r5, r3
 8001408:	d367      	bcc.n	80014da <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800140a:	6822      	ldr	r2, [r4, #0]
 800140c:	0751      	lsls	r1, r2, #29
 800140e:	d470      	bmi.n	80014f2 <HAL_RCC_ClockConfig+0x11a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001410:	0713      	lsls	r3, r2, #28
 8001412:	d507      	bpl.n	8001424 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001414:	4a3c      	ldr	r2, [pc, #240]	; (8001508 <HAL_RCC_ClockConfig+0x130>)
 8001416:	6921      	ldr	r1, [r4, #16]
 8001418:	6893      	ldr	r3, [r2, #8]
 800141a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800141e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001422:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001424:	f7ff ffaa 	bl	800137c <HAL_RCC_GetSysClockFreq>
 8001428:	4b37      	ldr	r3, [pc, #220]	; (8001508 <HAL_RCC_ClockConfig+0x130>)
 800142a:	4a38      	ldr	r2, [pc, #224]	; (800150c <HAL_RCC_ClockConfig+0x134>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001432:	5cd3      	ldrb	r3, [r2, r3]
 8001434:	40d8      	lsrs	r0, r3
 8001436:	4b36      	ldr	r3, [pc, #216]	; (8001510 <HAL_RCC_ClockConfig+0x138>)
 8001438:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800143a:	2000      	movs	r0, #0
 800143c:	f7ff f8d8 	bl	80005f0 <HAL_InitTick>
  return HAL_OK;
 8001440:	2000      	movs	r0, #0
 8001442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001446:	6813      	ldr	r3, [r2, #0]
 8001448:	f023 030f 	bic.w	r3, r3, #15
 800144c:	430b      	orrs	r3, r1
 800144e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001450:	6813      	ldr	r3, [r2, #0]
 8001452:	f003 030f 	and.w	r3, r3, #15
 8001456:	4299      	cmp	r1, r3
 8001458:	d1c3      	bne.n	80013e2 <HAL_RCC_ClockConfig+0xa>
 800145a:	e7cb      	b.n	80013f4 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800145c:	f011 0f04 	tst.w	r1, #4
 8001460:	4b29      	ldr	r3, [pc, #164]	; (8001508 <HAL_RCC_ClockConfig+0x130>)
 8001462:	d003      	beq.n	800146c <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001464:	689a      	ldr	r2, [r3, #8]
 8001466:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800146a:	609a      	str	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800146c:	070e      	lsls	r6, r1, #28
 800146e:	d503      	bpl.n	8001478 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001470:	689a      	ldr	r2, [r3, #8]
 8001472:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001476:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001478:	689a      	ldr	r2, [r3, #8]
 800147a:	68a0      	ldr	r0, [r4, #8]
 800147c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001480:	4302      	orrs	r2, r0
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	e7b9      	b.n	80013fa <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001486:	6861      	ldr	r1, [r4, #4]
 8001488:	4b1f      	ldr	r3, [pc, #124]	; (8001508 <HAL_RCC_ClockConfig+0x130>)
 800148a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800148c:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800148e:	d11c      	bne.n	80014ca <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001490:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001494:	d0a5      	beq.n	80013e2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001496:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001498:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800149c:	4e1a      	ldr	r6, [pc, #104]	; (8001508 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800149e:	f022 0203 	bic.w	r2, r2, #3
 80014a2:	430a      	orrs	r2, r1
 80014a4:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80014a6:	f7ff f8df 	bl	8000668 <HAL_GetTick>
 80014aa:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ac:	68b3      	ldr	r3, [r6, #8]
 80014ae:	6862      	ldr	r2, [r4, #4]
 80014b0:	f003 030c 	and.w	r3, r3, #12
 80014b4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80014b8:	d0a1      	beq.n	80013fe <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014ba:	f7ff f8d5 	bl	8000668 <HAL_GetTick>
 80014be:	1bc0      	subs	r0, r0, r7
 80014c0:	4540      	cmp	r0, r8
 80014c2:	d9f3      	bls.n	80014ac <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 80014c4:	2003      	movs	r0, #3
}
 80014c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014ca:	2902      	cmp	r1, #2
 80014cc:	d102      	bne.n	80014d4 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ce:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80014d2:	e7df      	b.n	8001494 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d4:	f012 0f02 	tst.w	r2, #2
 80014d8:	e7dc      	b.n	8001494 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014da:	6813      	ldr	r3, [r2, #0]
 80014dc:	f023 030f 	bic.w	r3, r3, #15
 80014e0:	432b      	orrs	r3, r5
 80014e2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014e4:	6813      	ldr	r3, [r2, #0]
 80014e6:	f003 030f 	and.w	r3, r3, #15
 80014ea:	429d      	cmp	r5, r3
 80014ec:	f47f af79 	bne.w	80013e2 <HAL_RCC_ClockConfig+0xa>
 80014f0:	e78b      	b.n	800140a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014f2:	4905      	ldr	r1, [pc, #20]	; (8001508 <HAL_RCC_ClockConfig+0x130>)
 80014f4:	68e0      	ldr	r0, [r4, #12]
 80014f6:	688b      	ldr	r3, [r1, #8]
 80014f8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80014fc:	4303      	orrs	r3, r0
 80014fe:	608b      	str	r3, [r1, #8]
 8001500:	e786      	b.n	8001410 <HAL_RCC_ClockConfig+0x38>
 8001502:	bf00      	nop
 8001504:	40023c00 	.word	0x40023c00
 8001508:	40023800 	.word	0x40023800
 800150c:	08004da8 	.word	0x08004da8
 8001510:	20000008 	.word	0x20000008

08001514 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001514:	4b01      	ldr	r3, [pc, #4]	; (800151c <HAL_RCC_GetHCLKFreq+0x8>)
 8001516:	6818      	ldr	r0, [r3, #0]
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	20000008 	.word	0x20000008

08001520 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001520:	4b04      	ldr	r3, [pc, #16]	; (8001534 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001522:	4a05      	ldr	r2, [pc, #20]	; (8001538 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800152a:	5cd3      	ldrb	r3, [r2, r3]
 800152c:	4a03      	ldr	r2, [pc, #12]	; (800153c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800152e:	6810      	ldr	r0, [r2, #0]
}
 8001530:	40d8      	lsrs	r0, r3
 8001532:	4770      	bx	lr
 8001534:	40023800 	.word	0x40023800
 8001538:	08004db8 	.word	0x08004db8
 800153c:	20000008 	.word	0x20000008

08001540 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001540:	4b04      	ldr	r3, [pc, #16]	; (8001554 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001542:	4a05      	ldr	r2, [pc, #20]	; (8001558 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800154a:	5cd3      	ldrb	r3, [r2, r3]
 800154c:	4a03      	ldr	r2, [pc, #12]	; (800155c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800154e:	6810      	ldr	r0, [r2, #0]
}
 8001550:	40d8      	lsrs	r0, r3
 8001552:	4770      	bx	lr
 8001554:	40023800 	.word	0x40023800
 8001558:	08004db8 	.word	0x08004db8
 800155c:	20000008 	.word	0x20000008

08001560 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001560:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001564:	6802      	ldr	r2, [r0, #0]
{
 8001566:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001568:	f012 0601 	ands.w	r6, r2, #1
 800156c:	d00b      	beq.n	8001586 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800156e:	4bba      	ldr	r3, [pc, #744]	; (8001858 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001570:	6899      	ldr	r1, [r3, #8]
 8001572:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8001576:	6099      	str	r1, [r3, #8]
 8001578:	6b46      	ldr	r6, [r0, #52]	; 0x34
 800157a:	6899      	ldr	r1, [r3, #8]
 800157c:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800157e:	fab6 f686 	clz	r6, r6
 8001582:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001584:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001586:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 800158a:	d012      	beq.n	80015b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800158c:	49b2      	ldr	r1, [pc, #712]	; (8001858 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800158e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8001590:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001594:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001598:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 800159c:	bf08      	it	eq
 800159e:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80015a0:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80015a4:	bf16      	itet	ne
 80015a6:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 80015aa:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80015ac:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80015ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80015b2:	02d7      	lsls	r7, r2, #11
 80015b4:	d510      	bpl.n	80015d8 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80015b6:	48a8      	ldr	r0, [pc, #672]	; (8001858 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80015b8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80015ba:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80015be:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80015c2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80015c6:	ea43 0301 	orr.w	r3, r3, r1
 80015ca:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80015ce:	f000 81a9 	beq.w	8001924 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 80015d2:	2900      	cmp	r1, #0
 80015d4:	bf08      	it	eq
 80015d6:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 80015d8:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 80015dc:	bf18      	it	ne
 80015de:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80015e0:	0690      	lsls	r0, r2, #26
 80015e2:	d531      	bpl.n	8001648 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80015e4:	4b9c      	ldr	r3, [pc, #624]	; (8001858 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80015e6:	4f9d      	ldr	r7, [pc, #628]	; (800185c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80015e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015ee:	641a      	str	r2, [r3, #64]	; 0x40
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f6:	9301      	str	r3, [sp, #4]
 80015f8:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001600:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001602:	f7ff f831 	bl	8000668 <HAL_GetTick>
 8001606:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	05d9      	lsls	r1, r3, #23
 800160c:	f140 818c 	bpl.w	8001928 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001610:	4f91      	ldr	r7, [pc, #580]	; (8001858 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001612:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001614:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001618:	f040 8191 	bne.w	800193e <HAL_RCCEx_PeriphCLKConfig+0x3de>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800161c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800161e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001622:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001626:	4a8c      	ldr	r2, [pc, #560]	; (8001858 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001628:	f040 81af 	bne.w	800198a <HAL_RCCEx_PeriphCLKConfig+0x42a>
 800162c:	6891      	ldr	r1, [r2, #8]
 800162e:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8001632:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001636:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800163a:	4301      	orrs	r1, r0
 800163c:	6091      	str	r1, [r2, #8]
 800163e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001642:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001644:	430b      	orrs	r3, r1
 8001646:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001648:	6823      	ldr	r3, [r4, #0]
 800164a:	06df      	lsls	r7, r3, #27
 800164c:	d50c      	bpl.n	8001668 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800164e:	4a82      	ldr	r2, [pc, #520]	; (8001858 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001650:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001654:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8001658:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 800165c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001660:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001662:	4301      	orrs	r1, r0
 8001664:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001668:	0458      	lsls	r0, r3, #17
 800166a:	d508      	bpl.n	800167e <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800166c:	497a      	ldr	r1, [pc, #488]	; (8001858 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800166e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001670:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001674:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001678:	4302      	orrs	r2, r0
 800167a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800167e:	0419      	lsls	r1, r3, #16
 8001680:	d508      	bpl.n	8001694 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001682:	4975      	ldr	r1, [pc, #468]	; (8001858 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001684:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001686:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800168a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800168e:	4302      	orrs	r2, r0
 8001690:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001694:	03da      	lsls	r2, r3, #15
 8001696:	d508      	bpl.n	80016aa <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001698:	496f      	ldr	r1, [pc, #444]	; (8001858 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800169a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800169c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80016a0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80016a4:	4302      	orrs	r2, r0
 80016a6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80016aa:	039f      	lsls	r7, r3, #14
 80016ac:	d508      	bpl.n	80016c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80016ae:	496a      	ldr	r1, [pc, #424]	; (8001858 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80016b0:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80016b2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80016b6:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80016ba:	4302      	orrs	r2, r0
 80016bc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80016c0:	0658      	lsls	r0, r3, #25
 80016c2:	d508      	bpl.n	80016d6 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80016c4:	4964      	ldr	r1, [pc, #400]	; (8001858 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80016c6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80016c8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80016cc:	f022 0203 	bic.w	r2, r2, #3
 80016d0:	4302      	orrs	r2, r0
 80016d2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80016d6:	0619      	lsls	r1, r3, #24
 80016d8:	d508      	bpl.n	80016ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80016da:	495f      	ldr	r1, [pc, #380]	; (8001858 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80016dc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80016de:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80016e2:	f022 020c 	bic.w	r2, r2, #12
 80016e6:	4302      	orrs	r2, r0
 80016e8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80016ec:	05da      	lsls	r2, r3, #23
 80016ee:	d508      	bpl.n	8001702 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80016f0:	4959      	ldr	r1, [pc, #356]	; (8001858 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80016f2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80016f4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80016f8:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80016fc:	4302      	orrs	r2, r0
 80016fe:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001702:	059f      	lsls	r7, r3, #22
 8001704:	d508      	bpl.n	8001718 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001706:	4954      	ldr	r1, [pc, #336]	; (8001858 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001708:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800170a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800170e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001712:	4302      	orrs	r2, r0
 8001714:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001718:	0558      	lsls	r0, r3, #21
 800171a:	d508      	bpl.n	800172e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800171c:	494e      	ldr	r1, [pc, #312]	; (8001858 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800171e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001720:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001724:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001728:	4302      	orrs	r2, r0
 800172a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800172e:	0519      	lsls	r1, r3, #20
 8001730:	d508      	bpl.n	8001744 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001732:	4949      	ldr	r1, [pc, #292]	; (8001858 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001734:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001736:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800173a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800173e:	4302      	orrs	r2, r0
 8001740:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001744:	04da      	lsls	r2, r3, #19
 8001746:	d508      	bpl.n	800175a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001748:	4943      	ldr	r1, [pc, #268]	; (8001858 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800174a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800174c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001750:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001754:	4302      	orrs	r2, r0
 8001756:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800175a:	049f      	lsls	r7, r3, #18
 800175c:	d508      	bpl.n	8001770 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800175e:	493e      	ldr	r1, [pc, #248]	; (8001858 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001760:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001762:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001766:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800176a:	4302      	orrs	r2, r0
 800176c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001770:	0258      	lsls	r0, r3, #9
 8001772:	d508      	bpl.n	8001786 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001774:	4938      	ldr	r1, [pc, #224]	; (8001858 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001776:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8001778:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800177c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001780:	4302      	orrs	r2, r0
 8001782:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001786:	0299      	lsls	r1, r3, #10
 8001788:	d50c      	bpl.n	80017a4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800178a:	4833      	ldr	r0, [pc, #204]	; (8001858 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800178c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800178e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8001792:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001796:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 800179a:	bf08      	it	eq
 800179c:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800179e:	430a      	orrs	r2, r1
 80017a0:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 80017a4:	f013 0f08 	tst.w	r3, #8
 80017a8:	bf18      	it	ne
 80017aa:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80017ac:	035a      	lsls	r2, r3, #13
 80017ae:	d508      	bpl.n	80017c2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80017b0:	4929      	ldr	r1, [pc, #164]	; (8001858 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80017b2:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80017b4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80017b8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80017bc:	4302      	orrs	r2, r0
 80017be:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80017c2:	021f      	lsls	r7, r3, #8
 80017c4:	d509      	bpl.n	80017da <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80017c6:	4924      	ldr	r1, [pc, #144]	; (8001858 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80017c8:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80017cc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80017d0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80017d4:	4302      	orrs	r2, r0
 80017d6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80017da:	0158      	lsls	r0, r3, #5
 80017dc:	d509      	bpl.n	80017f2 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80017de:	491e      	ldr	r1, [pc, #120]	; (8001858 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80017e0:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80017e4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80017e8:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80017ec:	4302      	orrs	r2, r0
 80017ee:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80017f2:	0119      	lsls	r1, r3, #4
 80017f4:	d509      	bpl.n	800180a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80017f6:	4918      	ldr	r1, [pc, #96]	; (8001858 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80017f8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80017fc:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001800:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8001804:	4302      	orrs	r2, r0
 8001806:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800180a:	00da      	lsls	r2, r3, #3
 800180c:	d509      	bpl.n	8001822 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800180e:	4912      	ldr	r1, [pc, #72]	; (8001858 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001810:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8001814:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001818:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800181c:	4302      	orrs	r2, r0
 800181e:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001822:	2e01      	cmp	r6, #1
 8001824:	f000 80b5 	beq.w	8001992 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8001828:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800182c:	f000 80b1 	beq.w	8001992 <HAL_RCCEx_PeriphCLKConfig+0x432>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001830:	2d01      	cmp	r5, #1
 8001832:	d175      	bne.n	8001920 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001834:	4d08      	ldr	r5, [pc, #32]	; (8001858 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001836:	682b      	ldr	r3, [r5, #0]
 8001838:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800183c:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800183e:	f7fe ff13 	bl	8000668 <HAL_GetTick>
 8001842:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001844:	682b      	ldr	r3, [r5, #0]
 8001846:	009f      	lsls	r7, r3, #2
 8001848:	f100 8127 	bmi.w	8001a9a <HAL_RCCEx_PeriphCLKConfig+0x53a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800184c:	6821      	ldr	r1, [r4, #0]
 800184e:	030e      	lsls	r6, r1, #12
 8001850:	d506      	bpl.n	8001860 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8001852:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001854:	b143      	cbz	r3, 8001868 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8001856:	e003      	b.n	8001860 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8001858:	40023800 	.word	0x40023800
 800185c:	40007000 	.word	0x40007000
 8001860:	02cd      	lsls	r5, r1, #11
 8001862:	d51d      	bpl.n	80018a0 <HAL_RCCEx_PeriphCLKConfig+0x340>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001864:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001866:	b9db      	cbnz	r3, 80018a0 <HAL_RCCEx_PeriphCLKConfig+0x340>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001868:	4a93      	ldr	r2, [pc, #588]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800186a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800186e:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001872:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001876:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800187a:	4303      	orrs	r3, r0
 800187c:	6960      	ldr	r0, [r4, #20]
 800187e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001882:	69a0      	ldr	r0, [r4, #24]
 8001884:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001888:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800188c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001890:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001892:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001896:	3801      	subs	r0, #1
 8001898:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800189c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80018a0:	0288      	lsls	r0, r1, #10
 80018a2:	d515      	bpl.n	80018d0 <HAL_RCCEx_PeriphCLKConfig+0x370>
 80018a4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80018a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80018aa:	d111      	bne.n	80018d0 <HAL_RCCEx_PeriphCLKConfig+0x370>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80018ac:	4a82      	ldr	r2, [pc, #520]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80018ae:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80018b2:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80018b6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80018ba:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80018be:	4303      	orrs	r3, r0
 80018c0:	6960      	ldr	r0, [r4, #20]
 80018c2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80018c6:	6a20      	ldr	r0, [r4, #32]
 80018c8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80018cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80018d0:	070a      	lsls	r2, r1, #28
 80018d2:	d519      	bpl.n	8001908 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80018d4:	4978      	ldr	r1, [pc, #480]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80018d6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80018da:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80018de:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 80018e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018e6:	4313      	orrs	r3, r2
 80018e8:	6962      	ldr	r2, [r4, #20]
 80018ea:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80018ee:	69e2      	ldr	r2, [r4, #28]
 80018f0:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80018f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80018f8:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 80018fc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80018fe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001902:	4313      	orrs	r3, r2
 8001904:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001908:	4c6b      	ldr	r4, [pc, #428]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800190a:	6823      	ldr	r3, [r4, #0]
 800190c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001910:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001912:	f7fe fea9 	bl	8000668 <HAL_GetTick>
 8001916:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001918:	6823      	ldr	r3, [r4, #0]
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	f140 80c4 	bpl.w	8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x548>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001920:	2000      	movs	r0, #0
 8001922:	e009      	b.n	8001938 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      plli2sused = 1;
 8001924:	2601      	movs	r6, #1
 8001926:	e657      	b.n	80015d8 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001928:	f7fe fe9e 	bl	8000668 <HAL_GetTick>
 800192c:	eba0 0008 	sub.w	r0, r0, r8
 8001930:	2864      	cmp	r0, #100	; 0x64
 8001932:	f67f ae69 	bls.w	8001608 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8001936:	2003      	movs	r0, #3
}
 8001938:	b003      	add	sp, #12
 800193a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800193e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001940:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001944:	4293      	cmp	r3, r2
 8001946:	f43f ae69 	beq.w	800161c <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800194a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 800194c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800194e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001952:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001956:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001958:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800195a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800195e:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8001960:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001962:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001964:	07da      	lsls	r2, r3, #31
 8001966:	f57f ae59 	bpl.w	800161c <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 800196a:	f7fe fe7d 	bl	8000668 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800196e:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001972:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001974:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001976:	079b      	lsls	r3, r3, #30
 8001978:	f53f ae50 	bmi.w	800161c <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800197c:	f7fe fe74 	bl	8000668 <HAL_GetTick>
 8001980:	eba0 0008 	sub.w	r0, r0, r8
 8001984:	4548      	cmp	r0, r9
 8001986:	d9f5      	bls.n	8001974 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8001988:	e7d5      	b.n	8001936 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800198a:	6891      	ldr	r1, [r2, #8]
 800198c:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001990:	e654      	b.n	800163c <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8001992:	4e49      	ldr	r6, [pc, #292]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001994:	6833      	ldr	r3, [r6, #0]
 8001996:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800199a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800199c:	f7fe fe64 	bl	8000668 <HAL_GetTick>
 80019a0:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80019a2:	6833      	ldr	r3, [r6, #0]
 80019a4:	011b      	lsls	r3, r3, #4
 80019a6:	d472      	bmi.n	8001a8e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80019a8:	6822      	ldr	r2, [r4, #0]
 80019aa:	07d7      	lsls	r7, r2, #31
 80019ac:	d512      	bpl.n	80019d4 <HAL_RCCEx_PeriphCLKConfig+0x474>
 80019ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80019b0:	b983      	cbnz	r3, 80019d4 <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80019b2:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80019b6:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80019ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019be:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80019c2:	430b      	orrs	r3, r1
 80019c4:	6861      	ldr	r1, [r4, #4]
 80019c6:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80019ca:	68a1      	ldr	r1, [r4, #8]
 80019cc:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80019d0:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80019d4:	0316      	lsls	r6, r2, #12
 80019d6:	d503      	bpl.n	80019e0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80019d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80019da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019de:	d005      	beq.n	80019ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80019e0:	02d0      	lsls	r0, r2, #11
 80019e2:	d51e      	bpl.n	8001a22 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80019e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019ea:	d11a      	bne.n	8001a22 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80019ec:	4932      	ldr	r1, [pc, #200]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80019ee:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80019f2:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80019f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019fa:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80019fe:	4303      	orrs	r3, r0
 8001a00:	6860      	ldr	r0, [r4, #4]
 8001a02:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001a06:	68e0      	ldr	r0, [r4, #12]
 8001a08:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001a0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001a10:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8001a14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a16:	f020 001f 	bic.w	r0, r0, #31
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	4303      	orrs	r3, r0
 8001a1e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001a22:	01d1      	lsls	r1, r2, #7
 8001a24:	d511      	bpl.n	8001a4a <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001a26:	4924      	ldr	r1, [pc, #144]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001a28:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001a2c:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001a30:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001a34:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001a38:	4303      	orrs	r3, r0
 8001a3a:	6860      	ldr	r0, [r4, #4]
 8001a3c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001a40:	6920      	ldr	r0, [r4, #16]
 8001a42:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001a46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001a4a:	0192      	lsls	r2, r2, #6
 8001a4c:	d50d      	bpl.n	8001a6a <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001a4e:	6923      	ldr	r3, [r4, #16]
 8001a50:	6862      	ldr	r2, [r4, #4]
 8001a52:	041b      	lsls	r3, r3, #16
 8001a54:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001a58:	68e2      	ldr	r2, [r4, #12]
 8001a5a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001a5e:	68a2      	ldr	r2, [r4, #8]
 8001a60:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001a64:	4a14      	ldr	r2, [pc, #80]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001a66:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001a6a:	4e13      	ldr	r6, [pc, #76]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001a6c:	6833      	ldr	r3, [r6, #0]
 8001a6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a72:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001a74:	f7fe fdf8 	bl	8000668 <HAL_GetTick>
 8001a78:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001a7a:	6833      	ldr	r3, [r6, #0]
 8001a7c:	011b      	lsls	r3, r3, #4
 8001a7e:	f53f aed7 	bmi.w	8001830 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001a82:	f7fe fdf1 	bl	8000668 <HAL_GetTick>
 8001a86:	1bc0      	subs	r0, r0, r7
 8001a88:	2864      	cmp	r0, #100	; 0x64
 8001a8a:	d9f6      	bls.n	8001a7a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8001a8c:	e753      	b.n	8001936 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001a8e:	f7fe fdeb 	bl	8000668 <HAL_GetTick>
 8001a92:	1bc0      	subs	r0, r0, r7
 8001a94:	2864      	cmp	r0, #100	; 0x64
 8001a96:	d984      	bls.n	80019a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8001a98:	e74d      	b.n	8001936 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001a9a:	f7fe fde5 	bl	8000668 <HAL_GetTick>
 8001a9e:	1b80      	subs	r0, r0, r6
 8001aa0:	2864      	cmp	r0, #100	; 0x64
 8001aa2:	f67f aecf 	bls.w	8001844 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8001aa6:	e746      	b.n	8001936 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001aa8:	f7fe fdde 	bl	8000668 <HAL_GetTick>
 8001aac:	1b40      	subs	r0, r0, r5
 8001aae:	2864      	cmp	r0, #100	; 0x64
 8001ab0:	f67f af32 	bls.w	8001918 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8001ab4:	e73f      	b.n	8001936 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
 8001ab6:	bf00      	nop
 8001ab8:	40023800 	.word	0x40023800

08001abc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8001abc:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0; 
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001abe:	6803      	ldr	r3, [r0, #0]
{
 8001ac0:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001ac2:	68da      	ldr	r2, [r3, #12]
 8001ac4:	0652      	lsls	r2, r2, #25
 8001ac6:	d501      	bpl.n	8001acc <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8001ac8:	2000      	movs	r0, #0
 8001aca:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001acc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ad0:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001ad2:	f7fe fdc9 	bl	8000668 <HAL_GetTick>
 8001ad6:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001ad8:	6823      	ldr	r3, [r4, #0]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	065b      	lsls	r3, r3, #25
 8001ade:	d4f3      	bmi.n	8001ac8 <RTC_EnterInitMode+0xc>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001ae0:	f7fe fdc2 	bl	8000668 <HAL_GetTick>
 8001ae4:	1b40      	subs	r0, r0, r5
 8001ae6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001aea:	d9f5      	bls.n	8001ad8 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8001aec:	2003      	movs	r0, #3
}
 8001aee:	bd38      	pop	{r3, r4, r5, pc}

08001af0 <HAL_RTC_Init>:
{
 8001af0:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8001af2:	4604      	mov	r4, r0
 8001af4:	b1b0      	cbz	r0, 8001b24 <HAL_RTC_Init+0x34>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001af6:	7f43      	ldrb	r3, [r0, #29]
 8001af8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001afc:	b913      	cbnz	r3, 8001b04 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8001afe:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8001b00:	f001 faea 	bl	80030d8 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001b04:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001b06:	22ca      	movs	r2, #202	; 0xca
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001b08:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001b0a:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001b0c:	6823      	ldr	r3, [r4, #0]
 8001b0e:	625a      	str	r2, [r3, #36]	; 0x24
 8001b10:	2253      	movs	r2, #83	; 0x53
 8001b12:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001b14:	f7ff ffd2 	bl	8001abc <RTC_EnterInitMode>
 8001b18:	6823      	ldr	r3, [r4, #0]
 8001b1a:	b128      	cbz	r0, 8001b28 <HAL_RTC_Init+0x38>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001b1c:	22ff      	movs	r2, #255	; 0xff
 8001b1e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001b20:	2304      	movs	r3, #4
 8001b22:	7763      	strb	r3, [r4, #29]
     return HAL_ERROR;
 8001b24:	2001      	movs	r0, #1
}
 8001b26:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001b28:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001b2a:	6925      	ldr	r5, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001b2c:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8001b30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b34:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001b36:	6862      	ldr	r2, [r4, #4]
 8001b38:	6899      	ldr	r1, [r3, #8]
 8001b3a:	432a      	orrs	r2, r5
 8001b3c:	6965      	ldr	r5, [r4, #20]
 8001b3e:	432a      	orrs	r2, r5
 8001b40:	430a      	orrs	r2, r1
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8001b42:	68a1      	ldr	r1, [r4, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001b44:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001b46:	68e2      	ldr	r2, [r4, #12]
 8001b48:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8001b4a:	691a      	ldr	r2, [r3, #16]
 8001b4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType); 
 8001b50:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8001b52:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8001b54:	68da      	ldr	r2, [r3, #12]
 8001b56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b5a:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8001b5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b5e:	f022 0208 	bic.w	r2, r2, #8
 8001b62:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType); 
 8001b64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b66:	430a      	orrs	r2, r1
 8001b68:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001b6a:	22ff      	movs	r2, #255	; 0xff
 8001b6c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 8001b72:	bd38      	pop	{r3, r4, r5, pc}

08001b74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b74:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001b76:	4604      	mov	r4, r0
 8001b78:	2800      	cmp	r0, #0
 8001b7a:	d04e      	beq.n	8001c1a <HAL_SPI_Init+0xa6>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b80:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8001b84:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001b88:	b91b      	cbnz	r3, 8001b92 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001b8a:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001b8e:	f001 fb05 	bl	800319c <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001b92:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001b94:	6821      	ldr	r1, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b96:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001b98:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8001b9c:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b9e:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8001ba2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ba6:	600b      	str	r3, [r1, #0]
 8001ba8:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001bac:	d932      	bls.n	8001c14 <HAL_SPI_Init+0xa0>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001bae:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001bb0:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bb4:	bf18      	it	ne
 8001bb6:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001bb8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001bba:	b92b      	cbnz	r3, 8001bc8 <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001bbc:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001bc0:	bf8c      	ite	hi
 8001bc2:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001bc4:	2301      	movls	r3, #1
 8001bc6:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001bc8:	68a6      	ldr	r6, [r4, #8]
 8001bca:	6863      	ldr	r3, [r4, #4]
 8001bcc:	69a5      	ldr	r5, [r4, #24]
 8001bce:	4333      	orrs	r3, r6
 8001bd0:	6926      	ldr	r6, [r4, #16]
 8001bd2:	4333      	orrs	r3, r6
 8001bd4:	6966      	ldr	r6, [r4, #20]
 8001bd6:	4333      	orrs	r3, r6
 8001bd8:	69e6      	ldr	r6, [r4, #28]
 8001bda:	4333      	orrs	r3, r6
 8001bdc:	6a26      	ldr	r6, [r4, #32]
 8001bde:	4333      	orrs	r3, r6
 8001be0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001be2:	4333      	orrs	r3, r6
 8001be4:	f405 7600 	and.w	r6, r5, #512	; 0x200
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001be8:	0c2d      	lsrs	r5, r5, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001bea:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001bec:	f005 0504 	and.w	r5, r5, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001bf0:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001bf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	432a      	orrs	r2, r5
 8001bfc:	4302      	orrs	r2, r0
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001bfe:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001c00:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c02:	69cb      	ldr	r3, [r1, #28]
 8001c04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001c08:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8001c0a:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c0c:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001c0e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 8001c12:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001c14:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001c18:	e7cc      	b.n	8001bb4 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8001c1a:	2001      	movs	r0, #1
}
 8001c1c:	bd70      	pop	{r4, r5, r6, pc}

08001c1e <TIM_TI1_ConfigInputStage>:
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001c1e:	6a03      	ldr	r3, [r0, #32]
{
 8001c20:	b510      	push	{r4, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c22:	6a04      	ldr	r4, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001c24:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c28:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 8001c2c:	430b      	orrs	r3, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c2e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001c30:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c32:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8001c36:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001c3a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001c3c:	6203      	str	r3, [r0, #32]
 8001c3e:	bd10      	pop	{r4, pc}

08001c40 <TIM_TI2_ConfigInputStage>:
{
uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c40:	6a03      	ldr	r3, [r0, #32]
 8001c42:	f023 0310 	bic.w	r3, r3, #16
{
 8001c46:	b510      	push	{r4, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c48:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c4a:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001c4c:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001c4e:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001c52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12);
 8001c56:	ea44 3202 	orr.w	r2, r4, r2, lsl #12
  tmpccer |= (TIM_ICPolarity << 4);
 8001c5a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001c5e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001c60:	6203      	str	r3, [r0, #32]
 8001c62:	bd10      	pop	{r4, pc}

08001c64 <HAL_TIM_PeriodElapsedCallback>:
 8001c64:	4770      	bx	lr

08001c66 <HAL_TIM_OC_DelayElapsedCallback>:
 8001c66:	4770      	bx	lr

08001c68 <HAL_TIM_IC_CaptureCallback>:
 8001c68:	4770      	bx	lr

08001c6a <HAL_TIM_PWM_PulseFinishedCallback>:
 8001c6a:	4770      	bx	lr

08001c6c <HAL_TIM_TriggerCallback>:
 8001c6c:	4770      	bx	lr

08001c6e <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c6e:	6803      	ldr	r3, [r0, #0]
 8001c70:	691a      	ldr	r2, [r3, #16]
 8001c72:	0791      	lsls	r1, r2, #30
{
 8001c74:	b510      	push	{r4, lr}
 8001c76:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c78:	d50f      	bpl.n	8001c9a <HAL_TIM_IRQHandler+0x2c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001c7a:	68da      	ldr	r2, [r3, #12]
 8001c7c:	0792      	lsls	r2, r2, #30
 8001c7e:	d50c      	bpl.n	8001c9a <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c80:	f06f 0202 	mvn.w	r2, #2
 8001c84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c86:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8001c88:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c8a:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8001c8c:	0799      	lsls	r1, r3, #30
 8001c8e:	f000 8085 	beq.w	8001d9c <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8001c92:	f7ff ffe9 	bl	8001c68 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c96:	2300      	movs	r3, #0
 8001c98:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c9a:	6823      	ldr	r3, [r4, #0]
 8001c9c:	691a      	ldr	r2, [r3, #16]
 8001c9e:	0752      	lsls	r2, r2, #29
 8001ca0:	d510      	bpl.n	8001cc4 <HAL_TIM_IRQHandler+0x56>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001ca2:	68da      	ldr	r2, [r3, #12]
 8001ca4:	0750      	lsls	r0, r2, #29
 8001ca6:	d50d      	bpl.n	8001cc4 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ca8:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8001cac:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cb0:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8001cb2:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cb4:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8001cb6:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001cba:	d075      	beq.n	8001da8 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001cbc:	f7ff ffd4 	bl	8001c68 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cc4:	6823      	ldr	r3, [r4, #0]
 8001cc6:	691a      	ldr	r2, [r3, #16]
 8001cc8:	0711      	lsls	r1, r2, #28
 8001cca:	d50f      	bpl.n	8001cec <HAL_TIM_IRQHandler+0x7e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001ccc:	68da      	ldr	r2, [r3, #12]
 8001cce:	0712      	lsls	r2, r2, #28
 8001cd0:	d50c      	bpl.n	8001cec <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cd2:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8001cd6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cda:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8001cdc:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cde:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8001ce0:	079b      	lsls	r3, r3, #30
 8001ce2:	d067      	beq.n	8001db4 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8001ce4:	f7ff ffc0 	bl	8001c68 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001cec:	6823      	ldr	r3, [r4, #0]
 8001cee:	691a      	ldr	r2, [r3, #16]
 8001cf0:	06d0      	lsls	r0, r2, #27
 8001cf2:	d510      	bpl.n	8001d16 <HAL_TIM_IRQHandler+0xa8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001cf4:	68da      	ldr	r2, [r3, #12]
 8001cf6:	06d1      	lsls	r1, r2, #27
 8001cf8:	d50d      	bpl.n	8001d16 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001cfa:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 8001cfe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d02:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8001d04:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d06:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8001d08:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001d0c:	d058      	beq.n	8001dc0 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8001d0e:	f7ff ffab 	bl	8001c68 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d12:	2300      	movs	r3, #0
 8001d14:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d16:	6823      	ldr	r3, [r4, #0]
 8001d18:	691a      	ldr	r2, [r3, #16]
 8001d1a:	07d2      	lsls	r2, r2, #31
 8001d1c:	d508      	bpl.n	8001d30 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001d1e:	68da      	ldr	r2, [r3, #12]
 8001d20:	07d0      	lsls	r0, r2, #31
 8001d22:	d505      	bpl.n	8001d30 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d24:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d28:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d2a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d2c:	f7ff ff9a 	bl	8001c64 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d30:	6823      	ldr	r3, [r4, #0]
 8001d32:	691a      	ldr	r2, [r3, #16]
 8001d34:	0611      	lsls	r1, r2, #24
 8001d36:	d508      	bpl.n	8001d4a <HAL_TIM_IRQHandler+0xdc>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001d38:	68da      	ldr	r2, [r3, #12]
 8001d3a:	0612      	lsls	r2, r2, #24
 8001d3c:	d505      	bpl.n	8001d4a <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d3e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001d42:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d44:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001d46:	f000 f984 	bl	8002052 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001d4a:	6823      	ldr	r3, [r4, #0]
 8001d4c:	691a      	ldr	r2, [r3, #16]
 8001d4e:	05d0      	lsls	r0, r2, #23
 8001d50:	d508      	bpl.n	8001d64 <HAL_TIM_IRQHandler+0xf6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001d52:	68da      	ldr	r2, [r3, #12]
 8001d54:	0611      	lsls	r1, r2, #24
 8001d56:	d505      	bpl.n	8001d64 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d58:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001d5c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d5e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001d60:	f000 f977 	bl	8002052 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d64:	6823      	ldr	r3, [r4, #0]
 8001d66:	691a      	ldr	r2, [r3, #16]
 8001d68:	0652      	lsls	r2, r2, #25
 8001d6a:	d508      	bpl.n	8001d7e <HAL_TIM_IRQHandler+0x110>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001d6c:	68da      	ldr	r2, [r3, #12]
 8001d6e:	0650      	lsls	r0, r2, #25
 8001d70:	d505      	bpl.n	8001d7e <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d72:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8001d76:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d78:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001d7a:	f7ff ff77 	bl	8001c6c <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d7e:	6823      	ldr	r3, [r4, #0]
 8001d80:	691a      	ldr	r2, [r3, #16]
 8001d82:	0691      	lsls	r1, r2, #26
 8001d84:	d522      	bpl.n	8001dcc <HAL_TIM_IRQHandler+0x15e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001d86:	68da      	ldr	r2, [r3, #12]
 8001d88:	0692      	lsls	r2, r2, #26
 8001d8a:	d51f      	bpl.n	8001dcc <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d8c:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001d90:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d92:	611a      	str	r2, [r3, #16]
}
 8001d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8001d98:	f000 b95a 	b.w	8002050 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d9c:	f7ff ff63 	bl	8001c66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da0:	4620      	mov	r0, r4
 8001da2:	f7ff ff62 	bl	8001c6a <HAL_TIM_PWM_PulseFinishedCallback>
 8001da6:	e776      	b.n	8001c96 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001da8:	f7ff ff5d 	bl	8001c66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dac:	4620      	mov	r0, r4
 8001dae:	f7ff ff5c 	bl	8001c6a <HAL_TIM_PWM_PulseFinishedCallback>
 8001db2:	e785      	b.n	8001cc0 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001db4:	f7ff ff57 	bl	8001c66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db8:	4620      	mov	r0, r4
 8001dba:	f7ff ff56 	bl	8001c6a <HAL_TIM_PWM_PulseFinishedCallback>
 8001dbe:	e793      	b.n	8001ce8 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dc0:	f7ff ff51 	bl	8001c66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc4:	4620      	mov	r0, r4
 8001dc6:	f7ff ff50 	bl	8001c6a <HAL_TIM_PWM_PulseFinishedCallback>
 8001dca:	e7a2      	b.n	8001d12 <HAL_TIM_IRQHandler+0xa4>
 8001dcc:	bd10      	pop	{r4, pc}
	...

08001dd0 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001dd0:	4a30      	ldr	r2, [pc, #192]	; (8001e94 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8001dd2:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001dd4:	4290      	cmp	r0, r2
 8001dd6:	d012      	beq.n	8001dfe <TIM_Base_SetConfig+0x2e>
 8001dd8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001ddc:	d00f      	beq.n	8001dfe <TIM_Base_SetConfig+0x2e>
 8001dde:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001de2:	4290      	cmp	r0, r2
 8001de4:	d00b      	beq.n	8001dfe <TIM_Base_SetConfig+0x2e>
 8001de6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001dea:	4290      	cmp	r0, r2
 8001dec:	d007      	beq.n	8001dfe <TIM_Base_SetConfig+0x2e>
 8001dee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001df2:	4290      	cmp	r0, r2
 8001df4:	d003      	beq.n	8001dfe <TIM_Base_SetConfig+0x2e>
 8001df6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001dfa:	4290      	cmp	r0, r2
 8001dfc:	d11d      	bne.n	8001e3a <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8001dfe:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001e04:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001e06:	4a23      	ldr	r2, [pc, #140]	; (8001e94 <TIM_Base_SetConfig+0xc4>)
 8001e08:	4290      	cmp	r0, r2
 8001e0a:	d104      	bne.n	8001e16 <TIM_Base_SetConfig+0x46>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e10:	68ca      	ldr	r2, [r1, #12]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	e028      	b.n	8001e68 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001e16:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001e1a:	d0f7      	beq.n	8001e0c <TIM_Base_SetConfig+0x3c>
 8001e1c:	4a1e      	ldr	r2, [pc, #120]	; (8001e98 <TIM_Base_SetConfig+0xc8>)
 8001e1e:	4290      	cmp	r0, r2
 8001e20:	d0f4      	beq.n	8001e0c <TIM_Base_SetConfig+0x3c>
 8001e22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e26:	4290      	cmp	r0, r2
 8001e28:	d0f0      	beq.n	8001e0c <TIM_Base_SetConfig+0x3c>
 8001e2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e2e:	4290      	cmp	r0, r2
 8001e30:	d0ec      	beq.n	8001e0c <TIM_Base_SetConfig+0x3c>
 8001e32:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001e36:	4290      	cmp	r0, r2
 8001e38:	d0e8      	beq.n	8001e0c <TIM_Base_SetConfig+0x3c>
 8001e3a:	4a18      	ldr	r2, [pc, #96]	; (8001e9c <TIM_Base_SetConfig+0xcc>)
 8001e3c:	4290      	cmp	r0, r2
 8001e3e:	d0e5      	beq.n	8001e0c <TIM_Base_SetConfig+0x3c>
 8001e40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e44:	4290      	cmp	r0, r2
 8001e46:	d0e1      	beq.n	8001e0c <TIM_Base_SetConfig+0x3c>
 8001e48:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e4c:	4290      	cmp	r0, r2
 8001e4e:	d0dd      	beq.n	8001e0c <TIM_Base_SetConfig+0x3c>
 8001e50:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001e54:	4290      	cmp	r0, r2
 8001e56:	d0d9      	beq.n	8001e0c <TIM_Base_SetConfig+0x3c>
 8001e58:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e5c:	4290      	cmp	r0, r2
 8001e5e:	d0d5      	beq.n	8001e0c <TIM_Base_SetConfig+0x3c>
 8001e60:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e64:	4290      	cmp	r0, r2
 8001e66:	d0d1      	beq.n	8001e0c <TIM_Base_SetConfig+0x3c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e68:	694a      	ldr	r2, [r1, #20]
 8001e6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e6e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001e70:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e72:	688b      	ldr	r3, [r1, #8]
 8001e74:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001e76:	680b      	ldr	r3, [r1, #0]
 8001e78:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001e7a:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <TIM_Base_SetConfig+0xc4>)
 8001e7c:	4298      	cmp	r0, r3
 8001e7e:	d006      	beq.n	8001e8e <TIM_Base_SetConfig+0xbe>
 8001e80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e84:	4298      	cmp	r0, r3
 8001e86:	d002      	beq.n	8001e8e <TIM_Base_SetConfig+0xbe>
  TIMx->EGR = TIM_EGR_UG;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	6143      	str	r3, [r0, #20]
}
 8001e8c:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001e8e:	690b      	ldr	r3, [r1, #16]
 8001e90:	6303      	str	r3, [r0, #48]	; 0x30
 8001e92:	e7f9      	b.n	8001e88 <TIM_Base_SetConfig+0xb8>
 8001e94:	40010000 	.word	0x40010000
 8001e98:	40000400 	.word	0x40000400
 8001e9c:	40014000 	.word	0x40014000

08001ea0 <HAL_TIM_Base_Init>:
{ 
 8001ea0:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001ea2:	4604      	mov	r4, r0
 8001ea4:	b1a0      	cbz	r0, 8001ed0 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001ea6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001eaa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001eae:	b91b      	cbnz	r3, 8001eb8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001eb0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001eb4:	f001 fbac 	bl	8003610 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001eb8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001eba:	6820      	ldr	r0, [r4, #0]
 8001ebc:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;
 8001ebe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001ec2:	f7ff ff85 	bl	8001dd0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001ec6:	2301      	movs	r3, #1
  return HAL_OK;
 8001ec8:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001eca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001ece:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001ed0:	2001      	movs	r0, #1
}
 8001ed2:	bd10      	pop	{r4, pc}

08001ed4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001ed4:	b510      	push	{r4, lr}

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001ed6:	430a      	orrs	r2, r1
  tmpsmcr = TIMx->SMCR;
 8001ed8:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001eda:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ede:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001ee2:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001ee4:	6083      	str	r3, [r0, #8]
 8001ee6:	bd10      	pop	{r4, pc}

08001ee8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001ee8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001eec:	2b01      	cmp	r3, #1
{
 8001eee:	b510      	push	{r4, lr}
 8001ef0:	4604      	mov	r4, r0
 8001ef2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001ef6:	d018      	beq.n	8001f2a <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 8001ef8:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8001efc:	2301      	movs	r3, #1
  tmpsmcr = htim->Instance->SMCR;
 8001efe:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8001f00:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001f04:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f06:	4b3e      	ldr	r3, [pc, #248]	; (8002000 <HAL_TIM_ConfigClockSource+0x118>)
 8001f08:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8001f0a:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001f0c:	680b      	ldr	r3, [r1, #0]
 8001f0e:	2b40      	cmp	r3, #64	; 0x40
 8001f10:	d059      	beq.n	8001fc6 <HAL_TIM_ConfigClockSource+0xde>
 8001f12:	d815      	bhi.n	8001f40 <HAL_TIM_ConfigClockSource+0x58>
 8001f14:	2b10      	cmp	r3, #16
 8001f16:	d067      	beq.n	8001fe8 <HAL_TIM_ConfigClockSource+0x100>
 8001f18:	d808      	bhi.n	8001f2c <HAL_TIM_ConfigClockSource+0x44>
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d05e      	beq.n	8001fdc <HAL_TIM_ConfigClockSource+0xf4>
  htim->State = HAL_TIM_STATE_READY;
 8001f1e:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001f20:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001f22:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001f26:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001f2a:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8001f2c:	2b20      	cmp	r3, #32
 8001f2e:	d061      	beq.n	8001ff4 <HAL_TIM_ConfigClockSource+0x10c>
 8001f30:	2b30      	cmp	r3, #48	; 0x30
 8001f32:	d1f4      	bne.n	8001f1e <HAL_TIM_ConfigClockSource+0x36>
   tmpsmcr = TIMx->SMCR;
 8001f34:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001f3a:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8001f3e:	e026      	b.n	8001f8e <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8001f40:	2b70      	cmp	r3, #112	; 0x70
 8001f42:	d026      	beq.n	8001f92 <HAL_TIM_ConfigClockSource+0xaa>
 8001f44:	d80e      	bhi.n	8001f64 <HAL_TIM_ConfigClockSource+0x7c>
 8001f46:	2b50      	cmp	r3, #80	; 0x50
 8001f48:	d032      	beq.n	8001fb0 <HAL_TIM_ConfigClockSource+0xc8>
 8001f4a:	2b60      	cmp	r3, #96	; 0x60
 8001f4c:	d1e7      	bne.n	8001f1e <HAL_TIM_ConfigClockSource+0x36>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8001f4e:	68ca      	ldr	r2, [r1, #12]
 8001f50:	6849      	ldr	r1, [r1, #4]
 8001f52:	f7ff fe75 	bl	8001c40 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f56:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 8001f58:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001f5e:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8001f62:	e023      	b.n	8001fac <HAL_TIM_ConfigClockSource+0xc4>
  switch (sClockSourceConfig->ClockSource)
 8001f64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f68:	d00c      	beq.n	8001f84 <HAL_TIM_ConfigClockSource+0x9c>
 8001f6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f6e:	d1d6      	bne.n	8001f1e <HAL_TIM_ConfigClockSource+0x36>
      TIM_ETR_SetConfig(htim->Instance, 
 8001f70:	68cb      	ldr	r3, [r1, #12]
 8001f72:	684a      	ldr	r2, [r1, #4]
 8001f74:	6889      	ldr	r1, [r1, #8]
 8001f76:	f7ff ffad 	bl	8001ed4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f7a:	6822      	ldr	r2, [r4, #0]
 8001f7c:	6893      	ldr	r3, [r2, #8]
 8001f7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f82:	e013      	b.n	8001fac <HAL_TIM_ConfigClockSource+0xc4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001f84:	6883      	ldr	r3, [r0, #8]
 8001f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f8a:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 8001f8e:	6083      	str	r3, [r0, #8]
 8001f90:	e7c5      	b.n	8001f1e <HAL_TIM_ConfigClockSource+0x36>
      TIM_ETR_SetConfig(htim->Instance, 
 8001f92:	68cb      	ldr	r3, [r1, #12]
 8001f94:	684a      	ldr	r2, [r1, #4]
 8001f96:	6889      	ldr	r1, [r1, #8]
 8001f98:	f7ff ff9c 	bl	8001ed4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001f9c:	6822      	ldr	r2, [r4, #0]
 8001f9e:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001fa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fa4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001fa8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001fac:	6093      	str	r3, [r2, #8]
    break;
 8001fae:	e7b6      	b.n	8001f1e <HAL_TIM_ConfigClockSource+0x36>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001fb0:	68ca      	ldr	r2, [r1, #12]
 8001fb2:	6849      	ldr	r1, [r1, #4]
 8001fb4:	f7ff fe33 	bl	8001c1e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001fb8:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 8001fba:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001fc0:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8001fc4:	e7f2      	b.n	8001fac <HAL_TIM_ConfigClockSource+0xc4>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001fc6:	68ca      	ldr	r2, [r1, #12]
 8001fc8:	6849      	ldr	r1, [r1, #4]
 8001fca:	f7ff fe28 	bl	8001c1e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001fce:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 8001fd0:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001fd6:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8001fda:	e7e7      	b.n	8001fac <HAL_TIM_ConfigClockSource+0xc4>
   tmpsmcr = TIMx->SMCR;
 8001fdc:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001fe2:	f043 0307 	orr.w	r3, r3, #7
 8001fe6:	e7d2      	b.n	8001f8e <HAL_TIM_ConfigClockSource+0xa6>
   tmpsmcr = TIMx->SMCR;
 8001fe8:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001fee:	f043 0317 	orr.w	r3, r3, #23
 8001ff2:	e7cc      	b.n	8001f8e <HAL_TIM_ConfigClockSource+0xa6>
   tmpsmcr = TIMx->SMCR;
 8001ff4:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001ffa:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 8001ffe:	e7c6      	b.n	8001f8e <HAL_TIM_ConfigClockSource+0xa6>
 8002000:	fffe0088 	.word	0xfffe0088

08002004 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002004:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002008:	2b01      	cmp	r3, #1
{
 800200a:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 800200c:	d01c      	beq.n	8002048 <HAL_TIMEx_MasterConfigSynchronization+0x44>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800200e:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002010:	4d0e      	ldr	r5, [pc, #56]	; (800204c <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  tmpcr2 = htim->Instance->CR2;
 8002012:	6853      	ldr	r3, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002014:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 8002016:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002018:	d003      	beq.n	8002022 <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 800201a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800201e:	42aa      	cmp	r2, r5
 8002020:	d103      	bne.n	800202a <HAL_TIMEx_MasterConfigSynchronization+0x26>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002022:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002026:	684d      	ldr	r5, [r1, #4]
 8002028:	432b      	orrs	r3, r5
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800202a:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800202c:	f023 0370 	bic.w	r3, r3, #112	; 0x70

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002030:	6889      	ldr	r1, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002032:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002036:	432b      	orrs	r3, r5
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002038:	4321      	orrs	r1, r4
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800203a:	6053      	str	r3, [r2, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 800203c:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 800203e:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8002040:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 8002044:	4618      	mov	r0, r3
 8002046:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8002048:	2002      	movs	r0, #2
} 
 800204a:	bd30      	pop	{r4, r5, pc}
 800204c:	40010000 	.word	0x40010000

08002050 <HAL_TIMEx_CommutationCallback>:
 8002050:	4770      	bx	lr

08002052 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002052:	4770      	bx	lr

08002054 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002054:	6803      	ldr	r3, [r0, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800205c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	f022 0201 	bic.w	r2, r2, #1
 8002064:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002066:	2320      	movs	r3, #32
 8002068:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 800206c:	4770      	bx	lr

0800206e <HAL_UART_DeInit>:
{
 800206e:	b538      	push	{r3, r4, r5, lr}
  if(huart == NULL)
 8002070:	4605      	mov	r5, r0
 8002072:	b1b0      	cbz	r0, 80020a2 <HAL_UART_DeInit+0x34>
  huart->gState = HAL_UART_STATE_BUSY;
 8002074:	2324      	movs	r3, #36	; 0x24
  huart->Instance->CR1 = 0x0U;
 8002076:	2400      	movs	r4, #0
  huart->gState = HAL_UART_STATE_BUSY;
 8002078:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 800207c:	6803      	ldr	r3, [r0, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	f022 0201 	bic.w	r2, r2, #1
 8002084:	601a      	str	r2, [r3, #0]
  huart->Instance->CR1 = 0x0U;
 8002086:	601c      	str	r4, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8002088:	605c      	str	r4, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800208a:	609c      	str	r4, [r3, #8]
  HAL_UART_MspDeInit(huart);
 800208c:	f001 fd2a 	bl	8003ae4 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002090:	66ec      	str	r4, [r5, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 8002092:	f885 4068 	strb.w	r4, [r5, #104]	; 0x68
  return HAL_OK;
 8002096:	4620      	mov	r0, r4
  huart->gState    = HAL_UART_STATE_RESET;
 8002098:	f885 4069 	strb.w	r4, [r5, #105]	; 0x69
  huart->RxState   = HAL_UART_STATE_RESET;
 800209c:	f885 406a 	strb.w	r4, [r5, #106]	; 0x6a
  return HAL_OK;
 80020a0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80020a2:	2001      	movs	r0, #1
}
 80020a4:	bd38      	pop	{r3, r4, r5, pc}

080020a6 <UART_WaitOnFlagUntilTimeout>:
{
 80020a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020aa:	9d06      	ldr	r5, [sp, #24]
 80020ac:	4604      	mov	r4, r0
 80020ae:	460f      	mov	r7, r1
 80020b0:	4616      	mov	r6, r2
 80020b2:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020b4:	6821      	ldr	r1, [r4, #0]
 80020b6:	69ca      	ldr	r2, [r1, #28]
 80020b8:	ea37 0302 	bics.w	r3, r7, r2
 80020bc:	bf0c      	ite	eq
 80020be:	2201      	moveq	r2, #1
 80020c0:	2200      	movne	r2, #0
 80020c2:	42b2      	cmp	r2, r6
 80020c4:	d002      	beq.n	80020cc <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80020c6:	2000      	movs	r0, #0
}
 80020c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 80020cc:	1c6b      	adds	r3, r5, #1
 80020ce:	d0f2      	beq.n	80020b6 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 80020d0:	b99d      	cbnz	r5, 80020fa <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020d2:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 80020d4:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80020dc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	f022 0201 	bic.w	r2, r2, #1
 80020e4:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80020e6:	2320      	movs	r3, #32
 80020e8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80020ec:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 80020f0:	2300      	movs	r3, #0
 80020f2:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80020f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 80020fa:	f7fe fab5 	bl	8000668 <HAL_GetTick>
 80020fe:	eba0 0008 	sub.w	r0, r0, r8
 8002102:	4285      	cmp	r5, r0
 8002104:	d8d6      	bhi.n	80020b4 <UART_WaitOnFlagUntilTimeout+0xe>
 8002106:	e7e4      	b.n	80020d2 <UART_WaitOnFlagUntilTimeout+0x2c>

08002108 <HAL_UART_Transmit>:
{
 8002108:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800210c:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 800210e:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
{
 8002112:	4604      	mov	r4, r0
 8002114:	460d      	mov	r5, r1
  if(huart->gState == HAL_UART_STATE_READY)
 8002116:	2b20      	cmp	r3, #32
{
 8002118:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 800211a:	d14c      	bne.n	80021b6 <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 800211c:	2900      	cmp	r1, #0
 800211e:	d048      	beq.n	80021b2 <HAL_UART_Transmit+0xaa>
 8002120:	2a00      	cmp	r2, #0
 8002122:	d046      	beq.n	80021b2 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 8002124:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8002128:	2b01      	cmp	r3, #1
 800212a:	d044      	beq.n	80021b6 <HAL_UART_Transmit+0xae>
 800212c:	2301      	movs	r3, #1
 800212e:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002132:	2300      	movs	r3, #0
 8002134:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002136:	2321      	movs	r3, #33	; 0x21
 8002138:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 800213c:	f7fe fa94 	bl	8000668 <HAL_GetTick>
 8002140:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8002142:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8002146:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 800214a:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800214e:	b292      	uxth	r2, r2
 8002150:	b962      	cbnz	r2, 800216c <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002152:	9700      	str	r7, [sp, #0]
 8002154:	4633      	mov	r3, r6
 8002156:	2140      	movs	r1, #64	; 0x40
 8002158:	4620      	mov	r0, r4
 800215a:	f7ff ffa4 	bl	80020a6 <UART_WaitOnFlagUntilTimeout>
 800215e:	b998      	cbnz	r0, 8002188 <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 8002160:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8002162:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 8002166:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    return HAL_OK;
 800216a:	e00e      	b.n	800218a <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 800216c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002170:	2200      	movs	r2, #0
 8002172:	9700      	str	r7, [sp, #0]
 8002174:	2180      	movs	r1, #128	; 0x80
      huart->TxXferCount--;
 8002176:	3b01      	subs	r3, #1
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002178:	4620      	mov	r0, r4
      huart->TxXferCount--;
 800217a:	b29b      	uxth	r3, r3
 800217c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002180:	4633      	mov	r3, r6
 8002182:	f7ff ff90 	bl	80020a6 <UART_WaitOnFlagUntilTimeout>
 8002186:	b118      	cbz	r0, 8002190 <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 8002188:	2003      	movs	r0, #3
}
 800218a:	b002      	add	sp, #8
 800218c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002190:	68a3      	ldr	r3, [r4, #8]
 8002192:	6822      	ldr	r2, [r4, #0]
 8002194:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002198:	d107      	bne.n	80021aa <HAL_UART_Transmit+0xa2>
 800219a:	6923      	ldr	r3, [r4, #16]
 800219c:	b92b      	cbnz	r3, 80021aa <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800219e:	f835 3b02 	ldrh.w	r3, [r5], #2
 80021a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021a6:	6293      	str	r3, [r2, #40]	; 0x28
        pData += 2;
 80021a8:	e7cf      	b.n	800214a <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80021aa:	782b      	ldrb	r3, [r5, #0]
 80021ac:	3501      	adds	r5, #1
 80021ae:	6293      	str	r3, [r2, #40]	; 0x28
 80021b0:	e7cb      	b.n	800214a <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80021b2:	2001      	movs	r0, #1
 80021b4:	e7e9      	b.n	800218a <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 80021b6:	2002      	movs	r0, #2
 80021b8:	e7e7      	b.n	800218a <HAL_UART_Transmit+0x82>

080021ba <HAL_UART_Receive>:
{
 80021ba:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80021be:	4698      	mov	r8, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 80021c0:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
{
 80021c4:	4604      	mov	r4, r0
 80021c6:	460d      	mov	r5, r1
  if(huart->RxState == HAL_UART_STATE_READY)
 80021c8:	2b20      	cmp	r3, #32
{
 80021ca:	4616      	mov	r6, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 80021cc:	d161      	bne.n	8002292 <HAL_UART_Receive+0xd8>
    if((pData == NULL ) || (Size == 0U))
 80021ce:	2900      	cmp	r1, #0
 80021d0:	d05d      	beq.n	800228e <HAL_UART_Receive+0xd4>
 80021d2:	2a00      	cmp	r2, #0
 80021d4:	d05b      	beq.n	800228e <HAL_UART_Receive+0xd4>
    __HAL_LOCK(huart);
 80021d6:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d059      	beq.n	8002292 <HAL_UART_Receive+0xd8>
 80021de:	2301      	movs	r3, #1
 80021e0:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021e4:	2300      	movs	r3, #0
 80021e6:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80021e8:	2322      	movs	r3, #34	; 0x22
 80021ea:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
    tickstart = HAL_GetTick();
 80021ee:	f7fe fa3b 	bl	8000668 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 80021f2:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80021f4:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 80021f6:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 80021fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferCount = Size;
 80021fe:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8002202:	d115      	bne.n	8002230 <HAL_UART_Receive+0x76>
 8002204:	6923      	ldr	r3, [r4, #16]
 8002206:	b98b      	cbnz	r3, 800222c <HAL_UART_Receive+0x72>
 8002208:	f240 13ff 	movw	r3, #511	; 0x1ff
 800220c:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8002210:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
    while(huart->RxXferCount > 0U)
 8002214:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8002218:	b280      	uxth	r0, r0
 800221a:	b9b8      	cbnz	r0, 800224c <HAL_UART_Receive+0x92>
    huart->RxState = HAL_UART_STATE_READY;
 800221c:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 800221e:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    huart->RxState = HAL_UART_STATE_READY;
 8002222:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
 8002226:	b002      	add	sp, #8
 8002228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 800222c:	23ff      	movs	r3, #255	; 0xff
 800222e:	e7ed      	b.n	800220c <HAL_UART_Receive+0x52>
 8002230:	b923      	cbnz	r3, 800223c <HAL_UART_Receive+0x82>
 8002232:	6923      	ldr	r3, [r4, #16]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0f9      	beq.n	800222c <HAL_UART_Receive+0x72>
 8002238:	237f      	movs	r3, #127	; 0x7f
 800223a:	e7e7      	b.n	800220c <HAL_UART_Receive+0x52>
 800223c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002240:	d1e6      	bne.n	8002210 <HAL_UART_Receive+0x56>
 8002242:	6923      	ldr	r3, [r4, #16]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0f7      	beq.n	8002238 <HAL_UART_Receive+0x7e>
 8002248:	233f      	movs	r3, #63	; 0x3f
 800224a:	e7df      	b.n	800220c <HAL_UART_Receive+0x52>
      huart->RxXferCount--;
 800224c:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002250:	2200      	movs	r2, #0
 8002252:	f8cd 8000 	str.w	r8, [sp]
 8002256:	2120      	movs	r1, #32
      huart->RxXferCount--;
 8002258:	3b01      	subs	r3, #1
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800225a:	4620      	mov	r0, r4
      huart->RxXferCount--;
 800225c:	b29b      	uxth	r3, r3
 800225e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002262:	463b      	mov	r3, r7
 8002264:	f7ff ff1f 	bl	80020a6 <UART_WaitOnFlagUntilTimeout>
 8002268:	b9a8      	cbnz	r0, 8002296 <HAL_UART_Receive+0xdc>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800226a:	68a3      	ldr	r3, [r4, #8]
 800226c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002270:	6823      	ldr	r3, [r4, #0]
 8002272:	d106      	bne.n	8002282 <HAL_UART_Receive+0xc8>
 8002274:	6922      	ldr	r2, [r4, #16]
 8002276:	b922      	cbnz	r2, 8002282 <HAL_UART_Receive+0xc8>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8002278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227a:	4033      	ands	r3, r6
 800227c:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 8002280:	e7c8      	b.n	8002214 <HAL_UART_Receive+0x5a>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002284:	3501      	adds	r5, #1
 8002286:	4033      	ands	r3, r6
 8002288:	f805 3c01 	strb.w	r3, [r5, #-1]
 800228c:	e7c2      	b.n	8002214 <HAL_UART_Receive+0x5a>
      return  HAL_ERROR;
 800228e:	2001      	movs	r0, #1
 8002290:	e7c9      	b.n	8002226 <HAL_UART_Receive+0x6c>
    return HAL_BUSY;
 8002292:	2002      	movs	r0, #2
 8002294:	e7c7      	b.n	8002226 <HAL_UART_Receive+0x6c>
        return HAL_TIMEOUT;
 8002296:	2003      	movs	r0, #3
 8002298:	e7c5      	b.n	8002226 <HAL_UART_Receive+0x6c>

0800229a <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 800229a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800229e:	6802      	ldr	r2, [r0, #0]
 80022a0:	2b22      	cmp	r3, #34	; 0x22
{
 80022a2:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80022a4:	d12a      	bne.n	80022fc <UART_Receive_IT+0x62>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022a6:	6883      	ldr	r3, [r0, #8]
  uint16_t uhMask = huart->Mask;
 80022a8:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022b0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80022b2:	d11d      	bne.n	80022f0 <UART_Receive_IT+0x56>
 80022b4:	6904      	ldr	r4, [r0, #16]
 80022b6:	b9dc      	cbnz	r4, 80022f0 <UART_Receive_IT+0x56>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80022b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022ba:	4011      	ands	r1, r2
 80022bc:	f823 1b02 	strh.w	r1, [r3], #2
      huart->pRxBuffPtr +=2;
 80022c0:	6543      	str	r3, [r0, #84]	; 0x54
    if(--huart->RxXferCount == 0)
 80022c2:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 80022c6:	3c01      	subs	r4, #1
 80022c8:	b2a4      	uxth	r4, r4
 80022ca:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 80022ce:	b96c      	cbnz	r4, 80022ec <UART_Receive_IT+0x52>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022d0:	6803      	ldr	r3, [r0, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80022d8:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	f022 0201 	bic.w	r2, r2, #1
 80022e0:	609a      	str	r2, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 80022e2:	2320      	movs	r3, #32
 80022e4:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 80022e8:	f001 f824 	bl	8003334 <HAL_UART_RxCpltCallback>
    return HAL_OK;
 80022ec:	2000      	movs	r0, #0
}
 80022ee:	bd10      	pop	{r4, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80022f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022f2:	1c5c      	adds	r4, r3, #1
 80022f4:	4011      	ands	r1, r2
 80022f6:	6544      	str	r4, [r0, #84]	; 0x54
 80022f8:	7019      	strb	r1, [r3, #0]
 80022fa:	e7e2      	b.n	80022c2 <UART_Receive_IT+0x28>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80022fc:	6993      	ldr	r3, [r2, #24]
    return HAL_BUSY;
 80022fe:	2002      	movs	r0, #2
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002300:	f043 0308 	orr.w	r3, r3, #8
 8002304:	6193      	str	r3, [r2, #24]
    return HAL_BUSY;
 8002306:	bd10      	pop	{r4, pc}

08002308 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002308:	6803      	ldr	r3, [r0, #0]
 800230a:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800230c:	6819      	ldr	r1, [r3, #0]
{
 800230e:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8002310:	0716      	lsls	r6, r2, #28
{
 8002312:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002314:	689d      	ldr	r5, [r3, #8]
  if (errorflags == RESET)
 8002316:	d107      	bne.n	8002328 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002318:	0695      	lsls	r5, r2, #26
 800231a:	d563      	bpl.n	80023e4 <HAL_UART_IRQHandler+0xdc>
 800231c:	068e      	lsls	r6, r1, #26
 800231e:	d561      	bpl.n	80023e4 <HAL_UART_IRQHandler+0xdc>
}
 8002320:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002324:	f7ff bfb9 	b.w	800229a <UART_Receive_IT>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8002328:	f015 0001 	ands.w	r0, r5, #1
 800232c:	d102      	bne.n	8002334 <HAL_UART_IRQHandler+0x2c>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 800232e:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002332:	d057      	beq.n	80023e4 <HAL_UART_IRQHandler+0xdc>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002334:	07d5      	lsls	r5, r2, #31
 8002336:	d507      	bpl.n	8002348 <HAL_UART_IRQHandler+0x40>
 8002338:	05ce      	lsls	r6, r1, #23
 800233a:	d505      	bpl.n	8002348 <HAL_UART_IRQHandler+0x40>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 800233c:	2501      	movs	r5, #1
 800233e:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002340:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8002342:	f045 0501 	orr.w	r5, r5, #1
 8002346:	66e5      	str	r5, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002348:	0795      	lsls	r5, r2, #30
 800234a:	d506      	bpl.n	800235a <HAL_UART_IRQHandler+0x52>
 800234c:	b128      	cbz	r0, 800235a <HAL_UART_IRQHandler+0x52>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 800234e:	2502      	movs	r5, #2
 8002350:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002352:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8002354:	f045 0504 	orr.w	r5, r5, #4
 8002358:	66e5      	str	r5, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800235a:	0756      	lsls	r6, r2, #29
 800235c:	d506      	bpl.n	800236c <HAL_UART_IRQHandler+0x64>
 800235e:	b128      	cbz	r0, 800236c <HAL_UART_IRQHandler+0x64>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8002360:	2504      	movs	r5, #4
 8002362:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002364:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8002366:	f045 0502 	orr.w	r5, r5, #2
 800236a:	66e5      	str	r5, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 800236c:	0715      	lsls	r5, r2, #28
 800236e:	d507      	bpl.n	8002380 <HAL_UART_IRQHandler+0x78>
 8002370:	068e      	lsls	r6, r1, #26
 8002372:	d400      	bmi.n	8002376 <HAL_UART_IRQHandler+0x6e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002374:	b120      	cbz	r0, 8002380 <HAL_UART_IRQHandler+0x78>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8002376:	2008      	movs	r0, #8
 8002378:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800237a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800237c:	4303      	orrs	r3, r0
 800237e:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002380:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002382:	2b00      	cmp	r3, #0
 8002384:	d06a      	beq.n	800245c <HAL_UART_IRQHandler+0x154>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002386:	0695      	lsls	r5, r2, #26
 8002388:	d504      	bpl.n	8002394 <HAL_UART_IRQHandler+0x8c>
 800238a:	0688      	lsls	r0, r1, #26
 800238c:	d502      	bpl.n	8002394 <HAL_UART_IRQHandler+0x8c>
        UART_Receive_IT(huart);
 800238e:	4620      	mov	r0, r4
 8002390:	f7ff ff83 	bl	800229a <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002394:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        UART_EndRxTransfer(huart);
 8002396:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002398:	0719      	lsls	r1, r3, #28
 800239a:	d404      	bmi.n	80023a6 <HAL_UART_IRQHandler+0x9e>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 800239c:	6823      	ldr	r3, [r4, #0]
 800239e:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80023a0:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80023a4:	d01a      	beq.n	80023dc <HAL_UART_IRQHandler+0xd4>
        UART_EndRxTransfer(huart);
 80023a6:	f7ff fe55 	bl	8002054 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023aa:	6823      	ldr	r3, [r4, #0]
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	0652      	lsls	r2, r2, #25
 80023b0:	d510      	bpl.n	80023d4 <HAL_UART_IRQHandler+0xcc>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023b2:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80023b4:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023ba:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80023bc:	b150      	cbz	r0, 80023d4 <HAL_UART_IRQHandler+0xcc>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80023be:	4b28      	ldr	r3, [pc, #160]	; (8002460 <HAL_UART_IRQHandler+0x158>)
 80023c0:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80023c2:	f7fe fb13 	bl	80009ec <HAL_DMA_Abort_IT>
 80023c6:	2800      	cmp	r0, #0
 80023c8:	d048      	beq.n	800245c <HAL_UART_IRQHandler+0x154>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80023ca:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 80023cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80023d0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80023d2:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80023d4:	4620      	mov	r0, r4
 80023d6:	f000 ffaf 	bl	8003338 <HAL_UART_ErrorCallback>
 80023da:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80023dc:	f000 ffac 	bl	8003338 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023e0:	66e5      	str	r5, [r4, #108]	; 0x6c
 80023e2:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80023e4:	0616      	lsls	r6, r2, #24
 80023e6:	d52b      	bpl.n	8002440 <HAL_UART_IRQHandler+0x138>
 80023e8:	060d      	lsls	r5, r1, #24
 80023ea:	d529      	bpl.n	8002440 <HAL_UART_IRQHandler+0x138>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80023ec:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 80023f0:	2a21      	cmp	r2, #33	; 0x21
 80023f2:	d133      	bne.n	800245c <HAL_UART_IRQHandler+0x154>
    if(huart->TxXferCount == 0U)
 80023f4:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80023f8:	b292      	uxth	r2, r2
 80023fa:	b942      	cbnz	r2, 800240e <HAL_UART_IRQHandler+0x106>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002402:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	bd70      	pop	{r4, r5, r6, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800240e:	68a2      	ldr	r2, [r4, #8]
 8002410:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002414:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8002416:	d10e      	bne.n	8002436 <HAL_UART_IRQHandler+0x12e>
 8002418:	6921      	ldr	r1, [r4, #16]
 800241a:	b961      	cbnz	r1, 8002436 <HAL_UART_IRQHandler+0x12e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800241c:	f832 1b02 	ldrh.w	r1, [r2], #2
 8002420:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002424:	6299      	str	r1, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8002426:	64e2      	str	r2, [r4, #76]	; 0x4c
      huart->TxXferCount--;
 8002428:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800242c:	3b01      	subs	r3, #1
 800242e:	b29b      	uxth	r3, r3
 8002430:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8002434:	bd70      	pop	{r4, r5, r6, pc}
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8002436:	1c51      	adds	r1, r2, #1
 8002438:	64e1      	str	r1, [r4, #76]	; 0x4c
 800243a:	7812      	ldrb	r2, [r2, #0]
 800243c:	629a      	str	r2, [r3, #40]	; 0x28
 800243e:	e7f3      	b.n	8002428 <HAL_UART_IRQHandler+0x120>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002440:	0650      	lsls	r0, r2, #25
 8002442:	d50b      	bpl.n	800245c <HAL_UART_IRQHandler+0x154>
 8002444:	064a      	lsls	r2, r1, #25
 8002446:	d509      	bpl.n	800245c <HAL_UART_IRQHandler+0x154>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002448:	681a      	ldr	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 800244a:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800244c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002450:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002452:	2320      	movs	r3, #32
 8002454:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  HAL_UART_TxCpltCallback(huart);
 8002458:	f000 ff6d 	bl	8003336 <HAL_UART_TxCpltCallback>
 800245c:	bd70      	pop	{r4, r5, r6, pc}
 800245e:	bf00      	nop
 8002460:	08002465 	.word	0x08002465

08002464 <UART_DMAAbortOnError>:
{
 8002464:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8002466:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8002468:	2300      	movs	r3, #0
 800246a:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800246e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8002472:	f000 ff61 	bl	8003338 <HAL_UART_ErrorCallback>
 8002476:	bd08      	pop	{r3, pc}

08002478 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002478:	b538      	push	{r3, r4, r5, lr}
 800247a:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800247c:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800247e:	69c3      	ldr	r3, [r0, #28]
 8002480:	6921      	ldr	r1, [r4, #16]
 8002482:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002484:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002486:	430a      	orrs	r2, r1
 8002488:	6961      	ldr	r1, [r4, #20]
 800248a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800248c:	4993      	ldr	r1, [pc, #588]	; (80026dc <UART_SetConfig+0x264>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800248e:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002490:	4001      	ands	r1, r0
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002492:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002494:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002496:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002498:	602a      	str	r2, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800249a:	686a      	ldr	r2, [r5, #4]
 800249c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80024a0:	430a      	orrs	r2, r1
 80024a2:	606a      	str	r2, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80024a4:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80024a6:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80024a8:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80024aa:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80024ae:	430a      	orrs	r2, r1
 80024b0:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024b2:	4a8b      	ldr	r2, [pc, #556]	; (80026e0 <UART_SetConfig+0x268>)
 80024b4:	4295      	cmp	r5, r2
 80024b6:	d119      	bne.n	80024ec <UART_SetConfig+0x74>
 80024b8:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80024bc:	4989      	ldr	r1, [pc, #548]	; (80026e4 <UART_SetConfig+0x26c>)
 80024be:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80024c2:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024ca:	5c8a      	ldrb	r2, [r1, r2]
 80024cc:	f040 80b3 	bne.w	8002636 <UART_SetConfig+0x1be>
  {
    switch (clocksource)
 80024d0:	2a08      	cmp	r2, #8
 80024d2:	f200 80ad 	bhi.w	8002630 <UART_SetConfig+0x1b8>
 80024d6:	e8df f012 	tbh	[pc, r2, lsl #1]
 80024da:	0026      	.short	0x0026
 80024dc:	00e9007b 	.word	0x00e9007b
 80024e0:	00f500ab 	.word	0x00f500ab
 80024e4:	00ab00ab 	.word	0x00ab00ab
 80024e8:	00fb00ab 	.word	0x00fb00ab
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024ec:	4a7e      	ldr	r2, [pc, #504]	; (80026e8 <UART_SetConfig+0x270>)
 80024ee:	4295      	cmp	r5, r2
 80024f0:	d107      	bne.n	8002502 <UART_SetConfig+0x8a>
 80024f2:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 80024f6:	497d      	ldr	r1, [pc, #500]	; (80026ec <UART_SetConfig+0x274>)
 80024f8:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80024fc:	f002 020c 	and.w	r2, r2, #12
 8002500:	e7e1      	b.n	80024c6 <UART_SetConfig+0x4e>
 8002502:	4a7b      	ldr	r2, [pc, #492]	; (80026f0 <UART_SetConfig+0x278>)
 8002504:	4295      	cmp	r5, r2
 8002506:	d12b      	bne.n	8002560 <UART_SetConfig+0xe8>
 8002508:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 800250c:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002510:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8002514:	2a10      	cmp	r2, #16
 8002516:	f000 80d2 	beq.w	80026be <UART_SetConfig+0x246>
 800251a:	d816      	bhi.n	800254a <UART_SetConfig+0xd2>
 800251c:	b9da      	cbnz	r2, 8002556 <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800251e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002522:	f040 809f 	bne.w	8002664 <UART_SetConfig+0x1ec>
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002526:	f7fe fffb 	bl	8001520 <HAL_RCC_GetPCLK1Freq>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800252a:	6861      	ldr	r1, [r4, #4]
 800252c:	084a      	lsrs	r2, r1, #1
 800252e:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8002532:	fbb3 f3f1 	udiv	r3, r3, r1
 8002536:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002538:	2000      	movs	r0, #0
    default:
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 800253a:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800253e:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8002542:	6821      	ldr	r1, [r4, #0]
 8002544:	4313      	orrs	r3, r2
 8002546:	60cb      	str	r3, [r1, #12]
 8002548:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800254a:	2a20      	cmp	r2, #32
 800254c:	f000 80ab 	beq.w	80026a6 <UART_SetConfig+0x22e>
 8002550:	2a30      	cmp	r2, #48	; 0x30
 8002552:	f000 80ba 	beq.w	80026ca <UART_SetConfig+0x252>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002556:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800255a:	d069      	beq.n	8002630 <UART_SetConfig+0x1b8>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 800255c:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 800255e:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002560:	4a64      	ldr	r2, [pc, #400]	; (80026f4 <UART_SetConfig+0x27c>)
 8002562:	4295      	cmp	r5, r2
 8002564:	d10e      	bne.n	8002584 <UART_SetConfig+0x10c>
 8002566:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 800256a:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800256e:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8002572:	2a40      	cmp	r2, #64	; 0x40
 8002574:	f000 80a3 	beq.w	80026be <UART_SetConfig+0x246>
 8002578:	d9d0      	bls.n	800251c <UART_SetConfig+0xa4>
 800257a:	2a80      	cmp	r2, #128	; 0x80
 800257c:	f000 8093 	beq.w	80026a6 <UART_SetConfig+0x22e>
 8002580:	2ac0      	cmp	r2, #192	; 0xc0
 8002582:	e7e6      	b.n	8002552 <UART_SetConfig+0xda>
 8002584:	4a5c      	ldr	r2, [pc, #368]	; (80026f8 <UART_SetConfig+0x280>)
 8002586:	4295      	cmp	r5, r2
 8002588:	d110      	bne.n	80025ac <UART_SetConfig+0x134>
 800258a:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 800258e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002592:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002596:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800259a:	f000 8090 	beq.w	80026be <UART_SetConfig+0x246>
 800259e:	d9bd      	bls.n	800251c <UART_SetConfig+0xa4>
 80025a0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80025a4:	d07f      	beq.n	80026a6 <UART_SetConfig+0x22e>
 80025a6:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80025aa:	e7d2      	b.n	8002552 <UART_SetConfig+0xda>
 80025ac:	4a53      	ldr	r2, [pc, #332]	; (80026fc <UART_SetConfig+0x284>)
 80025ae:	4295      	cmp	r5, r2
 80025b0:	d117      	bne.n	80025e2 <UART_SetConfig+0x16a>
 80025b2:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 80025b6:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80025ba:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 80025be:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80025c2:	d07c      	beq.n	80026be <UART_SetConfig+0x246>
 80025c4:	d807      	bhi.n	80025d6 <UART_SetConfig+0x15e>
 80025c6:	2a00      	cmp	r2, #0
 80025c8:	d1c5      	bne.n	8002556 <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025ce:	d154      	bne.n	800267a <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80025d0:	f7fe ffb6 	bl	8001540 <HAL_RCC_GetPCLK2Freq>
 80025d4:	e7a9      	b.n	800252a <UART_SetConfig+0xb2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025d6:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80025da:	d064      	beq.n	80026a6 <UART_SetConfig+0x22e>
 80025dc:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80025e0:	e7b7      	b.n	8002552 <UART_SetConfig+0xda>
 80025e2:	4a47      	ldr	r2, [pc, #284]	; (8002700 <UART_SetConfig+0x288>)
 80025e4:	4295      	cmp	r5, r2
 80025e6:	d10f      	bne.n	8002608 <UART_SetConfig+0x190>
 80025e8:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 80025ec:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80025f0:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 80025f4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80025f8:	d061      	beq.n	80026be <UART_SetConfig+0x246>
 80025fa:	d98f      	bls.n	800251c <UART_SetConfig+0xa4>
 80025fc:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002600:	d051      	beq.n	80026a6 <UART_SetConfig+0x22e>
 8002602:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8002606:	e7a4      	b.n	8002552 <UART_SetConfig+0xda>
 8002608:	4a3e      	ldr	r2, [pc, #248]	; (8002704 <UART_SetConfig+0x28c>)
 800260a:	4295      	cmp	r5, r2
 800260c:	d1a3      	bne.n	8002556 <UART_SetConfig+0xde>
 800260e:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 8002612:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002616:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 800261a:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800261e:	d04e      	beq.n	80026be <UART_SetConfig+0x246>
 8002620:	f67f af7c 	bls.w	800251c <UART_SetConfig+0xa4>
 8002624:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002628:	d03d      	beq.n	80026a6 <UART_SetConfig+0x22e>
 800262a:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 800262e:	e790      	b.n	8002552 <UART_SetConfig+0xda>
        ret = HAL_ERROR;
 8002630:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8002632:	2300      	movs	r3, #0
 8002634:	e781      	b.n	800253a <UART_SetConfig+0xc2>
    switch (clocksource)
 8002636:	2a08      	cmp	r2, #8
 8002638:	d890      	bhi.n	800255c <UART_SetConfig+0xe4>
 800263a:	a301      	add	r3, pc, #4	; (adr r3, 8002640 <UART_SetConfig+0x1c8>)
 800263c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8002640:	08002665 	.word	0x08002665
 8002644:	0800267b 	.word	0x0800267b
 8002648:	08002681 	.word	0x08002681
 800264c:	0800255d 	.word	0x0800255d
 8002650:	08002697 	.word	0x08002697
 8002654:	0800255d 	.word	0x0800255d
 8002658:	0800255d 	.word	0x0800255d
 800265c:	0800255d 	.word	0x0800255d
 8002660:	0800269d 	.word	0x0800269d
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002664:	f7fe ff5c 	bl	8001520 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002668:	6863      	ldr	r3, [r4, #4]
 800266a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800266e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002672:	b280      	uxth	r0, r0
 8002674:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002676:	2000      	movs	r0, #0
      break;
 8002678:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800267a:	f7fe ff61 	bl	8001540 <HAL_RCC_GetPCLK2Freq>
 800267e:	e7f3      	b.n	8002668 <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002680:	6862      	ldr	r2, [r4, #4]
 8002682:	0853      	lsrs	r3, r2, #1
 8002684:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002688:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800268c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002690:	b29b      	uxth	r3, r3
 8002692:	60eb      	str	r3, [r5, #12]
 8002694:	e7ef      	b.n	8002676 <UART_SetConfig+0x1fe>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002696:	f7fe fe71 	bl	800137c <HAL_RCC_GetSysClockFreq>
 800269a:	e7e5      	b.n	8002668 <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800269c:	6862      	ldr	r2, [r4, #4]
 800269e:	0853      	lsrs	r3, r2, #1
 80026a0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80026a4:	e7f2      	b.n	800268c <UART_SetConfig+0x214>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026aa:	d1e9      	bne.n	8002680 <UART_SetConfig+0x208>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80026ac:	6860      	ldr	r0, [r4, #4]
 80026ae:	0843      	lsrs	r3, r0, #1
 80026b0:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80026b4:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80026b8:	fbb3 f3f0 	udiv	r3, r3, r0
 80026bc:	e73b      	b.n	8002536 <UART_SetConfig+0xbe>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026c2:	d1e8      	bne.n	8002696 <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80026c4:	f7fe fe5a 	bl	800137c <HAL_RCC_GetSysClockFreq>
 80026c8:	e72f      	b.n	800252a <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026ce:	d1e5      	bne.n	800269c <UART_SetConfig+0x224>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80026d0:	6860      	ldr	r0, [r4, #4]
 80026d2:	0843      	lsrs	r3, r0, #1
 80026d4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80026d8:	e7ee      	b.n	80026b8 <UART_SetConfig+0x240>
 80026da:	bf00      	nop
 80026dc:	efff69f3 	.word	0xefff69f3
 80026e0:	40011000 	.word	0x40011000
 80026e4:	08004ce0 	.word	0x08004ce0
 80026e8:	40004400 	.word	0x40004400
 80026ec:	08004ce4 	.word	0x08004ce4
 80026f0:	40004800 	.word	0x40004800
 80026f4:	40004c00 	.word	0x40004c00
 80026f8:	40005000 	.word	0x40005000
 80026fc:	40011400 	.word	0x40011400
 8002700:	40007800 	.word	0x40007800
 8002704:	40007c00 	.word	0x40007c00

08002708 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002708:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800270a:	07da      	lsls	r2, r3, #31
{
 800270c:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800270e:	d506      	bpl.n	800271e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002710:	6801      	ldr	r1, [r0, #0]
 8002712:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002714:	684a      	ldr	r2, [r1, #4]
 8002716:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800271a:	4322      	orrs	r2, r4
 800271c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800271e:	079c      	lsls	r4, r3, #30
 8002720:	d506      	bpl.n	8002730 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002722:	6801      	ldr	r1, [r0, #0]
 8002724:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002726:	684a      	ldr	r2, [r1, #4]
 8002728:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800272c:	4322      	orrs	r2, r4
 800272e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002730:	0759      	lsls	r1, r3, #29
 8002732:	d506      	bpl.n	8002742 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002734:	6801      	ldr	r1, [r0, #0]
 8002736:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002738:	684a      	ldr	r2, [r1, #4]
 800273a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800273e:	4322      	orrs	r2, r4
 8002740:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002742:	071a      	lsls	r2, r3, #28
 8002744:	d506      	bpl.n	8002754 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002746:	6801      	ldr	r1, [r0, #0]
 8002748:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800274a:	684a      	ldr	r2, [r1, #4]
 800274c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002750:	4322      	orrs	r2, r4
 8002752:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002754:	06dc      	lsls	r4, r3, #27
 8002756:	d506      	bpl.n	8002766 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002758:	6801      	ldr	r1, [r0, #0]
 800275a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800275c:	688a      	ldr	r2, [r1, #8]
 800275e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002762:	4322      	orrs	r2, r4
 8002764:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002766:	0699      	lsls	r1, r3, #26
 8002768:	d506      	bpl.n	8002778 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800276a:	6801      	ldr	r1, [r0, #0]
 800276c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800276e:	688a      	ldr	r2, [r1, #8]
 8002770:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002774:	4322      	orrs	r2, r4
 8002776:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002778:	065a      	lsls	r2, r3, #25
 800277a:	d510      	bpl.n	800279e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800277c:	6801      	ldr	r1, [r0, #0]
 800277e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002780:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002782:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002786:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800278a:	ea42 0204 	orr.w	r2, r2, r4
 800278e:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002790:	d105      	bne.n	800279e <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002792:	684a      	ldr	r2, [r1, #4]
 8002794:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002796:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800279a:	4322      	orrs	r2, r4
 800279c:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800279e:	061b      	lsls	r3, r3, #24
 80027a0:	d506      	bpl.n	80027b0 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80027a2:	6802      	ldr	r2, [r0, #0]
 80027a4:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80027a6:	6853      	ldr	r3, [r2, #4]
 80027a8:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80027ac:	430b      	orrs	r3, r1
 80027ae:	6053      	str	r3, [r2, #4]
 80027b0:	bd10      	pop	{r4, pc}

080027b2 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80027b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027b4:	2500      	movs	r5, #0
{
 80027b6:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027b8:	66c5      	str	r5, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80027ba:	f7fd ff55 	bl	8000668 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80027be:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 80027c0:	4603      	mov	r3, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80027c2:	6812      	ldr	r2, [r2, #0]
 80027c4:	0712      	lsls	r2, r2, #28
 80027c6:	d409      	bmi.n	80027dc <UART_CheckIdleState+0x2a>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 80027c8:	2320      	movs	r3, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80027ca:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80027cc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 80027d0:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState= HAL_UART_STATE_READY;
 80027d4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  return HAL_OK;
}
 80027d8:	b003      	add	sp, #12
 80027da:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027dc:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80027e0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80027e4:	4620      	mov	r0, r4
 80027e6:	9200      	str	r2, [sp, #0]
 80027e8:	462a      	mov	r2, r5
 80027ea:	f7ff fc5c 	bl	80020a6 <UART_WaitOnFlagUntilTimeout>
 80027ee:	2800      	cmp	r0, #0
 80027f0:	d0ea      	beq.n	80027c8 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80027f2:	2003      	movs	r0, #3
 80027f4:	e7f0      	b.n	80027d8 <UART_CheckIdleState+0x26>

080027f6 <HAL_UART_Init>:
{
 80027f6:	b510      	push	{r4, lr}
  if(huart == NULL)
 80027f8:	4604      	mov	r4, r0
 80027fa:	b360      	cbz	r0, 8002856 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 80027fc:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002800:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002804:	b91b      	cbnz	r3, 800280e <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002806:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 800280a:	f001 f811 	bl	8003830 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800280e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002810:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002812:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8002814:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8002818:	6813      	ldr	r3, [r2, #0]
 800281a:	f023 0301 	bic.w	r3, r3, #1
 800281e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002820:	f7ff fe2a 	bl	8002478 <UART_SetConfig>
 8002824:	2801      	cmp	r0, #1
 8002826:	d016      	beq.n	8002856 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002828:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800282a:	b113      	cbz	r3, 8002832 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 800282c:	4620      	mov	r0, r4
 800282e:	f7ff ff6b 	bl	8002708 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002832:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8002834:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002836:	685a      	ldr	r2, [r3, #4]
 8002838:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800283c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002844:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	f042 0201 	orr.w	r2, r2, #1
}
 800284c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8002850:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002852:	f7ff bfae 	b.w	80027b2 <UART_CheckIdleState>
}
 8002856:	2001      	movs	r0, #1
 8002858:	bd10      	pop	{r4, pc}
	...

0800285c <Set_UartMsgHandle>:
/* Private Function ------------------------------------------------------------------*/

void Set_UartMsgHandle(UART_HandleTypeDef *UART_MsgHandle)
{

	UartMsgHandle = UART_MsgHandle;
 800285c:	4b01      	ldr	r3, [pc, #4]	; (8002864 <Set_UartMsgHandle+0x8>)
 800285e:	6018      	str	r0, [r3, #0]
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	20000134 	.word	0x20000134

08002868 <UART_DMA_Init>:

void UART_DMA_Init(void)
{

  /*## -1- Enable DMA clock #################################################*/
  CONSOLE_UART_DMAx_CLK_ENABLE();
 8002868:	4b45      	ldr	r3, [pc, #276]	; (8002980 <UART_DMA_Init+0x118>)
 800286a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800286c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
{
 8002870:	b513      	push	{r0, r1, r4, lr}
  CONSOLE_UART_DMAx_CLK_ENABLE();
 8002872:	631a      	str	r2, [r3, #48]	; 0x30
  DMA_UART_RX.Init.PeriphInc = DMA_PINC_DISABLE;               /* Peripheral increment mode Enable */
  DMA_UART_RX.Init.MemInc = DMA_MINC_DISABLE;                  /* Memory increment mode Enable     */
  DMA_UART_RX.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE; /* Peripheral data alignment : Word */
  DMA_UART_RX.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;    /* memory data alignment : Word     */
  DMA_UART_RX.Init.Mode = DMA_NORMAL;                         // Normal DMA mode DMA_NORMAL, DMA_CIRCULAR, DMA_PFCTRL
  DMA_UART_RX.Init.Priority = DMA_PRIORITY_MEDIUM;              /* priority level : DMA_PRIORITY_MEDIUM, DMA_PRIORITY_HIGH            */
 8002874:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  CONSOLE_UART_DMAx_CLK_ENABLE();
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  DMA_UART_RX.Init.Channel = WIFI_CONSOLE_DMA_CHANNEL;
 800287a:	4842      	ldr	r0, [pc, #264]	; (8002984 <UART_DMA_Init+0x11c>)
  CONSOLE_UART_DMAx_CLK_ENABLE();
 800287c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  DMA_UART_RX.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
  DMA_UART_RX.Init.MemBurst = DMA_MBURST_INC4;
  DMA_UART_RX.Init.PeriphBurst = DMA_PBURST_INC4;

  /*##-3- Select the DMA instance to be used for the transfer : #*/
  DMA_UART_RX.Instance = WIFI_CONSOLE_DMA_STREAM;
 8002880:	4c41      	ldr	r4, [pc, #260]	; (8002988 <UART_DMA_Init+0x120>)
  DMA_UART_RX.Init.Priority = DMA_PRIORITY_MEDIUM;              /* priority level : DMA_PRIORITY_MEDIUM, DMA_PRIORITY_HIGH            */
 8002882:	6202      	str	r2, [r0, #32]
  CONSOLE_UART_DMAx_CLK_ENABLE();
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	9b00      	ldr	r3, [sp, #0]
  DMA_UART_RX.Init.Channel = WIFI_CONSOLE_DMA_CHANNEL;
 8002888:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  DMA_UART_RX.Instance = WIFI_CONSOLE_DMA_STREAM;
 800288c:	6004      	str	r4, [r0, #0]
  DMA_UART_RX.Init.Channel = WIFI_CONSOLE_DMA_CHANNEL;
 800288e:	6043      	str	r3, [r0, #4]
  DMA_UART_RX.Init.Direction = DMA_PERIPH_TO_MEMORY;          /* M2M transfer mode                */
 8002890:	2300      	movs	r3, #0
 8002892:	6083      	str	r3, [r0, #8]
  DMA_UART_RX.Init.PeriphInc = DMA_PINC_DISABLE;               /* Peripheral increment mode Enable */
 8002894:	60c3      	str	r3, [r0, #12]
  DMA_UART_RX.Init.MemInc = DMA_MINC_DISABLE;                  /* Memory increment mode Enable     */
 8002896:	6103      	str	r3, [r0, #16]
  DMA_UART_RX.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE; /* Peripheral data alignment : Word */
 8002898:	6143      	str	r3, [r0, #20]
  DMA_UART_RX.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;    /* memory data alignment : Word     */
 800289a:	6183      	str	r3, [r0, #24]
  DMA_UART_RX.Init.Mode = DMA_NORMAL;                         // Normal DMA mode DMA_NORMAL, DMA_CIRCULAR, DMA_PFCTRL
 800289c:	61c3      	str	r3, [r0, #28]
  DMA_UART_RX.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800289e:	6243      	str	r3, [r0, #36]	; 0x24
  DMA_UART_RX.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80028a0:	2303      	movs	r3, #3
 80028a2:	6283      	str	r3, [r0, #40]	; 0x28
  DMA_UART_RX.Init.MemBurst = DMA_MBURST_INC4;
 80028a4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80028a8:	62c3      	str	r3, [r0, #44]	; 0x2c
  DMA_UART_RX.Init.PeriphBurst = DMA_PBURST_INC4;
 80028aa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80028ae:	6303      	str	r3, [r0, #48]	; 0x30

  /*##-3- Select the DMA instance to be used for the transfer */
  DMA_UART_RX.Instance = WIFI_CONSOLE_DMA_CHANNEL;
#endif
  /*##-4- Initialize the DMA stream ##########################################*/
  if (HAL_DMA_Init(&DMA_UART_RX) != HAL_OK)
 80028b0:	f7fd fff4 	bl	800089c <HAL_DMA_Init>
 80028b4:	b118      	cbz	r0, 80028be <UART_DMA_Init+0x56>
  {
    /* Initialization Error */
		_Error_Handler(__FILE__, __LINE__);
 80028b6:	21a9      	movs	r1, #169	; 0xa9
 80028b8:	4834      	ldr	r0, [pc, #208]	; (800298c <UART_DMA_Init+0x124>)
 80028ba:	f000 fbed 	bl	8003098 <_Error_Handler>
  }

  /*##-5- Configure NVIC for DMA transfer complete/error interrupts ##########*/
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriority(WIFI_CONSOLE_DMA_IRQn, 0, 0);
 80028be:	2200      	movs	r2, #0
 80028c0:	200c      	movs	r0, #12
 80028c2:	4611      	mov	r1, r2
 80028c4:	f7fd fefa 	bl	80006bc <HAL_NVIC_SetPriority>

  /* Enable the DMA Channel global Interrupt */
  HAL_NVIC_EnableIRQ(WIFI_CONSOLE_DMA_IRQn);
 80028c8:	200c      	movs	r0, #12
 80028ca:	f7fd ff2f 	bl	800072c <HAL_NVIC_EnableIRQ>
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, DstAddress);
  }
  /* Direction Periph to Memory and Memory to Memory */
  else
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
 80028ce:	4b30      	ldr	r3, [pc, #192]	; (8002990 <UART_DMA_Init+0x128>)
//================================================================================================
  /*## -1- Enable DMA clock #################################################*/
  WIFI_UART_DMAx_CLK_ENABLE();
#ifdef USE_STM32F7XX_NUCLEO
  /*##-2- Select the DMA functional Parameters ###############################*/
  DMA_WIFI_UART.Init.Channel = WIFI_UART_DMA_CHANNEL;
 80028d0:	4830      	ldr	r0, [pc, #192]	; (8002994 <UART_DMA_Init+0x12c>)
 80028d2:	60a3      	str	r3, [r4, #8]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
 80028d4:	4b30      	ldr	r3, [pc, #192]	; (8002998 <UART_DMA_Init+0x130>)
 80028d6:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 80028d8:	6863      	ldr	r3, [r4, #4]
 80028da:	0c1b      	lsrs	r3, r3, #16
 80028dc:	041b      	lsls	r3, r3, #16
 80028de:	f043 0301 	orr.w	r3, r3, #1
 80028e2:	6063      	str	r3, [r4, #4]
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 80028e4:	6823      	ldr	r3, [r4, #0]
 80028e6:	f043 0310 	orr.w	r3, r3, #16
 80028ea:	6023      	str	r3, [r4, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80028ec:	6823      	ldr	r3, [r4, #0]
 80028ee:	f043 0301 	orr.w	r3, r3, #1
 80028f2:	6023      	str	r3, [r4, #0]
  WIFI_UART_DMAx_CLK_ENABLE();
 80028f4:	4b22      	ldr	r3, [pc, #136]	; (8002980 <UART_DMA_Init+0x118>)
  DMA_WIFI_UART.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
  DMA_WIFI_UART.Init.MemBurst = DMA_MBURST_INC4;
  DMA_WIFI_UART.Init.PeriphBurst = DMA_PBURST_INC4;

  /*##-3- Select the DMA instance to be used for the transfer */
  DMA_WIFI_UART.Instance = WIFI_UART_DMA_STREAM;
 80028f6:	4c29      	ldr	r4, [pc, #164]	; (800299c <UART_DMA_Init+0x134>)
  WIFI_UART_DMAx_CLK_ENABLE();
 80028f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028fa:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80028fe:	631a      	str	r2, [r3, #48]	; 0x30
  DMA_WIFI_UART.Init.Priority = DMA_PRIORITY_MEDIUM;              /* priority level : DMA_PRIORITY_MEDIUM, DMA_PRIORITY_HIGH            */
 8002900:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  WIFI_UART_DMAx_CLK_ENABLE();
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  DMA_WIFI_UART.Init.Priority = DMA_PRIORITY_MEDIUM;              /* priority level : DMA_PRIORITY_MEDIUM, DMA_PRIORITY_HIGH            */
 8002906:	6202      	str	r2, [r0, #32]
  WIFI_UART_DMAx_CLK_ENABLE();
 8002908:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  DMA_WIFI_UART.Instance = WIFI_UART_DMA_STREAM;
 800290c:	6004      	str	r4, [r0, #0]
  WIFI_UART_DMAx_CLK_ENABLE();
 800290e:	9301      	str	r3, [sp, #4]
 8002910:	9b01      	ldr	r3, [sp, #4]
  DMA_WIFI_UART.Init.Channel = WIFI_UART_DMA_CHANNEL;
 8002912:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002916:	6043      	str	r3, [r0, #4]
  DMA_WIFI_UART.Init.Direction = DMA_PERIPH_TO_MEMORY;          /* M2M transfer mode                */
 8002918:	2300      	movs	r3, #0
 800291a:	6083      	str	r3, [r0, #8]
  DMA_WIFI_UART.Init.PeriphInc = DMA_PINC_DISABLE;               /* Peripheral increment mode Enable */
 800291c:	60c3      	str	r3, [r0, #12]
  DMA_WIFI_UART.Init.MemInc = DMA_MINC_DISABLE;                  /* Memory increment mode Enable     */
 800291e:	6103      	str	r3, [r0, #16]
  DMA_WIFI_UART.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE; /* Peripheral data alignment : Word */
 8002920:	6143      	str	r3, [r0, #20]
  DMA_WIFI_UART.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;    /* memory data alignment : Word     */
 8002922:	6183      	str	r3, [r0, #24]
  DMA_WIFI_UART.Init.Mode = DMA_NORMAL;                         // Normal DMA mode DMA_NORMAL, DMA_CIRCULAR, DMA_PFCTRL
 8002924:	61c3      	str	r3, [r0, #28]
  DMA_WIFI_UART.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002926:	6243      	str	r3, [r0, #36]	; 0x24
  DMA_WIFI_UART.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002928:	2303      	movs	r3, #3
 800292a:	6283      	str	r3, [r0, #40]	; 0x28
  DMA_WIFI_UART.Init.MemBurst = DMA_MBURST_INC4;
 800292c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002930:	62c3      	str	r3, [r0, #44]	; 0x2c
  DMA_WIFI_UART.Init.PeriphBurst = DMA_PBURST_INC4;
 8002932:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002936:	6303      	str	r3, [r0, #48]	; 0x30

  /*##-3- Select the DMA instance to be used for the transfer */
  DMA_WIFI_UART.Instance = WIFI_UART_DMA_CHANNEL;
#endif
  /*##-4- Initialize the DMA stream ##########################################*/
  if (HAL_DMA_Init(&DMA_WIFI_UART) != HAL_OK)
 8002938:	f7fd ffb0 	bl	800089c <HAL_DMA_Init>
 800293c:	b120      	cbz	r0, 8002948 <UART_DMA_Init+0xe0>
  {
    /* Initialization Error */
		_Error_Handler(__FILE__, __LINE__);
 800293e:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8002942:	4812      	ldr	r0, [pc, #72]	; (800298c <UART_DMA_Init+0x124>)
 8002944:	f000 fba8 	bl	8003098 <_Error_Handler>
  }

  /*##-5- Configure NVIC for DMA transfer complete/error interrupts ##########*/
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriority(WIFI_UART_DMA_IRQn, 0, 0);
 8002948:	2200      	movs	r2, #0
 800294a:	2010      	movs	r0, #16
 800294c:	4611      	mov	r1, r2
 800294e:	f7fd feb5 	bl	80006bc <HAL_NVIC_SetPriority>

  /* Enable the DMA Channel global Interrupt */
  HAL_NVIC_EnableIRQ(WIFI_UART_DMA_IRQn);
 8002952:	2010      	movs	r0, #16
 8002954:	f7fd feea 	bl	800072c <HAL_NVIC_EnableIRQ>
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
 8002958:	4b11      	ldr	r3, [pc, #68]	; (80029a0 <UART_DMA_Init+0x138>)
 800295a:	60a3      	str	r3, [r4, #8]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
 800295c:	4b11      	ldr	r3, [pc, #68]	; (80029a4 <UART_DMA_Init+0x13c>)
 800295e:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8002960:	6863      	ldr	r3, [r4, #4]
 8002962:	0c1b      	lsrs	r3, r3, #16
 8002964:	041b      	lsls	r3, r3, #16
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	6063      	str	r3, [r4, #4]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 800296c:	6823      	ldr	r3, [r4, #0]
 800296e:	f043 0310 	orr.w	r3, r3, #16
 8002972:	6023      	str	r3, [r4, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8002974:	6823      	ldr	r3, [r4, #0]
 8002976:	f043 0301 	orr.w	r3, r3, #1
 800297a:	6023      	str	r3, [r4, #0]
#endif
#ifdef USE_STM32L0XX_NUCLEO
  LL_DMA_EnableChannel(WIFI_UART_DMA, WIFI_UART_LL_DMA);
#endif
#endif
}
 800297c:	b002      	add	sp, #8
 800297e:	bd10      	pop	{r4, pc}
 8002980:	40023800 	.word	0x40023800
 8002984:	20001154 	.word	0x20001154
 8002988:	40026028 	.word	0x40026028
 800298c:	08004cf1 	.word	0x08004cf1
 8002990:	40004824 	.word	0x40004824
 8002994:	20001274 	.word	0x20001274
 8002998:	20001334 	.word	0x20001334
 800299c:	40026088 	.word	0x40026088
 80029a0:	40004424 	.word	0x40004424
 80029a4:	20000406 	.word	0x20000406

080029a8 <DMA1_TransferComplete>:
void DMA1_TransferComplete()
{
  /* Process Locked */
	huart2.Lock = HAL_LOCKED;

	huart2.ErrorCode = HAL_UART_ERROR_NONE;
 80029a8:	4b10      	ldr	r3, [pc, #64]	; (80029ec <DMA1_TransferComplete+0x44>)
 80029aa:	2000      	movs	r0, #0
#if defined (USE_STM32F7XX_NUCLEO) || defined (USE_STM32L4XX_NUCLEO)
	huart2.gState = HAL_UART_STATE_BUSY_TX;
 80029ac:	2221      	movs	r2, #33	; 0x21
	huart2.ErrorCode = HAL_UART_ERROR_NONE;
 80029ae:	66d8      	str	r0, [r3, #108]	; 0x6c
	huart2.gState = HAL_UART_STATE_BUSY_TX;
 80029b0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
#endif
	huart2.pTxBuffPtr = (uint8_t*) console_send_char;
 80029b4:	4a0e      	ldr	r2, [pc, #56]	; (80029f0 <DMA1_TransferComplete+0x48>)
#endif
  // Process Unlocked
	huart2.Lock = HAL_UNLOCKED;

  // Enable the UART Transmit data register empty Interrupt
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_TXE);
 80029b6:	6819      	ldr	r1, [r3, #0]
	huart2.pTxBuffPtr = (uint8_t*) console_send_char;
 80029b8:	64da      	str	r2, [r3, #76]	; 0x4c
	huart2.TxXferSize = 1;
 80029ba:	2201      	movs	r2, #1
	huart2.TxXferCount = 1;
 80029bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	huart2.TxXferSize = 1;
 80029c0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_TXE);
 80029c4:	680a      	ldr	r2, [r1, #0]
 80029c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029ca:	600a      	str	r2, [r1, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 80029cc:	4a09      	ldr	r2, [pc, #36]	; (80029f4 <DMA1_TransferComplete+0x4c>)
 80029ce:	6811      	ldr	r1, [r2, #0]
 80029d0:	f041 0110 	orr.w	r1, r1, #16
 80029d4:	6011      	str	r1, [r2, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80029d6:	6811      	ldr	r1, [r2, #0]
 80029d8:	f041 0101 	orr.w	r1, r1, #1
 80029dc:	6011      	str	r1, [r2, #0]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF1);
 80029de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029e2:	f842 1c20 	str.w	r1, [r2, #-32]
  //LL_DMA_EnableChannel(WIFI_CONSOLE_DMA, WIFI_CONSOLE_LL_DMA);
#endif

#endif
  /* Process Unlocked */
	huart2.Lock = HAL_UNLOCKED;
 80029e6:	f883 0068 	strb.w	r0, [r3, #104]	; 0x68
 80029ea:	4770      	bx	lr
 80029ec:	20000098 	.word	0x20000098
 80029f0:	20001334 	.word	0x20001334
 80029f4:	40026028 	.word	0x40026028

080029f8 <DMA2_TransferComplete>:
void DMA2_TransferComplete()
{
    /* Process Locked */
	huart3.Lock = HAL_LOCKED;

	huart3.ErrorCode = HAL_UART_ERROR_NONE;
 80029f8:	4b10      	ldr	r3, [pc, #64]	; (8002a3c <DMA2_TransferComplete+0x44>)
 80029fa:	2200      	movs	r2, #0
#if defined (USE_STM32F7XX_NUCLEO) || defined (USE_STM32L4XX_NUCLEO)
	huart3.gState = HAL_UART_STATE_BUSY_TX;
 80029fc:	2121      	movs	r1, #33	; 0x21
	huart3.ErrorCode = HAL_UART_ERROR_NONE;
 80029fe:	66da      	str	r2, [r3, #108]	; 0x6c
	huart3.gState = HAL_UART_STATE_BUSY_TX;
 8002a00:	f883 1069 	strb.w	r1, [r3, #105]	; 0x69
#endif
	huart3.pTxBuffPtr = (uint8_t*) WiFi_Counter_Variables.uart_byte;
 8002a04:	490e      	ldr	r1, [pc, #56]	; (8002a40 <DMA2_TransferComplete+0x48>)
    {
		huart3->State = HAL_UART_STATE_BUSY_TX;
    }
#endif
  // Process Unlocked
	huart3.Lock = HAL_UNLOCKED;
 8002a06:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	huart3.pTxBuffPtr = (uint8_t*) WiFi_Counter_Variables.uart_byte;
 8002a0a:	64d9      	str	r1, [r3, #76]	; 0x4c
	huart3.TxXferSize = 1;
 8002a0c:	2101      	movs	r1, #1

  // Enable the UART Transmit data register empty Interrupt
	__HAL_UART_ENABLE_IT(&huart3, UART_IT_TXE);
 8002a0e:	681a      	ldr	r2, [r3, #0]
	huart3.TxXferCount = 1;
 8002a10:	f8a3 1052 	strh.w	r1, [r3, #82]	; 0x52
	huart3.TxXferSize = 1;
 8002a14:	f8a3 1050 	strh.w	r1, [r3, #80]	; 0x50
	__HAL_UART_ENABLE_IT(&huart3, UART_IT_TXE);
 8002a18:	6813      	ldr	r3, [r2, #0]
 8002a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a1e:	6013      	str	r3, [r2, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8002a20:	4b08      	ldr	r3, [pc, #32]	; (8002a44 <DMA2_TransferComplete+0x4c>)
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	f042 0210 	orr.w	r2, r2, #16
 8002a28:	601a      	str	r2, [r3, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	601a      	str	r2, [r3, #0]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF5);
 8002a30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a34:	f843 2c7c 	str.w	r2, [r3, #-124]
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	20001070 	.word	0x20001070
 8002a40:	20000406 	.word	0x20000406
 8002a44:	40026088 	.word	0x40026088

08002a48 <uartSendChar>:
/** @brief Sends a character to serial port
 * @param ch Character to send
 * @retval Character sent
 */
int uartSendChar(int ch)
{
 8002a48:	b507      	push	{r0, r1, r2, lr}
 8002a4a:	a902      	add	r1, sp, #8
	// HAL_UART_Transmit(UartHandle, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart3, (uint8_t *) &ch, 1, HAL_MAX_DELAY);
 8002a4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a50:	2201      	movs	r2, #1
{
 8002a52:	f841 0d04 	str.w	r0, [r1, #-4]!
	HAL_UART_Transmit(&huart3, (uint8_t *) &ch, 1, HAL_MAX_DELAY);
 8002a56:	4803      	ldr	r0, [pc, #12]	; (8002a64 <uartSendChar+0x1c>)
 8002a58:	f7ff fb56 	bl	8002108 <HAL_UART_Transmit>
  return ch;
}
 8002a5c:	9801      	ldr	r0, [sp, #4]
 8002a5e:	b003      	add	sp, #12
 8002a60:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a64:	20001070 	.word	0x20001070

08002a68 <uartReceiveChar>:
/** @brief Receives a character from serial port
 * @param None
 * @retval Character received
 */
int uartReceiveChar(void)
{
 8002a68:	b513      	push	{r0, r1, r4, lr}
  uint8_t ch;
	// HAL_UART_Receive(UartHandle, &ch, 1, HAL_MAX_DELAY);
	HAL_UART_Receive(&huart3, &ch, 1, HAL_MAX_DELAY);

  /* Echo character back to console */
  HAL_UART_Transmit(UartHandle, &ch, 1, HAL_MAX_DELAY);
 8002a6a:	4c11      	ldr	r4, [pc, #68]	; (8002ab0 <uartReceiveChar+0x48>)
	HAL_UART_Receive(&huart3, &ch, 1, HAL_MAX_DELAY);
 8002a6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a70:	2201      	movs	r2, #1
 8002a72:	f10d 0106 	add.w	r1, sp, #6
 8002a76:	480f      	ldr	r0, [pc, #60]	; (8002ab4 <uartReceiveChar+0x4c>)
 8002a78:	f7ff fb9f 	bl	80021ba <HAL_UART_Receive>
  HAL_UART_Transmit(UartHandle, &ch, 1, HAL_MAX_DELAY);
 8002a7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a80:	2201      	movs	r2, #1
 8002a82:	f10d 0106 	add.w	r1, sp, #6
 8002a86:	6820      	ldr	r0, [r4, #0]
 8002a88:	f7ff fb3e 	bl	8002108 <HAL_UART_Transmit>

  /* And cope with Windows */
  if(ch == '\r'){
 8002a8c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002a90:	2b0d      	cmp	r3, #13
 8002a92:	d109      	bne.n	8002aa8 <uartReceiveChar+0x40>
    uint8_t ret = '\n';
 8002a94:	230a      	movs	r3, #10
 8002a96:	a902      	add	r1, sp, #8
    HAL_UART_Transmit(UartHandle, &ret, 1, HAL_MAX_DELAY);
 8002a98:	2201      	movs	r2, #1
 8002a9a:	6820      	ldr	r0, [r4, #0]
    uint8_t ret = '\n';
 8002a9c:	f801 3d01 	strb.w	r3, [r1, #-1]!
    HAL_UART_Transmit(UartHandle, &ret, 1, HAL_MAX_DELAY);
 8002aa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002aa4:	f7ff fb30 	bl	8002108 <HAL_UART_Transmit>
  }

  return ch;
}
 8002aa8:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8002aac:	b002      	add	sp, #8
 8002aae:	bd10      	pop	{r4, pc}
 8002ab0:	20000134 	.word	0x20000134
 8002ab4:	20001070 	.word	0x20001070

08002ab8 <__io_putchar>:
 * @param ch Character to print
 * @retval Character printed
 */
int __io_putchar(int ch)
{
  return uartSendChar(ch);
 8002ab8:	f7ff bfc6 	b.w	8002a48 <uartSendChar>

08002abc <__io_getchar>:
 * @param None
 * @retval Character acquired from standard input
 */
int __io_getchar(void)
{
  return uartReceiveChar();
 8002abc:	f7ff bfd4 	b.w	8002a68 <uartReceiveChar>

08002ac0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8002ac0:	b508      	push	{r3, lr}

  hcrc.Instance = CRC;
 8002ac2:	480a      	ldr	r0, [pc, #40]	; (8002aec <MX_CRC_Init+0x2c>)
 8002ac4:	4b0a      	ldr	r3, [pc, #40]	; (8002af0 <MX_CRC_Init+0x30>)
 8002ac6:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8002acc:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8002ace:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8002ad0:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002ad6:	f7fd fe6b 	bl	80007b0 <HAL_CRC_Init>
 8002ada:	b128      	cbz	r0, 8002ae8 <MX_CRC_Init+0x28>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002adc:	213d      	movs	r1, #61	; 0x3d
 8002ade:	4805      	ldr	r0, [pc, #20]	; (8002af4 <MX_CRC_Init+0x34>)
  }

}
 8002ae0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8002ae4:	f000 bad8 	b.w	8003098 <_Error_Handler>
 8002ae8:	bd08      	pop	{r3, pc}
 8002aea:	bf00      	nop
 8002aec:	2000137c 	.word	0x2000137c
 8002af0:	40023000 	.word	0x40023000
 8002af4:	08004d20 	.word	0x08004d20

08002af8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8002af8:	6802      	ldr	r2, [r0, #0]
{
 8002afa:	b082      	sub	sp, #8
  if(crcHandle->Instance==CRC)
 8002afc:	4b08      	ldr	r3, [pc, #32]	; (8002b20 <HAL_CRC_MspInit+0x28>)
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d10b      	bne.n	8002b1a <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002b02:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 8002b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b0a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b0e:	631a      	str	r2, [r3, #48]	; 0x30
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b16:	9301      	str	r3, [sp, #4]
 8002b18:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8002b1a:	b002      	add	sp, #8
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	40023000 	.word	0x40023000

08002b24 <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b24:	4b16      	ldr	r3, [pc, #88]	; (8002b80 <MX_DMA_Init+0x5c>)
{
 8002b26:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b28:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002b2a:	200c      	movs	r0, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b2c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002b30:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002b32:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002b36:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b3c:	9301      	str	r3, [sp, #4]
 8002b3e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002b40:	f7fd fdbc 	bl	80006bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002b44:	200c      	movs	r0, #12
 8002b46:	f7fd fdf1 	bl	800072c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	200e      	movs	r0, #14
 8002b4e:	4611      	mov	r1, r2
 8002b50:	f7fd fdb4 	bl	80006bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002b54:	200e      	movs	r0, #14
 8002b56:	f7fd fde9 	bl	800072c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2010      	movs	r0, #16
 8002b5e:	4611      	mov	r1, r2
 8002b60:	f7fd fdac 	bl	80006bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002b64:	2010      	movs	r0, #16
 8002b66:	f7fd fde1 	bl	800072c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	2011      	movs	r0, #17
 8002b6e:	4611      	mov	r1, r2
 8002b70:	f7fd fda4 	bl	80006bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002b74:	2011      	movs	r0, #17
 8002b76:	f7fd fdd9 	bl	800072c <HAL_NVIC_EnableIRQ>

}
 8002b7a:	b003      	add	sp, #12
 8002b7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b80:	40023800 	.word	0x40023800

08002b84 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b84:	4b6d      	ldr	r3, [pc, #436]	; (8002d3c <MX_GPIO_Init+0x1b8>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002b86:	f44f 4181 	mov.w	r1, #16512	; 0x4080
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b8c:	f042 0204 	orr.w	r2, r2, #4
{
 8002b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b94:	631a      	str	r2, [r3, #48]	; 0x30
{
 8002b96:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9a:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002b9c:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 8002d4c <MX_GPIO_Init+0x1c8>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002ba0:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ba4:	f002 0204 	and.w	r2, r2, #4
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002ba8:	4f65      	ldr	r7, [pc, #404]	; (8002d40 <MX_GPIO_Init+0x1bc>)
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002baa:	4650      	mov	r0, sl
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002bac:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8002d50 <MX_GPIO_Init+0x1cc>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bb0:	9201      	str	r2, [sp, #4]

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb2:	2503      	movs	r5, #3
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bb4:	9a01      	ldr	r2, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb6:	2602      	movs	r6, #2
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002bb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002bba:	f04f 080b 	mov.w	r8, #11
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002bbe:	f042 0220 	orr.w	r2, r2, #32
 8002bc2:	631a      	str	r2, [r3, #48]	; 0x30
 8002bc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bc6:	f002 0220 	and.w	r2, r2, #32
 8002bca:	9202      	str	r2, [sp, #8]
 8002bcc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002bce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bd0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002bd4:	631a      	str	r2, [r3, #48]	; 0x30
 8002bd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bd8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002bdc:	9203      	str	r2, [sp, #12]
 8002bde:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002be2:	f042 0201 	orr.w	r2, r2, #1
 8002be6:	631a      	str	r2, [r3, #48]	; 0x30
 8002be8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bea:	f002 0201 	and.w	r2, r2, #1
 8002bee:	9204      	str	r2, [sp, #16]
 8002bf0:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bf4:	f042 0202 	orr.w	r2, r2, #2
 8002bf8:	631a      	str	r2, [r3, #48]	; 0x30
 8002bfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bfc:	f002 0202 	and.w	r2, r2, #2
 8002c00:	9205      	str	r2, [sp, #20]
 8002c02:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c06:	f042 0208 	orr.w	r2, r2, #8
 8002c0a:	631a      	str	r2, [r3, #48]	; 0x30
 8002c0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c0e:	f002 0208 	and.w	r2, r2, #8
 8002c12:	9206      	str	r2, [sp, #24]
 8002c14:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c1c:	631a      	str	r2, [r3, #48]	; 0x30
 8002c1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c20:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8002c24:	9207      	str	r2, [sp, #28]
 8002c26:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c2a:	f042 0210 	orr.w	r2, r2, #16
 8002c2e:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002c30:	2200      	movs	r2, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c34:	f003 0310 	and.w	r3, r3, #16
 8002c38:	9308      	str	r3, [sp, #32]
 8002c3a:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002c3c:	f7fe f930 	bl	8000ea0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002c40:	2200      	movs	r2, #0
 8002c42:	4638      	mov	r0, r7
 8002c44:	2140      	movs	r1, #64	; 0x40
 8002c46:	f7fe f92b 	bl	8000ea0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c4a:	4b3e      	ldr	r3, [pc, #248]	; (8002d44 <MX_GPIO_Init+0x1c0>)
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002c4c:	a909      	add	r1, sp, #36	; 0x24
 8002c4e:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002c50:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c54:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c56:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002c58:	f7fd ff94 	bl	8000b84 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002c5c:	2332      	movs	r3, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c5e:	a909      	add	r1, sp, #36	; 0x24
 8002c60:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c62:	f5a9 6900 	sub.w	r9, r9, #2048	; 0x800
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002c66:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c68:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6a:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c6c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002c6e:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c72:	f7fd ff87 	bl	8000b84 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002c76:	2386      	movs	r3, #134	; 0x86
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c78:	a909      	add	r1, sp, #36	; 0x24
 8002c7a:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7c:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002c7e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c80:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c82:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002c84:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c88:	f7fd ff7c 	bl	8000b84 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002c8c:	a909      	add	r1, sp, #36	; 0x24
 8002c8e:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002c90:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c94:	f04f 0b01 	mov.w	fp, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c98:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9a:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c9c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002c9e:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002ca2:	f7fd ff6f 	bl	8000b84 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8002ca6:	f44f 4381 	mov.w	r3, #16512	; 0x4080
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002caa:	a909      	add	r1, sp, #36	; 0x24
 8002cac:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cae:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8002cb2:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb4:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb6:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cb8:	f7fd ff64 	bl	8000b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002cbc:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002cbe:	a909      	add	r1, sp, #36	; 0x24
 8002cc0:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cc2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002cc6:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc8:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cca:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002ccc:	f7fd ff5a 	bl	8000b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002cd0:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002cd2:	a909      	add	r1, sp, #36	; 0x24
 8002cd4:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cd6:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002cd8:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cda:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002cdc:	f7fd ff52 	bl	8000b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002ce0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ce4:	a909      	add	r1, sp, #36	; 0x24
 8002ce6:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce8:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002cea:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002cec:	230a      	movs	r3, #10
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cee:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002cf0:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cf2:	950c      	str	r5, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf4:	f7fd ff46 	bl	8000b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002cf8:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002cfc:	a909      	add	r1, sp, #36	; 0x24
 8002cfe:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d00:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002d02:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d04:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002d06:	f7fd ff3d 	bl	8000b84 <HAL_GPIO_Init>
  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002d0a:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d0c:	a909      	add	r1, sp, #36	; 0x24
 8002d0e:	480e      	ldr	r0, [pc, #56]	; (8002d48 <MX_GPIO_Init+0x1c4>)
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002d10:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d12:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d14:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d16:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d18:	950c      	str	r5, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d1a:	f7fd ff33 	bl	8000b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002d1e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d22:	a909      	add	r1, sp, #36	; 0x24
 8002d24:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d26:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002d28:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2a:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d2c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002d2e:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d32:	f7fd ff27 	bl	8000b84 <HAL_GPIO_Init>

}
 8002d36:	b00f      	add	sp, #60	; 0x3c
 8002d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	40021800 	.word	0x40021800
 8002d44:	10110000 	.word	0x10110000
 8002d48:	40020c00 	.word	0x40020c00
 8002d4c:	40020400 	.word	0x40020400
 8002d50:	40020800 	.word	0x40020800

08002d54 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002d54:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8002d56:	4815      	ldr	r0, [pc, #84]	; (8002dac <MX_I2C1_Init+0x58>)
  hi2c1.Init.Timing = 0x00C0EAFF;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d58:	2201      	movs	r2, #1
  hi2c1.Init.Timing = 0x00C0EAFF;
 8002d5a:	4b15      	ldr	r3, [pc, #84]	; (8002db0 <MX_I2C1_Init+0x5c>)
 8002d5c:	4915      	ldr	r1, [pc, #84]	; (8002db4 <MX_I2C1_Init+0x60>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d5e:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8002d60:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c1.Init.OwnAddress1 = 0;
 8002d64:	2300      	movs	r3, #0
 8002d66:	6083      	str	r3, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d68:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002d6a:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002d6c:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d6e:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d70:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d72:	f7fe f89a 	bl	8000eaa <HAL_I2C_Init>
 8002d76:	b118      	cbz	r0, 8002d80 <MX_I2C1_Init+0x2c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002d78:	2143      	movs	r1, #67	; 0x43
 8002d7a:	480f      	ldr	r0, [pc, #60]	; (8002db8 <MX_I2C1_Init+0x64>)
 8002d7c:	f000 f98c 	bl	8003098 <_Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002d80:	2100      	movs	r1, #0
 8002d82:	480a      	ldr	r0, [pc, #40]	; (8002dac <MX_I2C1_Init+0x58>)
 8002d84:	f7fe f8e2 	bl	8000f4c <HAL_I2CEx_ConfigAnalogFilter>
 8002d88:	b118      	cbz	r0, 8002d92 <MX_I2C1_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002d8a:	214a      	movs	r1, #74	; 0x4a
 8002d8c:	480a      	ldr	r0, [pc, #40]	; (8002db8 <MX_I2C1_Init+0x64>)
 8002d8e:	f000 f983 	bl	8003098 <_Error_Handler>
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002d92:	2100      	movs	r1, #0
 8002d94:	4805      	ldr	r0, [pc, #20]	; (8002dac <MX_I2C1_Init+0x58>)
 8002d96:	f7fe f8ff 	bl	8000f98 <HAL_I2CEx_ConfigDigitalFilter>
 8002d9a:	b128      	cbz	r0, 8002da8 <MX_I2C1_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002d9c:	2151      	movs	r1, #81	; 0x51
 8002d9e:	4806      	ldr	r0, [pc, #24]	; (8002db8 <MX_I2C1_Init+0x64>)
  }

}
 8002da0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8002da4:	f000 b978 	b.w	8003098 <_Error_Handler>
 8002da8:	bd08      	pop	{r3, pc}
 8002daa:	bf00      	nop
 8002dac:	200013a0 	.word	0x200013a0
 8002db0:	00c0eaff 	.word	0x00c0eaff
 8002db4:	40005400 	.word	0x40005400
 8002db8:	08004d2d 	.word	0x08004d2d

08002dbc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002dbc:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 8002dbe:	4815      	ldr	r0, [pc, #84]	; (8002e14 <MX_I2C2_Init+0x58>)
  hi2c2.Init.Timing = 0x00C0EAFF;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002dc0:	2201      	movs	r2, #1
  hi2c2.Init.Timing = 0x00C0EAFF;
 8002dc2:	4b15      	ldr	r3, [pc, #84]	; (8002e18 <MX_I2C2_Init+0x5c>)
 8002dc4:	4915      	ldr	r1, [pc, #84]	; (8002e1c <MX_I2C2_Init+0x60>)
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002dc6:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.Timing = 0x00C0EAFF;
 8002dc8:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c2.Init.OwnAddress1 = 0;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	6083      	str	r3, [r0, #8]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002dd0:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002dd2:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002dd4:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002dd6:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002dd8:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002dda:	f7fe f866 	bl	8000eaa <HAL_I2C_Init>
 8002dde:	b118      	cbz	r0, 8002de8 <MX_I2C2_Init+0x2c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002de0:	2164      	movs	r1, #100	; 0x64
 8002de2:	480f      	ldr	r0, [pc, #60]	; (8002e20 <MX_I2C2_Init+0x64>)
 8002de4:	f000 f958 	bl	8003098 <_Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002de8:	2100      	movs	r1, #0
 8002dea:	480a      	ldr	r0, [pc, #40]	; (8002e14 <MX_I2C2_Init+0x58>)
 8002dec:	f7fe f8ae 	bl	8000f4c <HAL_I2CEx_ConfigAnalogFilter>
 8002df0:	b118      	cbz	r0, 8002dfa <MX_I2C2_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002df2:	216b      	movs	r1, #107	; 0x6b
 8002df4:	480a      	ldr	r0, [pc, #40]	; (8002e20 <MX_I2C2_Init+0x64>)
 8002df6:	f000 f94f 	bl	8003098 <_Error_Handler>
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	4805      	ldr	r0, [pc, #20]	; (8002e14 <MX_I2C2_Init+0x58>)
 8002dfe:	f7fe f8cb 	bl	8000f98 <HAL_I2CEx_ConfigDigitalFilter>
 8002e02:	b128      	cbz	r0, 8002e10 <MX_I2C2_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002e04:	2172      	movs	r1, #114	; 0x72
 8002e06:	4806      	ldr	r0, [pc, #24]	; (8002e20 <MX_I2C2_Init+0x64>)
  }

}
 8002e08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8002e0c:	f000 b944 	b.w	8003098 <_Error_Handler>
 8002e10:	bd08      	pop	{r3, pc}
 8002e12:	bf00      	nop
 8002e14:	200013ec 	.word	0x200013ec
 8002e18:	00c0eaff 	.word	0x00c0eaff
 8002e1c:	40005800 	.word	0x40005800
 8002e20:	08004d2d 	.word	0x08004d2d

08002e24 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 8002e24:	6803      	ldr	r3, [r0, #0]
 8002e26:	4a1e      	ldr	r2, [pc, #120]	; (8002ea0 <HAL_I2C_MspInit+0x7c>)
 8002e28:	4293      	cmp	r3, r2
{
 8002e2a:	b500      	push	{lr}
 8002e2c:	b089      	sub	sp, #36	; 0x24
  if(i2cHandle->Instance==I2C1)
 8002e2e:	d11b      	bne.n	8002e68 <HAL_I2C_MspInit+0x44>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_X_SCL_Pin|I2C1_X_SDA_Pin;
 8002e30:	f44f 7340 	mov.w	r3, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e34:	a903      	add	r1, sp, #12
 8002e36:	481b      	ldr	r0, [pc, #108]	; (8002ea4 <HAL_I2C_MspInit+0x80>)
    GPIO_InitStruct.Pin = I2C1_X_SCL_Pin|I2C1_X_SDA_Pin;
 8002e38:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e3a:	2312      	movs	r3, #18
 8002e3c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e42:	2303      	movs	r3, #3
 8002e44:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e46:	2304      	movs	r3, #4
 8002e48:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e4a:	f7fd fe9b 	bl	8000b84 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e4e:	4b16      	ldr	r3, [pc, #88]	; (8002ea8 <HAL_I2C_MspInit+0x84>)
 8002e50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e52:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002e56:	641a      	str	r2, [r3, #64]	; 0x40
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e5e:	9301      	str	r3, [sp, #4]
 8002e60:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002e62:	b009      	add	sp, #36	; 0x24
 8002e64:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(i2cHandle->Instance==I2C2)
 8002e68:	4a10      	ldr	r2, [pc, #64]	; (8002eac <HAL_I2C_MspInit+0x88>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d1f9      	bne.n	8002e62 <HAL_I2C_MspInit+0x3e>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002e6e:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e70:	2212      	movs	r2, #18
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e72:	a903      	add	r1, sp, #12
 8002e74:	480e      	ldr	r0, [pc, #56]	; (8002eb0 <HAL_I2C_MspInit+0x8c>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002e76:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e78:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e7a:	2201      	movs	r2, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e7c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002e7e:	2304      	movs	r3, #4
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e80:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002e82:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e84:	f7fd fe7e 	bl	8000b84 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002e88:	4b07      	ldr	r3, [pc, #28]	; (8002ea8 <HAL_I2C_MspInit+0x84>)
 8002e8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e8c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002e90:	641a      	str	r2, [r3, #64]	; 0x40
 8002e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e98:	9302      	str	r3, [sp, #8]
 8002e9a:	9b02      	ldr	r3, [sp, #8]
}
 8002e9c:	e7e1      	b.n	8002e62 <HAL_I2C_MspInit+0x3e>
 8002e9e:	bf00      	nop
 8002ea0:	40005400 	.word	0x40005400
 8002ea4:	40020400 	.word	0x40020400
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	40005800 	.word	0x40005800
 8002eb0:	40021400 	.word	0x40021400

08002eb4 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eb4:	4b33      	ldr	r3, [pc, #204]	; (8002f84 <SystemClock_Config+0xd0>)
 8002eb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eb8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 8002ebc:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ebe:	641a      	str	r2, [r3, #64]	; 0x40
{
 8002ec0:	b0b9      	sub	sp, #228	; 0xe4
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ec4:	2502      	movs	r5, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002ec6:	4a30      	ldr	r2, [pc, #192]	; (8002f88 <SystemClock_Config+0xd4>)
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002ec8:	2404      	movs	r4, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
  RCC_OscInitStruct.PLL.PLLN = 100;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ece:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002ed4:	6813      	ldr	r3, [r2, #0]
 8002ed6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002eda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ede:	6013      	str	r3, [r2, #0]
 8002ee0:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ee2:	950d      	str	r5, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002ee4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002ee8:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002eea:	9511      	str	r5, [sp, #68]	; 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002eec:	9301      	str	r3, [sp, #4]
 8002eee:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002ef0:	2309      	movs	r3, #9
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002ef2:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002ef4:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002ef6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002efa:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002efc:	2301      	movs	r3, #1
 8002efe:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f00:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f04:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002f06:	2364      	movs	r3, #100	; 0x64
 8002f08:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f0a:	f7fe f8a3 	bl	8001054 <HAL_RCC_OscConfig>
 8002f0e:	b100      	cbz	r0, 8002f12 <SystemClock_Config+0x5e>
 8002f10:	e7fe      	b.n	8002f10 <SystemClock_Config+0x5c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Activate the Over-Drive mode
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002f12:	f7fe f867 	bl	8000fe4 <HAL_PWREx_EnableOverDrive>
 8002f16:	b100      	cbz	r0, 8002f1a <SystemClock_Config+0x66>
 8002f18:	e7fe      	b.n	8002f18 <SystemClock_Config+0x64>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f1a:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f1c:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f1e:	9006      	str	r0, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002f20:	2103      	movs	r1, #3
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f22:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002f24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002f28:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f2a:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002f2c:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002f2e:	f7fe fa53 	bl	80013d8 <HAL_RCC_ClockConfig>
 8002f32:	b100      	cbz	r0, 8002f36 <SystemClock_Config+0x82>
 8002f34:	e7fe      	b.n	8002f34 <SystemClock_Config+0x80>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8002f36:	f64f 53a0 	movw	r3, #64928	; 0xfda0
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART6
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_UART7
                              |RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C2;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002f3a:	9026      	str	r0, [sp, #152]	; 0x98
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002f3c:	9027      	str	r0, [sp, #156]	; 0x9c
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8002f3e:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002f40:	f44f 7300 	mov.w	r3, #512	; 0x200
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002f44:	9029      	str	r0, [sp, #164]	; 0xa4
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8002f46:	902a      	str	r0, [sp, #168]	; 0xa8
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8002f48:	902b      	str	r0, [sp, #172]	; 0xac
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 8002f4a:	902c      	str	r0, [sp, #176]	; 0xb0
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002f4c:	902d      	str	r0, [sp, #180]	; 0xb4
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002f4e:	902e      	str	r0, [sp, #184]	; 0xb8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f50:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002f52:	9320      	str	r3, [sp, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f54:	f7fe fb04 	bl	8001560 <HAL_RCCEx_PeriphCLKConfig>
 8002f58:	4605      	mov	r5, r0
 8002f5a:	b100      	cbz	r0, 8002f5e <SystemClock_Config+0xaa>
 8002f5c:	e7fe      	b.n	8002f5c <SystemClock_Config+0xa8>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002f5e:	f7fe fad9 	bl	8001514 <HAL_RCC_GetHCLKFreq>
 8002f62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f66:	fbb0 f0f3 	udiv	r0, r0, r3
 8002f6a:	f7fd fbf9 	bl	8000760 <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002f6e:	4620      	mov	r0, r4
 8002f70:	f7fd fc0c 	bl	800078c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002f74:	462a      	mov	r2, r5
 8002f76:	4629      	mov	r1, r5
 8002f78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f7c:	f7fd fb9e 	bl	80006bc <HAL_NVIC_SetPriority>
}
 8002f80:	b039      	add	sp, #228	; 0xe4
 8002f82:	bd30      	pop	{r4, r5, pc}
 8002f84:	40023800 	.word	0x40023800
 8002f88:	40007000 	.word	0x40007000

08002f8c <USART_PRINT_MSG_Configuration>:
/* USER CODE BEGIN 4 */

#ifdef USART_PRINT_MSG
void USART_PRINT_MSG_Configuration(UART_HandleTypeDef *UART_MsgHandle,
		uint32_t baud_rate) {
	UART_MsgHandle->Instance = WIFI_UART_MSG;
 8002f8c:	4b0d      	ldr	r3, [pc, #52]	; (8002fc4 <USART_PRINT_MSG_Configuration+0x38>)
		uint32_t baud_rate) {
 8002f8e:	b510      	push	{r4, lr}
	UART_MsgHandle->Instance = WIFI_UART_MSG;
 8002f90:	6003      	str	r3, [r0, #0]
	UART_MsgHandle->Init.BaudRate = baud_rate;
	UART_MsgHandle->Init.WordLength = UART_WORDLENGTH_8B;
 8002f92:	2300      	movs	r3, #0
	UART_MsgHandle->Init.BaudRate = baud_rate;
 8002f94:	6041      	str	r1, [r0, #4]
		uint32_t baud_rate) {
 8002f96:	4604      	mov	r4, r0
	UART_MsgHandle->Init.WordLength = UART_WORDLENGTH_8B;
 8002f98:	6083      	str	r3, [r0, #8]
	UART_MsgHandle->Init.StopBits = UART_STOPBITS_1;
 8002f9a:	60c3      	str	r3, [r0, #12]
	UART_MsgHandle->Init.Parity = UART_PARITY_NONE;
 8002f9c:	6103      	str	r3, [r0, #16]
	UART_MsgHandle->Init.HwFlowCtl = UART_HWCONTROL_NONE; // USART_HardwareFlowControl_RTS_CTS;
 8002f9e:	6183      	str	r3, [r0, #24]
	UART_MsgHandle->Init.Mode = UART_MODE_TX_RX;
 8002fa0:	230c      	movs	r3, #12
 8002fa2:	6143      	str	r3, [r0, #20]

	if (HAL_UART_DeInit(UART_MsgHandle) != HAL_OK) {
 8002fa4:	f7ff f863 	bl	800206e <HAL_UART_DeInit>
 8002fa8:	b100      	cbz	r0, 8002fac <USART_PRINT_MSG_Configuration+0x20>
 8002faa:	e7fe      	b.n	8002faa <USART_PRINT_MSG_Configuration+0x1e>
		Error_Handler();
	}
	if (HAL_UART_Init(UART_MsgHandle) != HAL_OK) {
 8002fac:	4620      	mov	r0, r4
 8002fae:	f7ff fc22 	bl	80027f6 <HAL_UART_Init>
 8002fb2:	b100      	cbz	r0, 8002fb6 <USART_PRINT_MSG_Configuration+0x2a>
 8002fb4:	e7fe      	b.n	8002fb4 <USART_PRINT_MSG_Configuration+0x28>
		Error_Handler();
	}
#ifdef WIFI_USE_VCOM
	/*## -1- Enable USART2 DMAT & DMAR #################################################*/
	UART_MsgHandle->Instance->CR3 |= 0x00000040;
 8002fb6:	6822      	ldr	r2, [r4, #0]
 8002fb8:	6893      	ldr	r3, [r2, #8]
 8002fba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fbe:	6093      	str	r3, [r2, #8]
 8002fc0:	bd10      	pop	{r4, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40004800 	.word	0x40004800

08002fc8 <main>:
{
 8002fc8:	b510      	push	{r4, lr}
	setvbuf(stdin, NULL, _IONBF, 0);
 8002fca:	4c2d      	ldr	r4, [pc, #180]	; (8003080 <main+0xb8>)
 8002fcc:	2300      	movs	r3, #0
 8002fce:	2202      	movs	r2, #2
 8002fd0:	6820      	ldr	r0, [r4, #0]
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	6840      	ldr	r0, [r0, #4]
 8002fd6:	f001 f915 	bl	8004204 <setvbuf>
	setvbuf(stdout, NULL, _IONBF, 0);
 8002fda:	2300      	movs	r3, #0
 8002fdc:	6820      	ldr	r0, [r4, #0]
 8002fde:	2202      	movs	r2, #2
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	6880      	ldr	r0, [r0, #8]
 8002fe4:	f001 f90e 	bl	8004204 <setvbuf>
	setvbuf(stderr, NULL, _IONBF, 0);
 8002fe8:	2300      	movs	r3, #0
 8002fea:	6820      	ldr	r0, [r4, #0]
 8002fec:	2202      	movs	r2, #2
 8002fee:	4619      	mov	r1, r3
 8002ff0:	68c0      	ldr	r0, [r0, #12]
 8002ff2:	f001 f907 	bl	8004204 <setvbuf>
  HAL_Init();
 8002ff6:	f7fd fb1f 	bl	8000638 <HAL_Init>
  SystemClock_Config();
 8002ffa:	f7ff ff5b 	bl	8002eb4 <SystemClock_Config>
  MX_GPIO_Init();
 8002ffe:	f7ff fdc1 	bl	8002b84 <MX_GPIO_Init>
  MX_DMA_Init();
 8003002:	f7ff fd8f 	bl	8002b24 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8003006:	f000 fbcf 	bl	80037a8 <MX_USART3_UART_Init>
  MX_CRC_Init();
 800300a:	f7ff fd59 	bl	8002ac0 <MX_CRC_Init>
  MX_I2C1_Init();
 800300e:	f7ff fea1 	bl	8002d54 <MX_I2C1_Init>
  MX_I2C2_Init();
 8003012:	f7ff fed3 	bl	8002dbc <MX_I2C2_Init>
  MX_RTC_Init();
 8003016:	f000 f841 	bl	800309c <MX_RTC_Init>
  MX_SPI1_Init();
 800301a:	f000 f86b 	bl	80030f4 <MX_SPI1_Init>
  MX_SPI2_Init();
 800301e:	f000 f893 	bl	8003148 <MX_SPI2_Init>
  MX_TIM1_Init();
 8003022:	f000 fa1b 	bl	800345c <MX_TIM1_Init>
  MX_TIM2_Init();
 8003026:	f000 fa4f 	bl	80034c8 <MX_TIM2_Init>
  MX_TIM3_Init();
 800302a:	f000 fa81 	bl	8003530 <MX_TIM3_Init>
  MX_TIM4_Init();
 800302e:	f000 fab7 	bl	80035a0 <MX_TIM4_Init>
  MX_UART5_Init();
 8003032:	f000 fb31 	bl	8003698 <MX_UART5_Init>
  MX_UART7_Init();
 8003036:	f000 fb51 	bl	80036dc <MX_UART7_Init>
  MX_UART8_Init();
 800303a:	f000 fb71 	bl	8003720 <MX_UART8_Init>
  MX_USART2_UART_Init();
 800303e:	f000 fb91 	bl	8003764 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8003042:	f000 fbd3 	bl	80037ec <MX_USART6_UART_Init>
	USART_PRINT_MSG_Configuration(&huart3, 115200);
 8003046:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800304a:	480e      	ldr	r0, [pc, #56]	; (8003084 <main+0xbc>)
 800304c:	f7ff ff9e 	bl	8002f8c <USART_PRINT_MSG_Configuration>
	Set_UartMsgHandle(&huart3); //this is required for the console handler initialization
 8003050:	480c      	ldr	r0, [pc, #48]	; (8003084 <main+0xbc>)
 8003052:	f7ff fc03 	bl	800285c <Set_UartMsgHandle>
	printf("\r\n Robot console starting \r\n");
 8003056:	480c      	ldr	r0, [pc, #48]	; (8003088 <main+0xc0>)
 8003058:	f001 f8bc 	bl	80041d4 <puts>
	printf("\r\n Please wait... \r\n");
 800305c:	480b      	ldr	r0, [pc, #44]	; (800308c <main+0xc4>)
 800305e:	f001 f8b9 	bl	80041d4 <puts>
	USART2->CR3 |= 0x00000040;
 8003062:	4a0b      	ldr	r2, [pc, #44]	; (8003090 <main+0xc8>)
 8003064:	6893      	ldr	r3, [r2, #8]
 8003066:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800306a:	6093      	str	r3, [r2, #8]
		UART_DMA_Init();
 800306c:	f7ff fbfc 	bl	8002868 <UART_DMA_Init>
	HAL_Delay(2000);
 8003070:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003074:	f7fd fafe 	bl	8000674 <HAL_Delay>
	printf("\r\n Console Ready... \r\n");
 8003078:	4806      	ldr	r0, [pc, #24]	; (8003094 <main+0xcc>)
 800307a:	f001 f8ab 	bl	80041d4 <puts>
 800307e:	e7fe      	b.n	800307e <main+0xb6>
 8003080:	2000000c 	.word	0x2000000c
 8003084:	20001070 	.word	0x20001070
 8003088:	08004d3a 	.word	0x08004d3a
 800308c:	08004d56 	.word	0x08004d56
 8003090:	40004400 	.word	0x40004400
 8003094:	08004d6a 	.word	0x08004d6a

08003098 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8003098:	e7fe      	b.n	8003098 <_Error_Handler>
	...

0800309c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800309c:	b508      	push	{r3, lr}

    /**Initialize RTC Only 
    */
  hrtc.Instance = RTC;
 800309e:	480b      	ldr	r0, [pc, #44]	; (80030cc <MX_RTC_Init+0x30>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
 80030a0:	227f      	movs	r2, #127	; 0x7f
  hrtc.Instance = RTC;
 80030a2:	4b0b      	ldr	r3, [pc, #44]	; (80030d0 <MX_RTC_Init+0x34>)
  hrtc.Init.AsynchPrediv = 127;
 80030a4:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 80030a6:	22ff      	movs	r2, #255	; 0xff
  hrtc.Instance = RTC;
 80030a8:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80030aa:	2300      	movs	r3, #0
  hrtc.Init.SynchPrediv = 255;
 80030ac:	60c2      	str	r2, [r0, #12]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80030ae:	6043      	str	r3, [r0, #4]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80030b0:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80030b2:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80030b4:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80030b6:	f7fe fd1b 	bl	8001af0 <HAL_RTC_Init>
 80030ba:	b128      	cbz	r0, 80030c8 <MX_RTC_Init+0x2c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80030bc:	2140      	movs	r1, #64	; 0x40
 80030be:	4805      	ldr	r0, [pc, #20]	; (80030d4 <MX_RTC_Init+0x38>)
  }

}
 80030c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80030c4:	f7ff bfe8 	b.w	8003098 <_Error_Handler>
 80030c8:	bd08      	pop	{r3, pc}
 80030ca:	bf00      	nop
 80030cc:	20001438 	.word	0x20001438
 80030d0:	40002800 	.word	0x40002800
 80030d4:	08004d80 	.word	0x08004d80

080030d8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 80030d8:	6802      	ldr	r2, [r0, #0]
 80030da:	4b04      	ldr	r3, [pc, #16]	; (80030ec <HAL_RTC_MspInit+0x14>)
 80030dc:	429a      	cmp	r2, r3
 80030de:	d104      	bne.n	80030ea <HAL_RTC_MspInit+0x12>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80030e0:	4a03      	ldr	r2, [pc, #12]	; (80030f0 <HAL_RTC_MspInit+0x18>)
 80030e2:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80030e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030e8:	6713      	str	r3, [r2, #112]	; 0x70
 80030ea:	4770      	bx	lr
 80030ec:	40002800 	.word	0x40002800
 80030f0:	40023800 	.word	0x40023800

080030f4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80030f4:	b508      	push	{r3, lr}

  hspi1.Instance = SPI1;
 80030f6:	4811      	ldr	r0, [pc, #68]	; (800313c <MX_SPI1_Init+0x48>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80030f8:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80030fc:	f44f 7240 	mov.w	r2, #768	; 0x300
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003100:	490f      	ldr	r1, [pc, #60]	; (8003140 <MX_SPI1_Init+0x4c>)
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8003102:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003104:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003108:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800310c:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800310e:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8003110:	2207      	movs	r2, #7
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003112:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003114:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003116:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003118:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800311a:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800311c:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800311e:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003120:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003122:	2308      	movs	r3, #8
  hspi1.Init.CRCPolynomial = 7;
 8003124:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003126:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003128:	f7fe fd24 	bl	8001b74 <HAL_SPI_Init>
 800312c:	b128      	cbz	r0, 800313a <MX_SPI1_Init+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
 800312e:	2148      	movs	r1, #72	; 0x48
 8003130:	4804      	ldr	r0, [pc, #16]	; (8003144 <MX_SPI1_Init+0x50>)
  }

}
 8003132:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8003136:	f7ff bfaf 	b.w	8003098 <_Error_Handler>
 800313a:	bd08      	pop	{r3, pc}
 800313c:	200014bc 	.word	0x200014bc
 8003140:	40013000 	.word	0x40013000
 8003144:	08004d8d 	.word	0x08004d8d

08003148 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003148:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
 800314a:	4811      	ldr	r0, [pc, #68]	; (8003190 <MX_SPI2_Init+0x48>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800314c:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8003150:	f44f 7240 	mov.w	r2, #768	; 0x300
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003154:	490f      	ldr	r1, [pc, #60]	; (8003194 <MX_SPI2_Init+0x4c>)
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8003156:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003158:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800315c:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003160:	2300      	movs	r3, #0
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003162:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 7;
 8003164:	2207      	movs	r2, #7
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003166:	6083      	str	r3, [r0, #8]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003168:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800316a:	6143      	str	r3, [r0, #20]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800316c:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800316e:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003170:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003172:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003174:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003176:	2308      	movs	r3, #8
  hspi2.Init.CRCPolynomial = 7;
 8003178:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800317a:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800317c:	f7fe fcfa 	bl	8001b74 <HAL_SPI_Init>
 8003180:	b128      	cbz	r0, 800318e <MX_SPI2_Init+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003182:	2160      	movs	r1, #96	; 0x60
 8003184:	4804      	ldr	r0, [pc, #16]	; (8003198 <MX_SPI2_Init+0x50>)
  }

}
 8003186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 800318a:	f7ff bf85 	b.w	8003098 <_Error_Handler>
 800318e:	bd08      	pop	{r3, pc}
 8003190:	20001458 	.word	0x20001458
 8003194:	40003800 	.word	0x40003800
 8003198:	08004d8d 	.word	0x08004d8d

0800319c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 800319c:	6803      	ldr	r3, [r0, #0]
 800319e:	4a27      	ldr	r2, [pc, #156]	; (800323c <HAL_SPI_MspInit+0xa0>)
 80031a0:	4293      	cmp	r3, r2
{
 80031a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031a4:	b089      	sub	sp, #36	; 0x24
  if(spiHandle->Instance==SPI1)
 80031a6:	d123      	bne.n	80031f0 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80031a8:	4b25      	ldr	r3, [pc, #148]	; (8003240 <HAL_SPI_MspInit+0xa4>)
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031aa:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ac:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ae:	2503      	movs	r5, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 80031b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80031b2:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031b4:	a903      	add	r1, sp, #12
 80031b6:	4823      	ldr	r0, [pc, #140]	; (8003244 <HAL_SPI_MspInit+0xa8>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80031b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031bc:	645a      	str	r2, [r3, #68]	; 0x44
 80031be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c0:	9704      	str	r7, [sp, #16]
    __HAL_RCC_SPI1_CLK_ENABLE();
 80031c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c6:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031c8:	9506      	str	r5, [sp, #24]
    __HAL_RCC_SPI1_CLK_ENABLE();
 80031ca:	9301      	str	r3, [sp, #4]
 80031cc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80031ce:	2360      	movs	r3, #96	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80031d0:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80031d2:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031d4:	f7fd fcd6 	bl	8000b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80031d8:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031da:	a903      	add	r1, sp, #12
 80031dc:	481a      	ldr	r0, [pc, #104]	; (8003248 <HAL_SPI_MspInit+0xac>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80031de:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e0:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e2:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031e4:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80031e6:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031e8:	f7fd fccc 	bl	8000b84 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80031ec:	b009      	add	sp, #36	; 0x24
 80031ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(spiHandle->Instance==SPI2)
 80031f0:	4a16      	ldr	r2, [pc, #88]	; (800324c <HAL_SPI_MspInit+0xb0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d1fa      	bne.n	80031ec <HAL_SPI_MspInit+0x50>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80031f6:	4b12      	ldr	r3, [pc, #72]	; (8003240 <HAL_SPI_MspInit+0xa4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f8:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fa:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031fc:	2503      	movs	r5, #3
    __HAL_RCC_SPI2_CLK_ENABLE();
 80031fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003200:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003202:	4813      	ldr	r0, [pc, #76]	; (8003250 <HAL_SPI_MspInit+0xb4>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003204:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003208:	641a      	str	r2, [r3, #64]	; 0x40
 800320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800320c:	9704      	str	r7, [sp, #16]
    __HAL_RCC_SPI2_CLK_ENABLE();
 800320e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003212:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003214:	9506      	str	r5, [sp, #24]
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003216:	9302      	str	r3, [sp, #8]
 8003218:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800321a:	230c      	movs	r3, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800321c:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800321e:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003222:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003224:	f7fd fcae 	bl	8000b84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003228:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800322c:	9704      	str	r7, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800322e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003230:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003232:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003234:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003236:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003238:	4806      	ldr	r0, [pc, #24]	; (8003254 <HAL_SPI_MspInit+0xb8>)
 800323a:	e7d5      	b.n	80031e8 <HAL_SPI_MspInit+0x4c>
 800323c:	40013000 	.word	0x40013000
 8003240:	40023800 	.word	0x40023800
 8003244:	40020000 	.word	0x40020000
 8003248:	40020c00 	.word	0x40020c00
 800324c:	40003800 	.word	0x40003800
 8003250:	40020800 	.word	0x40020800
 8003254:	40020400 	.word	0x40020400

08003258 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003258:	4b21      	ldr	r3, [pc, #132]	; (80032e0 <HAL_MspInit+0x88>)
{
 800325a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800325c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800325e:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8003260:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003264:	641a      	str	r2, [r3, #64]	; 0x40
 8003266:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003268:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800326c:	9200      	str	r2, [sp, #0]
 800326e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003270:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003272:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003276:	645a      	str	r2, [r3, #68]	; 0x44
 8003278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800327e:	9301      	str	r3, [sp, #4]
 8003280:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003282:	f7fd fa09 	bl	8000698 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003286:	2200      	movs	r2, #0
 8003288:	f06f 000b 	mvn.w	r0, #11
 800328c:	4611      	mov	r1, r2
 800328e:	f7fd fa15 	bl	80006bc <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003292:	2200      	movs	r2, #0
 8003294:	f06f 000a 	mvn.w	r0, #10
 8003298:	4611      	mov	r1, r2
 800329a:	f7fd fa0f 	bl	80006bc <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800329e:	2200      	movs	r2, #0
 80032a0:	f06f 0009 	mvn.w	r0, #9
 80032a4:	4611      	mov	r1, r2
 80032a6:	f7fd fa09 	bl	80006bc <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80032aa:	2200      	movs	r2, #0
 80032ac:	f06f 0004 	mvn.w	r0, #4
 80032b0:	4611      	mov	r1, r2
 80032b2:	f7fd fa03 	bl	80006bc <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80032b6:	2200      	movs	r2, #0
 80032b8:	f06f 0003 	mvn.w	r0, #3
 80032bc:	4611      	mov	r1, r2
 80032be:	f7fd f9fd 	bl	80006bc <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80032c2:	2200      	movs	r2, #0
 80032c4:	f06f 0001 	mvn.w	r0, #1
 80032c8:	4611      	mov	r1, r2
 80032ca:	f7fd f9f7 	bl	80006bc <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80032ce:	2200      	movs	r2, #0
 80032d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032d4:	4611      	mov	r1, r2
 80032d6:	f7fd f9f1 	bl	80006bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032da:	b003      	add	sp, #12
 80032dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80032e0:	40023800 	.word	0x40023800

080032e4 <NMI_Handler>:
 80032e4:	4770      	bx	lr

080032e6 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80032e6:	e7fe      	b.n	80032e6 <HardFault_Handler>

080032e8 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80032e8:	e7fe      	b.n	80032e8 <MemManage_Handler>

080032ea <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80032ea:	e7fe      	b.n	80032ea <BusFault_Handler>

080032ec <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80032ec:	e7fe      	b.n	80032ec <UsageFault_Handler>

080032ee <SVC_Handler>:
 80032ee:	4770      	bx	lr

080032f0 <DebugMon_Handler>:
 80032f0:	4770      	bx	lr

080032f2 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80032f2:	4770      	bx	lr

080032f4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80032f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032f6:	f7fd f9ab 	bl	8000650 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80032fe:	f7fd ba52 	b.w	80007a6 <HAL_SYSTICK_IRQHandler>
	...

08003304 <TIM3_IRQHandler>:
 * @brief  This function handles TIM interrupt request.
 * @param  None
 * @retval None
 */
void TIM3_IRQHandler(void) {
	HAL_TIM_IRQHandler(&htim3);
 8003304:	4801      	ldr	r0, [pc, #4]	; (800330c <TIM3_IRQHandler+0x8>)
 8003306:	f7fe bcb2 	b.w	8001c6e <HAL_TIM_IRQHandler>
 800330a:	bf00      	nop
 800330c:	20001520 	.word	0x20001520

08003310 <TIM2_IRQHandler>:
 * @brief  This function handles TIM interrupt request.
 * @param  None
 * @retval None
 */
void TIM2_IRQHandler(void) {
	HAL_TIM_IRQHandler(&htim2);
 8003310:	4801      	ldr	r0, [pc, #4]	; (8003318 <TIM2_IRQHandler+0x8>)
 8003312:	f7fe bcac 	b.w	8001c6e <HAL_TIM_IRQHandler>
 8003316:	bf00      	nop
 8003318:	20001560 	.word	0x20001560

0800331c <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800331c:	4801      	ldr	r0, [pc, #4]	; (8003324 <DMA1_Stream3_IRQHandler+0x8>)
 800331e:	f7fd bb77 	b.w	8000a10 <HAL_DMA_IRQHandler>
 8003322:	bf00      	nop
 8003324:	20001214 	.word	0x20001214

08003328 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003328:	4801      	ldr	r0, [pc, #4]	; (8003330 <DMA1_Stream6_IRQHandler+0x8>)
 800332a:	f7fd bb71 	b.w	8000a10 <HAL_DMA_IRQHandler>
 800332e:	bf00      	nop
 8003330:	200012d4 	.word	0x200012d4

08003334 <HAL_UART_RxCpltCallback>:
 8003334:	4770      	bx	lr

08003336 <HAL_UART_TxCpltCallback>:
 * @brief  HAL_UART_TxCpltCallback
 *         Tx Transfer completed callback
 * @param  UsartHandle: UART handle
 * @retval None
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandleArg) {
 8003336:	4770      	bx	lr

08003338 <HAL_UART_ErrorCallback>:
 *         add your own implementation.
 * @retval None
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle) {
	// WiFi_HAL_UART_ErrorCallback(UartHandle);
	printf("UART ERROR!!!");
 8003338:	4801      	ldr	r0, [pc, #4]	; (8003340 <HAL_UART_ErrorCallback+0x8>)
 800333a:	f000 bed7 	b.w	80040ec <iprintf>
 800333e:	bf00      	nop
 8003340:	08004d9a 	.word	0x08004d9a

08003344 <USART2_IRQHandler>:
 * @param  None
 * @retval None
 */
void USARTx_IRQHandler(void) {
	// printf("WIFI UART IRQ");
	HAL_UART_IRQHandler(&huart2);
 8003344:	4801      	ldr	r0, [pc, #4]	; (800334c <USART2_IRQHandler+0x8>)
 8003346:	f7fe bfdf 	b.w	8002308 <HAL_UART_IRQHandler>
 800334a:	bf00      	nop
 800334c:	20000098 	.word	0x20000098

08003350 <USART3_IRQHandler>:
 * @retval None
 */
#ifdef USART_PRINT_MSG
void USARTx_PRINT_IRQHandler(void) {
	// printf("CONSOLE UART IRQ");
	HAL_UART_IRQHandler(&huart3);
 8003350:	4801      	ldr	r0, [pc, #4]	; (8003358 <USART3_IRQHandler+0x8>)
 8003352:	f7fe bfd9 	b.w	8002308 <HAL_UART_IRQHandler>
 8003356:	bf00      	nop
 8003358:	20001070 	.word	0x20001070

0800335c <DMA1_Stream1_IRQHandler>:
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF1)==(DMA_LISR_TCIF1));
 800335c:	4b04      	ldr	r3, [pc, #16]	; (8003370 <DMA1_Stream1_IRQHandler+0x14>)
 800335e:	681a      	ldr	r2, [r3, #0]

#ifdef USE_STM32F7XX_NUCLEO
// CONSOLE - UART - RX
void DMA1_Stream1_IRQHandler(void) {
	//printf("Reading from console\r\n");
	if (LL_DMA_IsActiveFlag_TC1(DMA1) == 1) {
 8003360:	0512      	lsls	r2, r2, #20
 8003362:	d504      	bpl.n	800336e <DMA1_Stream1_IRQHandler+0x12>
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF1);
 8003364:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003368:	609a      	str	r2, [r3, #8]
		LL_DMA_ClearFlag_TC1(DMA1);
		DMA1_TransferComplete();
 800336a:	f7ff bb1d 	b.w	80029a8 <DMA1_TransferComplete>
 800336e:	4770      	bx	lr
 8003370:	40026000 	.word	0x40026000

08003374 <DMA1_Stream5_IRQHandler>:
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF5)==(DMA_HISR_TCIF5));
 8003374:	4b04      	ldr	r3, [pc, #16]	; (8003388 <DMA1_Stream5_IRQHandler+0x14>)
 8003376:	685a      	ldr	r2, [r3, #4]
}

// WIFI - UART - RX
void DMA1_Stream5_IRQHandler(void) {
	// printf("Reading from WIFI UART\r\n");
	if (LL_DMA_IsActiveFlag_TC5(DMA1) == 1) {
 8003378:	0512      	lsls	r2, r2, #20
 800337a:	d504      	bpl.n	8003386 <DMA1_Stream5_IRQHandler+0x12>
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF5);
 800337c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003380:	60da      	str	r2, [r3, #12]
		LL_DMA_ClearFlag_TC5(DMA1);
		DMA2_TransferComplete();
 8003382:	f7ff bb39 	b.w	80029f8 <DMA2_TransferComplete>
 8003386:	4770      	bx	lr
 8003388:	40026000 	.word	0x40026000

0800338c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 800338c:	b570      	push	{r4, r5, r6, lr}
 800338e:	460e      	mov	r6, r1
 8003390:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003392:	460c      	mov	r4, r1
 8003394:	1ba3      	subs	r3, r4, r6
 8003396:	429d      	cmp	r5, r3
 8003398:	dc01      	bgt.n	800339e <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800339a:	4628      	mov	r0, r5
 800339c:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800339e:	f7ff fb8d 	bl	8002abc <__io_getchar>
 80033a2:	f804 0b01 	strb.w	r0, [r4], #1
 80033a6:	e7f5      	b.n	8003394 <_read+0x8>

080033a8 <_write>:

int _write(int file, char *ptr, int len)
{
 80033a8:	b570      	push	{r4, r5, r6, lr}
 80033aa:	460e      	mov	r6, r1
 80033ac:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033ae:	460c      	mov	r4, r1
 80033b0:	1ba3      	subs	r3, r4, r6
 80033b2:	429d      	cmp	r5, r3
 80033b4:	dc01      	bgt.n	80033ba <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80033b6:	4628      	mov	r0, r5
 80033b8:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80033ba:	f814 0b01 	ldrb.w	r0, [r4], #1
 80033be:	f7ff fb7b 	bl	8002ab8 <__io_putchar>
 80033c2:	e7f5      	b.n	80033b0 <_write+0x8>

080033c4 <_sbrk>:

caddr_t _sbrk(int incr)
{
 80033c4:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80033c6:	4b0a      	ldr	r3, [pc, #40]	; (80033f0 <_sbrk+0x2c>)
{
 80033c8:	4602      	mov	r2, r0
	if (heap_end == 0)
 80033ca:	6819      	ldr	r1, [r3, #0]
 80033cc:	b909      	cbnz	r1, 80033d2 <_sbrk+0xe>
		heap_end = &end;
 80033ce:	4909      	ldr	r1, [pc, #36]	; (80033f4 <_sbrk+0x30>)
 80033d0:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80033d2:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80033d4:	4669      	mov	r1, sp
 80033d6:	4402      	add	r2, r0
 80033d8:	428a      	cmp	r2, r1
 80033da:	d906      	bls.n	80033ea <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80033dc:	f000 fc2c 	bl	8003c38 <__errno>
 80033e0:	230c      	movs	r3, #12
 80033e2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80033e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033e8:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80033ea:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80033ec:	bd08      	pop	{r3, pc}
 80033ee:	bf00      	nop
 80033f0:	2000008c 	.word	0x2000008c
 80033f4:	200017e4 	.word	0x200017e4

080033f8 <_close>:

int _close(int file)
{
	return -1;
}
 80033f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033fc:	4770      	bx	lr

080033fe <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80033fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8003402:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8003404:	604b      	str	r3, [r1, #4]
}
 8003406:	4770      	bx	lr

08003408 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8003408:	2001      	movs	r0, #1
 800340a:	4770      	bx	lr

0800340c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800340c:	2000      	movs	r0, #0
 800340e:	4770      	bx	lr

08003410 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003410:	490f      	ldr	r1, [pc, #60]	; (8003450 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003412:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003414:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003418:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800341c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8003420:	4b0c      	ldr	r3, [pc, #48]	; (8003454 <SystemInit+0x44>)
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	f042 0201 	orr.w	r2, r2, #1
 8003428:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800342a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003432:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003436:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003438:	4a07      	ldr	r2, [pc, #28]	; (8003458 <SystemInit+0x48>)
 800343a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003442:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003444:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003446:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800344a:	608b      	str	r3, [r1, #8]
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	e000ed00 	.word	0xe000ed00
 8003454:	40023800 	.word	0x40023800
 8003458:	24003010 	.word	0x24003010

0800345c <MX_TIM1_Init>:
void MX_TIM1_Init(void)
{
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim1.Instance = TIM1;
 800345c:	4817      	ldr	r0, [pc, #92]	; (80034bc <MX_TIM1_Init+0x60>)
 800345e:	4b18      	ldr	r3, [pc, #96]	; (80034c0 <MX_TIM1_Init+0x64>)
{
 8003460:	b500      	push	{lr}
  htim1.Instance = TIM1;
 8003462:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 8003464:	2300      	movs	r3, #0
{
 8003466:	b089      	sub	sp, #36	; 0x24
  htim1.Init.Prescaler = 0;
 8003468:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800346a:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 0;
 800346c:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800346e:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8003470:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003472:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003474:	f7fe fd14 	bl	8001ea0 <HAL_TIM_Base_Init>
 8003478:	b118      	cbz	r0, 8003482 <MX_TIM1_Init+0x26>
  {
    _Error_Handler(__FILE__, __LINE__);
 800347a:	2143      	movs	r1, #67	; 0x43
 800347c:	4811      	ldr	r0, [pc, #68]	; (80034c4 <MX_TIM1_Init+0x68>)
 800347e:	f7ff fe0b 	bl	8003098 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003482:	a908      	add	r1, sp, #32
 8003484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003488:	480c      	ldr	r0, [pc, #48]	; (80034bc <MX_TIM1_Init+0x60>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800348a:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800348e:	f7fe fd2b 	bl	8001ee8 <HAL_TIM_ConfigClockSource>
 8003492:	b118      	cbz	r0, 800349c <MX_TIM1_Init+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003494:	2149      	movs	r1, #73	; 0x49
 8003496:	480b      	ldr	r0, [pc, #44]	; (80034c4 <MX_TIM1_Init+0x68>)
 8003498:	f7ff fdfe 	bl	8003098 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800349c:	2300      	movs	r3, #0
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800349e:	a901      	add	r1, sp, #4
 80034a0:	4806      	ldr	r0, [pc, #24]	; (80034bc <MX_TIM1_Init+0x60>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034a2:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80034a4:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034a6:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80034a8:	f7fe fdac 	bl	8002004 <HAL_TIMEx_MasterConfigSynchronization>
 80034ac:	b118      	cbz	r0, 80034b6 <MX_TIM1_Init+0x5a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80034ae:	2151      	movs	r1, #81	; 0x51
 80034b0:	4804      	ldr	r0, [pc, #16]	; (80034c4 <MX_TIM1_Init+0x68>)
 80034b2:	f7ff fdf1 	bl	8003098 <_Error_Handler>
  }

}
 80034b6:	b009      	add	sp, #36	; 0x24
 80034b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80034bc:	200015e0 	.word	0x200015e0
 80034c0:	40010000 	.word	0x40010000
 80034c4:	08004dc0 	.word	0x08004dc0

080034c8 <MX_TIM2_Init>:
void MX_TIM2_Init(void)
{
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 80034c8:	4817      	ldr	r0, [pc, #92]	; (8003528 <MX_TIM2_Init+0x60>)
 80034ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
 80034ce:	b500      	push	{lr}
  htim2.Instance = TIM2;
 80034d0:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 0;
 80034d2:	2300      	movs	r3, #0
{
 80034d4:	b089      	sub	sp, #36	; 0x24
  htim2.Init.Prescaler = 0;
 80034d6:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034d8:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 0;
 80034da:	60c3      	str	r3, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034dc:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034de:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80034e0:	f7fe fcde 	bl	8001ea0 <HAL_TIM_Base_Init>
 80034e4:	b118      	cbz	r0, 80034ee <MX_TIM2_Init+0x26>
  {
    _Error_Handler(__FILE__, __LINE__);
 80034e6:	2163      	movs	r1, #99	; 0x63
 80034e8:	4810      	ldr	r0, [pc, #64]	; (800352c <MX_TIM2_Init+0x64>)
 80034ea:	f7ff fdd5 	bl	8003098 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034ee:	a908      	add	r1, sp, #32
 80034f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80034f4:	480c      	ldr	r0, [pc, #48]	; (8003528 <MX_TIM2_Init+0x60>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034f6:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80034fa:	f7fe fcf5 	bl	8001ee8 <HAL_TIM_ConfigClockSource>
 80034fe:	b118      	cbz	r0, 8003508 <MX_TIM2_Init+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003500:	2169      	movs	r1, #105	; 0x69
 8003502:	480a      	ldr	r0, [pc, #40]	; (800352c <MX_TIM2_Init+0x64>)
 8003504:	f7ff fdc8 	bl	8003098 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003508:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800350a:	a901      	add	r1, sp, #4
 800350c:	4806      	ldr	r0, [pc, #24]	; (8003528 <MX_TIM2_Init+0x60>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800350e:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003510:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003512:	f7fe fd77 	bl	8002004 <HAL_TIMEx_MasterConfigSynchronization>
 8003516:	b118      	cbz	r0, 8003520 <MX_TIM2_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003518:	2170      	movs	r1, #112	; 0x70
 800351a:	4804      	ldr	r0, [pc, #16]	; (800352c <MX_TIM2_Init+0x64>)
 800351c:	f7ff fdbc 	bl	8003098 <_Error_Handler>
  }

}
 8003520:	b009      	add	sp, #36	; 0x24
 8003522:	f85d fb04 	ldr.w	pc, [sp], #4
 8003526:	bf00      	nop
 8003528:	20001560 	.word	0x20001560
 800352c:	08004dc0 	.word	0x08004dc0

08003530 <MX_TIM3_Init>:
void MX_TIM3_Init(void)
{
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
 8003530:	4818      	ldr	r0, [pc, #96]	; (8003594 <MX_TIM3_Init+0x64>)
  htim3.Init.Prescaler = 9999;
 8003532:	f242 730f 	movw	r3, #9999	; 0x270f
 8003536:	4918      	ldr	r1, [pc, #96]	; (8003598 <MX_TIM3_Init+0x68>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 99;
 8003538:	2263      	movs	r2, #99	; 0x63
{
 800353a:	b500      	push	{lr}
  htim3.Init.Prescaler = 9999;
 800353c:	e880 000a 	stmia.w	r0, {r1, r3}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003540:	2300      	movs	r3, #0
{
 8003542:	b089      	sub	sp, #36	; 0x24
  htim3.Init.Period = 99;
 8003544:	60c2      	str	r2, [r0, #12]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003546:	6083      	str	r3, [r0, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003548:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800354a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800354c:	f7fe fca8 	bl	8001ea0 <HAL_TIM_Base_Init>
 8003550:	b118      	cbz	r0, 800355a <MX_TIM3_Init+0x2a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003552:	2182      	movs	r1, #130	; 0x82
 8003554:	4811      	ldr	r0, [pc, #68]	; (800359c <MX_TIM3_Init+0x6c>)
 8003556:	f7ff fd9f 	bl	8003098 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800355a:	a908      	add	r1, sp, #32
 800355c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003560:	480c      	ldr	r0, [pc, #48]	; (8003594 <MX_TIM3_Init+0x64>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003562:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003566:	f7fe fcbf 	bl	8001ee8 <HAL_TIM_ConfigClockSource>
 800356a:	b118      	cbz	r0, 8003574 <MX_TIM3_Init+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
 800356c:	2188      	movs	r1, #136	; 0x88
 800356e:	480b      	ldr	r0, [pc, #44]	; (800359c <MX_TIM3_Init+0x6c>)
 8003570:	f7ff fd92 	bl	8003098 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003574:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003576:	a901      	add	r1, sp, #4
 8003578:	4806      	ldr	r0, [pc, #24]	; (8003594 <MX_TIM3_Init+0x64>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800357a:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800357c:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800357e:	f7fe fd41 	bl	8002004 <HAL_TIMEx_MasterConfigSynchronization>
 8003582:	b118      	cbz	r0, 800358c <MX_TIM3_Init+0x5c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003584:	218f      	movs	r1, #143	; 0x8f
 8003586:	4805      	ldr	r0, [pc, #20]	; (800359c <MX_TIM3_Init+0x6c>)
 8003588:	f7ff fd86 	bl	8003098 <_Error_Handler>
  }

}
 800358c:	b009      	add	sp, #36	; 0x24
 800358e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003592:	bf00      	nop
 8003594:	20001520 	.word	0x20001520
 8003598:	40000400 	.word	0x40000400
 800359c:	08004dc0 	.word	0x08004dc0

080035a0 <MX_TIM4_Init>:
void MX_TIM4_Init(void)
{
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim4.Instance = TIM4;
 80035a0:	4818      	ldr	r0, [pc, #96]	; (8003604 <MX_TIM4_Init+0x64>)
  htim4.Init.Prescaler = 9999;
 80035a2:	f242 730f 	movw	r3, #9999	; 0x270f
 80035a6:	4918      	ldr	r1, [pc, #96]	; (8003608 <MX_TIM4_Init+0x68>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 99;
 80035a8:	2263      	movs	r2, #99	; 0x63
{
 80035aa:	b500      	push	{lr}
  htim4.Init.Prescaler = 9999;
 80035ac:	e880 000a 	stmia.w	r0, {r1, r3}
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035b0:	2300      	movs	r3, #0
{
 80035b2:	b089      	sub	sp, #36	; 0x24
  htim4.Init.Period = 99;
 80035b4:	60c2      	str	r2, [r0, #12]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035b6:	6083      	str	r3, [r0, #8]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035b8:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035ba:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80035bc:	f7fe fc70 	bl	8001ea0 <HAL_TIM_Base_Init>
 80035c0:	b118      	cbz	r0, 80035ca <MX_TIM4_Init+0x2a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80035c2:	21a1      	movs	r1, #161	; 0xa1
 80035c4:	4811      	ldr	r0, [pc, #68]	; (800360c <MX_TIM4_Init+0x6c>)
 80035c6:	f7ff fd67 	bl	8003098 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035ca:	a908      	add	r1, sp, #32
 80035cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80035d0:	480c      	ldr	r0, [pc, #48]	; (8003604 <MX_TIM4_Init+0x64>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035d2:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80035d6:	f7fe fc87 	bl	8001ee8 <HAL_TIM_ConfigClockSource>
 80035da:	b118      	cbz	r0, 80035e4 <MX_TIM4_Init+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
 80035dc:	21a7      	movs	r1, #167	; 0xa7
 80035de:	480b      	ldr	r0, [pc, #44]	; (800360c <MX_TIM4_Init+0x6c>)
 80035e0:	f7ff fd5a 	bl	8003098 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035e4:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80035e6:	a901      	add	r1, sp, #4
 80035e8:	4806      	ldr	r0, [pc, #24]	; (8003604 <MX_TIM4_Init+0x64>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035ea:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035ec:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80035ee:	f7fe fd09 	bl	8002004 <HAL_TIMEx_MasterConfigSynchronization>
 80035f2:	b118      	cbz	r0, 80035fc <MX_TIM4_Init+0x5c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80035f4:	21ae      	movs	r1, #174	; 0xae
 80035f6:	4805      	ldr	r0, [pc, #20]	; (800360c <MX_TIM4_Init+0x6c>)
 80035f8:	f7ff fd4e 	bl	8003098 <_Error_Handler>
  }

}
 80035fc:	b009      	add	sp, #36	; 0x24
 80035fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8003602:	bf00      	nop
 8003604:	200015a0 	.word	0x200015a0
 8003608:	40000800 	.word	0x40000800
 800360c:	08004dc0 	.word	0x08004dc0

08003610 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 8003610:	6803      	ldr	r3, [r0, #0]
{
 8003612:	b084      	sub	sp, #16
  if(tim_baseHandle->Instance==TIM1)
 8003614:	4a1c      	ldr	r2, [pc, #112]	; (8003688 <HAL_TIM_Base_MspInit+0x78>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d10b      	bne.n	8003632 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800361a:	4b1c      	ldr	r3, [pc, #112]	; (800368c <HAL_TIM_Base_MspInit+0x7c>)
 800361c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800361e:	f042 0201 	orr.w	r2, r2, #1
 8003622:	645a      	str	r2, [r3, #68]	; 0x44
 8003624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800362e:	b004      	add	sp, #16
 8003630:	4770      	bx	lr
  else if(tim_baseHandle->Instance==TIM2)
 8003632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003636:	d10b      	bne.n	8003650 <HAL_TIM_Base_MspInit+0x40>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003638:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800363c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800363e:	f042 0201 	orr.w	r2, r2, #1
 8003642:	641a      	str	r2, [r3, #64]	; 0x40
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	9301      	str	r3, [sp, #4]
 800364c:	9b01      	ldr	r3, [sp, #4]
 800364e:	e7ee      	b.n	800362e <HAL_TIM_Base_MspInit+0x1e>
  else if(tim_baseHandle->Instance==TIM3)
 8003650:	4a0f      	ldr	r2, [pc, #60]	; (8003690 <HAL_TIM_Base_MspInit+0x80>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d10a      	bne.n	800366c <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003656:	4b0d      	ldr	r3, [pc, #52]	; (800368c <HAL_TIM_Base_MspInit+0x7c>)
 8003658:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800365a:	f042 0202 	orr.w	r2, r2, #2
 800365e:	641a      	str	r2, [r3, #64]	; 0x40
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	9302      	str	r3, [sp, #8]
 8003668:	9b02      	ldr	r3, [sp, #8]
 800366a:	e7e0      	b.n	800362e <HAL_TIM_Base_MspInit+0x1e>
  else if(tim_baseHandle->Instance==TIM4)
 800366c:	4a09      	ldr	r2, [pc, #36]	; (8003694 <HAL_TIM_Base_MspInit+0x84>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d1dd      	bne.n	800362e <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003672:	4b06      	ldr	r3, [pc, #24]	; (800368c <HAL_TIM_Base_MspInit+0x7c>)
 8003674:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003676:	f042 0204 	orr.w	r2, r2, #4
 800367a:	641a      	str	r2, [r3, #64]	; 0x40
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	f003 0304 	and.w	r3, r3, #4
 8003682:	9303      	str	r3, [sp, #12]
 8003684:	9b03      	ldr	r3, [sp, #12]
}
 8003686:	e7d2      	b.n	800362e <HAL_TIM_Base_MspInit+0x1e>
 8003688:	40010000 	.word	0x40010000
 800368c:	40023800 	.word	0x40023800
 8003690:	40000400 	.word	0x40000400
 8003694:	40000800 	.word	0x40000800

08003698 <MX_UART5_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8003698:	b508      	push	{r3, lr}

  huart5.Instance = UART5;
 800369a:	480d      	ldr	r0, [pc, #52]	; (80036d0 <MX_UART5_Init+0x38>)
  huart5.Init.BaudRate = 115200;
 800369c:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 80036a0:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <MX_UART5_Init+0x3c>)
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
  huart5.Init.StopBits = UART_STOPBITS_1;
  huart5.Init.Parity = UART_PARITY_NONE;
  huart5.Init.Mode = UART_MODE_TX_RX;
 80036a2:	220c      	movs	r2, #12
  huart5.Init.BaudRate = 115200;
 80036a4:	e880 4008 	stmia.w	r0, {r3, lr}
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80036a8:	2300      	movs	r3, #0
  huart5.Init.Mode = UART_MODE_TX_RX;
 80036aa:	6142      	str	r2, [r0, #20]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80036ac:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80036ae:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80036b0:	6103      	str	r3, [r0, #16]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036b2:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80036b4:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80036b6:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80036b8:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80036ba:	f7ff f89c 	bl	80027f6 <HAL_UART_Init>
 80036be:	b128      	cbz	r0, 80036cc <MX_UART5_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 80036c0:	214d      	movs	r1, #77	; 0x4d
 80036c2:	4805      	ldr	r0, [pc, #20]	; (80036d8 <MX_UART5_Init+0x40>)
  }

}
 80036c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80036c8:	f7ff bce6 	b.w	8003098 <_Error_Handler>
 80036cc:	bd08      	pop	{r3, pc}
 80036ce:	bf00      	nop
 80036d0:	20001690 	.word	0x20001690
 80036d4:	40005000 	.word	0x40005000
 80036d8:	08004dcd 	.word	0x08004dcd

080036dc <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 80036dc:	b508      	push	{r3, lr}

  huart7.Instance = UART7;
 80036de:	480d      	ldr	r0, [pc, #52]	; (8003714 <MX_UART7_Init+0x38>)
  huart7.Init.BaudRate = 115200;
 80036e0:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 80036e4:	4b0c      	ldr	r3, [pc, #48]	; (8003718 <MX_UART7_Init+0x3c>)
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
  huart7.Init.StopBits = UART_STOPBITS_1;
  huart7.Init.Parity = UART_PARITY_NONE;
  huart7.Init.Mode = UART_MODE_TX_RX;
 80036e6:	220c      	movs	r2, #12
  huart7.Init.BaudRate = 115200;
 80036e8:	e880 4008 	stmia.w	r0, {r3, lr}
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80036ec:	2300      	movs	r3, #0
  huart7.Init.Mode = UART_MODE_TX_RX;
 80036ee:	6142      	str	r2, [r0, #20]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80036f0:	6083      	str	r3, [r0, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80036f2:	60c3      	str	r3, [r0, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80036f4:	6103      	str	r3, [r0, #16]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036f6:	6183      	str	r3, [r0, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80036f8:	61c3      	str	r3, [r0, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80036fa:	6203      	str	r3, [r0, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80036fc:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80036fe:	f7ff f87a 	bl	80027f6 <HAL_UART_Init>
 8003702:	b128      	cbz	r0, 8003710 <MX_UART7_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003704:	2161      	movs	r1, #97	; 0x61
 8003706:	4805      	ldr	r0, [pc, #20]	; (800371c <MX_UART7_Init+0x40>)
  }

}
 8003708:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 800370c:	f7ff bcc4 	b.w	8003098 <_Error_Handler>
 8003710:	bd08      	pop	{r3, pc}
 8003712:	bf00      	nop
 8003714:	20001620 	.word	0x20001620
 8003718:	40007800 	.word	0x40007800
 800371c:	08004dcd 	.word	0x08004dcd

08003720 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8003720:	b508      	push	{r3, lr}

  huart8.Instance = UART8;
 8003722:	480d      	ldr	r0, [pc, #52]	; (8003758 <MX_UART8_Init+0x38>)
  huart8.Init.BaudRate = 115200;
 8003724:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8003728:	4b0c      	ldr	r3, [pc, #48]	; (800375c <MX_UART8_Init+0x3c>)
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
  huart8.Init.StopBits = UART_STOPBITS_1;
  huart8.Init.Parity = UART_PARITY_NONE;
  huart8.Init.Mode = UART_MODE_TX_RX;
 800372a:	220c      	movs	r2, #12
  huart8.Init.BaudRate = 115200;
 800372c:	e880 4008 	stmia.w	r0, {r3, lr}
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8003730:	2300      	movs	r3, #0
  huart8.Init.Mode = UART_MODE_TX_RX;
 8003732:	6142      	str	r2, [r0, #20]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8003734:	6083      	str	r3, [r0, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8003736:	60c3      	str	r3, [r0, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8003738:	6103      	str	r3, [r0, #16]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800373a:	6183      	str	r3, [r0, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800373c:	61c3      	str	r3, [r0, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800373e:	6203      	str	r3, [r0, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003740:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8003742:	f7ff f858 	bl	80027f6 <HAL_UART_Init>
 8003746:	b128      	cbz	r0, 8003754 <MX_UART8_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003748:	2175      	movs	r1, #117	; 0x75
 800374a:	4805      	ldr	r0, [pc, #20]	; (8003760 <MX_UART8_Init+0x40>)
  }

}
 800374c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8003750:	f7ff bca2 	b.w	8003098 <_Error_Handler>
 8003754:	bd08      	pop	{r3, pc}
 8003756:	bf00      	nop
 8003758:	20001700 	.word	0x20001700
 800375c:	40007c00 	.word	0x40007c00
 8003760:	08004dcd 	.word	0x08004dcd

08003764 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003764:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8003766:	480d      	ldr	r0, [pc, #52]	; (800379c <MX_USART2_UART_Init+0x38>)
  huart2.Init.BaudRate = 115200;
 8003768:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 800376c:	4b0c      	ldr	r3, [pc, #48]	; (80037a0 <MX_USART2_UART_Init+0x3c>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800376e:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 115200;
 8003770:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003774:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003776:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003778:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800377a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800377c:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800377e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003780:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003782:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003784:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003786:	f7ff f836 	bl	80027f6 <HAL_UART_Init>
 800378a:	b128      	cbz	r0, 8003798 <MX_USART2_UART_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 800378c:	218a      	movs	r1, #138	; 0x8a
 800378e:	4805      	ldr	r0, [pc, #20]	; (80037a4 <MX_USART2_UART_Init+0x40>)
  }

}
 8003790:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8003794:	f7ff bc80 	b.w	8003098 <_Error_Handler>
 8003798:	bd08      	pop	{r3, pc}
 800379a:	bf00      	nop
 800379c:	20000098 	.word	0x20000098
 80037a0:	40004400 	.word	0x40004400
 80037a4:	08004dcd 	.word	0x08004dcd

080037a8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80037a8:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 80037aa:	480d      	ldr	r0, [pc, #52]	; (80037e0 <MX_USART3_UART_Init+0x38>)
  huart3.Init.BaudRate = 115200;
 80037ac:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 80037b0:	4b0c      	ldr	r3, [pc, #48]	; (80037e4 <MX_USART3_UART_Init+0x3c>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 80037b2:	220c      	movs	r2, #12
  huart3.Init.BaudRate = 115200;
 80037b4:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80037b8:	2300      	movs	r3, #0
  huart3.Init.Mode = UART_MODE_TX_RX;
 80037ba:	6142      	str	r2, [r0, #20]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80037bc:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80037be:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80037c0:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037c2:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80037c4:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80037c6:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80037c8:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80037ca:	f7ff f814 	bl	80027f6 <HAL_UART_Init>
 80037ce:	b128      	cbz	r0, 80037dc <MX_USART3_UART_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 80037d0:	219f      	movs	r1, #159	; 0x9f
 80037d2:	4805      	ldr	r0, [pc, #20]	; (80037e8 <MX_USART3_UART_Init+0x40>)
  }

}
 80037d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80037d8:	f7ff bc5e 	b.w	8003098 <_Error_Handler>
 80037dc:	bd08      	pop	{r3, pc}
 80037de:	bf00      	nop
 80037e0:	20001070 	.word	0x20001070
 80037e4:	40004800 	.word	0x40004800
 80037e8:	08004dcd 	.word	0x08004dcd

080037ec <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80037ec:	b508      	push	{r3, lr}

  huart6.Instance = USART6;
 80037ee:	480d      	ldr	r0, [pc, #52]	; (8003824 <MX_USART6_UART_Init+0x38>)
  huart6.Init.BaudRate = 115200;
 80037f0:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 80037f4:	4b0c      	ldr	r3, [pc, #48]	; (8003828 <MX_USART6_UART_Init+0x3c>)
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
  huart6.Init.StopBits = UART_STOPBITS_1;
  huart6.Init.Parity = UART_PARITY_NONE;
  huart6.Init.Mode = UART_MODE_TX_RX;
 80037f6:	220c      	movs	r2, #12
  huart6.Init.BaudRate = 115200;
 80037f8:	e880 4008 	stmia.w	r0, {r3, lr}
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80037fc:	2300      	movs	r3, #0
  huart6.Init.Mode = UART_MODE_TX_RX;
 80037fe:	6142      	str	r2, [r0, #20]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003800:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003802:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003804:	6103      	str	r3, [r0, #16]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003806:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003808:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800380a:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800380c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800380e:	f7fe fff2 	bl	80027f6 <HAL_UART_Init>
 8003812:	b128      	cbz	r0, 8003820 <MX_USART6_UART_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003814:	21b4      	movs	r1, #180	; 0xb4
 8003816:	4805      	ldr	r0, [pc, #20]	; (800382c <MX_USART6_UART_Init+0x40>)
  }

}
 8003818:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 800381c:	f7ff bc3c 	b.w	8003098 <_Error_Handler>
 8003820:	bd08      	pop	{r3, pc}
 8003822:	bf00      	nop
 8003824:	20001770 	.word	0x20001770
 8003828:	40011400 	.word	0x40011400
 800382c:	08004dcd 	.word	0x08004dcd

08003830 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==UART5)
 8003830:	6803      	ldr	r3, [r0, #0]
 8003832:	4a97      	ldr	r2, [pc, #604]	; (8003a90 <HAL_UART_MspInit+0x260>)
 8003834:	4293      	cmp	r3, r2
{
 8003836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800383a:	4605      	mov	r5, r0
 800383c:	b08c      	sub	sp, #48	; 0x30
  if(uartHandle->Instance==UART5)
 800383e:	d122      	bne.n	8003886 <HAL_UART_MspInit+0x56>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003840:	4b94      	ldr	r3, [pc, #592]	; (8003a94 <HAL_UART_MspInit+0x264>)

    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PC12     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003842:	f44f 5880 	mov.w	r8, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003846:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003848:	2600      	movs	r6, #0
    __HAL_RCC_UART5_CLK_ENABLE();
 800384a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800384c:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800384e:	2408      	movs	r4, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003850:	a907      	add	r1, sp, #28
    __HAL_RCC_UART5_CLK_ENABLE();
 8003852:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003856:	4890      	ldr	r0, [pc, #576]	; (8003a98 <HAL_UART_MspInit+0x268>)
    __HAL_RCC_UART5_CLK_ENABLE();
 8003858:	641a      	str	r2, [r3, #64]	; 0x40
 800385a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800385c:	f8cd 801c 	str.w	r8, [sp, #28]
    __HAL_RCC_UART5_CLK_ENABLE();
 8003860:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003864:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003866:	9609      	str	r6, [sp, #36]	; 0x24
    __HAL_RCC_UART5_CLK_ENABLE();
 8003868:	9301      	str	r3, [sp, #4]
 800386a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800386c:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800386e:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003870:	f7fd f988 	bl	8000b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003874:	f8cd 801c 	str.w	r8, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003878:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800387a:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800387c:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800387e:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

 8003880:	a907      	add	r1, sp, #28
 8003882:	4886      	ldr	r0, [pc, #536]	; (8003a9c <HAL_UART_MspInit+0x26c>)
 8003884:	e018      	b.n	80038b8 <HAL_UART_MspInit+0x88>
  else if(uartHandle->Instance==UART7)
 8003886:	4a86      	ldr	r2, [pc, #536]	; (8003aa0 <HAL_UART_MspInit+0x270>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d118      	bne.n	80038be <HAL_UART_MspInit+0x8e>
    __HAL_RCC_UART7_CLK_ENABLE();
 800388c:	4b81      	ldr	r3, [pc, #516]	; (8003a94 <HAL_UART_MspInit+0x264>)
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800388e:	a907      	add	r1, sp, #28
 8003890:	4884      	ldr	r0, [pc, #528]	; (8003aa4 <HAL_UART_MspInit+0x274>)
    __HAL_RCC_UART7_CLK_ENABLE();
 8003892:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003894:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003898:	641a      	str	r2, [r3, #64]	; 0x40
 800389a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80038a0:	9302      	str	r3, [sp, #8]
 80038a2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80038a4:	23c0      	movs	r3, #192	; 0xc0
 80038a6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038a8:	2302      	movs	r3, #2
 80038aa:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ac:	2300      	movs	r3, #0
 80038ae:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038b0:	2303      	movs	r3, #3
 80038b2:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80038b4:	2308      	movs	r3, #8
 80038b6:	930b      	str	r3, [sp, #44]	; 0x2c

 80038b8:	f7fd f964 	bl	8000b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}

 80038bc:	e072      	b.n	80039a4 <HAL_UART_MspInit+0x174>
  else if(uartHandle->Instance==UART8)
 80038be:	4a7a      	ldr	r2, [pc, #488]	; (8003aa8 <HAL_UART_MspInit+0x278>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d115      	bne.n	80038f0 <HAL_UART_MspInit+0xc0>
    __HAL_RCC_UART8_CLK_ENABLE();
 80038c4:	4b73      	ldr	r3, [pc, #460]	; (8003a94 <HAL_UART_MspInit+0x264>)
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80038c6:	a907      	add	r1, sp, #28
 80038c8:	4878      	ldr	r0, [pc, #480]	; (8003aac <HAL_UART_MspInit+0x27c>)
    __HAL_RCC_UART8_CLK_ENABLE();
 80038ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038cc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80038d0:	641a      	str	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d2:	2202      	movs	r2, #2
    __HAL_RCC_UART8_CLK_ENABLE();
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d6:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d8:	2200      	movs	r2, #0
    __HAL_RCC_UART8_CLK_ENABLE();
 80038da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038de:	9209      	str	r2, [sp, #36]	; 0x24
    __HAL_RCC_UART8_CLK_ENABLE();
 80038e0:	9303      	str	r3, [sp, #12]
 80038e2:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80038e4:	2303      	movs	r3, #3
 80038e6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038e8:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80038ea:	2308      	movs	r3, #8
 80038ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80038ee:	e7e3      	b.n	80038b8 <HAL_UART_MspInit+0x88>
  else if(uartHandle->Instance==USART2)
 80038f0:	4a6f      	ldr	r2, [pc, #444]	; (8003ab0 <HAL_UART_MspInit+0x280>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d159      	bne.n	80039aa <HAL_UART_MspInit+0x17a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80038f6:	4b67      	ldr	r3, [pc, #412]	; (8003a94 <HAL_UART_MspInit+0x264>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f8:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038fa:	486e      	ldr	r0, [pc, #440]	; (8003ab4 <HAL_UART_MspInit+0x284>)
 80038fc:	a907      	add	r1, sp, #28
    __HAL_RCC_USART2_CLK_ENABLE();
 80038fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003900:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
		hdma_usart2_rx.Instance = DMA1_Stream5;
 8003904:	4c6c      	ldr	r4, [pc, #432]	; (8003ab8 <HAL_UART_MspInit+0x288>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003906:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800390a:	641a      	str	r2, [r3, #64]	; 0x40
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390e:	9609      	str	r6, [sp, #36]	; 0x24
    __HAL_RCC_USART2_CLK_ENABLE();
 8003910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003914:	9304      	str	r3, [sp, #16]
 8003916:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = UART2_WIFI_TX_Pin|UART2_WIFI_RX_Pin;
 8003918:	2360      	movs	r3, #96	; 0x60
 800391a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800391c:	2302      	movs	r3, #2
 800391e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003920:	2303      	movs	r3, #3
 8003922:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003924:	2307      	movs	r3, #7
 8003926:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003928:	f7fd f92c 	bl	8000b84 <HAL_GPIO_Init>
		hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800392c:	4b63      	ldr	r3, [pc, #396]	; (8003abc <HAL_UART_MspInit+0x28c>)

 800392e:	4620      	mov	r0, r4
		hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003930:	60a6      	str	r6, [r4, #8]
		hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003932:	60e6      	str	r6, [r4, #12]
		hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003934:	6166      	str	r6, [r4, #20]
		hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003936:	61a6      	str	r6, [r4, #24]
		hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003938:	61e6      	str	r6, [r4, #28]
		hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800393a:	6226      	str	r6, [r4, #32]
		hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800393c:	6266      	str	r6, [r4, #36]	; 0x24
		hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800393e:	e884 0088 	stmia.w	r4, {r3, r7}
		hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003942:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003946:	6123      	str	r3, [r4, #16]

 8003948:	f7fc ffa8 	bl	800089c <HAL_DMA_Init>
 800394c:	b120      	cbz	r0, 8003958 <HAL_UART_MspInit+0x128>
			_Error_Handler(__FILE__, __LINE__);
 800394e:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8003952:	485b      	ldr	r0, [pc, #364]	; (8003ac0 <HAL_UART_MspInit+0x290>)
 8003954:	f7ff fba0 	bl	8003098 <_Error_Handler>
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003958:	485a      	ldr	r0, [pc, #360]	; (8003ac4 <HAL_UART_MspInit+0x294>)
 800395a:	2340      	movs	r3, #64	; 0x40
		__HAL_LINKDMA(uartHandle, hdmarx, hdma_usart2_rx);
 800395c:	666c      	str	r4, [r5, #100]	; 0x64
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800395e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
		__HAL_LINKDMA(uartHandle, hdmarx, hdma_usart2_rx);
 8003962:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003964:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003968:	4c57      	ldr	r4, [pc, #348]	; (8003ac8 <HAL_UART_MspInit+0x298>)
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800396a:	e884 000b 	stmia.w	r4, {r0, r1, r3}
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800396e:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003970:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003972:	6122      	str	r2, [r4, #16]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003974:	60e3      	str	r3, [r4, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003976:	6163      	str	r3, [r4, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003978:	61a3      	str	r3, [r4, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800397a:	61e3      	str	r3, [r4, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800397c:	6223      	str	r3, [r4, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800397e:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003980:	f7fc ff8c 	bl	800089c <HAL_DMA_Init>
 8003984:	b120      	cbz	r0, 8003990 <HAL_UART_MspInit+0x160>
      _Error_Handler(__FILE__, __LINE__);
 8003986:	f44f 719e 	mov.w	r1, #316	; 0x13c
 800398a:	484d      	ldr	r0, [pc, #308]	; (8003ac0 <HAL_UART_MspInit+0x290>)
 800398c:	f7ff fb84 	bl	8003098 <_Error_Handler>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003990:	2200      	movs	r2, #0
 8003992:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8003994:	662c      	str	r4, [r5, #96]	; 0x60
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003996:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8003998:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800399a:	f7fc fe8f 	bl	80006bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800399e:	2026      	movs	r0, #38	; 0x26
  /* USER CODE BEGIN USART3_MspInit 1 */
 80039a0:	f7fc fec4 	bl	800072c <HAL_NVIC_EnableIRQ>

 80039a4:	b00c      	add	sp, #48	; 0x30
 80039a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(uartHandle->Instance==USART3)
 80039aa:	4a48      	ldr	r2, [pc, #288]	; (8003acc <HAL_UART_MspInit+0x29c>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d156      	bne.n	8003a5e <HAL_UART_MspInit+0x22e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80039b0:	4b38      	ldr	r3, [pc, #224]	; (8003a94 <HAL_UART_MspInit+0x264>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b2:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039b4:	483f      	ldr	r0, [pc, #252]	; (8003ab4 <HAL_UART_MspInit+0x284>)
 80039b6:	a907      	add	r1, sp, #28
    __HAL_RCC_USART3_CLK_ENABLE();
 80039b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		hdma_usart3_rx.Instance = DMA1_Stream1;
 80039ba:	4c45      	ldr	r4, [pc, #276]	; (8003ad0 <HAL_UART_MspInit+0x2a0>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80039bc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80039c0:	641a      	str	r2, [r3, #64]	; 0x40
 80039c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c4:	9609      	str	r6, [sp, #36]	; 0x24
    __HAL_RCC_USART3_CLK_ENABLE();
 80039c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039ca:	9305      	str	r3, [sp, #20]
 80039cc:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80039ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80039d2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d4:	2302      	movs	r3, #2
 80039d6:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039d8:	2303      	movs	r3, #3
 80039da:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80039dc:	2307      	movs	r3, #7
 80039de:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039e0:	f7fd f8d0 	bl	8000b84 <HAL_GPIO_Init>
		hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80039e4:	4b3b      	ldr	r3, [pc, #236]	; (8003ad4 <HAL_UART_MspInit+0x2a4>)
 80039e6:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
		if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK) {
 80039ea:	4620      	mov	r0, r4
		hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80039ec:	60a6      	str	r6, [r4, #8]
		hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039ee:	60e6      	str	r6, [r4, #12]
		hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039f0:	6166      	str	r6, [r4, #20]
		hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039f2:	61a6      	str	r6, [r4, #24]
		hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80039f4:	61e6      	str	r6, [r4, #28]
		hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80039f6:	6226      	str	r6, [r4, #32]
		hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039f8:	6266      	str	r6, [r4, #36]	; 0x24
		hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80039fa:	e884 4008 	stmia.w	r4, {r3, lr}
		hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80039fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a02:	6123      	str	r3, [r4, #16]
		if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK) {
 8003a04:	f7fc ff4a 	bl	800089c <HAL_DMA_Init>
 8003a08:	b120      	cbz	r0, 8003a14 <HAL_UART_MspInit+0x1e4>
		}
 8003a0a:	f240 1169 	movw	r1, #361	; 0x169
 8003a0e:	482c      	ldr	r0, [pc, #176]	; (8003ac0 <HAL_UART_MspInit+0x290>)
 8003a10:	f7ff fb42 	bl	8003098 <_Error_Handler>
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a14:	4b30      	ldr	r3, [pc, #192]	; (8003ad8 <HAL_UART_MspInit+0x2a8>)
 8003a16:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

 8003a1a:	666c      	str	r4, [r5, #100]	; 0x64
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a1c:	2740      	movs	r7, #64	; 0x40

 8003a1e:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a20:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8003a24:	4c2d      	ldr	r4, [pc, #180]	; (8003adc <HAL_UART_MspInit+0x2ac>)
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a26:	e884 00c8 	stmia.w	r4, {r3, r6, r7}
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a2a:	2300      	movs	r3, #0
    {
 8003a2c:	4620      	mov	r0, r4
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a2e:	6122      	str	r2, [r4, #16]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a30:	60e3      	str	r3, [r4, #12]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a32:	6163      	str	r3, [r4, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003a34:	61a3      	str	r3, [r4, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003a36:	61e3      	str	r3, [r4, #28]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a38:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003a3a:	6263      	str	r3, [r4, #36]	; 0x24
    {
 8003a3c:	f7fc ff2e 	bl	800089c <HAL_DMA_Init>
 8003a40:	b120      	cbz	r0, 8003a4c <HAL_UART_MspInit+0x21c>
    }
 8003a42:	f240 117b 	movw	r1, #379	; 0x17b
 8003a46:	481e      	ldr	r0, [pc, #120]	; (8003ac0 <HAL_UART_MspInit+0x290>)
 8003a48:	f7ff fb26 	bl	8003098 <_Error_Handler>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	2027      	movs	r0, #39	; 0x27

 8003a50:	662c      	str	r4, [r5, #96]	; 0x60
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003a52:	4611      	mov	r1, r2

 8003a54:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003a56:	f7fc fe31 	bl	80006bc <HAL_NVIC_SetPriority>
  /* USER CODE BEGIN USART3_MspInit 1 */
 8003a5a:	2027      	movs	r0, #39	; 0x27
 8003a5c:	e7a0      	b.n	80039a0 <HAL_UART_MspInit+0x170>
  {
 8003a5e:	4a20      	ldr	r2, [pc, #128]	; (8003ae0 <HAL_UART_MspInit+0x2b0>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d19f      	bne.n	80039a4 <HAL_UART_MspInit+0x174>

 8003a64:	4b0b      	ldr	r3, [pc, #44]	; (8003a94 <HAL_UART_MspInit+0x264>)
 8003a66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a68:	f042 0220 	orr.w	r2, r2, #32
 8003a6c:	645a      	str	r2, [r3, #68]	; 0x44
 8003a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a70:	f003 0320 	and.w	r3, r3, #32
 8003a74:	9306      	str	r3, [sp, #24]
 8003a76:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a78:	23c0      	movs	r3, #192	; 0xc0
 8003a7a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a80:	2300      	movs	r3, #0
 8003a82:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003a84:	2303      	movs	r3, #3
 8003a86:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a88:	2308      	movs	r3, #8
 8003a8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a8c:	e6f8      	b.n	8003880 <HAL_UART_MspInit+0x50>
 8003a8e:	bf00      	nop
 8003a90:	40005000 	.word	0x40005000
 8003a94:	40023800 	.word	0x40023800
 8003a98:	40020400 	.word	0x40020400
 8003a9c:	40020800 	.word	0x40020800
 8003aa0:	40007800 	.word	0x40007800
 8003aa4:	40021400 	.word	0x40021400
 8003aa8:	40007c00 	.word	0x40007c00
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	40004400 	.word	0x40004400
 8003ab4:	40020c00 	.word	0x40020c00
 8003ab8:	200010f4 	.word	0x200010f4
 8003abc:	40026088 	.word	0x40026088
 8003ac0:	08004dcd 	.word	0x08004dcd
 8003ac4:	400260a0 	.word	0x400260a0
 8003ac8:	200012d4 	.word	0x200012d4
 8003acc:	40004800 	.word	0x40004800
 8003ad0:	200011b4 	.word	0x200011b4
 8003ad4:	40026028 	.word	0x40026028
 8003ad8:	40026058 	.word	0x40026058
 8003adc:	20001214 	.word	0x20001214
 8003ae0:	40011400 	.word	0x40011400

08003ae4 <HAL_UART_MspDeInit>:
void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==UART5)
  {
 8003ae4:	6803      	ldr	r3, [r0, #0]
 8003ae6:	4a34      	ldr	r2, [pc, #208]	; (8003bb8 <HAL_UART_MspDeInit+0xd4>)
 8003ae8:	4293      	cmp	r3, r2

 8003aea:	b510      	push	{r4, lr}
 8003aec:	4604      	mov	r4, r0
  {
 8003aee:	d10e      	bne.n	8003b0e <HAL_UART_MspDeInit+0x2a>
  /* USER CODE BEGIN UART5_MspDeInit 0 */

  /* USER CODE END UART5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART5_CLK_DISABLE();

 8003af0:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PC12     ------> UART5_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);

 8003af4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003af8:	4830      	ldr	r0, [pc, #192]	; (8003bbc <HAL_UART_MspDeInit+0xd8>)

 8003afa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003afc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003b00:	6413      	str	r3, [r2, #64]	; 0x40

 8003b02:	f7fd f929 	bl	8000d58 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);

 8003b06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6|GPIO_PIN_7);

 8003b0a:	482d      	ldr	r0, [pc, #180]	; (8003bc0 <HAL_UART_MspDeInit+0xdc>)
 8003b0c:	e00a      	b.n	8003b24 <HAL_UART_MspDeInit+0x40>
  {
 8003b0e:	4a2d      	ldr	r2, [pc, #180]	; (8003bc4 <HAL_UART_MspDeInit+0xe0>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d10b      	bne.n	8003b2c <HAL_UART_MspDeInit+0x48>

 8003b14:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000

 8003b18:	21c0      	movs	r1, #192	; 0xc0
 8003b1a:	482b      	ldr	r0, [pc, #172]	; (8003bc8 <HAL_UART_MspDeInit+0xe4>)

 8003b1c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003b1e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b22:	6413      	str	r3, [r2, #64]	; 0x40
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }
}

 8003b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

 8003b28:	f7fd b916 	b.w	8000d58 <HAL_GPIO_DeInit>
  {
 8003b2c:	4a27      	ldr	r2, [pc, #156]	; (8003bcc <HAL_UART_MspDeInit+0xe8>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d108      	bne.n	8003b44 <HAL_UART_MspDeInit+0x60>

 8003b32:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00

 8003b36:	2103      	movs	r1, #3
 8003b38:	4825      	ldr	r0, [pc, #148]	; (8003bd0 <HAL_UART_MspDeInit+0xec>)

 8003b3a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003b3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b40:	6413      	str	r3, [r2, #64]	; 0x40
 8003b42:	e7ef      	b.n	8003b24 <HAL_UART_MspDeInit+0x40>
  {
 8003b44:	4a23      	ldr	r2, [pc, #140]	; (8003bd4 <HAL_UART_MspDeInit+0xf0>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d114      	bne.n	8003b74 <HAL_UART_MspDeInit+0x90>

 8003b4a:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400

 8003b4e:	2160      	movs	r1, #96	; 0x60
 8003b50:	4821      	ldr	r0, [pc, #132]	; (8003bd8 <HAL_UART_MspDeInit+0xf4>)

 8003b52:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003b54:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003b58:	6413      	str	r3, [r2, #64]	; 0x40

 8003b5a:	f7fd f8fd 	bl	8000d58 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8003b5e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003b60:	f7fc ff1a 	bl	8000998 <HAL_DMA_DeInit>

 8003b64:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003b66:	f7fc ff17 	bl	8000998 <HAL_DMA_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */
 8003b6a:	2026      	movs	r0, #38	; 0x26

 8003b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  /* USER CODE BEGIN USART3_MspDeInit 1 */
 8003b70:	f7fc bde8 	b.w	8000744 <HAL_NVIC_DisableIRQ>
  {
 8003b74:	4a19      	ldr	r2, [pc, #100]	; (8003bdc <HAL_UART_MspDeInit+0xf8>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d112      	bne.n	8003ba0 <HAL_UART_MspDeInit+0xbc>

 8003b7a:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000

 8003b7e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003b82:	4815      	ldr	r0, [pc, #84]	; (8003bd8 <HAL_UART_MspDeInit+0xf4>)

 8003b84:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003b86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b8a:	6413      	str	r3, [r2, #64]	; 0x40

 8003b8c:	f7fd f8e4 	bl	8000d58 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8003b90:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003b92:	f7fc ff01 	bl	8000998 <HAL_DMA_DeInit>

 8003b96:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003b98:	f7fc fefe 	bl	8000998 <HAL_DMA_DeInit>
  /* USER CODE BEGIN USART3_MspDeInit 1 */
 8003b9c:	2027      	movs	r0, #39	; 0x27
 8003b9e:	e7e5      	b.n	8003b6c <HAL_UART_MspDeInit+0x88>
  {
 8003ba0:	4a0f      	ldr	r2, [pc, #60]	; (8003be0 <HAL_UART_MspDeInit+0xfc>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d107      	bne.n	8003bb6 <HAL_UART_MspDeInit+0xd2>

 8003ba6:	f502 3292 	add.w	r2, r2, #74752	; 0x12400

 8003baa:	21c0      	movs	r1, #192	; 0xc0

 8003bac:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8003bae:	f023 0320 	bic.w	r3, r3, #32
 8003bb2:	6453      	str	r3, [r2, #68]	; 0x44
 8003bb4:	e7a9      	b.n	8003b0a <HAL_UART_MspDeInit+0x26>
 8003bb6:	bd10      	pop	{r4, pc}
 8003bb8:	40005000 	.word	0x40005000
 8003bbc:	40020400 	.word	0x40020400
 8003bc0:	40020800 	.word	0x40020800
 8003bc4:	40007800 	.word	0x40007800
 8003bc8:	40021400 	.word	0x40021400
 8003bcc:	40007c00 	.word	0x40007c00
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	40004400 	.word	0x40004400
 8003bd8:	40020c00 	.word	0x40020c00
 8003bdc:	40004800 	.word	0x40004800
 8003be0:	40011400 	.word	0x40011400

08003be4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003be4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c1c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003be8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003bea:	e003      	b.n	8003bf4 <LoopCopyDataInit>

08003bec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003bec:	4b0c      	ldr	r3, [pc, #48]	; (8003c20 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003bee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003bf0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003bf2:	3104      	adds	r1, #4

08003bf4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003bf4:	480b      	ldr	r0, [pc, #44]	; (8003c24 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003bf6:	4b0c      	ldr	r3, [pc, #48]	; (8003c28 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003bf8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003bfa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003bfc:	d3f6      	bcc.n	8003bec <CopyDataInit>
  ldr  r2, =_sbss
 8003bfe:	4a0b      	ldr	r2, [pc, #44]	; (8003c2c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003c00:	e002      	b.n	8003c08 <LoopFillZerobss>

08003c02 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003c02:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003c04:	f842 3b04 	str.w	r3, [r2], #4

08003c08 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003c08:	4b09      	ldr	r3, [pc, #36]	; (8003c30 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003c0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003c0c:	d3f9      	bcc.n	8003c02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003c0e:	f7ff fbff 	bl	8003410 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c12:	f000 f993 	bl	8003f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c16:	f7ff f9d7 	bl	8002fc8 <main>
  bx  lr    
 8003c1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003c1c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003c20:	08004e84 	.word	0x08004e84
  ldr  r0, =_sdata
 8003c24:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003c28:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8003c2c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8003c30:	200017e4 	.word	0x200017e4

08003c34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c34:	e7fe      	b.n	8003c34 <ADC_IRQHandler>
	...

08003c38 <__errno>:
 8003c38:	4b01      	ldr	r3, [pc, #4]	; (8003c40 <__errno+0x8>)
 8003c3a:	6818      	ldr	r0, [r3, #0]
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	2000000c 	.word	0x2000000c

08003c44 <__sflush_r>:
 8003c44:	898a      	ldrh	r2, [r1, #12]
 8003c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c4a:	4605      	mov	r5, r0
 8003c4c:	0710      	lsls	r0, r2, #28
 8003c4e:	460c      	mov	r4, r1
 8003c50:	d45a      	bmi.n	8003d08 <__sflush_r+0xc4>
 8003c52:	684b      	ldr	r3, [r1, #4]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	dc05      	bgt.n	8003c64 <__sflush_r+0x20>
 8003c58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	dc02      	bgt.n	8003c64 <__sflush_r+0x20>
 8003c5e:	2000      	movs	r0, #0
 8003c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c66:	2e00      	cmp	r6, #0
 8003c68:	d0f9      	beq.n	8003c5e <__sflush_r+0x1a>
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003c70:	682f      	ldr	r7, [r5, #0]
 8003c72:	602b      	str	r3, [r5, #0]
 8003c74:	d033      	beq.n	8003cde <__sflush_r+0x9a>
 8003c76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003c78:	89a3      	ldrh	r3, [r4, #12]
 8003c7a:	075a      	lsls	r2, r3, #29
 8003c7c:	d505      	bpl.n	8003c8a <__sflush_r+0x46>
 8003c7e:	6863      	ldr	r3, [r4, #4]
 8003c80:	1ac0      	subs	r0, r0, r3
 8003c82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c84:	b10b      	cbz	r3, 8003c8a <__sflush_r+0x46>
 8003c86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c88:	1ac0      	subs	r0, r0, r3
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c90:	6a21      	ldr	r1, [r4, #32]
 8003c92:	4628      	mov	r0, r5
 8003c94:	47b0      	blx	r6
 8003c96:	1c43      	adds	r3, r0, #1
 8003c98:	89a3      	ldrh	r3, [r4, #12]
 8003c9a:	d106      	bne.n	8003caa <__sflush_r+0x66>
 8003c9c:	6829      	ldr	r1, [r5, #0]
 8003c9e:	291d      	cmp	r1, #29
 8003ca0:	d84b      	bhi.n	8003d3a <__sflush_r+0xf6>
 8003ca2:	4a2b      	ldr	r2, [pc, #172]	; (8003d50 <__sflush_r+0x10c>)
 8003ca4:	40ca      	lsrs	r2, r1
 8003ca6:	07d6      	lsls	r6, r2, #31
 8003ca8:	d547      	bpl.n	8003d3a <__sflush_r+0xf6>
 8003caa:	2200      	movs	r2, #0
 8003cac:	6062      	str	r2, [r4, #4]
 8003cae:	04d9      	lsls	r1, r3, #19
 8003cb0:	6922      	ldr	r2, [r4, #16]
 8003cb2:	6022      	str	r2, [r4, #0]
 8003cb4:	d504      	bpl.n	8003cc0 <__sflush_r+0x7c>
 8003cb6:	1c42      	adds	r2, r0, #1
 8003cb8:	d101      	bne.n	8003cbe <__sflush_r+0x7a>
 8003cba:	682b      	ldr	r3, [r5, #0]
 8003cbc:	b903      	cbnz	r3, 8003cc0 <__sflush_r+0x7c>
 8003cbe:	6560      	str	r0, [r4, #84]	; 0x54
 8003cc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003cc2:	602f      	str	r7, [r5, #0]
 8003cc4:	2900      	cmp	r1, #0
 8003cc6:	d0ca      	beq.n	8003c5e <__sflush_r+0x1a>
 8003cc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ccc:	4299      	cmp	r1, r3
 8003cce:	d002      	beq.n	8003cd6 <__sflush_r+0x92>
 8003cd0:	4628      	mov	r0, r5
 8003cd2:	f000 f95f 	bl	8003f94 <_free_r>
 8003cd6:	2000      	movs	r0, #0
 8003cd8:	6360      	str	r0, [r4, #52]	; 0x34
 8003cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cde:	6a21      	ldr	r1, [r4, #32]
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	4628      	mov	r0, r5
 8003ce4:	47b0      	blx	r6
 8003ce6:	1c41      	adds	r1, r0, #1
 8003ce8:	d1c6      	bne.n	8003c78 <__sflush_r+0x34>
 8003cea:	682b      	ldr	r3, [r5, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0c3      	beq.n	8003c78 <__sflush_r+0x34>
 8003cf0:	2b1d      	cmp	r3, #29
 8003cf2:	d001      	beq.n	8003cf8 <__sflush_r+0xb4>
 8003cf4:	2b16      	cmp	r3, #22
 8003cf6:	d101      	bne.n	8003cfc <__sflush_r+0xb8>
 8003cf8:	602f      	str	r7, [r5, #0]
 8003cfa:	e7b0      	b.n	8003c5e <__sflush_r+0x1a>
 8003cfc:	89a3      	ldrh	r3, [r4, #12]
 8003cfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d02:	81a3      	strh	r3, [r4, #12]
 8003d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d08:	690f      	ldr	r7, [r1, #16]
 8003d0a:	2f00      	cmp	r7, #0
 8003d0c:	d0a7      	beq.n	8003c5e <__sflush_r+0x1a>
 8003d0e:	0793      	lsls	r3, r2, #30
 8003d10:	680e      	ldr	r6, [r1, #0]
 8003d12:	bf08      	it	eq
 8003d14:	694b      	ldreq	r3, [r1, #20]
 8003d16:	600f      	str	r7, [r1, #0]
 8003d18:	bf18      	it	ne
 8003d1a:	2300      	movne	r3, #0
 8003d1c:	eba6 0807 	sub.w	r8, r6, r7
 8003d20:	608b      	str	r3, [r1, #8]
 8003d22:	f1b8 0f00 	cmp.w	r8, #0
 8003d26:	dd9a      	ble.n	8003c5e <__sflush_r+0x1a>
 8003d28:	4643      	mov	r3, r8
 8003d2a:	463a      	mov	r2, r7
 8003d2c:	6a21      	ldr	r1, [r4, #32]
 8003d2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003d30:	4628      	mov	r0, r5
 8003d32:	47b0      	blx	r6
 8003d34:	2800      	cmp	r0, #0
 8003d36:	dc07      	bgt.n	8003d48 <__sflush_r+0x104>
 8003d38:	89a3      	ldrh	r3, [r4, #12]
 8003d3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d3e:	81a3      	strh	r3, [r4, #12]
 8003d40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d48:	4407      	add	r7, r0
 8003d4a:	eba8 0800 	sub.w	r8, r8, r0
 8003d4e:	e7e8      	b.n	8003d22 <__sflush_r+0xde>
 8003d50:	20400001 	.word	0x20400001

08003d54 <_fflush_r>:
 8003d54:	b538      	push	{r3, r4, r5, lr}
 8003d56:	690b      	ldr	r3, [r1, #16]
 8003d58:	4605      	mov	r5, r0
 8003d5a:	460c      	mov	r4, r1
 8003d5c:	b1db      	cbz	r3, 8003d96 <_fflush_r+0x42>
 8003d5e:	b118      	cbz	r0, 8003d68 <_fflush_r+0x14>
 8003d60:	6983      	ldr	r3, [r0, #24]
 8003d62:	b90b      	cbnz	r3, 8003d68 <_fflush_r+0x14>
 8003d64:	f000 f860 	bl	8003e28 <__sinit>
 8003d68:	4b0c      	ldr	r3, [pc, #48]	; (8003d9c <_fflush_r+0x48>)
 8003d6a:	429c      	cmp	r4, r3
 8003d6c:	d109      	bne.n	8003d82 <_fflush_r+0x2e>
 8003d6e:	686c      	ldr	r4, [r5, #4]
 8003d70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d74:	b17b      	cbz	r3, 8003d96 <_fflush_r+0x42>
 8003d76:	4621      	mov	r1, r4
 8003d78:	4628      	mov	r0, r5
 8003d7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d7e:	f7ff bf61 	b.w	8003c44 <__sflush_r>
 8003d82:	4b07      	ldr	r3, [pc, #28]	; (8003da0 <_fflush_r+0x4c>)
 8003d84:	429c      	cmp	r4, r3
 8003d86:	d101      	bne.n	8003d8c <_fflush_r+0x38>
 8003d88:	68ac      	ldr	r4, [r5, #8]
 8003d8a:	e7f1      	b.n	8003d70 <_fflush_r+0x1c>
 8003d8c:	4b05      	ldr	r3, [pc, #20]	; (8003da4 <_fflush_r+0x50>)
 8003d8e:	429c      	cmp	r4, r3
 8003d90:	bf08      	it	eq
 8003d92:	68ec      	ldreq	r4, [r5, #12]
 8003d94:	e7ec      	b.n	8003d70 <_fflush_r+0x1c>
 8003d96:	2000      	movs	r0, #0
 8003d98:	bd38      	pop	{r3, r4, r5, pc}
 8003d9a:	bf00      	nop
 8003d9c:	08004dfc 	.word	0x08004dfc
 8003da0:	08004e1c 	.word	0x08004e1c
 8003da4:	08004ddc 	.word	0x08004ddc

08003da8 <_cleanup_r>:
 8003da8:	4901      	ldr	r1, [pc, #4]	; (8003db0 <_cleanup_r+0x8>)
 8003daa:	f000 b8a9 	b.w	8003f00 <_fwalk_reent>
 8003dae:	bf00      	nop
 8003db0:	08003d55 	.word	0x08003d55

08003db4 <std.isra.0>:
 8003db4:	2300      	movs	r3, #0
 8003db6:	b510      	push	{r4, lr}
 8003db8:	4604      	mov	r4, r0
 8003dba:	6003      	str	r3, [r0, #0]
 8003dbc:	6043      	str	r3, [r0, #4]
 8003dbe:	6083      	str	r3, [r0, #8]
 8003dc0:	8181      	strh	r1, [r0, #12]
 8003dc2:	6643      	str	r3, [r0, #100]	; 0x64
 8003dc4:	81c2      	strh	r2, [r0, #14]
 8003dc6:	6103      	str	r3, [r0, #16]
 8003dc8:	6143      	str	r3, [r0, #20]
 8003dca:	6183      	str	r3, [r0, #24]
 8003dcc:	4619      	mov	r1, r3
 8003dce:	2208      	movs	r2, #8
 8003dd0:	305c      	adds	r0, #92	; 0x5c
 8003dd2:	f000 f8d7 	bl	8003f84 <memset>
 8003dd6:	4b05      	ldr	r3, [pc, #20]	; (8003dec <std.isra.0+0x38>)
 8003dd8:	6263      	str	r3, [r4, #36]	; 0x24
 8003dda:	4b05      	ldr	r3, [pc, #20]	; (8003df0 <std.isra.0+0x3c>)
 8003ddc:	62a3      	str	r3, [r4, #40]	; 0x28
 8003dde:	4b05      	ldr	r3, [pc, #20]	; (8003df4 <std.isra.0+0x40>)
 8003de0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003de2:	4b05      	ldr	r3, [pc, #20]	; (8003df8 <std.isra.0+0x44>)
 8003de4:	6224      	str	r4, [r4, #32]
 8003de6:	6323      	str	r3, [r4, #48]	; 0x30
 8003de8:	bd10      	pop	{r4, pc}
 8003dea:	bf00      	nop
 8003dec:	08004361 	.word	0x08004361
 8003df0:	08004383 	.word	0x08004383
 8003df4:	080043bb 	.word	0x080043bb
 8003df8:	080043df 	.word	0x080043df

08003dfc <__sfmoreglue>:
 8003dfc:	b570      	push	{r4, r5, r6, lr}
 8003dfe:	1e4a      	subs	r2, r1, #1
 8003e00:	2568      	movs	r5, #104	; 0x68
 8003e02:	4355      	muls	r5, r2
 8003e04:	460e      	mov	r6, r1
 8003e06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003e0a:	f000 f911 	bl	8004030 <_malloc_r>
 8003e0e:	4604      	mov	r4, r0
 8003e10:	b140      	cbz	r0, 8003e24 <__sfmoreglue+0x28>
 8003e12:	2100      	movs	r1, #0
 8003e14:	e880 0042 	stmia.w	r0, {r1, r6}
 8003e18:	300c      	adds	r0, #12
 8003e1a:	60a0      	str	r0, [r4, #8]
 8003e1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003e20:	f000 f8b0 	bl	8003f84 <memset>
 8003e24:	4620      	mov	r0, r4
 8003e26:	bd70      	pop	{r4, r5, r6, pc}

08003e28 <__sinit>:
 8003e28:	6983      	ldr	r3, [r0, #24]
 8003e2a:	b510      	push	{r4, lr}
 8003e2c:	4604      	mov	r4, r0
 8003e2e:	bb33      	cbnz	r3, 8003e7e <__sinit+0x56>
 8003e30:	6483      	str	r3, [r0, #72]	; 0x48
 8003e32:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003e34:	6503      	str	r3, [r0, #80]	; 0x50
 8003e36:	4b12      	ldr	r3, [pc, #72]	; (8003e80 <__sinit+0x58>)
 8003e38:	4a12      	ldr	r2, [pc, #72]	; (8003e84 <__sinit+0x5c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6282      	str	r2, [r0, #40]	; 0x28
 8003e3e:	4298      	cmp	r0, r3
 8003e40:	bf04      	itt	eq
 8003e42:	2301      	moveq	r3, #1
 8003e44:	6183      	streq	r3, [r0, #24]
 8003e46:	f000 f81f 	bl	8003e88 <__sfp>
 8003e4a:	6060      	str	r0, [r4, #4]
 8003e4c:	4620      	mov	r0, r4
 8003e4e:	f000 f81b 	bl	8003e88 <__sfp>
 8003e52:	60a0      	str	r0, [r4, #8]
 8003e54:	4620      	mov	r0, r4
 8003e56:	f000 f817 	bl	8003e88 <__sfp>
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	60e0      	str	r0, [r4, #12]
 8003e5e:	2104      	movs	r1, #4
 8003e60:	6860      	ldr	r0, [r4, #4]
 8003e62:	f7ff ffa7 	bl	8003db4 <std.isra.0>
 8003e66:	2201      	movs	r2, #1
 8003e68:	2109      	movs	r1, #9
 8003e6a:	68a0      	ldr	r0, [r4, #8]
 8003e6c:	f7ff ffa2 	bl	8003db4 <std.isra.0>
 8003e70:	2202      	movs	r2, #2
 8003e72:	2112      	movs	r1, #18
 8003e74:	68e0      	ldr	r0, [r4, #12]
 8003e76:	f7ff ff9d 	bl	8003db4 <std.isra.0>
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	61a3      	str	r3, [r4, #24]
 8003e7e:	bd10      	pop	{r4, pc}
 8003e80:	08004e3c 	.word	0x08004e3c
 8003e84:	08003da9 	.word	0x08003da9

08003e88 <__sfp>:
 8003e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e8a:	4b1c      	ldr	r3, [pc, #112]	; (8003efc <__sfp+0x74>)
 8003e8c:	681e      	ldr	r6, [r3, #0]
 8003e8e:	69b3      	ldr	r3, [r6, #24]
 8003e90:	4607      	mov	r7, r0
 8003e92:	b913      	cbnz	r3, 8003e9a <__sfp+0x12>
 8003e94:	4630      	mov	r0, r6
 8003e96:	f7ff ffc7 	bl	8003e28 <__sinit>
 8003e9a:	3648      	adds	r6, #72	; 0x48
 8003e9c:	68b4      	ldr	r4, [r6, #8]
 8003e9e:	6873      	ldr	r3, [r6, #4]
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	d503      	bpl.n	8003eac <__sfp+0x24>
 8003ea4:	6833      	ldr	r3, [r6, #0]
 8003ea6:	b133      	cbz	r3, 8003eb6 <__sfp+0x2e>
 8003ea8:	6836      	ldr	r6, [r6, #0]
 8003eaa:	e7f7      	b.n	8003e9c <__sfp+0x14>
 8003eac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003eb0:	b16d      	cbz	r5, 8003ece <__sfp+0x46>
 8003eb2:	3468      	adds	r4, #104	; 0x68
 8003eb4:	e7f4      	b.n	8003ea0 <__sfp+0x18>
 8003eb6:	2104      	movs	r1, #4
 8003eb8:	4638      	mov	r0, r7
 8003eba:	f7ff ff9f 	bl	8003dfc <__sfmoreglue>
 8003ebe:	6030      	str	r0, [r6, #0]
 8003ec0:	2800      	cmp	r0, #0
 8003ec2:	d1f1      	bne.n	8003ea8 <__sfp+0x20>
 8003ec4:	230c      	movs	r3, #12
 8003ec6:	603b      	str	r3, [r7, #0]
 8003ec8:	4604      	mov	r4, r0
 8003eca:	4620      	mov	r0, r4
 8003ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ece:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ed2:	81e3      	strh	r3, [r4, #14]
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	81a3      	strh	r3, [r4, #12]
 8003ed8:	6665      	str	r5, [r4, #100]	; 0x64
 8003eda:	6025      	str	r5, [r4, #0]
 8003edc:	60a5      	str	r5, [r4, #8]
 8003ede:	6065      	str	r5, [r4, #4]
 8003ee0:	6125      	str	r5, [r4, #16]
 8003ee2:	6165      	str	r5, [r4, #20]
 8003ee4:	61a5      	str	r5, [r4, #24]
 8003ee6:	2208      	movs	r2, #8
 8003ee8:	4629      	mov	r1, r5
 8003eea:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003eee:	f000 f849 	bl	8003f84 <memset>
 8003ef2:	6365      	str	r5, [r4, #52]	; 0x34
 8003ef4:	63a5      	str	r5, [r4, #56]	; 0x38
 8003ef6:	64a5      	str	r5, [r4, #72]	; 0x48
 8003ef8:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003efa:	e7e6      	b.n	8003eca <__sfp+0x42>
 8003efc:	08004e3c 	.word	0x08004e3c

08003f00 <_fwalk_reent>:
 8003f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f04:	4680      	mov	r8, r0
 8003f06:	4689      	mov	r9, r1
 8003f08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003f0c:	2600      	movs	r6, #0
 8003f0e:	b914      	cbnz	r4, 8003f16 <_fwalk_reent+0x16>
 8003f10:	4630      	mov	r0, r6
 8003f12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f16:	68a5      	ldr	r5, [r4, #8]
 8003f18:	6867      	ldr	r7, [r4, #4]
 8003f1a:	3f01      	subs	r7, #1
 8003f1c:	d501      	bpl.n	8003f22 <_fwalk_reent+0x22>
 8003f1e:	6824      	ldr	r4, [r4, #0]
 8003f20:	e7f5      	b.n	8003f0e <_fwalk_reent+0xe>
 8003f22:	89ab      	ldrh	r3, [r5, #12]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d907      	bls.n	8003f38 <_fwalk_reent+0x38>
 8003f28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	d003      	beq.n	8003f38 <_fwalk_reent+0x38>
 8003f30:	4629      	mov	r1, r5
 8003f32:	4640      	mov	r0, r8
 8003f34:	47c8      	blx	r9
 8003f36:	4306      	orrs	r6, r0
 8003f38:	3568      	adds	r5, #104	; 0x68
 8003f3a:	e7ee      	b.n	8003f1a <_fwalk_reent+0x1a>

08003f3c <__libc_init_array>:
 8003f3c:	b570      	push	{r4, r5, r6, lr}
 8003f3e:	4e0d      	ldr	r6, [pc, #52]	; (8003f74 <__libc_init_array+0x38>)
 8003f40:	4c0d      	ldr	r4, [pc, #52]	; (8003f78 <__libc_init_array+0x3c>)
 8003f42:	1ba4      	subs	r4, r4, r6
 8003f44:	10a4      	asrs	r4, r4, #2
 8003f46:	2500      	movs	r5, #0
 8003f48:	42a5      	cmp	r5, r4
 8003f4a:	d109      	bne.n	8003f60 <__libc_init_array+0x24>
 8003f4c:	4e0b      	ldr	r6, [pc, #44]	; (8003f7c <__libc_init_array+0x40>)
 8003f4e:	4c0c      	ldr	r4, [pc, #48]	; (8003f80 <__libc_init_array+0x44>)
 8003f50:	f000 feb6 	bl	8004cc0 <_init>
 8003f54:	1ba4      	subs	r4, r4, r6
 8003f56:	10a4      	asrs	r4, r4, #2
 8003f58:	2500      	movs	r5, #0
 8003f5a:	42a5      	cmp	r5, r4
 8003f5c:	d105      	bne.n	8003f6a <__libc_init_array+0x2e>
 8003f5e:	bd70      	pop	{r4, r5, r6, pc}
 8003f60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f64:	4798      	blx	r3
 8003f66:	3501      	adds	r5, #1
 8003f68:	e7ee      	b.n	8003f48 <__libc_init_array+0xc>
 8003f6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f6e:	4798      	blx	r3
 8003f70:	3501      	adds	r5, #1
 8003f72:	e7f2      	b.n	8003f5a <__libc_init_array+0x1e>
 8003f74:	08004e7c 	.word	0x08004e7c
 8003f78:	08004e7c 	.word	0x08004e7c
 8003f7c:	08004e7c 	.word	0x08004e7c
 8003f80:	08004e80 	.word	0x08004e80

08003f84 <memset>:
 8003f84:	4402      	add	r2, r0
 8003f86:	4603      	mov	r3, r0
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d100      	bne.n	8003f8e <memset+0xa>
 8003f8c:	4770      	bx	lr
 8003f8e:	f803 1b01 	strb.w	r1, [r3], #1
 8003f92:	e7f9      	b.n	8003f88 <memset+0x4>

08003f94 <_free_r>:
 8003f94:	b538      	push	{r3, r4, r5, lr}
 8003f96:	4605      	mov	r5, r0
 8003f98:	2900      	cmp	r1, #0
 8003f9a:	d045      	beq.n	8004028 <_free_r+0x94>
 8003f9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fa0:	1f0c      	subs	r4, r1, #4
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	bfb8      	it	lt
 8003fa6:	18e4      	addlt	r4, r4, r3
 8003fa8:	f000 fb7e 	bl	80046a8 <__malloc_lock>
 8003fac:	4a1f      	ldr	r2, [pc, #124]	; (800402c <_free_r+0x98>)
 8003fae:	6813      	ldr	r3, [r2, #0]
 8003fb0:	4610      	mov	r0, r2
 8003fb2:	b933      	cbnz	r3, 8003fc2 <_free_r+0x2e>
 8003fb4:	6063      	str	r3, [r4, #4]
 8003fb6:	6014      	str	r4, [r2, #0]
 8003fb8:	4628      	mov	r0, r5
 8003fba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003fbe:	f000 bb74 	b.w	80046aa <__malloc_unlock>
 8003fc2:	42a3      	cmp	r3, r4
 8003fc4:	d90c      	bls.n	8003fe0 <_free_r+0x4c>
 8003fc6:	6821      	ldr	r1, [r4, #0]
 8003fc8:	1862      	adds	r2, r4, r1
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	bf04      	itt	eq
 8003fce:	681a      	ldreq	r2, [r3, #0]
 8003fd0:	685b      	ldreq	r3, [r3, #4]
 8003fd2:	6063      	str	r3, [r4, #4]
 8003fd4:	bf04      	itt	eq
 8003fd6:	1852      	addeq	r2, r2, r1
 8003fd8:	6022      	streq	r2, [r4, #0]
 8003fda:	6004      	str	r4, [r0, #0]
 8003fdc:	e7ec      	b.n	8003fb8 <_free_r+0x24>
 8003fde:	4613      	mov	r3, r2
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	b10a      	cbz	r2, 8003fe8 <_free_r+0x54>
 8003fe4:	42a2      	cmp	r2, r4
 8003fe6:	d9fa      	bls.n	8003fde <_free_r+0x4a>
 8003fe8:	6819      	ldr	r1, [r3, #0]
 8003fea:	1858      	adds	r0, r3, r1
 8003fec:	42a0      	cmp	r0, r4
 8003fee:	d10b      	bne.n	8004008 <_free_r+0x74>
 8003ff0:	6820      	ldr	r0, [r4, #0]
 8003ff2:	4401      	add	r1, r0
 8003ff4:	1858      	adds	r0, r3, r1
 8003ff6:	4282      	cmp	r2, r0
 8003ff8:	6019      	str	r1, [r3, #0]
 8003ffa:	d1dd      	bne.n	8003fb8 <_free_r+0x24>
 8003ffc:	6810      	ldr	r0, [r2, #0]
 8003ffe:	6852      	ldr	r2, [r2, #4]
 8004000:	605a      	str	r2, [r3, #4]
 8004002:	4401      	add	r1, r0
 8004004:	6019      	str	r1, [r3, #0]
 8004006:	e7d7      	b.n	8003fb8 <_free_r+0x24>
 8004008:	d902      	bls.n	8004010 <_free_r+0x7c>
 800400a:	230c      	movs	r3, #12
 800400c:	602b      	str	r3, [r5, #0]
 800400e:	e7d3      	b.n	8003fb8 <_free_r+0x24>
 8004010:	6820      	ldr	r0, [r4, #0]
 8004012:	1821      	adds	r1, r4, r0
 8004014:	428a      	cmp	r2, r1
 8004016:	bf04      	itt	eq
 8004018:	6811      	ldreq	r1, [r2, #0]
 800401a:	6852      	ldreq	r2, [r2, #4]
 800401c:	6062      	str	r2, [r4, #4]
 800401e:	bf04      	itt	eq
 8004020:	1809      	addeq	r1, r1, r0
 8004022:	6021      	streq	r1, [r4, #0]
 8004024:	605c      	str	r4, [r3, #4]
 8004026:	e7c7      	b.n	8003fb8 <_free_r+0x24>
 8004028:	bd38      	pop	{r3, r4, r5, pc}
 800402a:	bf00      	nop
 800402c:	20000090 	.word	0x20000090

08004030 <_malloc_r>:
 8004030:	b570      	push	{r4, r5, r6, lr}
 8004032:	1ccd      	adds	r5, r1, #3
 8004034:	f025 0503 	bic.w	r5, r5, #3
 8004038:	3508      	adds	r5, #8
 800403a:	2d0c      	cmp	r5, #12
 800403c:	bf38      	it	cc
 800403e:	250c      	movcc	r5, #12
 8004040:	2d00      	cmp	r5, #0
 8004042:	4606      	mov	r6, r0
 8004044:	db01      	blt.n	800404a <_malloc_r+0x1a>
 8004046:	42a9      	cmp	r1, r5
 8004048:	d903      	bls.n	8004052 <_malloc_r+0x22>
 800404a:	230c      	movs	r3, #12
 800404c:	6033      	str	r3, [r6, #0]
 800404e:	2000      	movs	r0, #0
 8004050:	bd70      	pop	{r4, r5, r6, pc}
 8004052:	f000 fb29 	bl	80046a8 <__malloc_lock>
 8004056:	4a23      	ldr	r2, [pc, #140]	; (80040e4 <_malloc_r+0xb4>)
 8004058:	6814      	ldr	r4, [r2, #0]
 800405a:	4621      	mov	r1, r4
 800405c:	b991      	cbnz	r1, 8004084 <_malloc_r+0x54>
 800405e:	4c22      	ldr	r4, [pc, #136]	; (80040e8 <_malloc_r+0xb8>)
 8004060:	6823      	ldr	r3, [r4, #0]
 8004062:	b91b      	cbnz	r3, 800406c <_malloc_r+0x3c>
 8004064:	4630      	mov	r0, r6
 8004066:	f000 f8bd 	bl	80041e4 <_sbrk_r>
 800406a:	6020      	str	r0, [r4, #0]
 800406c:	4629      	mov	r1, r5
 800406e:	4630      	mov	r0, r6
 8004070:	f000 f8b8 	bl	80041e4 <_sbrk_r>
 8004074:	1c43      	adds	r3, r0, #1
 8004076:	d126      	bne.n	80040c6 <_malloc_r+0x96>
 8004078:	230c      	movs	r3, #12
 800407a:	6033      	str	r3, [r6, #0]
 800407c:	4630      	mov	r0, r6
 800407e:	f000 fb14 	bl	80046aa <__malloc_unlock>
 8004082:	e7e4      	b.n	800404e <_malloc_r+0x1e>
 8004084:	680b      	ldr	r3, [r1, #0]
 8004086:	1b5b      	subs	r3, r3, r5
 8004088:	d41a      	bmi.n	80040c0 <_malloc_r+0x90>
 800408a:	2b0b      	cmp	r3, #11
 800408c:	d90f      	bls.n	80040ae <_malloc_r+0x7e>
 800408e:	600b      	str	r3, [r1, #0]
 8004090:	50cd      	str	r5, [r1, r3]
 8004092:	18cc      	adds	r4, r1, r3
 8004094:	4630      	mov	r0, r6
 8004096:	f000 fb08 	bl	80046aa <__malloc_unlock>
 800409a:	f104 000b 	add.w	r0, r4, #11
 800409e:	1d23      	adds	r3, r4, #4
 80040a0:	f020 0007 	bic.w	r0, r0, #7
 80040a4:	1ac3      	subs	r3, r0, r3
 80040a6:	d01b      	beq.n	80040e0 <_malloc_r+0xb0>
 80040a8:	425a      	negs	r2, r3
 80040aa:	50e2      	str	r2, [r4, r3]
 80040ac:	bd70      	pop	{r4, r5, r6, pc}
 80040ae:	428c      	cmp	r4, r1
 80040b0:	bf0d      	iteet	eq
 80040b2:	6863      	ldreq	r3, [r4, #4]
 80040b4:	684b      	ldrne	r3, [r1, #4]
 80040b6:	6063      	strne	r3, [r4, #4]
 80040b8:	6013      	streq	r3, [r2, #0]
 80040ba:	bf18      	it	ne
 80040bc:	460c      	movne	r4, r1
 80040be:	e7e9      	b.n	8004094 <_malloc_r+0x64>
 80040c0:	460c      	mov	r4, r1
 80040c2:	6849      	ldr	r1, [r1, #4]
 80040c4:	e7ca      	b.n	800405c <_malloc_r+0x2c>
 80040c6:	1cc4      	adds	r4, r0, #3
 80040c8:	f024 0403 	bic.w	r4, r4, #3
 80040cc:	42a0      	cmp	r0, r4
 80040ce:	d005      	beq.n	80040dc <_malloc_r+0xac>
 80040d0:	1a21      	subs	r1, r4, r0
 80040d2:	4630      	mov	r0, r6
 80040d4:	f000 f886 	bl	80041e4 <_sbrk_r>
 80040d8:	3001      	adds	r0, #1
 80040da:	d0cd      	beq.n	8004078 <_malloc_r+0x48>
 80040dc:	6025      	str	r5, [r4, #0]
 80040de:	e7d9      	b.n	8004094 <_malloc_r+0x64>
 80040e0:	bd70      	pop	{r4, r5, r6, pc}
 80040e2:	bf00      	nop
 80040e4:	20000090 	.word	0x20000090
 80040e8:	20000094 	.word	0x20000094

080040ec <iprintf>:
 80040ec:	b40f      	push	{r0, r1, r2, r3}
 80040ee:	4b0a      	ldr	r3, [pc, #40]	; (8004118 <iprintf+0x2c>)
 80040f0:	b513      	push	{r0, r1, r4, lr}
 80040f2:	681c      	ldr	r4, [r3, #0]
 80040f4:	b124      	cbz	r4, 8004100 <iprintf+0x14>
 80040f6:	69a3      	ldr	r3, [r4, #24]
 80040f8:	b913      	cbnz	r3, 8004100 <iprintf+0x14>
 80040fa:	4620      	mov	r0, r4
 80040fc:	f7ff fe94 	bl	8003e28 <__sinit>
 8004100:	ab05      	add	r3, sp, #20
 8004102:	9a04      	ldr	r2, [sp, #16]
 8004104:	68a1      	ldr	r1, [r4, #8]
 8004106:	9301      	str	r3, [sp, #4]
 8004108:	4620      	mov	r0, r4
 800410a:	f000 faf9 	bl	8004700 <_vfiprintf_r>
 800410e:	b002      	add	sp, #8
 8004110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004114:	b004      	add	sp, #16
 8004116:	4770      	bx	lr
 8004118:	2000000c 	.word	0x2000000c

0800411c <_puts_r>:
 800411c:	b570      	push	{r4, r5, r6, lr}
 800411e:	460e      	mov	r6, r1
 8004120:	4605      	mov	r5, r0
 8004122:	b118      	cbz	r0, 800412c <_puts_r+0x10>
 8004124:	6983      	ldr	r3, [r0, #24]
 8004126:	b90b      	cbnz	r3, 800412c <_puts_r+0x10>
 8004128:	f7ff fe7e 	bl	8003e28 <__sinit>
 800412c:	69ab      	ldr	r3, [r5, #24]
 800412e:	68ac      	ldr	r4, [r5, #8]
 8004130:	b913      	cbnz	r3, 8004138 <_puts_r+0x1c>
 8004132:	4628      	mov	r0, r5
 8004134:	f7ff fe78 	bl	8003e28 <__sinit>
 8004138:	4b23      	ldr	r3, [pc, #140]	; (80041c8 <_puts_r+0xac>)
 800413a:	429c      	cmp	r4, r3
 800413c:	d117      	bne.n	800416e <_puts_r+0x52>
 800413e:	686c      	ldr	r4, [r5, #4]
 8004140:	89a3      	ldrh	r3, [r4, #12]
 8004142:	071b      	lsls	r3, r3, #28
 8004144:	d51d      	bpl.n	8004182 <_puts_r+0x66>
 8004146:	6923      	ldr	r3, [r4, #16]
 8004148:	b1db      	cbz	r3, 8004182 <_puts_r+0x66>
 800414a:	3e01      	subs	r6, #1
 800414c:	68a3      	ldr	r3, [r4, #8]
 800414e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004152:	3b01      	subs	r3, #1
 8004154:	60a3      	str	r3, [r4, #8]
 8004156:	b9e9      	cbnz	r1, 8004194 <_puts_r+0x78>
 8004158:	2b00      	cmp	r3, #0
 800415a:	da2e      	bge.n	80041ba <_puts_r+0x9e>
 800415c:	4622      	mov	r2, r4
 800415e:	210a      	movs	r1, #10
 8004160:	4628      	mov	r0, r5
 8004162:	f000 f941 	bl	80043e8 <__swbuf_r>
 8004166:	3001      	adds	r0, #1
 8004168:	d011      	beq.n	800418e <_puts_r+0x72>
 800416a:	200a      	movs	r0, #10
 800416c:	bd70      	pop	{r4, r5, r6, pc}
 800416e:	4b17      	ldr	r3, [pc, #92]	; (80041cc <_puts_r+0xb0>)
 8004170:	429c      	cmp	r4, r3
 8004172:	d101      	bne.n	8004178 <_puts_r+0x5c>
 8004174:	68ac      	ldr	r4, [r5, #8]
 8004176:	e7e3      	b.n	8004140 <_puts_r+0x24>
 8004178:	4b15      	ldr	r3, [pc, #84]	; (80041d0 <_puts_r+0xb4>)
 800417a:	429c      	cmp	r4, r3
 800417c:	bf08      	it	eq
 800417e:	68ec      	ldreq	r4, [r5, #12]
 8004180:	e7de      	b.n	8004140 <_puts_r+0x24>
 8004182:	4621      	mov	r1, r4
 8004184:	4628      	mov	r0, r5
 8004186:	f000 f993 	bl	80044b0 <__swsetup_r>
 800418a:	2800      	cmp	r0, #0
 800418c:	d0dd      	beq.n	800414a <_puts_r+0x2e>
 800418e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004192:	bd70      	pop	{r4, r5, r6, pc}
 8004194:	2b00      	cmp	r3, #0
 8004196:	da04      	bge.n	80041a2 <_puts_r+0x86>
 8004198:	69a2      	ldr	r2, [r4, #24]
 800419a:	4293      	cmp	r3, r2
 800419c:	db06      	blt.n	80041ac <_puts_r+0x90>
 800419e:	290a      	cmp	r1, #10
 80041a0:	d004      	beq.n	80041ac <_puts_r+0x90>
 80041a2:	6823      	ldr	r3, [r4, #0]
 80041a4:	1c5a      	adds	r2, r3, #1
 80041a6:	6022      	str	r2, [r4, #0]
 80041a8:	7019      	strb	r1, [r3, #0]
 80041aa:	e7cf      	b.n	800414c <_puts_r+0x30>
 80041ac:	4622      	mov	r2, r4
 80041ae:	4628      	mov	r0, r5
 80041b0:	f000 f91a 	bl	80043e8 <__swbuf_r>
 80041b4:	3001      	adds	r0, #1
 80041b6:	d1c9      	bne.n	800414c <_puts_r+0x30>
 80041b8:	e7e9      	b.n	800418e <_puts_r+0x72>
 80041ba:	6823      	ldr	r3, [r4, #0]
 80041bc:	200a      	movs	r0, #10
 80041be:	1c5a      	adds	r2, r3, #1
 80041c0:	6022      	str	r2, [r4, #0]
 80041c2:	7018      	strb	r0, [r3, #0]
 80041c4:	bd70      	pop	{r4, r5, r6, pc}
 80041c6:	bf00      	nop
 80041c8:	08004dfc 	.word	0x08004dfc
 80041cc:	08004e1c 	.word	0x08004e1c
 80041d0:	08004ddc 	.word	0x08004ddc

080041d4 <puts>:
 80041d4:	4b02      	ldr	r3, [pc, #8]	; (80041e0 <puts+0xc>)
 80041d6:	4601      	mov	r1, r0
 80041d8:	6818      	ldr	r0, [r3, #0]
 80041da:	f7ff bf9f 	b.w	800411c <_puts_r>
 80041de:	bf00      	nop
 80041e0:	2000000c 	.word	0x2000000c

080041e4 <_sbrk_r>:
 80041e4:	b538      	push	{r3, r4, r5, lr}
 80041e6:	4c06      	ldr	r4, [pc, #24]	; (8004200 <_sbrk_r+0x1c>)
 80041e8:	2300      	movs	r3, #0
 80041ea:	4605      	mov	r5, r0
 80041ec:	4608      	mov	r0, r1
 80041ee:	6023      	str	r3, [r4, #0]
 80041f0:	f7ff f8e8 	bl	80033c4 <_sbrk>
 80041f4:	1c43      	adds	r3, r0, #1
 80041f6:	d102      	bne.n	80041fe <_sbrk_r+0x1a>
 80041f8:	6823      	ldr	r3, [r4, #0]
 80041fa:	b103      	cbz	r3, 80041fe <_sbrk_r+0x1a>
 80041fc:	602b      	str	r3, [r5, #0]
 80041fe:	bd38      	pop	{r3, r4, r5, pc}
 8004200:	200017e0 	.word	0x200017e0

08004204 <setvbuf>:
 8004204:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004208:	461d      	mov	r5, r3
 800420a:	4b51      	ldr	r3, [pc, #324]	; (8004350 <setvbuf+0x14c>)
 800420c:	681e      	ldr	r6, [r3, #0]
 800420e:	4604      	mov	r4, r0
 8004210:	460f      	mov	r7, r1
 8004212:	4690      	mov	r8, r2
 8004214:	b126      	cbz	r6, 8004220 <setvbuf+0x1c>
 8004216:	69b3      	ldr	r3, [r6, #24]
 8004218:	b913      	cbnz	r3, 8004220 <setvbuf+0x1c>
 800421a:	4630      	mov	r0, r6
 800421c:	f7ff fe04 	bl	8003e28 <__sinit>
 8004220:	4b4c      	ldr	r3, [pc, #304]	; (8004354 <setvbuf+0x150>)
 8004222:	429c      	cmp	r4, r3
 8004224:	d152      	bne.n	80042cc <setvbuf+0xc8>
 8004226:	6874      	ldr	r4, [r6, #4]
 8004228:	f1b8 0f02 	cmp.w	r8, #2
 800422c:	d006      	beq.n	800423c <setvbuf+0x38>
 800422e:	f1b8 0f01 	cmp.w	r8, #1
 8004232:	f200 8089 	bhi.w	8004348 <setvbuf+0x144>
 8004236:	2d00      	cmp	r5, #0
 8004238:	f2c0 8086 	blt.w	8004348 <setvbuf+0x144>
 800423c:	4621      	mov	r1, r4
 800423e:	4630      	mov	r0, r6
 8004240:	f7ff fd88 	bl	8003d54 <_fflush_r>
 8004244:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004246:	b141      	cbz	r1, 800425a <setvbuf+0x56>
 8004248:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800424c:	4299      	cmp	r1, r3
 800424e:	d002      	beq.n	8004256 <setvbuf+0x52>
 8004250:	4630      	mov	r0, r6
 8004252:	f7ff fe9f 	bl	8003f94 <_free_r>
 8004256:	2300      	movs	r3, #0
 8004258:	6363      	str	r3, [r4, #52]	; 0x34
 800425a:	2300      	movs	r3, #0
 800425c:	61a3      	str	r3, [r4, #24]
 800425e:	6063      	str	r3, [r4, #4]
 8004260:	89a3      	ldrh	r3, [r4, #12]
 8004262:	061b      	lsls	r3, r3, #24
 8004264:	d503      	bpl.n	800426e <setvbuf+0x6a>
 8004266:	6921      	ldr	r1, [r4, #16]
 8004268:	4630      	mov	r0, r6
 800426a:	f7ff fe93 	bl	8003f94 <_free_r>
 800426e:	89a3      	ldrh	r3, [r4, #12]
 8004270:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004274:	f023 0303 	bic.w	r3, r3, #3
 8004278:	f1b8 0f02 	cmp.w	r8, #2
 800427c:	81a3      	strh	r3, [r4, #12]
 800427e:	d05d      	beq.n	800433c <setvbuf+0x138>
 8004280:	ab01      	add	r3, sp, #4
 8004282:	466a      	mov	r2, sp
 8004284:	4621      	mov	r1, r4
 8004286:	4630      	mov	r0, r6
 8004288:	f000 f9a2 	bl	80045d0 <__swhatbuf_r>
 800428c:	89a3      	ldrh	r3, [r4, #12]
 800428e:	4318      	orrs	r0, r3
 8004290:	81a0      	strh	r0, [r4, #12]
 8004292:	bb2d      	cbnz	r5, 80042e0 <setvbuf+0xdc>
 8004294:	9d00      	ldr	r5, [sp, #0]
 8004296:	4628      	mov	r0, r5
 8004298:	f000 f9fe 	bl	8004698 <malloc>
 800429c:	4607      	mov	r7, r0
 800429e:	2800      	cmp	r0, #0
 80042a0:	d14e      	bne.n	8004340 <setvbuf+0x13c>
 80042a2:	f8dd 9000 	ldr.w	r9, [sp]
 80042a6:	45a9      	cmp	r9, r5
 80042a8:	d13c      	bne.n	8004324 <setvbuf+0x120>
 80042aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042ae:	89a3      	ldrh	r3, [r4, #12]
 80042b0:	f043 0302 	orr.w	r3, r3, #2
 80042b4:	81a3      	strh	r3, [r4, #12]
 80042b6:	2300      	movs	r3, #0
 80042b8:	60a3      	str	r3, [r4, #8]
 80042ba:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80042be:	6023      	str	r3, [r4, #0]
 80042c0:	6123      	str	r3, [r4, #16]
 80042c2:	2301      	movs	r3, #1
 80042c4:	6163      	str	r3, [r4, #20]
 80042c6:	b003      	add	sp, #12
 80042c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80042cc:	4b22      	ldr	r3, [pc, #136]	; (8004358 <setvbuf+0x154>)
 80042ce:	429c      	cmp	r4, r3
 80042d0:	d101      	bne.n	80042d6 <setvbuf+0xd2>
 80042d2:	68b4      	ldr	r4, [r6, #8]
 80042d4:	e7a8      	b.n	8004228 <setvbuf+0x24>
 80042d6:	4b21      	ldr	r3, [pc, #132]	; (800435c <setvbuf+0x158>)
 80042d8:	429c      	cmp	r4, r3
 80042da:	bf08      	it	eq
 80042dc:	68f4      	ldreq	r4, [r6, #12]
 80042de:	e7a3      	b.n	8004228 <setvbuf+0x24>
 80042e0:	2f00      	cmp	r7, #0
 80042e2:	d0d8      	beq.n	8004296 <setvbuf+0x92>
 80042e4:	69b3      	ldr	r3, [r6, #24]
 80042e6:	b913      	cbnz	r3, 80042ee <setvbuf+0xea>
 80042e8:	4630      	mov	r0, r6
 80042ea:	f7ff fd9d 	bl	8003e28 <__sinit>
 80042ee:	f1b8 0f01 	cmp.w	r8, #1
 80042f2:	bf08      	it	eq
 80042f4:	89a3      	ldrheq	r3, [r4, #12]
 80042f6:	6027      	str	r7, [r4, #0]
 80042f8:	bf04      	itt	eq
 80042fa:	f043 0301 	orreq.w	r3, r3, #1
 80042fe:	81a3      	strheq	r3, [r4, #12]
 8004300:	89a3      	ldrh	r3, [r4, #12]
 8004302:	6127      	str	r7, [r4, #16]
 8004304:	f013 0008 	ands.w	r0, r3, #8
 8004308:	6165      	str	r5, [r4, #20]
 800430a:	d01b      	beq.n	8004344 <setvbuf+0x140>
 800430c:	f013 0001 	ands.w	r0, r3, #1
 8004310:	bf18      	it	ne
 8004312:	426d      	negne	r5, r5
 8004314:	f04f 0300 	mov.w	r3, #0
 8004318:	bf1d      	ittte	ne
 800431a:	60a3      	strne	r3, [r4, #8]
 800431c:	61a5      	strne	r5, [r4, #24]
 800431e:	4618      	movne	r0, r3
 8004320:	60a5      	streq	r5, [r4, #8]
 8004322:	e7d0      	b.n	80042c6 <setvbuf+0xc2>
 8004324:	4648      	mov	r0, r9
 8004326:	f000 f9b7 	bl	8004698 <malloc>
 800432a:	4607      	mov	r7, r0
 800432c:	2800      	cmp	r0, #0
 800432e:	d0bc      	beq.n	80042aa <setvbuf+0xa6>
 8004330:	89a3      	ldrh	r3, [r4, #12]
 8004332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004336:	81a3      	strh	r3, [r4, #12]
 8004338:	464d      	mov	r5, r9
 800433a:	e7d3      	b.n	80042e4 <setvbuf+0xe0>
 800433c:	2000      	movs	r0, #0
 800433e:	e7b6      	b.n	80042ae <setvbuf+0xaa>
 8004340:	46a9      	mov	r9, r5
 8004342:	e7f5      	b.n	8004330 <setvbuf+0x12c>
 8004344:	60a0      	str	r0, [r4, #8]
 8004346:	e7be      	b.n	80042c6 <setvbuf+0xc2>
 8004348:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800434c:	e7bb      	b.n	80042c6 <setvbuf+0xc2>
 800434e:	bf00      	nop
 8004350:	2000000c 	.word	0x2000000c
 8004354:	08004dfc 	.word	0x08004dfc
 8004358:	08004e1c 	.word	0x08004e1c
 800435c:	08004ddc 	.word	0x08004ddc

08004360 <__sread>:
 8004360:	b510      	push	{r4, lr}
 8004362:	460c      	mov	r4, r1
 8004364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004368:	f000 fc76 	bl	8004c58 <_read_r>
 800436c:	2800      	cmp	r0, #0
 800436e:	bfab      	itete	ge
 8004370:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004372:	89a3      	ldrhlt	r3, [r4, #12]
 8004374:	181b      	addge	r3, r3, r0
 8004376:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800437a:	bfac      	ite	ge
 800437c:	6563      	strge	r3, [r4, #84]	; 0x54
 800437e:	81a3      	strhlt	r3, [r4, #12]
 8004380:	bd10      	pop	{r4, pc}

08004382 <__swrite>:
 8004382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004386:	461f      	mov	r7, r3
 8004388:	898b      	ldrh	r3, [r1, #12]
 800438a:	05db      	lsls	r3, r3, #23
 800438c:	4605      	mov	r5, r0
 800438e:	460c      	mov	r4, r1
 8004390:	4616      	mov	r6, r2
 8004392:	d505      	bpl.n	80043a0 <__swrite+0x1e>
 8004394:	2302      	movs	r3, #2
 8004396:	2200      	movs	r2, #0
 8004398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800439c:	f000 f906 	bl	80045ac <_lseek_r>
 80043a0:	89a3      	ldrh	r3, [r4, #12]
 80043a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043aa:	81a3      	strh	r3, [r4, #12]
 80043ac:	4632      	mov	r2, r6
 80043ae:	463b      	mov	r3, r7
 80043b0:	4628      	mov	r0, r5
 80043b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043b6:	f000 b869 	b.w	800448c <_write_r>

080043ba <__sseek>:
 80043ba:	b510      	push	{r4, lr}
 80043bc:	460c      	mov	r4, r1
 80043be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043c2:	f000 f8f3 	bl	80045ac <_lseek_r>
 80043c6:	1c43      	adds	r3, r0, #1
 80043c8:	89a3      	ldrh	r3, [r4, #12]
 80043ca:	bf15      	itete	ne
 80043cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80043ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80043d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80043d6:	81a3      	strheq	r3, [r4, #12]
 80043d8:	bf18      	it	ne
 80043da:	81a3      	strhne	r3, [r4, #12]
 80043dc:	bd10      	pop	{r4, pc}

080043de <__sclose>:
 80043de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043e2:	f000 b8d3 	b.w	800458c <_close_r>
	...

080043e8 <__swbuf_r>:
 80043e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ea:	460e      	mov	r6, r1
 80043ec:	4614      	mov	r4, r2
 80043ee:	4605      	mov	r5, r0
 80043f0:	b118      	cbz	r0, 80043fa <__swbuf_r+0x12>
 80043f2:	6983      	ldr	r3, [r0, #24]
 80043f4:	b90b      	cbnz	r3, 80043fa <__swbuf_r+0x12>
 80043f6:	f7ff fd17 	bl	8003e28 <__sinit>
 80043fa:	4b21      	ldr	r3, [pc, #132]	; (8004480 <__swbuf_r+0x98>)
 80043fc:	429c      	cmp	r4, r3
 80043fe:	d12a      	bne.n	8004456 <__swbuf_r+0x6e>
 8004400:	686c      	ldr	r4, [r5, #4]
 8004402:	69a3      	ldr	r3, [r4, #24]
 8004404:	60a3      	str	r3, [r4, #8]
 8004406:	89a3      	ldrh	r3, [r4, #12]
 8004408:	071a      	lsls	r2, r3, #28
 800440a:	d52e      	bpl.n	800446a <__swbuf_r+0x82>
 800440c:	6923      	ldr	r3, [r4, #16]
 800440e:	b363      	cbz	r3, 800446a <__swbuf_r+0x82>
 8004410:	6923      	ldr	r3, [r4, #16]
 8004412:	6820      	ldr	r0, [r4, #0]
 8004414:	1ac0      	subs	r0, r0, r3
 8004416:	6963      	ldr	r3, [r4, #20]
 8004418:	b2f6      	uxtb	r6, r6
 800441a:	4298      	cmp	r0, r3
 800441c:	4637      	mov	r7, r6
 800441e:	db04      	blt.n	800442a <__swbuf_r+0x42>
 8004420:	4621      	mov	r1, r4
 8004422:	4628      	mov	r0, r5
 8004424:	f7ff fc96 	bl	8003d54 <_fflush_r>
 8004428:	bb28      	cbnz	r0, 8004476 <__swbuf_r+0x8e>
 800442a:	68a3      	ldr	r3, [r4, #8]
 800442c:	3b01      	subs	r3, #1
 800442e:	60a3      	str	r3, [r4, #8]
 8004430:	6823      	ldr	r3, [r4, #0]
 8004432:	1c5a      	adds	r2, r3, #1
 8004434:	6022      	str	r2, [r4, #0]
 8004436:	701e      	strb	r6, [r3, #0]
 8004438:	6963      	ldr	r3, [r4, #20]
 800443a:	3001      	adds	r0, #1
 800443c:	4298      	cmp	r0, r3
 800443e:	d004      	beq.n	800444a <__swbuf_r+0x62>
 8004440:	89a3      	ldrh	r3, [r4, #12]
 8004442:	07db      	lsls	r3, r3, #31
 8004444:	d519      	bpl.n	800447a <__swbuf_r+0x92>
 8004446:	2e0a      	cmp	r6, #10
 8004448:	d117      	bne.n	800447a <__swbuf_r+0x92>
 800444a:	4621      	mov	r1, r4
 800444c:	4628      	mov	r0, r5
 800444e:	f7ff fc81 	bl	8003d54 <_fflush_r>
 8004452:	b190      	cbz	r0, 800447a <__swbuf_r+0x92>
 8004454:	e00f      	b.n	8004476 <__swbuf_r+0x8e>
 8004456:	4b0b      	ldr	r3, [pc, #44]	; (8004484 <__swbuf_r+0x9c>)
 8004458:	429c      	cmp	r4, r3
 800445a:	d101      	bne.n	8004460 <__swbuf_r+0x78>
 800445c:	68ac      	ldr	r4, [r5, #8]
 800445e:	e7d0      	b.n	8004402 <__swbuf_r+0x1a>
 8004460:	4b09      	ldr	r3, [pc, #36]	; (8004488 <__swbuf_r+0xa0>)
 8004462:	429c      	cmp	r4, r3
 8004464:	bf08      	it	eq
 8004466:	68ec      	ldreq	r4, [r5, #12]
 8004468:	e7cb      	b.n	8004402 <__swbuf_r+0x1a>
 800446a:	4621      	mov	r1, r4
 800446c:	4628      	mov	r0, r5
 800446e:	f000 f81f 	bl	80044b0 <__swsetup_r>
 8004472:	2800      	cmp	r0, #0
 8004474:	d0cc      	beq.n	8004410 <__swbuf_r+0x28>
 8004476:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800447a:	4638      	mov	r0, r7
 800447c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800447e:	bf00      	nop
 8004480:	08004dfc 	.word	0x08004dfc
 8004484:	08004e1c 	.word	0x08004e1c
 8004488:	08004ddc 	.word	0x08004ddc

0800448c <_write_r>:
 800448c:	b538      	push	{r3, r4, r5, lr}
 800448e:	4c07      	ldr	r4, [pc, #28]	; (80044ac <_write_r+0x20>)
 8004490:	4605      	mov	r5, r0
 8004492:	4608      	mov	r0, r1
 8004494:	4611      	mov	r1, r2
 8004496:	2200      	movs	r2, #0
 8004498:	6022      	str	r2, [r4, #0]
 800449a:	461a      	mov	r2, r3
 800449c:	f7fe ff84 	bl	80033a8 <_write>
 80044a0:	1c43      	adds	r3, r0, #1
 80044a2:	d102      	bne.n	80044aa <_write_r+0x1e>
 80044a4:	6823      	ldr	r3, [r4, #0]
 80044a6:	b103      	cbz	r3, 80044aa <_write_r+0x1e>
 80044a8:	602b      	str	r3, [r5, #0]
 80044aa:	bd38      	pop	{r3, r4, r5, pc}
 80044ac:	200017e0 	.word	0x200017e0

080044b0 <__swsetup_r>:
 80044b0:	4b32      	ldr	r3, [pc, #200]	; (800457c <__swsetup_r+0xcc>)
 80044b2:	b570      	push	{r4, r5, r6, lr}
 80044b4:	681d      	ldr	r5, [r3, #0]
 80044b6:	4606      	mov	r6, r0
 80044b8:	460c      	mov	r4, r1
 80044ba:	b125      	cbz	r5, 80044c6 <__swsetup_r+0x16>
 80044bc:	69ab      	ldr	r3, [r5, #24]
 80044be:	b913      	cbnz	r3, 80044c6 <__swsetup_r+0x16>
 80044c0:	4628      	mov	r0, r5
 80044c2:	f7ff fcb1 	bl	8003e28 <__sinit>
 80044c6:	4b2e      	ldr	r3, [pc, #184]	; (8004580 <__swsetup_r+0xd0>)
 80044c8:	429c      	cmp	r4, r3
 80044ca:	d10f      	bne.n	80044ec <__swsetup_r+0x3c>
 80044cc:	686c      	ldr	r4, [r5, #4]
 80044ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	0715      	lsls	r5, r2, #28
 80044d6:	d42c      	bmi.n	8004532 <__swsetup_r+0x82>
 80044d8:	06d0      	lsls	r0, r2, #27
 80044da:	d411      	bmi.n	8004500 <__swsetup_r+0x50>
 80044dc:	2209      	movs	r2, #9
 80044de:	6032      	str	r2, [r6, #0]
 80044e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044e4:	81a3      	strh	r3, [r4, #12]
 80044e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044ea:	bd70      	pop	{r4, r5, r6, pc}
 80044ec:	4b25      	ldr	r3, [pc, #148]	; (8004584 <__swsetup_r+0xd4>)
 80044ee:	429c      	cmp	r4, r3
 80044f0:	d101      	bne.n	80044f6 <__swsetup_r+0x46>
 80044f2:	68ac      	ldr	r4, [r5, #8]
 80044f4:	e7eb      	b.n	80044ce <__swsetup_r+0x1e>
 80044f6:	4b24      	ldr	r3, [pc, #144]	; (8004588 <__swsetup_r+0xd8>)
 80044f8:	429c      	cmp	r4, r3
 80044fa:	bf08      	it	eq
 80044fc:	68ec      	ldreq	r4, [r5, #12]
 80044fe:	e7e6      	b.n	80044ce <__swsetup_r+0x1e>
 8004500:	0751      	lsls	r1, r2, #29
 8004502:	d512      	bpl.n	800452a <__swsetup_r+0x7a>
 8004504:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004506:	b141      	cbz	r1, 800451a <__swsetup_r+0x6a>
 8004508:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800450c:	4299      	cmp	r1, r3
 800450e:	d002      	beq.n	8004516 <__swsetup_r+0x66>
 8004510:	4630      	mov	r0, r6
 8004512:	f7ff fd3f 	bl	8003f94 <_free_r>
 8004516:	2300      	movs	r3, #0
 8004518:	6363      	str	r3, [r4, #52]	; 0x34
 800451a:	89a3      	ldrh	r3, [r4, #12]
 800451c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004520:	81a3      	strh	r3, [r4, #12]
 8004522:	2300      	movs	r3, #0
 8004524:	6063      	str	r3, [r4, #4]
 8004526:	6923      	ldr	r3, [r4, #16]
 8004528:	6023      	str	r3, [r4, #0]
 800452a:	89a3      	ldrh	r3, [r4, #12]
 800452c:	f043 0308 	orr.w	r3, r3, #8
 8004530:	81a3      	strh	r3, [r4, #12]
 8004532:	6923      	ldr	r3, [r4, #16]
 8004534:	b94b      	cbnz	r3, 800454a <__swsetup_r+0x9a>
 8004536:	89a3      	ldrh	r3, [r4, #12]
 8004538:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800453c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004540:	d003      	beq.n	800454a <__swsetup_r+0x9a>
 8004542:	4621      	mov	r1, r4
 8004544:	4630      	mov	r0, r6
 8004546:	f000 f867 	bl	8004618 <__smakebuf_r>
 800454a:	89a2      	ldrh	r2, [r4, #12]
 800454c:	f012 0301 	ands.w	r3, r2, #1
 8004550:	d00c      	beq.n	800456c <__swsetup_r+0xbc>
 8004552:	2300      	movs	r3, #0
 8004554:	60a3      	str	r3, [r4, #8]
 8004556:	6963      	ldr	r3, [r4, #20]
 8004558:	425b      	negs	r3, r3
 800455a:	61a3      	str	r3, [r4, #24]
 800455c:	6923      	ldr	r3, [r4, #16]
 800455e:	b953      	cbnz	r3, 8004576 <__swsetup_r+0xc6>
 8004560:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004564:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004568:	d1ba      	bne.n	80044e0 <__swsetup_r+0x30>
 800456a:	bd70      	pop	{r4, r5, r6, pc}
 800456c:	0792      	lsls	r2, r2, #30
 800456e:	bf58      	it	pl
 8004570:	6963      	ldrpl	r3, [r4, #20]
 8004572:	60a3      	str	r3, [r4, #8]
 8004574:	e7f2      	b.n	800455c <__swsetup_r+0xac>
 8004576:	2000      	movs	r0, #0
 8004578:	e7f7      	b.n	800456a <__swsetup_r+0xba>
 800457a:	bf00      	nop
 800457c:	2000000c 	.word	0x2000000c
 8004580:	08004dfc 	.word	0x08004dfc
 8004584:	08004e1c 	.word	0x08004e1c
 8004588:	08004ddc 	.word	0x08004ddc

0800458c <_close_r>:
 800458c:	b538      	push	{r3, r4, r5, lr}
 800458e:	4c06      	ldr	r4, [pc, #24]	; (80045a8 <_close_r+0x1c>)
 8004590:	2300      	movs	r3, #0
 8004592:	4605      	mov	r5, r0
 8004594:	4608      	mov	r0, r1
 8004596:	6023      	str	r3, [r4, #0]
 8004598:	f7fe ff2e 	bl	80033f8 <_close>
 800459c:	1c43      	adds	r3, r0, #1
 800459e:	d102      	bne.n	80045a6 <_close_r+0x1a>
 80045a0:	6823      	ldr	r3, [r4, #0]
 80045a2:	b103      	cbz	r3, 80045a6 <_close_r+0x1a>
 80045a4:	602b      	str	r3, [r5, #0]
 80045a6:	bd38      	pop	{r3, r4, r5, pc}
 80045a8:	200017e0 	.word	0x200017e0

080045ac <_lseek_r>:
 80045ac:	b538      	push	{r3, r4, r5, lr}
 80045ae:	4c07      	ldr	r4, [pc, #28]	; (80045cc <_lseek_r+0x20>)
 80045b0:	4605      	mov	r5, r0
 80045b2:	4608      	mov	r0, r1
 80045b4:	4611      	mov	r1, r2
 80045b6:	2200      	movs	r2, #0
 80045b8:	6022      	str	r2, [r4, #0]
 80045ba:	461a      	mov	r2, r3
 80045bc:	f7fe ff26 	bl	800340c <_lseek>
 80045c0:	1c43      	adds	r3, r0, #1
 80045c2:	d102      	bne.n	80045ca <_lseek_r+0x1e>
 80045c4:	6823      	ldr	r3, [r4, #0]
 80045c6:	b103      	cbz	r3, 80045ca <_lseek_r+0x1e>
 80045c8:	602b      	str	r3, [r5, #0]
 80045ca:	bd38      	pop	{r3, r4, r5, pc}
 80045cc:	200017e0 	.word	0x200017e0

080045d0 <__swhatbuf_r>:
 80045d0:	b570      	push	{r4, r5, r6, lr}
 80045d2:	460e      	mov	r6, r1
 80045d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045d8:	2900      	cmp	r1, #0
 80045da:	b090      	sub	sp, #64	; 0x40
 80045dc:	4614      	mov	r4, r2
 80045de:	461d      	mov	r5, r3
 80045e0:	da07      	bge.n	80045f2 <__swhatbuf_r+0x22>
 80045e2:	2300      	movs	r3, #0
 80045e4:	602b      	str	r3, [r5, #0]
 80045e6:	89b3      	ldrh	r3, [r6, #12]
 80045e8:	061a      	lsls	r2, r3, #24
 80045ea:	d410      	bmi.n	800460e <__swhatbuf_r+0x3e>
 80045ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045f0:	e00e      	b.n	8004610 <__swhatbuf_r+0x40>
 80045f2:	aa01      	add	r2, sp, #4
 80045f4:	f000 fb42 	bl	8004c7c <_fstat_r>
 80045f8:	2800      	cmp	r0, #0
 80045fa:	dbf2      	blt.n	80045e2 <__swhatbuf_r+0x12>
 80045fc:	9a02      	ldr	r2, [sp, #8]
 80045fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004602:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004606:	425a      	negs	r2, r3
 8004608:	415a      	adcs	r2, r3
 800460a:	602a      	str	r2, [r5, #0]
 800460c:	e7ee      	b.n	80045ec <__swhatbuf_r+0x1c>
 800460e:	2340      	movs	r3, #64	; 0x40
 8004610:	2000      	movs	r0, #0
 8004612:	6023      	str	r3, [r4, #0]
 8004614:	b010      	add	sp, #64	; 0x40
 8004616:	bd70      	pop	{r4, r5, r6, pc}

08004618 <__smakebuf_r>:
 8004618:	898b      	ldrh	r3, [r1, #12]
 800461a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800461c:	079d      	lsls	r5, r3, #30
 800461e:	4606      	mov	r6, r0
 8004620:	460c      	mov	r4, r1
 8004622:	d507      	bpl.n	8004634 <__smakebuf_r+0x1c>
 8004624:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004628:	6023      	str	r3, [r4, #0]
 800462a:	6123      	str	r3, [r4, #16]
 800462c:	2301      	movs	r3, #1
 800462e:	6163      	str	r3, [r4, #20]
 8004630:	b002      	add	sp, #8
 8004632:	bd70      	pop	{r4, r5, r6, pc}
 8004634:	ab01      	add	r3, sp, #4
 8004636:	466a      	mov	r2, sp
 8004638:	f7ff ffca 	bl	80045d0 <__swhatbuf_r>
 800463c:	9900      	ldr	r1, [sp, #0]
 800463e:	4605      	mov	r5, r0
 8004640:	4630      	mov	r0, r6
 8004642:	f7ff fcf5 	bl	8004030 <_malloc_r>
 8004646:	b948      	cbnz	r0, 800465c <__smakebuf_r+0x44>
 8004648:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800464c:	059a      	lsls	r2, r3, #22
 800464e:	d4ef      	bmi.n	8004630 <__smakebuf_r+0x18>
 8004650:	f023 0303 	bic.w	r3, r3, #3
 8004654:	f043 0302 	orr.w	r3, r3, #2
 8004658:	81a3      	strh	r3, [r4, #12]
 800465a:	e7e3      	b.n	8004624 <__smakebuf_r+0xc>
 800465c:	4b0d      	ldr	r3, [pc, #52]	; (8004694 <__smakebuf_r+0x7c>)
 800465e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004660:	89a3      	ldrh	r3, [r4, #12]
 8004662:	6020      	str	r0, [r4, #0]
 8004664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004668:	81a3      	strh	r3, [r4, #12]
 800466a:	9b00      	ldr	r3, [sp, #0]
 800466c:	6163      	str	r3, [r4, #20]
 800466e:	9b01      	ldr	r3, [sp, #4]
 8004670:	6120      	str	r0, [r4, #16]
 8004672:	b15b      	cbz	r3, 800468c <__smakebuf_r+0x74>
 8004674:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004678:	4630      	mov	r0, r6
 800467a:	f000 fb11 	bl	8004ca0 <_isatty_r>
 800467e:	b128      	cbz	r0, 800468c <__smakebuf_r+0x74>
 8004680:	89a3      	ldrh	r3, [r4, #12]
 8004682:	f023 0303 	bic.w	r3, r3, #3
 8004686:	f043 0301 	orr.w	r3, r3, #1
 800468a:	81a3      	strh	r3, [r4, #12]
 800468c:	89a3      	ldrh	r3, [r4, #12]
 800468e:	431d      	orrs	r5, r3
 8004690:	81a5      	strh	r5, [r4, #12]
 8004692:	e7cd      	b.n	8004630 <__smakebuf_r+0x18>
 8004694:	08003da9 	.word	0x08003da9

08004698 <malloc>:
 8004698:	4b02      	ldr	r3, [pc, #8]	; (80046a4 <malloc+0xc>)
 800469a:	4601      	mov	r1, r0
 800469c:	6818      	ldr	r0, [r3, #0]
 800469e:	f7ff bcc7 	b.w	8004030 <_malloc_r>
 80046a2:	bf00      	nop
 80046a4:	2000000c 	.word	0x2000000c

080046a8 <__malloc_lock>:
 80046a8:	4770      	bx	lr

080046aa <__malloc_unlock>:
 80046aa:	4770      	bx	lr

080046ac <__sfputc_r>:
 80046ac:	6893      	ldr	r3, [r2, #8]
 80046ae:	3b01      	subs	r3, #1
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	b410      	push	{r4}
 80046b4:	6093      	str	r3, [r2, #8]
 80046b6:	da09      	bge.n	80046cc <__sfputc_r+0x20>
 80046b8:	6994      	ldr	r4, [r2, #24]
 80046ba:	42a3      	cmp	r3, r4
 80046bc:	db02      	blt.n	80046c4 <__sfputc_r+0x18>
 80046be:	b2cb      	uxtb	r3, r1
 80046c0:	2b0a      	cmp	r3, #10
 80046c2:	d103      	bne.n	80046cc <__sfputc_r+0x20>
 80046c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046c8:	f7ff be8e 	b.w	80043e8 <__swbuf_r>
 80046cc:	6813      	ldr	r3, [r2, #0]
 80046ce:	1c58      	adds	r0, r3, #1
 80046d0:	6010      	str	r0, [r2, #0]
 80046d2:	7019      	strb	r1, [r3, #0]
 80046d4:	b2c8      	uxtb	r0, r1
 80046d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046da:	4770      	bx	lr

080046dc <__sfputs_r>:
 80046dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046de:	4606      	mov	r6, r0
 80046e0:	460f      	mov	r7, r1
 80046e2:	4614      	mov	r4, r2
 80046e4:	18d5      	adds	r5, r2, r3
 80046e6:	42ac      	cmp	r4, r5
 80046e8:	d101      	bne.n	80046ee <__sfputs_r+0x12>
 80046ea:	2000      	movs	r0, #0
 80046ec:	e007      	b.n	80046fe <__sfputs_r+0x22>
 80046ee:	463a      	mov	r2, r7
 80046f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046f4:	4630      	mov	r0, r6
 80046f6:	f7ff ffd9 	bl	80046ac <__sfputc_r>
 80046fa:	1c43      	adds	r3, r0, #1
 80046fc:	d1f3      	bne.n	80046e6 <__sfputs_r+0xa>
 80046fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004700 <_vfiprintf_r>:
 8004700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004704:	b09d      	sub	sp, #116	; 0x74
 8004706:	460c      	mov	r4, r1
 8004708:	4617      	mov	r7, r2
 800470a:	9303      	str	r3, [sp, #12]
 800470c:	4606      	mov	r6, r0
 800470e:	b118      	cbz	r0, 8004718 <_vfiprintf_r+0x18>
 8004710:	6983      	ldr	r3, [r0, #24]
 8004712:	b90b      	cbnz	r3, 8004718 <_vfiprintf_r+0x18>
 8004714:	f7ff fb88 	bl	8003e28 <__sinit>
 8004718:	4b7c      	ldr	r3, [pc, #496]	; (800490c <_vfiprintf_r+0x20c>)
 800471a:	429c      	cmp	r4, r3
 800471c:	d157      	bne.n	80047ce <_vfiprintf_r+0xce>
 800471e:	6874      	ldr	r4, [r6, #4]
 8004720:	89a3      	ldrh	r3, [r4, #12]
 8004722:	0718      	lsls	r0, r3, #28
 8004724:	d55d      	bpl.n	80047e2 <_vfiprintf_r+0xe2>
 8004726:	6923      	ldr	r3, [r4, #16]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d05a      	beq.n	80047e2 <_vfiprintf_r+0xe2>
 800472c:	2300      	movs	r3, #0
 800472e:	9309      	str	r3, [sp, #36]	; 0x24
 8004730:	2320      	movs	r3, #32
 8004732:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004736:	2330      	movs	r3, #48	; 0x30
 8004738:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800473c:	f04f 0b01 	mov.w	fp, #1
 8004740:	46b8      	mov	r8, r7
 8004742:	4645      	mov	r5, r8
 8004744:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004748:	2b00      	cmp	r3, #0
 800474a:	d155      	bne.n	80047f8 <_vfiprintf_r+0xf8>
 800474c:	ebb8 0a07 	subs.w	sl, r8, r7
 8004750:	d00b      	beq.n	800476a <_vfiprintf_r+0x6a>
 8004752:	4653      	mov	r3, sl
 8004754:	463a      	mov	r2, r7
 8004756:	4621      	mov	r1, r4
 8004758:	4630      	mov	r0, r6
 800475a:	f7ff ffbf 	bl	80046dc <__sfputs_r>
 800475e:	3001      	adds	r0, #1
 8004760:	f000 80c4 	beq.w	80048ec <_vfiprintf_r+0x1ec>
 8004764:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004766:	4453      	add	r3, sl
 8004768:	9309      	str	r3, [sp, #36]	; 0x24
 800476a:	f898 3000 	ldrb.w	r3, [r8]
 800476e:	2b00      	cmp	r3, #0
 8004770:	f000 80bc 	beq.w	80048ec <_vfiprintf_r+0x1ec>
 8004774:	2300      	movs	r3, #0
 8004776:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800477a:	9304      	str	r3, [sp, #16]
 800477c:	9307      	str	r3, [sp, #28]
 800477e:	9205      	str	r2, [sp, #20]
 8004780:	9306      	str	r3, [sp, #24]
 8004782:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004786:	931a      	str	r3, [sp, #104]	; 0x68
 8004788:	2205      	movs	r2, #5
 800478a:	7829      	ldrb	r1, [r5, #0]
 800478c:	4860      	ldr	r0, [pc, #384]	; (8004910 <_vfiprintf_r+0x210>)
 800478e:	f7fb fd57 	bl	8000240 <memchr>
 8004792:	f105 0801 	add.w	r8, r5, #1
 8004796:	9b04      	ldr	r3, [sp, #16]
 8004798:	2800      	cmp	r0, #0
 800479a:	d131      	bne.n	8004800 <_vfiprintf_r+0x100>
 800479c:	06d9      	lsls	r1, r3, #27
 800479e:	bf44      	itt	mi
 80047a0:	2220      	movmi	r2, #32
 80047a2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80047a6:	071a      	lsls	r2, r3, #28
 80047a8:	bf44      	itt	mi
 80047aa:	222b      	movmi	r2, #43	; 0x2b
 80047ac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80047b0:	782a      	ldrb	r2, [r5, #0]
 80047b2:	2a2a      	cmp	r2, #42	; 0x2a
 80047b4:	d02c      	beq.n	8004810 <_vfiprintf_r+0x110>
 80047b6:	9a07      	ldr	r2, [sp, #28]
 80047b8:	2100      	movs	r1, #0
 80047ba:	200a      	movs	r0, #10
 80047bc:	46a8      	mov	r8, r5
 80047be:	3501      	adds	r5, #1
 80047c0:	f898 3000 	ldrb.w	r3, [r8]
 80047c4:	3b30      	subs	r3, #48	; 0x30
 80047c6:	2b09      	cmp	r3, #9
 80047c8:	d96d      	bls.n	80048a6 <_vfiprintf_r+0x1a6>
 80047ca:	b371      	cbz	r1, 800482a <_vfiprintf_r+0x12a>
 80047cc:	e026      	b.n	800481c <_vfiprintf_r+0x11c>
 80047ce:	4b51      	ldr	r3, [pc, #324]	; (8004914 <_vfiprintf_r+0x214>)
 80047d0:	429c      	cmp	r4, r3
 80047d2:	d101      	bne.n	80047d8 <_vfiprintf_r+0xd8>
 80047d4:	68b4      	ldr	r4, [r6, #8]
 80047d6:	e7a3      	b.n	8004720 <_vfiprintf_r+0x20>
 80047d8:	4b4f      	ldr	r3, [pc, #316]	; (8004918 <_vfiprintf_r+0x218>)
 80047da:	429c      	cmp	r4, r3
 80047dc:	bf08      	it	eq
 80047de:	68f4      	ldreq	r4, [r6, #12]
 80047e0:	e79e      	b.n	8004720 <_vfiprintf_r+0x20>
 80047e2:	4621      	mov	r1, r4
 80047e4:	4630      	mov	r0, r6
 80047e6:	f7ff fe63 	bl	80044b0 <__swsetup_r>
 80047ea:	2800      	cmp	r0, #0
 80047ec:	d09e      	beq.n	800472c <_vfiprintf_r+0x2c>
 80047ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047f2:	b01d      	add	sp, #116	; 0x74
 80047f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047f8:	2b25      	cmp	r3, #37	; 0x25
 80047fa:	d0a7      	beq.n	800474c <_vfiprintf_r+0x4c>
 80047fc:	46a8      	mov	r8, r5
 80047fe:	e7a0      	b.n	8004742 <_vfiprintf_r+0x42>
 8004800:	4a43      	ldr	r2, [pc, #268]	; (8004910 <_vfiprintf_r+0x210>)
 8004802:	1a80      	subs	r0, r0, r2
 8004804:	fa0b f000 	lsl.w	r0, fp, r0
 8004808:	4318      	orrs	r0, r3
 800480a:	9004      	str	r0, [sp, #16]
 800480c:	4645      	mov	r5, r8
 800480e:	e7bb      	b.n	8004788 <_vfiprintf_r+0x88>
 8004810:	9a03      	ldr	r2, [sp, #12]
 8004812:	1d11      	adds	r1, r2, #4
 8004814:	6812      	ldr	r2, [r2, #0]
 8004816:	9103      	str	r1, [sp, #12]
 8004818:	2a00      	cmp	r2, #0
 800481a:	db01      	blt.n	8004820 <_vfiprintf_r+0x120>
 800481c:	9207      	str	r2, [sp, #28]
 800481e:	e004      	b.n	800482a <_vfiprintf_r+0x12a>
 8004820:	4252      	negs	r2, r2
 8004822:	f043 0302 	orr.w	r3, r3, #2
 8004826:	9207      	str	r2, [sp, #28]
 8004828:	9304      	str	r3, [sp, #16]
 800482a:	f898 3000 	ldrb.w	r3, [r8]
 800482e:	2b2e      	cmp	r3, #46	; 0x2e
 8004830:	d110      	bne.n	8004854 <_vfiprintf_r+0x154>
 8004832:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004836:	2b2a      	cmp	r3, #42	; 0x2a
 8004838:	f108 0101 	add.w	r1, r8, #1
 800483c:	d137      	bne.n	80048ae <_vfiprintf_r+0x1ae>
 800483e:	9b03      	ldr	r3, [sp, #12]
 8004840:	1d1a      	adds	r2, r3, #4
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	9203      	str	r2, [sp, #12]
 8004846:	2b00      	cmp	r3, #0
 8004848:	bfb8      	it	lt
 800484a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800484e:	f108 0802 	add.w	r8, r8, #2
 8004852:	9305      	str	r3, [sp, #20]
 8004854:	4d31      	ldr	r5, [pc, #196]	; (800491c <_vfiprintf_r+0x21c>)
 8004856:	f898 1000 	ldrb.w	r1, [r8]
 800485a:	2203      	movs	r2, #3
 800485c:	4628      	mov	r0, r5
 800485e:	f7fb fcef 	bl	8000240 <memchr>
 8004862:	b140      	cbz	r0, 8004876 <_vfiprintf_r+0x176>
 8004864:	2340      	movs	r3, #64	; 0x40
 8004866:	1b40      	subs	r0, r0, r5
 8004868:	fa03 f000 	lsl.w	r0, r3, r0
 800486c:	9b04      	ldr	r3, [sp, #16]
 800486e:	4303      	orrs	r3, r0
 8004870:	9304      	str	r3, [sp, #16]
 8004872:	f108 0801 	add.w	r8, r8, #1
 8004876:	f898 1000 	ldrb.w	r1, [r8]
 800487a:	4829      	ldr	r0, [pc, #164]	; (8004920 <_vfiprintf_r+0x220>)
 800487c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004880:	2206      	movs	r2, #6
 8004882:	f108 0701 	add.w	r7, r8, #1
 8004886:	f7fb fcdb 	bl	8000240 <memchr>
 800488a:	2800      	cmp	r0, #0
 800488c:	d034      	beq.n	80048f8 <_vfiprintf_r+0x1f8>
 800488e:	4b25      	ldr	r3, [pc, #148]	; (8004924 <_vfiprintf_r+0x224>)
 8004890:	bb03      	cbnz	r3, 80048d4 <_vfiprintf_r+0x1d4>
 8004892:	9b03      	ldr	r3, [sp, #12]
 8004894:	3307      	adds	r3, #7
 8004896:	f023 0307 	bic.w	r3, r3, #7
 800489a:	3308      	adds	r3, #8
 800489c:	9303      	str	r3, [sp, #12]
 800489e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048a0:	444b      	add	r3, r9
 80048a2:	9309      	str	r3, [sp, #36]	; 0x24
 80048a4:	e74c      	b.n	8004740 <_vfiprintf_r+0x40>
 80048a6:	fb00 3202 	mla	r2, r0, r2, r3
 80048aa:	2101      	movs	r1, #1
 80048ac:	e786      	b.n	80047bc <_vfiprintf_r+0xbc>
 80048ae:	2300      	movs	r3, #0
 80048b0:	9305      	str	r3, [sp, #20]
 80048b2:	4618      	mov	r0, r3
 80048b4:	250a      	movs	r5, #10
 80048b6:	4688      	mov	r8, r1
 80048b8:	3101      	adds	r1, #1
 80048ba:	f898 2000 	ldrb.w	r2, [r8]
 80048be:	3a30      	subs	r2, #48	; 0x30
 80048c0:	2a09      	cmp	r2, #9
 80048c2:	d903      	bls.n	80048cc <_vfiprintf_r+0x1cc>
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d0c5      	beq.n	8004854 <_vfiprintf_r+0x154>
 80048c8:	9005      	str	r0, [sp, #20]
 80048ca:	e7c3      	b.n	8004854 <_vfiprintf_r+0x154>
 80048cc:	fb05 2000 	mla	r0, r5, r0, r2
 80048d0:	2301      	movs	r3, #1
 80048d2:	e7f0      	b.n	80048b6 <_vfiprintf_r+0x1b6>
 80048d4:	ab03      	add	r3, sp, #12
 80048d6:	9300      	str	r3, [sp, #0]
 80048d8:	4622      	mov	r2, r4
 80048da:	4b13      	ldr	r3, [pc, #76]	; (8004928 <_vfiprintf_r+0x228>)
 80048dc:	a904      	add	r1, sp, #16
 80048de:	4630      	mov	r0, r6
 80048e0:	f3af 8000 	nop.w
 80048e4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80048e8:	4681      	mov	r9, r0
 80048ea:	d1d8      	bne.n	800489e <_vfiprintf_r+0x19e>
 80048ec:	89a3      	ldrh	r3, [r4, #12]
 80048ee:	065b      	lsls	r3, r3, #25
 80048f0:	f53f af7d 	bmi.w	80047ee <_vfiprintf_r+0xee>
 80048f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048f6:	e77c      	b.n	80047f2 <_vfiprintf_r+0xf2>
 80048f8:	ab03      	add	r3, sp, #12
 80048fa:	9300      	str	r3, [sp, #0]
 80048fc:	4622      	mov	r2, r4
 80048fe:	4b0a      	ldr	r3, [pc, #40]	; (8004928 <_vfiprintf_r+0x228>)
 8004900:	a904      	add	r1, sp, #16
 8004902:	4630      	mov	r0, r6
 8004904:	f000 f888 	bl	8004a18 <_printf_i>
 8004908:	e7ec      	b.n	80048e4 <_vfiprintf_r+0x1e4>
 800490a:	bf00      	nop
 800490c:	08004dfc 	.word	0x08004dfc
 8004910:	08004e40 	.word	0x08004e40
 8004914:	08004e1c 	.word	0x08004e1c
 8004918:	08004ddc 	.word	0x08004ddc
 800491c:	08004e46 	.word	0x08004e46
 8004920:	08004e4a 	.word	0x08004e4a
 8004924:	00000000 	.word	0x00000000
 8004928:	080046dd 	.word	0x080046dd

0800492c <_printf_common>:
 800492c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004930:	4691      	mov	r9, r2
 8004932:	461f      	mov	r7, r3
 8004934:	688a      	ldr	r2, [r1, #8]
 8004936:	690b      	ldr	r3, [r1, #16]
 8004938:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800493c:	4293      	cmp	r3, r2
 800493e:	bfb8      	it	lt
 8004940:	4613      	movlt	r3, r2
 8004942:	f8c9 3000 	str.w	r3, [r9]
 8004946:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800494a:	4606      	mov	r6, r0
 800494c:	460c      	mov	r4, r1
 800494e:	b112      	cbz	r2, 8004956 <_printf_common+0x2a>
 8004950:	3301      	adds	r3, #1
 8004952:	f8c9 3000 	str.w	r3, [r9]
 8004956:	6823      	ldr	r3, [r4, #0]
 8004958:	0699      	lsls	r1, r3, #26
 800495a:	bf42      	ittt	mi
 800495c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004960:	3302      	addmi	r3, #2
 8004962:	f8c9 3000 	strmi.w	r3, [r9]
 8004966:	6825      	ldr	r5, [r4, #0]
 8004968:	f015 0506 	ands.w	r5, r5, #6
 800496c:	d107      	bne.n	800497e <_printf_common+0x52>
 800496e:	f104 0a19 	add.w	sl, r4, #25
 8004972:	68e3      	ldr	r3, [r4, #12]
 8004974:	f8d9 2000 	ldr.w	r2, [r9]
 8004978:	1a9b      	subs	r3, r3, r2
 800497a:	429d      	cmp	r5, r3
 800497c:	db29      	blt.n	80049d2 <_printf_common+0xa6>
 800497e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004982:	6822      	ldr	r2, [r4, #0]
 8004984:	3300      	adds	r3, #0
 8004986:	bf18      	it	ne
 8004988:	2301      	movne	r3, #1
 800498a:	0692      	lsls	r2, r2, #26
 800498c:	d42e      	bmi.n	80049ec <_printf_common+0xc0>
 800498e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004992:	4639      	mov	r1, r7
 8004994:	4630      	mov	r0, r6
 8004996:	47c0      	blx	r8
 8004998:	3001      	adds	r0, #1
 800499a:	d021      	beq.n	80049e0 <_printf_common+0xb4>
 800499c:	6823      	ldr	r3, [r4, #0]
 800499e:	68e5      	ldr	r5, [r4, #12]
 80049a0:	f8d9 2000 	ldr.w	r2, [r9]
 80049a4:	f003 0306 	and.w	r3, r3, #6
 80049a8:	2b04      	cmp	r3, #4
 80049aa:	bf08      	it	eq
 80049ac:	1aad      	subeq	r5, r5, r2
 80049ae:	68a3      	ldr	r3, [r4, #8]
 80049b0:	6922      	ldr	r2, [r4, #16]
 80049b2:	bf0c      	ite	eq
 80049b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049b8:	2500      	movne	r5, #0
 80049ba:	4293      	cmp	r3, r2
 80049bc:	bfc4      	itt	gt
 80049be:	1a9b      	subgt	r3, r3, r2
 80049c0:	18ed      	addgt	r5, r5, r3
 80049c2:	f04f 0900 	mov.w	r9, #0
 80049c6:	341a      	adds	r4, #26
 80049c8:	454d      	cmp	r5, r9
 80049ca:	d11b      	bne.n	8004a04 <_printf_common+0xd8>
 80049cc:	2000      	movs	r0, #0
 80049ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049d2:	2301      	movs	r3, #1
 80049d4:	4652      	mov	r2, sl
 80049d6:	4639      	mov	r1, r7
 80049d8:	4630      	mov	r0, r6
 80049da:	47c0      	blx	r8
 80049dc:	3001      	adds	r0, #1
 80049de:	d103      	bne.n	80049e8 <_printf_common+0xbc>
 80049e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049e8:	3501      	adds	r5, #1
 80049ea:	e7c2      	b.n	8004972 <_printf_common+0x46>
 80049ec:	18e1      	adds	r1, r4, r3
 80049ee:	1c5a      	adds	r2, r3, #1
 80049f0:	2030      	movs	r0, #48	; 0x30
 80049f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049f6:	4422      	add	r2, r4
 80049f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a00:	3302      	adds	r3, #2
 8004a02:	e7c4      	b.n	800498e <_printf_common+0x62>
 8004a04:	2301      	movs	r3, #1
 8004a06:	4622      	mov	r2, r4
 8004a08:	4639      	mov	r1, r7
 8004a0a:	4630      	mov	r0, r6
 8004a0c:	47c0      	blx	r8
 8004a0e:	3001      	adds	r0, #1
 8004a10:	d0e6      	beq.n	80049e0 <_printf_common+0xb4>
 8004a12:	f109 0901 	add.w	r9, r9, #1
 8004a16:	e7d7      	b.n	80049c8 <_printf_common+0x9c>

08004a18 <_printf_i>:
 8004a18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004a1c:	4617      	mov	r7, r2
 8004a1e:	7e0a      	ldrb	r2, [r1, #24]
 8004a20:	b085      	sub	sp, #20
 8004a22:	2a6e      	cmp	r2, #110	; 0x6e
 8004a24:	4698      	mov	r8, r3
 8004a26:	4606      	mov	r6, r0
 8004a28:	460c      	mov	r4, r1
 8004a2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a2c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004a30:	f000 80bc 	beq.w	8004bac <_printf_i+0x194>
 8004a34:	d81a      	bhi.n	8004a6c <_printf_i+0x54>
 8004a36:	2a63      	cmp	r2, #99	; 0x63
 8004a38:	d02e      	beq.n	8004a98 <_printf_i+0x80>
 8004a3a:	d80a      	bhi.n	8004a52 <_printf_i+0x3a>
 8004a3c:	2a00      	cmp	r2, #0
 8004a3e:	f000 80c8 	beq.w	8004bd2 <_printf_i+0x1ba>
 8004a42:	2a58      	cmp	r2, #88	; 0x58
 8004a44:	f000 808a 	beq.w	8004b5c <_printf_i+0x144>
 8004a48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a4c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004a50:	e02a      	b.n	8004aa8 <_printf_i+0x90>
 8004a52:	2a64      	cmp	r2, #100	; 0x64
 8004a54:	d001      	beq.n	8004a5a <_printf_i+0x42>
 8004a56:	2a69      	cmp	r2, #105	; 0x69
 8004a58:	d1f6      	bne.n	8004a48 <_printf_i+0x30>
 8004a5a:	6821      	ldr	r1, [r4, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004a62:	d023      	beq.n	8004aac <_printf_i+0x94>
 8004a64:	1d11      	adds	r1, r2, #4
 8004a66:	6019      	str	r1, [r3, #0]
 8004a68:	6813      	ldr	r3, [r2, #0]
 8004a6a:	e027      	b.n	8004abc <_printf_i+0xa4>
 8004a6c:	2a73      	cmp	r2, #115	; 0x73
 8004a6e:	f000 80b4 	beq.w	8004bda <_printf_i+0x1c2>
 8004a72:	d808      	bhi.n	8004a86 <_printf_i+0x6e>
 8004a74:	2a6f      	cmp	r2, #111	; 0x6f
 8004a76:	d02a      	beq.n	8004ace <_printf_i+0xb6>
 8004a78:	2a70      	cmp	r2, #112	; 0x70
 8004a7a:	d1e5      	bne.n	8004a48 <_printf_i+0x30>
 8004a7c:	680a      	ldr	r2, [r1, #0]
 8004a7e:	f042 0220 	orr.w	r2, r2, #32
 8004a82:	600a      	str	r2, [r1, #0]
 8004a84:	e003      	b.n	8004a8e <_printf_i+0x76>
 8004a86:	2a75      	cmp	r2, #117	; 0x75
 8004a88:	d021      	beq.n	8004ace <_printf_i+0xb6>
 8004a8a:	2a78      	cmp	r2, #120	; 0x78
 8004a8c:	d1dc      	bne.n	8004a48 <_printf_i+0x30>
 8004a8e:	2278      	movs	r2, #120	; 0x78
 8004a90:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004a94:	496e      	ldr	r1, [pc, #440]	; (8004c50 <_printf_i+0x238>)
 8004a96:	e064      	b.n	8004b62 <_printf_i+0x14a>
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8004a9e:	1d11      	adds	r1, r2, #4
 8004aa0:	6019      	str	r1, [r3, #0]
 8004aa2:	6813      	ldr	r3, [r2, #0]
 8004aa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e0a3      	b.n	8004bf4 <_printf_i+0x1dc>
 8004aac:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004ab0:	f102 0104 	add.w	r1, r2, #4
 8004ab4:	6019      	str	r1, [r3, #0]
 8004ab6:	d0d7      	beq.n	8004a68 <_printf_i+0x50>
 8004ab8:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	da03      	bge.n	8004ac8 <_printf_i+0xb0>
 8004ac0:	222d      	movs	r2, #45	; 0x2d
 8004ac2:	425b      	negs	r3, r3
 8004ac4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004ac8:	4962      	ldr	r1, [pc, #392]	; (8004c54 <_printf_i+0x23c>)
 8004aca:	220a      	movs	r2, #10
 8004acc:	e017      	b.n	8004afe <_printf_i+0xe6>
 8004ace:	6820      	ldr	r0, [r4, #0]
 8004ad0:	6819      	ldr	r1, [r3, #0]
 8004ad2:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004ad6:	d003      	beq.n	8004ae0 <_printf_i+0xc8>
 8004ad8:	1d08      	adds	r0, r1, #4
 8004ada:	6018      	str	r0, [r3, #0]
 8004adc:	680b      	ldr	r3, [r1, #0]
 8004ade:	e006      	b.n	8004aee <_printf_i+0xd6>
 8004ae0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ae4:	f101 0004 	add.w	r0, r1, #4
 8004ae8:	6018      	str	r0, [r3, #0]
 8004aea:	d0f7      	beq.n	8004adc <_printf_i+0xc4>
 8004aec:	880b      	ldrh	r3, [r1, #0]
 8004aee:	4959      	ldr	r1, [pc, #356]	; (8004c54 <_printf_i+0x23c>)
 8004af0:	2a6f      	cmp	r2, #111	; 0x6f
 8004af2:	bf14      	ite	ne
 8004af4:	220a      	movne	r2, #10
 8004af6:	2208      	moveq	r2, #8
 8004af8:	2000      	movs	r0, #0
 8004afa:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004afe:	6865      	ldr	r5, [r4, #4]
 8004b00:	60a5      	str	r5, [r4, #8]
 8004b02:	2d00      	cmp	r5, #0
 8004b04:	f2c0 809c 	blt.w	8004c40 <_printf_i+0x228>
 8004b08:	6820      	ldr	r0, [r4, #0]
 8004b0a:	f020 0004 	bic.w	r0, r0, #4
 8004b0e:	6020      	str	r0, [r4, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d13f      	bne.n	8004b94 <_printf_i+0x17c>
 8004b14:	2d00      	cmp	r5, #0
 8004b16:	f040 8095 	bne.w	8004c44 <_printf_i+0x22c>
 8004b1a:	4675      	mov	r5, lr
 8004b1c:	2a08      	cmp	r2, #8
 8004b1e:	d10b      	bne.n	8004b38 <_printf_i+0x120>
 8004b20:	6823      	ldr	r3, [r4, #0]
 8004b22:	07da      	lsls	r2, r3, #31
 8004b24:	d508      	bpl.n	8004b38 <_printf_i+0x120>
 8004b26:	6923      	ldr	r3, [r4, #16]
 8004b28:	6862      	ldr	r2, [r4, #4]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	bfde      	ittt	le
 8004b2e:	2330      	movle	r3, #48	; 0x30
 8004b30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b34:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004b38:	ebae 0305 	sub.w	r3, lr, r5
 8004b3c:	6123      	str	r3, [r4, #16]
 8004b3e:	f8cd 8000 	str.w	r8, [sp]
 8004b42:	463b      	mov	r3, r7
 8004b44:	aa03      	add	r2, sp, #12
 8004b46:	4621      	mov	r1, r4
 8004b48:	4630      	mov	r0, r6
 8004b4a:	f7ff feef 	bl	800492c <_printf_common>
 8004b4e:	3001      	adds	r0, #1
 8004b50:	d155      	bne.n	8004bfe <_printf_i+0x1e6>
 8004b52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b56:	b005      	add	sp, #20
 8004b58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004b5c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004b60:	493c      	ldr	r1, [pc, #240]	; (8004c54 <_printf_i+0x23c>)
 8004b62:	6822      	ldr	r2, [r4, #0]
 8004b64:	6818      	ldr	r0, [r3, #0]
 8004b66:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004b6a:	f100 0504 	add.w	r5, r0, #4
 8004b6e:	601d      	str	r5, [r3, #0]
 8004b70:	d001      	beq.n	8004b76 <_printf_i+0x15e>
 8004b72:	6803      	ldr	r3, [r0, #0]
 8004b74:	e002      	b.n	8004b7c <_printf_i+0x164>
 8004b76:	0655      	lsls	r5, r2, #25
 8004b78:	d5fb      	bpl.n	8004b72 <_printf_i+0x15a>
 8004b7a:	8803      	ldrh	r3, [r0, #0]
 8004b7c:	07d0      	lsls	r0, r2, #31
 8004b7e:	bf44      	itt	mi
 8004b80:	f042 0220 	orrmi.w	r2, r2, #32
 8004b84:	6022      	strmi	r2, [r4, #0]
 8004b86:	b91b      	cbnz	r3, 8004b90 <_printf_i+0x178>
 8004b88:	6822      	ldr	r2, [r4, #0]
 8004b8a:	f022 0220 	bic.w	r2, r2, #32
 8004b8e:	6022      	str	r2, [r4, #0]
 8004b90:	2210      	movs	r2, #16
 8004b92:	e7b1      	b.n	8004af8 <_printf_i+0xe0>
 8004b94:	4675      	mov	r5, lr
 8004b96:	fbb3 f0f2 	udiv	r0, r3, r2
 8004b9a:	fb02 3310 	mls	r3, r2, r0, r3
 8004b9e:	5ccb      	ldrb	r3, [r1, r3]
 8004ba0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2800      	cmp	r0, #0
 8004ba8:	d1f5      	bne.n	8004b96 <_printf_i+0x17e>
 8004baa:	e7b7      	b.n	8004b1c <_printf_i+0x104>
 8004bac:	6808      	ldr	r0, [r1, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	6949      	ldr	r1, [r1, #20]
 8004bb2:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004bb6:	d004      	beq.n	8004bc2 <_printf_i+0x1aa>
 8004bb8:	1d10      	adds	r0, r2, #4
 8004bba:	6018      	str	r0, [r3, #0]
 8004bbc:	6813      	ldr	r3, [r2, #0]
 8004bbe:	6019      	str	r1, [r3, #0]
 8004bc0:	e007      	b.n	8004bd2 <_printf_i+0x1ba>
 8004bc2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004bc6:	f102 0004 	add.w	r0, r2, #4
 8004bca:	6018      	str	r0, [r3, #0]
 8004bcc:	6813      	ldr	r3, [r2, #0]
 8004bce:	d0f6      	beq.n	8004bbe <_printf_i+0x1a6>
 8004bd0:	8019      	strh	r1, [r3, #0]
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	6123      	str	r3, [r4, #16]
 8004bd6:	4675      	mov	r5, lr
 8004bd8:	e7b1      	b.n	8004b3e <_printf_i+0x126>
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	1d11      	adds	r1, r2, #4
 8004bde:	6019      	str	r1, [r3, #0]
 8004be0:	6815      	ldr	r5, [r2, #0]
 8004be2:	6862      	ldr	r2, [r4, #4]
 8004be4:	2100      	movs	r1, #0
 8004be6:	4628      	mov	r0, r5
 8004be8:	f7fb fb2a 	bl	8000240 <memchr>
 8004bec:	b108      	cbz	r0, 8004bf2 <_printf_i+0x1da>
 8004bee:	1b40      	subs	r0, r0, r5
 8004bf0:	6060      	str	r0, [r4, #4]
 8004bf2:	6863      	ldr	r3, [r4, #4]
 8004bf4:	6123      	str	r3, [r4, #16]
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bfc:	e79f      	b.n	8004b3e <_printf_i+0x126>
 8004bfe:	6923      	ldr	r3, [r4, #16]
 8004c00:	462a      	mov	r2, r5
 8004c02:	4639      	mov	r1, r7
 8004c04:	4630      	mov	r0, r6
 8004c06:	47c0      	blx	r8
 8004c08:	3001      	adds	r0, #1
 8004c0a:	d0a2      	beq.n	8004b52 <_printf_i+0x13a>
 8004c0c:	6823      	ldr	r3, [r4, #0]
 8004c0e:	079b      	lsls	r3, r3, #30
 8004c10:	d507      	bpl.n	8004c22 <_printf_i+0x20a>
 8004c12:	2500      	movs	r5, #0
 8004c14:	f104 0919 	add.w	r9, r4, #25
 8004c18:	68e3      	ldr	r3, [r4, #12]
 8004c1a:	9a03      	ldr	r2, [sp, #12]
 8004c1c:	1a9b      	subs	r3, r3, r2
 8004c1e:	429d      	cmp	r5, r3
 8004c20:	db05      	blt.n	8004c2e <_printf_i+0x216>
 8004c22:	68e0      	ldr	r0, [r4, #12]
 8004c24:	9b03      	ldr	r3, [sp, #12]
 8004c26:	4298      	cmp	r0, r3
 8004c28:	bfb8      	it	lt
 8004c2a:	4618      	movlt	r0, r3
 8004c2c:	e793      	b.n	8004b56 <_printf_i+0x13e>
 8004c2e:	2301      	movs	r3, #1
 8004c30:	464a      	mov	r2, r9
 8004c32:	4639      	mov	r1, r7
 8004c34:	4630      	mov	r0, r6
 8004c36:	47c0      	blx	r8
 8004c38:	3001      	adds	r0, #1
 8004c3a:	d08a      	beq.n	8004b52 <_printf_i+0x13a>
 8004c3c:	3501      	adds	r5, #1
 8004c3e:	e7eb      	b.n	8004c18 <_printf_i+0x200>
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1a7      	bne.n	8004b94 <_printf_i+0x17c>
 8004c44:	780b      	ldrb	r3, [r1, #0]
 8004c46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c4a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c4e:	e765      	b.n	8004b1c <_printf_i+0x104>
 8004c50:	08004e62 	.word	0x08004e62
 8004c54:	08004e51 	.word	0x08004e51

08004c58 <_read_r>:
 8004c58:	b538      	push	{r3, r4, r5, lr}
 8004c5a:	4c07      	ldr	r4, [pc, #28]	; (8004c78 <_read_r+0x20>)
 8004c5c:	4605      	mov	r5, r0
 8004c5e:	4608      	mov	r0, r1
 8004c60:	4611      	mov	r1, r2
 8004c62:	2200      	movs	r2, #0
 8004c64:	6022      	str	r2, [r4, #0]
 8004c66:	461a      	mov	r2, r3
 8004c68:	f7fe fb90 	bl	800338c <_read>
 8004c6c:	1c43      	adds	r3, r0, #1
 8004c6e:	d102      	bne.n	8004c76 <_read_r+0x1e>
 8004c70:	6823      	ldr	r3, [r4, #0]
 8004c72:	b103      	cbz	r3, 8004c76 <_read_r+0x1e>
 8004c74:	602b      	str	r3, [r5, #0]
 8004c76:	bd38      	pop	{r3, r4, r5, pc}
 8004c78:	200017e0 	.word	0x200017e0

08004c7c <_fstat_r>:
 8004c7c:	b538      	push	{r3, r4, r5, lr}
 8004c7e:	4c07      	ldr	r4, [pc, #28]	; (8004c9c <_fstat_r+0x20>)
 8004c80:	2300      	movs	r3, #0
 8004c82:	4605      	mov	r5, r0
 8004c84:	4608      	mov	r0, r1
 8004c86:	4611      	mov	r1, r2
 8004c88:	6023      	str	r3, [r4, #0]
 8004c8a:	f7fe fbb8 	bl	80033fe <_fstat>
 8004c8e:	1c43      	adds	r3, r0, #1
 8004c90:	d102      	bne.n	8004c98 <_fstat_r+0x1c>
 8004c92:	6823      	ldr	r3, [r4, #0]
 8004c94:	b103      	cbz	r3, 8004c98 <_fstat_r+0x1c>
 8004c96:	602b      	str	r3, [r5, #0]
 8004c98:	bd38      	pop	{r3, r4, r5, pc}
 8004c9a:	bf00      	nop
 8004c9c:	200017e0 	.word	0x200017e0

08004ca0 <_isatty_r>:
 8004ca0:	b538      	push	{r3, r4, r5, lr}
 8004ca2:	4c06      	ldr	r4, [pc, #24]	; (8004cbc <_isatty_r+0x1c>)
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	4605      	mov	r5, r0
 8004ca8:	4608      	mov	r0, r1
 8004caa:	6023      	str	r3, [r4, #0]
 8004cac:	f7fe fbac 	bl	8003408 <_isatty>
 8004cb0:	1c43      	adds	r3, r0, #1
 8004cb2:	d102      	bne.n	8004cba <_isatty_r+0x1a>
 8004cb4:	6823      	ldr	r3, [r4, #0]
 8004cb6:	b103      	cbz	r3, 8004cba <_isatty_r+0x1a>
 8004cb8:	602b      	str	r3, [r5, #0]
 8004cba:	bd38      	pop	{r3, r4, r5, pc}
 8004cbc:	200017e0 	.word	0x200017e0

08004cc0 <_init>:
 8004cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cc2:	bf00      	nop
 8004cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cc6:	bc08      	pop	{r3}
 8004cc8:	469e      	mov	lr, r3
 8004cca:	4770      	bx	lr

08004ccc <_fini>:
 8004ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cce:	bf00      	nop
 8004cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cd2:	bc08      	pop	{r3}
 8004cd4:	469e      	mov	lr, r3
 8004cd6:	4770      	bx	lr
