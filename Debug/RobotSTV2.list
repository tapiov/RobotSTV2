
RobotSTV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079c4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  08007bc8  08007bc8  00017bc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007fd8  08007fd8  00017fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007fe0  08007fe0  00017fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007fe4  08007fe4  00017fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000340  20000000  08007fe8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000189c  20000340  08008328  00020340  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001bdc  08008328  00021bdc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020340  2**0
                  CONTENTS, READONLY
 10 .debug_info   0005b380  00000000  00000000  0002036e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00007331  00000000  00000000  0007b6ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000131f3  00000000  00000000  00082a1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001b08  00000000  00000000  00095c18  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000020f0  00000000  00000000  00097720  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0000ba80  00000000  00000000  00099810  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0001c387  00000000  00000000  000a5290  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0010773c  00000000  00000000  000c1617  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  001c8d53  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000060dc  00000000  00000000  001c8dd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000340 	.word	0x20000340
 800021c:	00000000 	.word	0x00000000
 8000220:	08007bac 	.word	0x08007bac

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000344 	.word	0x20000344
 800023c:	08007bac 	.word	0x08007bac

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b97a 	b.w	80005fc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	468c      	mov	ip, r1
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	9e08      	ldr	r6, [sp, #32]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d151      	bne.n	80003d4 <__udivmoddi4+0xb4>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d96d      	bls.n	8000412 <__udivmoddi4+0xf2>
 8000336:	fab2 fe82 	clz	lr, r2
 800033a:	f1be 0f00 	cmp.w	lr, #0
 800033e:	d00b      	beq.n	8000358 <__udivmoddi4+0x38>
 8000340:	f1ce 0c20 	rsb	ip, lr, #32
 8000344:	fa01 f50e 	lsl.w	r5, r1, lr
 8000348:	fa20 fc0c 	lsr.w	ip, r0, ip
 800034c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000350:	ea4c 0c05 	orr.w	ip, ip, r5
 8000354:	fa00 f40e 	lsl.w	r4, r0, lr
 8000358:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800035c:	0c25      	lsrs	r5, r4, #16
 800035e:	fbbc f8fa 	udiv	r8, ip, sl
 8000362:	fa1f f987 	uxth.w	r9, r7
 8000366:	fb0a cc18 	mls	ip, sl, r8, ip
 800036a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800036e:	fb08 f309 	mul.w	r3, r8, r9
 8000372:	42ab      	cmp	r3, r5
 8000374:	d90a      	bls.n	800038c <__udivmoddi4+0x6c>
 8000376:	19ed      	adds	r5, r5, r7
 8000378:	f108 32ff 	add.w	r2, r8, #4294967295
 800037c:	f080 8123 	bcs.w	80005c6 <__udivmoddi4+0x2a6>
 8000380:	42ab      	cmp	r3, r5
 8000382:	f240 8120 	bls.w	80005c6 <__udivmoddi4+0x2a6>
 8000386:	f1a8 0802 	sub.w	r8, r8, #2
 800038a:	443d      	add	r5, r7
 800038c:	1aed      	subs	r5, r5, r3
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb5 f0fa 	udiv	r0, r5, sl
 8000394:	fb0a 5510 	mls	r5, sl, r0, r5
 8000398:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800039c:	fb00 f909 	mul.w	r9, r0, r9
 80003a0:	45a1      	cmp	r9, r4
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x98>
 80003a4:	19e4      	adds	r4, r4, r7
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	f080 810a 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80003ae:	45a1      	cmp	r9, r4
 80003b0:	f240 8107 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80003b4:	3802      	subs	r0, #2
 80003b6:	443c      	add	r4, r7
 80003b8:	eba4 0409 	sub.w	r4, r4, r9
 80003bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003c0:	2100      	movs	r1, #0
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d061      	beq.n	800048a <__udivmoddi4+0x16a>
 80003c6:	fa24 f40e 	lsr.w	r4, r4, lr
 80003ca:	2300      	movs	r3, #0
 80003cc:	6034      	str	r4, [r6, #0]
 80003ce:	6073      	str	r3, [r6, #4]
 80003d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d907      	bls.n	80003e8 <__udivmoddi4+0xc8>
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d054      	beq.n	8000486 <__udivmoddi4+0x166>
 80003dc:	2100      	movs	r1, #0
 80003de:	e886 0021 	stmia.w	r6, {r0, r5}
 80003e2:	4608      	mov	r0, r1
 80003e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e8:	fab3 f183 	clz	r1, r3
 80003ec:	2900      	cmp	r1, #0
 80003ee:	f040 808e 	bne.w	800050e <__udivmoddi4+0x1ee>
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d302      	bcc.n	80003fc <__udivmoddi4+0xdc>
 80003f6:	4282      	cmp	r2, r0
 80003f8:	f200 80fa 	bhi.w	80005f0 <__udivmoddi4+0x2d0>
 80003fc:	1a84      	subs	r4, r0, r2
 80003fe:	eb65 0503 	sbc.w	r5, r5, r3
 8000402:	2001      	movs	r0, #1
 8000404:	46ac      	mov	ip, r5
 8000406:	2e00      	cmp	r6, #0
 8000408:	d03f      	beq.n	800048a <__udivmoddi4+0x16a>
 800040a:	e886 1010 	stmia.w	r6, {r4, ip}
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	b912      	cbnz	r2, 800041a <__udivmoddi4+0xfa>
 8000414:	2701      	movs	r7, #1
 8000416:	fbb7 f7f2 	udiv	r7, r7, r2
 800041a:	fab7 fe87 	clz	lr, r7
 800041e:	f1be 0f00 	cmp.w	lr, #0
 8000422:	d134      	bne.n	800048e <__udivmoddi4+0x16e>
 8000424:	1beb      	subs	r3, r5, r7
 8000426:	0c3a      	lsrs	r2, r7, #16
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	2101      	movs	r1, #1
 800042e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000432:	0c25      	lsrs	r5, r4, #16
 8000434:	fb02 3318 	mls	r3, r2, r8, r3
 8000438:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800043c:	fb0c f308 	mul.w	r3, ip, r8
 8000440:	42ab      	cmp	r3, r5
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x134>
 8000444:	19ed      	adds	r5, r5, r7
 8000446:	f108 30ff 	add.w	r0, r8, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x132>
 800044c:	42ab      	cmp	r3, r5
 800044e:	f200 80d1 	bhi.w	80005f4 <__udivmoddi4+0x2d4>
 8000452:	4680      	mov	r8, r0
 8000454:	1aed      	subs	r5, r5, r3
 8000456:	b2a3      	uxth	r3, r4
 8000458:	fbb5 f0f2 	udiv	r0, r5, r2
 800045c:	fb02 5510 	mls	r5, r2, r0, r5
 8000460:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000464:	fb0c fc00 	mul.w	ip, ip, r0
 8000468:	45a4      	cmp	ip, r4
 800046a:	d907      	bls.n	800047c <__udivmoddi4+0x15c>
 800046c:	19e4      	adds	r4, r4, r7
 800046e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x15a>
 8000474:	45a4      	cmp	ip, r4
 8000476:	f200 80b8 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 800047a:	4618      	mov	r0, r3
 800047c:	eba4 040c 	sub.w	r4, r4, ip
 8000480:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000484:	e79d      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048e:	f1ce 0420 	rsb	r4, lr, #32
 8000492:	fa05 f30e 	lsl.w	r3, r5, lr
 8000496:	fa07 f70e 	lsl.w	r7, r7, lr
 800049a:	fa20 f804 	lsr.w	r8, r0, r4
 800049e:	0c3a      	lsrs	r2, r7, #16
 80004a0:	fa25 f404 	lsr.w	r4, r5, r4
 80004a4:	ea48 0803 	orr.w	r8, r8, r3
 80004a8:	fbb4 f1f2 	udiv	r1, r4, r2
 80004ac:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80004b0:	fb02 4411 	mls	r4, r2, r1, r4
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004bc:	fb01 f30c 	mul.w	r3, r1, ip
 80004c0:	42ab      	cmp	r3, r5
 80004c2:	fa00 f40e 	lsl.w	r4, r0, lr
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x1bc>
 80004c8:	19ed      	adds	r5, r5, r7
 80004ca:	f101 30ff 	add.w	r0, r1, #4294967295
 80004ce:	f080 808a 	bcs.w	80005e6 <__udivmoddi4+0x2c6>
 80004d2:	42ab      	cmp	r3, r5
 80004d4:	f240 8087 	bls.w	80005e6 <__udivmoddi4+0x2c6>
 80004d8:	3902      	subs	r1, #2
 80004da:	443d      	add	r5, r7
 80004dc:	1aeb      	subs	r3, r5, r3
 80004de:	fa1f f588 	uxth.w	r5, r8
 80004e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004e6:	fb02 3310 	mls	r3, r2, r0, r3
 80004ea:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004ee:	fb00 f30c 	mul.w	r3, r0, ip
 80004f2:	42ab      	cmp	r3, r5
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x1e6>
 80004f6:	19ed      	adds	r5, r5, r7
 80004f8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fc:	d26f      	bcs.n	80005de <__udivmoddi4+0x2be>
 80004fe:	42ab      	cmp	r3, r5
 8000500:	d96d      	bls.n	80005de <__udivmoddi4+0x2be>
 8000502:	3802      	subs	r0, #2
 8000504:	443d      	add	r5, r7
 8000506:	1aeb      	subs	r3, r5, r3
 8000508:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800050c:	e78f      	b.n	800042e <__udivmoddi4+0x10e>
 800050e:	f1c1 0720 	rsb	r7, r1, #32
 8000512:	fa22 f807 	lsr.w	r8, r2, r7
 8000516:	408b      	lsls	r3, r1
 8000518:	fa05 f401 	lsl.w	r4, r5, r1
 800051c:	ea48 0303 	orr.w	r3, r8, r3
 8000520:	fa20 fe07 	lsr.w	lr, r0, r7
 8000524:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000528:	40fd      	lsrs	r5, r7
 800052a:	ea4e 0e04 	orr.w	lr, lr, r4
 800052e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000532:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000536:	fb0c 5519 	mls	r5, ip, r9, r5
 800053a:	fa1f f883 	uxth.w	r8, r3
 800053e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000542:	fb09 f408 	mul.w	r4, r9, r8
 8000546:	42ac      	cmp	r4, r5
 8000548:	fa02 f201 	lsl.w	r2, r2, r1
 800054c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000550:	d908      	bls.n	8000564 <__udivmoddi4+0x244>
 8000552:	18ed      	adds	r5, r5, r3
 8000554:	f109 30ff 	add.w	r0, r9, #4294967295
 8000558:	d243      	bcs.n	80005e2 <__udivmoddi4+0x2c2>
 800055a:	42ac      	cmp	r4, r5
 800055c:	d941      	bls.n	80005e2 <__udivmoddi4+0x2c2>
 800055e:	f1a9 0902 	sub.w	r9, r9, #2
 8000562:	441d      	add	r5, r3
 8000564:	1b2d      	subs	r5, r5, r4
 8000566:	fa1f fe8e 	uxth.w	lr, lr
 800056a:	fbb5 f0fc 	udiv	r0, r5, ip
 800056e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000572:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000576:	fb00 f808 	mul.w	r8, r0, r8
 800057a:	45a0      	cmp	r8, r4
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x26e>
 800057e:	18e4      	adds	r4, r4, r3
 8000580:	f100 35ff 	add.w	r5, r0, #4294967295
 8000584:	d229      	bcs.n	80005da <__udivmoddi4+0x2ba>
 8000586:	45a0      	cmp	r8, r4
 8000588:	d927      	bls.n	80005da <__udivmoddi4+0x2ba>
 800058a:	3802      	subs	r0, #2
 800058c:	441c      	add	r4, r3
 800058e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000592:	eba4 0408 	sub.w	r4, r4, r8
 8000596:	fba0 8902 	umull	r8, r9, r0, r2
 800059a:	454c      	cmp	r4, r9
 800059c:	46c6      	mov	lr, r8
 800059e:	464d      	mov	r5, r9
 80005a0:	d315      	bcc.n	80005ce <__udivmoddi4+0x2ae>
 80005a2:	d012      	beq.n	80005ca <__udivmoddi4+0x2aa>
 80005a4:	b156      	cbz	r6, 80005bc <__udivmoddi4+0x29c>
 80005a6:	ebba 030e 	subs.w	r3, sl, lr
 80005aa:	eb64 0405 	sbc.w	r4, r4, r5
 80005ae:	fa04 f707 	lsl.w	r7, r4, r7
 80005b2:	40cb      	lsrs	r3, r1
 80005b4:	431f      	orrs	r7, r3
 80005b6:	40cc      	lsrs	r4, r1
 80005b8:	6037      	str	r7, [r6, #0]
 80005ba:	6074      	str	r4, [r6, #4]
 80005bc:	2100      	movs	r1, #0
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	4618      	mov	r0, r3
 80005c4:	e6f8      	b.n	80003b8 <__udivmoddi4+0x98>
 80005c6:	4690      	mov	r8, r2
 80005c8:	e6e0      	b.n	800038c <__udivmoddi4+0x6c>
 80005ca:	45c2      	cmp	sl, r8
 80005cc:	d2ea      	bcs.n	80005a4 <__udivmoddi4+0x284>
 80005ce:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d2:	eb69 0503 	sbc.w	r5, r9, r3
 80005d6:	3801      	subs	r0, #1
 80005d8:	e7e4      	b.n	80005a4 <__udivmoddi4+0x284>
 80005da:	4628      	mov	r0, r5
 80005dc:	e7d7      	b.n	800058e <__udivmoddi4+0x26e>
 80005de:	4640      	mov	r0, r8
 80005e0:	e791      	b.n	8000506 <__udivmoddi4+0x1e6>
 80005e2:	4681      	mov	r9, r0
 80005e4:	e7be      	b.n	8000564 <__udivmoddi4+0x244>
 80005e6:	4601      	mov	r1, r0
 80005e8:	e778      	b.n	80004dc <__udivmoddi4+0x1bc>
 80005ea:	3802      	subs	r0, #2
 80005ec:	443c      	add	r4, r7
 80005ee:	e745      	b.n	800047c <__udivmoddi4+0x15c>
 80005f0:	4608      	mov	r0, r1
 80005f2:	e708      	b.n	8000406 <__udivmoddi4+0xe6>
 80005f4:	f1a8 0802 	sub.w	r8, r8, #2
 80005f8:	443d      	add	r5, r7
 80005fa:	e72b      	b.n	8000454 <__udivmoddi4+0x134>

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <L6206_AttachErrorHandler>:
 * to the error Hanlder
 * @retval None
 **********************************************************/
void L6206_AttachErrorHandler(void (*callback)(uint16_t))
{
  errorHandlerCallback = (void (*)(uint16_t))callback;
 8000600:	4b01      	ldr	r3, [pc, #4]	; (8000608 <L6206_AttachErrorHandler+0x8>)
 8000602:	6018      	str	r0, [r3, #0]
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	2000039c 	.word	0x2000039c

0800060c <L6206_AttachFlagInterrupt>:
 * to the Flag Interrupt
 * @retval None
 **********************************************************/
void L6206_AttachFlagInterrupt(void (*callback)(void))
{
  flagInterruptCallback = (void (*)())callback;
 800060c:	4b01      	ldr	r3, [pc, #4]	; (8000614 <L6206_AttachFlagInterrupt+0x8>)
 800060e:	6018      	str	r0, [r3, #0]
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	200003a0 	.word	0x200003a0

08000618 <L6206_GetBridgeInputPwmFreq>:
 * @param[in] bridgeId 0 for bridge A, 1 for bridge B
 * @retval Freq in Hz
 **********************************************************/
uint32_t L6206_GetBridgeInputPwmFreq(uint8_t bridgeId)
{                                                  
  return (devicePrm.pwmFreq[(bridgeId << 1)]);
 8000618:	4b02      	ldr	r3, [pc, #8]	; (8000624 <L6206_GetBridgeInputPwmFreq+0xc>)
 800061a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
}
 800061e:	6840      	ldr	r0, [r0, #4]
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	20000374 	.word	0x20000374

08000628 <L6206_GetFwVersion>:
 * @retval L6206_FW_VERSION
 **********************************************************/
uint32_t L6206_GetFwVersion(void)
{
  return (L6206_FW_VERSION);
}
 8000628:	2000      	movs	r0, #0
 800062a:	4770      	bx	lr

0800062c <L6206_ReadId>:
 * @retval Id of the l6206 Driver Instance
 **********************************************************/
uint16_t L6206_ReadId(void)
{
  return(l6206DriverInstance);
}
 800062c:	4b01      	ldr	r3, [pc, #4]	; (8000634 <L6206_ReadId+0x8>)
 800062e:	8818      	ldrh	r0, [r3, #0]
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	2000035c 	.word	0x2000035c

08000638 <L6206_SetNbDevices>:
  }
  else
  {
    return FALSE;
  }
}
 8000638:	2801      	cmp	r0, #1
 800063a:	bf8c      	ite	hi
 800063c:	2000      	movhi	r0, #0
 800063e:	2001      	movls	r0, #1
 8000640:	4770      	bx	lr
	...

08000644 <L6206_ErrorHandler>:
 * @param[in] error Number of the error
 * @retval None
 **********************************************************/
void L6206_ErrorHandler(uint16_t error)
{
  if (errorHandlerCallback != 0)
 8000644:	4b02      	ldr	r3, [pc, #8]	; (8000650 <L6206_ErrorHandler+0xc>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	b103      	cbz	r3, 800064c <L6206_ErrorHandler+0x8>
  {
    (void) errorHandlerCallback(error);
 800064a:	4718      	bx	r3
 800064c:	e7fe      	b.n	800064c <L6206_ErrorHandler+0x8>
 800064e:	bf00      	nop
 8000650:	2000039c 	.word	0x2000039c

08000654 <L6206_GetCurrentSpeed>:
{                                                  
 8000654:	b508      	push	{r3, lr}
  if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config])
 8000656:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <L6206_GetCurrentSpeed+0x2c>)
 8000658:	490a      	ldr	r1, [pc, #40]	; (8000684 <L6206_GetCurrentSpeed+0x30>)
 800065a:	781a      	ldrb	r2, [r3, #0]
 800065c:	5c8a      	ldrb	r2, [r1, r2]
 800065e:	4282      	cmp	r2, r0
 8000660:	d205      	bcs.n	800066e <L6206_GetCurrentSpeed+0x1a>
    L6206_ErrorHandler(L6206_ERROR_1);
 8000662:	f248 0001 	movw	r0, #32769	; 0x8001
 8000666:	f7ff ffed 	bl	8000644 <L6206_ErrorHandler>
  uint16_t speed = 0;
 800066a:	2000      	movs	r0, #0
}
 800066c:	bd08      	pop	{r3, pc}
  else if (devicePrm.motionState[motorId] != INACTIVE)
 800066e:	181a      	adds	r2, r3, r0
 8000670:	f892 2020 	ldrb.w	r2, [r2, #32]
 8000674:	2a08      	cmp	r2, #8
 8000676:	d0f8      	beq.n	800066a <L6206_GetCurrentSpeed+0x16>
    speed = devicePrm.speed[motorId];
 8000678:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800067c:	8a98      	ldrh	r0, [r3, #20]
 800067e:	bd08      	pop	{r3, pc}
 8000680:	20000374 	.word	0x20000374
 8000684:	08007bf0 	.word	0x08007bf0

08000688 <L6206_GetDeviceState>:
{
 8000688:	b508      	push	{r3, lr}
  if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config])
 800068a:	4b08      	ldr	r3, [pc, #32]	; (80006ac <L6206_GetDeviceState+0x24>)
 800068c:	4908      	ldr	r1, [pc, #32]	; (80006b0 <L6206_GetDeviceState+0x28>)
 800068e:	781a      	ldrb	r2, [r3, #0]
 8000690:	5c8a      	ldrb	r2, [r1, r2]
 8000692:	4282      	cmp	r2, r0
 8000694:	d205      	bcs.n	80006a2 <L6206_GetDeviceState+0x1a>
    L6206_ErrorHandler(L6206_ERROR_1);
 8000696:	f248 0001 	movw	r0, #32769	; 0x8001
 800069a:	f7ff ffd3 	bl	8000644 <L6206_ErrorHandler>
  motorState_t state =  INACTIVE;
 800069e:	2008      	movs	r0, #8
 80006a0:	bd08      	pop	{r3, pc}
    state =  devicePrm.motionState[motorId];
 80006a2:	4403      	add	r3, r0
 80006a4:	f893 0020 	ldrb.w	r0, [r3, #32]
}
 80006a8:	bd08      	pop	{r3, pc}
 80006aa:	bf00      	nop
 80006ac:	20000374 	.word	0x20000374
 80006b0:	08007bf0 	.word	0x08007bf0

080006b4 <L6206_GetMaxSpeed>:
{                                                  
 80006b4:	b508      	push	{r3, lr}
  if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config])
 80006b6:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <L6206_GetMaxSpeed+0x24>)
 80006b8:	4908      	ldr	r1, [pc, #32]	; (80006dc <L6206_GetMaxSpeed+0x28>)
 80006ba:	781a      	ldrb	r2, [r3, #0]
 80006bc:	5c8a      	ldrb	r2, [r1, r2]
 80006be:	4282      	cmp	r2, r0
 80006c0:	d205      	bcs.n	80006ce <L6206_GetMaxSpeed+0x1a>
    L6206_ErrorHandler(L6206_ERROR_1);
 80006c2:	f248 0001 	movw	r0, #32769	; 0x8001
 80006c6:	f7ff ffbd 	bl	8000644 <L6206_ErrorHandler>
  uint16_t speed = 0;
 80006ca:	2000      	movs	r0, #0
 80006cc:	bd08      	pop	{r3, pc}
    speed =  devicePrm.speed[motorId];
 80006ce:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80006d2:	8a98      	ldrh	r0, [r3, #20]
}
 80006d4:	bd08      	pop	{r3, pc}
 80006d6:	bf00      	nop
 80006d8:	20000374 	.word	0x20000374
 80006dc:	08007bf0 	.word	0x08007bf0

080006e0 <L6206_GetBridgeStatus>:
{
 80006e0:	b508      	push	{r3, lr}
  uint16_t status = L6206_Board_GetFlagPinState(bridgeId);
 80006e2:	f000 fb65 	bl	8000db0 <L6206_Board_GetFlagPinState>
}
 80006e6:	b280      	uxth	r0, r0
 80006e8:	bd08      	pop	{r3, pc}
	...

080006ec <L6206_FlagInterruptHandler>:
/******************************************************//**
 * @brief  Handlers of the flag interrupt which calls the user callback (if defined)
 * @retval None
 **********************************************************/
void L6206_FlagInterruptHandler(void)
{
 80006ec:	b510      	push	{r4, lr}
  bool status;
  
  status = L6206_GetBridgeStatus(BRIDGE_A);
  if (status != devicePrm.bridgeEnabled[BRIDGE_A])
 80006ee:	4c0e      	ldr	r4, [pc, #56]	; (8000728 <L6206_FlagInterruptHandler+0x3c>)
  uint16_t status = L6206_Board_GetFlagPinState(bridgeId);
 80006f0:	2000      	movs	r0, #0
 80006f2:	f000 fb5d 	bl	8000db0 <L6206_Board_GetFlagPinState>
  if (status != devicePrm.bridgeEnabled[BRIDGE_A])
 80006f6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  status = L6206_GetBridgeStatus(BRIDGE_A);
 80006fa:	b2c0      	uxtb	r0, r0
  if (status != devicePrm.bridgeEnabled[BRIDGE_A])
 80006fc:	4283      	cmp	r3, r0
  {
    devicePrm.bridgeEnabled[BRIDGE_A] = status;
 80006fe:	bf18      	it	ne
 8000700:	f884 0024 	strbne.w	r0, [r4, #36]	; 0x24
  uint16_t status = L6206_Board_GetFlagPinState(bridgeId);
 8000704:	2001      	movs	r0, #1
 8000706:	f000 fb53 	bl	8000db0 <L6206_Board_GetFlagPinState>
  }
  
  status = L6206_GetBridgeStatus(BRIDGE_B);
  if (status != devicePrm.bridgeEnabled[BRIDGE_B])
 800070a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
  status = L6206_GetBridgeStatus(BRIDGE_B);
 800070e:	b2c0      	uxtb	r0, r0
  if (status != devicePrm.bridgeEnabled[BRIDGE_B])
 8000710:	4283      	cmp	r3, r0
  {
    devicePrm.bridgeEnabled[BRIDGE_B] = status;
  }  
  
  if (flagInterruptCallback != 0)
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <L6206_FlagInterruptHandler+0x40>)
 8000714:	681b      	ldr	r3, [r3, #0]
    devicePrm.bridgeEnabled[BRIDGE_B] = status;
 8000716:	bf18      	it	ne
 8000718:	f884 0025 	strbne.w	r0, [r4, #37]	; 0x25
  if (flagInterruptCallback != 0)
 800071c:	b113      	cbz	r3, 8000724 <L6206_FlagInterruptHandler+0x38>
  {
    flagInterruptCallback();
  }
}
 800071e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flagInterruptCallback();
 8000722:	4718      	bx	r3
 8000724:	bd10      	pop	{r4, pc}
 8000726:	bf00      	nop
 8000728:	20000374 	.word	0x20000374
 800072c:	200003a0 	.word	0x200003a0

08000730 <L6206_SetDualFullBridgeConfig>:
{
 8000730:	b510      	push	{r4, lr}
  devicePrm.config = (dualFullBridgeConfig_t)newConfig;
 8000732:	4c2b      	ldr	r4, [pc, #172]	; (80007e0 <L6206_SetDualFullBridgeConfig+0xb0>)
 8000734:	7020      	strb	r0, [r4, #0]
  L6206_Board_PwmDeInit(INPUT_1A);
 8000736:	2000      	movs	r0, #0
 8000738:	f000 fb9e 	bl	8000e78 <L6206_Board_PwmDeInit>
  L6206_Board_PwmDeInit(INPUT_2A);
 800073c:	2001      	movs	r0, #1
 800073e:	f000 fb9b 	bl	8000e78 <L6206_Board_PwmDeInit>
  L6206_Board_PwmDeInit(INPUT_1B);
 8000742:	2002      	movs	r0, #2
 8000744:	f000 fb98 	bl	8000e78 <L6206_Board_PwmDeInit>
  L6206_Board_PwmDeInit(INPUT_2B);
 8000748:	2003      	movs	r0, #3
 800074a:	f000 fb95 	bl	8000e78 <L6206_Board_PwmDeInit>
  switch (devicePrm.config)
 800074e:	7823      	ldrb	r3, [r4, #0]
 8000750:	2b0c      	cmp	r3, #12
 8000752:	d844      	bhi.n	80007de <L6206_SetDualFullBridgeConfig+0xae>
 8000754:	e8df f003 	tbb	[pc, r3]
 8000758:	07070707 	.word	0x07070707
 800075c:	1a1a1515 	.word	0x1a1a1515
 8000760:	2d2d2525 	.word	0x2d2d2525
 8000764:	38          	.byte	0x38
 8000765:	00          	.byte	0x00
        L6206_Board_PwmInit(INPUT_1A);
 8000766:	2000      	movs	r0, #0
 8000768:	f000 fbae 	bl	8000ec8 <L6206_Board_PwmInit>
        L6206_Board_PwmInit(INPUT_2A);
 800076c:	2001      	movs	r0, #1
        L6206_Board_PwmInit(INPUT_1A);
 800076e:	f000 fbab 	bl	8000ec8 <L6206_Board_PwmInit>
        L6206_Board_PwmInit(INPUT_1B);
 8000772:	2002      	movs	r0, #2
 8000774:	f000 fba8 	bl	8000ec8 <L6206_Board_PwmInit>
        L6206_Board_PwmInit(INPUT_2B);
 8000778:	2003      	movs	r0, #3
}
 800077a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        L6206_Board_PwmInit(INPUT_1A);
 800077e:	f000 bba3 	b.w	8000ec8 <L6206_Board_PwmInit>
        L6206_Board_PwmDeInit(INPUT_2A);
 8000782:	2001      	movs	r0, #1
 8000784:	f000 fb78 	bl	8000e78 <L6206_Board_PwmDeInit>
        L6206_Board_PwmInit(INPUT_1A);
 8000788:	2000      	movs	r0, #0
 800078a:	e7f0      	b.n	800076e <L6206_SetDualFullBridgeConfig+0x3e>
        L6206_Board_PwmDeInit(INPUT_2B);
 800078c:	2003      	movs	r0, #3
 800078e:	f000 fb73 	bl	8000e78 <L6206_Board_PwmDeInit>
        L6206_Board_PwmInit(INPUT_1A);
 8000792:	2000      	movs	r0, #0
 8000794:	f000 fb98 	bl	8000ec8 <L6206_Board_PwmInit>
        L6206_Board_PwmInit(INPUT_2A);
 8000798:	2001      	movs	r0, #1
        L6206_Board_PwmInit(INPUT_1A);
 800079a:	f000 fb95 	bl	8000ec8 <L6206_Board_PwmInit>
        L6206_Board_PwmInit(INPUT_1B);
 800079e:	2002      	movs	r0, #2
 80007a0:	e7eb      	b.n	800077a <L6206_SetDualFullBridgeConfig+0x4a>
        L6206_Board_PwmDeInit(INPUT_2A);
 80007a2:	2001      	movs	r0, #1
 80007a4:	f000 fb68 	bl	8000e78 <L6206_Board_PwmDeInit>
        L6206_Board_PwmDeInit(INPUT_2B);
 80007a8:	2003      	movs	r0, #3
 80007aa:	f000 fb65 	bl	8000e78 <L6206_Board_PwmDeInit>
        L6206_Board_PwmInit(INPUT_1A);
 80007ae:	2000      	movs	r0, #0
 80007b0:	e7f3      	b.n	800079a <L6206_SetDualFullBridgeConfig+0x6a>
        L6206_Board_PwmDeInit(INPUT_1B);
 80007b2:	2002      	movs	r0, #2
 80007b4:	f000 fb60 	bl	8000e78 <L6206_Board_PwmDeInit>
        L6206_Board_PwmDeInit(INPUT_2B);
 80007b8:	2003      	movs	r0, #3
 80007ba:	f000 fb5d 	bl	8000e78 <L6206_Board_PwmDeInit>
        L6206_Board_PwmInit(INPUT_1A);
 80007be:	2000      	movs	r0, #0
 80007c0:	f000 fb82 	bl	8000ec8 <L6206_Board_PwmInit>
        L6206_Board_PwmInit(INPUT_2A);
 80007c4:	2001      	movs	r0, #1
 80007c6:	e7d8      	b.n	800077a <L6206_SetDualFullBridgeConfig+0x4a>
        L6206_Board_PwmDeInit(INPUT_2A);
 80007c8:	2001      	movs	r0, #1
 80007ca:	f000 fb55 	bl	8000e78 <L6206_Board_PwmDeInit>
        L6206_Board_PwmDeInit(INPUT_1B);
 80007ce:	2002      	movs	r0, #2
 80007d0:	f000 fb52 	bl	8000e78 <L6206_Board_PwmDeInit>
        L6206_Board_PwmDeInit(INPUT_2B);
 80007d4:	2003      	movs	r0, #3
 80007d6:	f000 fb4f 	bl	8000e78 <L6206_Board_PwmDeInit>
        L6206_Board_PwmInit(INPUT_1A);
 80007da:	2000      	movs	r0, #0
 80007dc:	e7cd      	b.n	800077a <L6206_SetDualFullBridgeConfig+0x4a>
 80007de:	bd10      	pop	{r4, pc}
 80007e0:	20000374 	.word	0x20000374

080007e4 <L6206_DisableBridge>:
{
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	4606      	mov	r6, r0
  devicePrm.bridgeEnabled[bridgeId] = FALSE;
 80007e8:	4c0b      	ldr	r4, [pc, #44]	; (8000818 <L6206_DisableBridge+0x34>)
  L6206_Board_DisableBridge(bridgeId);
 80007ea:	f000 fa8f 	bl	8000d0c <L6206_Board_DisableBridge>
  devicePrm.bridgeEnabled[bridgeId] = FALSE;
 80007ee:	2500      	movs	r5, #0
 80007f0:	19a3      	adds	r3, r4, r6
 80007f2:	f883 5024 	strb.w	r5, [r3, #36]	; 0x24
  if (devicePrm.config >= PARALLELING_IN1A_IN2A__IN1B_IN2B__1_BIDIR_MOTOR)
 80007f6:	7823      	ldrb	r3, [r4, #0]
 80007f8:	2b08      	cmp	r3, #8
 80007fa:	d90b      	bls.n	8000814 <L6206_DisableBridge+0x30>
    if (bridgeId == BRIDGE_A) 
 80007fc:	b92e      	cbnz	r6, 800080a <L6206_DisableBridge+0x26>
      L6206_Board_DisableBridge(BRIDGE_B);
 80007fe:	2001      	movs	r0, #1
 8000800:	f000 fa84 	bl	8000d0c <L6206_Board_DisableBridge>
      devicePrm.bridgeEnabled[BRIDGE_B] = FALSE;
 8000804:	f884 6025 	strb.w	r6, [r4, #37]	; 0x25
 8000808:	bd70      	pop	{r4, r5, r6, pc}
      L6206_Board_DisableBridge(BRIDGE_A);
 800080a:	4628      	mov	r0, r5
 800080c:	f000 fa7e 	bl	8000d0c <L6206_Board_DisableBridge>
      devicePrm.bridgeEnabled[BRIDGE_A] = FALSE;
 8000810:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	bf00      	nop
 8000818:	20000374 	.word	0x20000374

0800081c <L6206_EnableBridge>:
{
 800081c:	b570      	push	{r4, r5, r6, lr}
  devicePrm.bridgeEnabled[bridgeId] = TRUE;
 800081e:	4d0f      	ldr	r5, [pc, #60]	; (800085c <L6206_EnableBridge+0x40>)
 8000820:	2401      	movs	r4, #1
{
 8000822:	4606      	mov	r6, r0
  devicePrm.bridgeEnabled[bridgeId] = TRUE;
 8000824:	182b      	adds	r3, r5, r0
 8000826:	f883 4024 	strb.w	r4, [r3, #36]	; 0x24
  if (devicePrm.config >= PARALLELING_IN1A_IN2A__IN1B_IN2B__1_BIDIR_MOTOR)
 800082a:	782b      	ldrb	r3, [r5, #0]
 800082c:	2b08      	cmp	r3, #8
 800082e:	d910      	bls.n	8000852 <L6206_EnableBridge+0x36>
    L6206_Board_EnableBridge(bridgeId, 0);
 8000830:	2100      	movs	r1, #0
 8000832:	f000 fa8d 	bl	8000d50 <L6206_Board_EnableBridge>
      L6206_Board_EnableBridge(BRIDGE_B, 1);
 8000836:	4621      	mov	r1, r4
    if (bridgeId == BRIDGE_A) 
 8000838:	b92e      	cbnz	r6, 8000846 <L6206_EnableBridge+0x2a>
      L6206_Board_EnableBridge(BRIDGE_B, 1);
 800083a:	4620      	mov	r0, r4
 800083c:	f000 fa88 	bl	8000d50 <L6206_Board_EnableBridge>
      devicePrm.bridgeEnabled[BRIDGE_B] = TRUE;
 8000840:	f885 4025 	strb.w	r4, [r5, #37]	; 0x25
 8000844:	bd70      	pop	{r4, r5, r6, pc}
      L6206_Board_EnableBridge(BRIDGE_A, 1);
 8000846:	2000      	movs	r0, #0
 8000848:	f000 fa82 	bl	8000d50 <L6206_Board_EnableBridge>
      devicePrm.bridgeEnabled[BRIDGE_A] = TRUE;
 800084c:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
 8000850:	bd70      	pop	{r4, r5, r6, pc}
    L6206_Board_EnableBridge(bridgeId, 1);
 8000852:	4621      	mov	r1, r4
}
 8000854:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    L6206_Board_EnableBridge(bridgeId, 1);
 8000858:	f000 ba7a 	b.w	8000d50 <L6206_Board_EnableBridge>
 800085c:	20000374 	.word	0x20000374

08000860 <L6206_GetMotorHandle>:
}
 8000860:	4800      	ldr	r0, [pc, #0]	; (8000864 <L6206_GetMotorHandle+0x4>)
 8000862:	4770      	bx	lr
 8000864:	20000000 	.word	0x20000000

08000868 <L6206_GetBridgeIdUsedByMotorId>:
 * @retval bridgeId 0 for bridge A , 1 for bridge B
 **********************************************************/
uint8_t L6206_GetBridgeIdUsedByMotorId(uint8_t motorId)
{
  uint8_t bridgeId;
  switch (devicePrm.config)
 8000868:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <L6206_GetBridgeIdUsedByMotorId+0x30>)
 800086a:	781a      	ldrb	r2, [r3, #0]
 800086c:	2a08      	cmp	r2, #8
 800086e:	d808      	bhi.n	8000882 <L6206_GetBridgeIdUsedByMotorId+0x1a>
 8000870:	2301      	movs	r3, #1
 8000872:	4093      	lsls	r3, r2
 8000874:	f240 1273 	movw	r2, #371	; 0x173
 8000878:	4213      	tst	r3, r2
 800087a:	d104      	bne.n	8000886 <L6206_GetBridgeIdUsedByMotorId+0x1e>
 800087c:	f013 038c 	ands.w	r3, r3, #140	; 0x8c
 8000880:	d105      	bne.n	800088e <L6206_GetBridgeIdUsedByMotorId+0x26>
    case PARALLELING_IN1A_IN2A__IN1B_IN2B__1_BIDIR_MOTOR:
    case PARALLELING_IN1A_IN1B__IN2A_IN2B__1_UNDIR_MOTOR_BRIDGE_1A__1_UNDIR_MOTOR_BRIDGE_2A:
    case PARALLELING_IN1A_IN1B__IN2A_IN2B__1_BIDIR_MOTOR:
    case PARALLELING_ALL_WITH_IN1A___1_UNDIR_MOTOR:
    default:
        bridgeId = 0;
 8000882:	2000      	movs	r0, #0
      break;        
  }  
  return (bridgeId);
}
 8000884:	4770      	bx	lr
        bridgeId = 1;
 8000886:	3000      	adds	r0, #0
 8000888:	bf18      	it	ne
 800088a:	2001      	movne	r0, #1
 800088c:	4770      	bx	lr
 800088e:	2801      	cmp	r0, #1
 8000890:	bf94      	ite	ls
 8000892:	2000      	movls	r0, #0
 8000894:	2001      	movhi	r0, #1
 8000896:	4770      	bx	lr
 8000898:	20000374 	.word	0x20000374

0800089c <L6206_GetMotorIdUsingbridgeInput>:
 **********************************************************/
uint8_t L6206_GetMotorIdUsingbridgeInput(uint8_t bridgeInput)
{
  uint8_t motorId;
  
  switch (devicePrm.config)
 800089c:	4b13      	ldr	r3, [pc, #76]	; (80008ec <L6206_GetMotorIdUsingbridgeInput+0x50>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b0a      	cmp	r3, #10
 80008a2:	d81f      	bhi.n	80008e4 <L6206_GetMotorIdUsingbridgeInput+0x48>
 80008a4:	e8df f003 	tbb	[pc, r3]
 80008a8:	16120b06 	.word	0x16120b06
 80008ac:	12060b06 	.word	0x12060b06
 80008b0:	1e06      	.short	0x1e06
 80008b2:	1b          	.byte	0x1b
 80008b3:	00          	.byte	0x00
      {
        motorId = 1;
      }
      else
      {
        motorId = 0;
 80008b4:	2801      	cmp	r0, #1
 80008b6:	bf94      	ite	ls
 80008b8:	2000      	movls	r0, #0
 80008ba:	2001      	movhi	r0, #1
 80008bc:	4770      	bx	lr
      }
      break;  
    case PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__2_UNDIR_MOTOR_BRIDGE_B:
    case   PARALLELING_IN1A_IN2A__1_UNDIR_MOTOR_BRIDGE_A__2_UNDIR_MOTOR_BRIDGE_B:      
      if (bridgeInput == INPUT_2B) 
 80008be:	2803      	cmp	r0, #3
 80008c0:	d012      	beq.n	80008e8 <L6206_GetMotorIdUsingbridgeInput+0x4c>
        motorId = 0;
 80008c2:	2802      	cmp	r0, #2
      }      
      break;           
    case PARALLELING_NONE___2_UNDIR_MOTOR_BRIDGE_A__2_UNDIR_MOTOR_BRIDGE_B:
      if (bridgeInput == INPUT_2B) 
      {
        motorId = 3;
 80008c4:	bf14      	ite	ne
 80008c6:	2000      	movne	r0, #0
 80008c8:	2001      	moveq	r0, #1
 80008ca:	4770      	bx	lr
      if (bridgeInput >= INPUT_1B) 
 80008cc:	2801      	cmp	r0, #1
 80008ce:	d80b      	bhi.n	80008e8 <L6206_GetMotorIdUsingbridgeInput+0x4c>
        motorId = 3;
 80008d0:	2801      	cmp	r0, #1
 80008d2:	e7f7      	b.n	80008c4 <L6206_GetMotorIdUsingbridgeInput+0x28>
      if (bridgeInput == INPUT_2B) 
 80008d4:	2803      	cmp	r0, #3
 80008d6:	d008      	beq.n	80008ea <L6206_GetMotorIdUsingbridgeInput+0x4e>
      }
      else if (bridgeInput == INPUT_1B) 
 80008d8:	2802      	cmp	r0, #2
 80008da:	d1f9      	bne.n	80008d0 <L6206_GetMotorIdUsingbridgeInput+0x34>
 80008dc:	4770      	bx	lr
      {
        motorId = 0;
      }      
      break;           
    case PARALLELING_IN1A_IN1B__IN2A_IN2B__1_UNDIR_MOTOR_BRIDGE_1A__1_UNDIR_MOTOR_BRIDGE_2A:
      if ((bridgeInput == INPUT_2A) || (bridgeInput == INPUT_2B))
 80008de:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 80008e2:	e7f5      	b.n	80008d0 <L6206_GetMotorIdUsingbridgeInput+0x34>
      break;
    case   PARALLELING_IN1A_IN2A__IN1B_IN2B__1_BIDIR_MOTOR:
    case   PARALLELING_IN1A_IN1B__IN2A_IN2B__1_BIDIR_MOTOR:
    case   PARALLELING_ALL_WITH_IN1A___1_UNDIR_MOTOR:
    default:
      motorId = 0;  
 80008e4:	2000      	movs	r0, #0
 80008e6:	4770      	bx	lr
        motorId = 2;
 80008e8:	2002      	movs	r0, #2
      break;        
  }
  
  return (motorId);
}
 80008ea:	4770      	bx	lr
 80008ec:	20000374 	.word	0x20000374

080008f0 <L6206_GetBridgeInputUsedByMotorId>:
 * @retval PWM input 0 for 1A, 1 for 2A, 2 for 1B, 3 for 3B
 **********************************************************/
uint8_t L6206_GetBridgeInputUsedByMotorId(uint8_t motorId)
{
  uint8_t bridgeInput;
  switch (devicePrm.config)
 80008f0:	4b21      	ldr	r3, [pc, #132]	; (8000978 <L6206_GetBridgeInputUsedByMotorId+0x88>)
 80008f2:	781a      	ldrb	r2, [r3, #0]
 80008f4:	2a0b      	cmp	r2, #11
 80008f6:	d83d      	bhi.n	8000974 <L6206_GetBridgeInputUsedByMotorId+0x84>
 80008f8:	e8df f002 	tbb	[pc, r2]
 80008fc:	1a150e06 	.word	0x1a150e06
 8000900:	2b272421 	.word	0x2b272421
 8000904:	07383230 	.word	0x07383230
  {
    case PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B:
      if  (motorId == 0)
 8000908:	b918      	cbnz	r0, 8000912 <L6206_GetBridgeInputUsedByMotorId+0x22>
      {
        bridgeInput = INPUT_2A;
      }      
      break;
    case PARALLELING_IN1A_IN1B__IN2A_IN2B__1_BIDIR_MOTOR:
      if (devicePrm.direction[0] == FORWARD)
 800090a:	7f18      	ldrb	r0, [r3, #28]
           bridgeInput = INPUT_1B;
 800090c:	f110 30ff 	adds.w	r0, r0, #4294967295
 8000910:	e02d      	b.n	800096e <L6206_GetBridgeInputUsedByMotorId+0x7e>
         if (devicePrm.direction[1] == FORWARD)
 8000912:	7f5b      	ldrb	r3, [r3, #29]
        bridgeInput = INPUT_1B;        
 8000914:	2b01      	cmp	r3, #1
 8000916:	e002      	b.n	800091e <L6206_GetBridgeInputUsedByMotorId+0x2e>
      if  (motorId == 0)
 8000918:	2800      	cmp	r0, #0
 800091a:	d0f6      	beq.n	800090a <L6206_GetBridgeInputUsedByMotorId+0x1a>
        bridgeInput = INPUT_1B;        
 800091c:	2801      	cmp	r0, #1
 800091e:	bf14      	ite	ne
 8000920:	2003      	movne	r0, #3
 8000922:	2002      	moveq	r0, #2
 8000924:	4770      	bx	lr
      if  (motorId == 0)
 8000926:	b330      	cbz	r0, 8000976 <L6206_GetBridgeInputUsedByMotorId+0x86>
      else if (motorId == 1)
 8000928:	2801      	cmp	r0, #1
 800092a:	d024      	beq.n	8000976 <L6206_GetBridgeInputUsedByMotorId+0x86>
         if (devicePrm.direction[2] == FORWARD)
 800092c:	7f9b      	ldrb	r3, [r3, #30]
 800092e:	e7f1      	b.n	8000914 <L6206_GetBridgeInputUsedByMotorId+0x24>
      if  (motorId == 0)
 8000930:	b308      	cbz	r0, 8000976 <L6206_GetBridgeInputUsedByMotorId+0x86>
      else if (motorId == 1)
 8000932:	2801      	cmp	r0, #1
 8000934:	d01f      	beq.n	8000976 <L6206_GetBridgeInputUsedByMotorId+0x86>
           bridgeInput = INPUT_2B;
 8000936:	2802      	cmp	r0, #2
 8000938:	bf18      	it	ne
 800093a:	2003      	movne	r0, #3
 800093c:	4770      	bx	lr
      if  (motorId == 0)
 800093e:	2800      	cmp	r0, #0
 8000940:	d1e7      	bne.n	8000912 <L6206_GetBridgeInputUsedByMotorId+0x22>
 8000942:	4770      	bx	lr
      if  (motorId == 0)
 8000944:	2800      	cmp	r0, #0
 8000946:	d1e9      	bne.n	800091c <L6206_GetBridgeInputUsedByMotorId+0x2c>
 8000948:	4770      	bx	lr
      if  (motorId == 0)
 800094a:	2800      	cmp	r0, #0
 800094c:	d0dd      	beq.n	800090a <L6206_GetBridgeInputUsedByMotorId+0x1a>
        bridgeInput = INPUT_1B;        
 800094e:	2002      	movs	r0, #2
 8000950:	4770      	bx	lr
      if  (motorId == 0)
 8000952:	b180      	cbz	r0, 8000976 <L6206_GetBridgeInputUsedByMotorId+0x86>
        bridgeInput = INPUT_1B;        
 8000954:	2801      	cmp	r0, #1
 8000956:	bf18      	it	ne
 8000958:	2002      	movne	r0, #2
 800095a:	4770      	bx	lr
 800095c:	2800      	cmp	r0, #0
 800095e:	e7fa      	b.n	8000956 <L6206_GetBridgeInputUsedByMotorId+0x66>
      if (devicePrm.direction[0] == FORWARD)
 8000960:	7f1b      	ldrb	r3, [r3, #28]
        bridgeInput = INPUT_1A;
 8000962:	2b01      	cmp	r3, #1
 8000964:	bf14      	ite	ne
 8000966:	2002      	movne	r0, #2
 8000968:	2000      	moveq	r0, #0
 800096a:	4770      	bx	lr
           bridgeInput = INPUT_1B;
 800096c:	3000      	adds	r0, #0
 800096e:	bf18      	it	ne
 8000970:	2001      	movne	r0, #1
 8000972:	4770      	bx	lr
        bridgeInput = INPUT_2A;
      }  
      break;      
    case PARALLELING_ALL_WITH_IN1A___1_UNDIR_MOTOR:
    default:
      bridgeInput = INPUT_1A;
 8000974:	2000      	movs	r0, #0
      break;       
  }  
  return (bridgeInput);
}
 8000976:	4770      	bx	lr
 8000978:	20000374 	.word	0x20000374

0800097c <L6206_GetSecondBridgeInputUsedByMotorId>:
 * @brief  Get the second PWM input used by a given bidirectionnal motor
 * @param motorId from 0 to MAX_NUMBER_OF_BRUSH_DC_MOTORS 
 * @retval PWM input 0 for 1A, 1 for 2A, 2 for 1B, 3 for 3B
 **********************************************************/
uint8_t L6206_GetSecondBridgeInputUsedByMotorId(uint8_t motorId)
{
 800097c:	b508      	push	{r3, lr}
  uint8_t bridgeInput = 0xFF;
  
  switch (devicePrm.config)
 800097e:	4b17      	ldr	r3, [pc, #92]	; (80009dc <L6206_GetSecondBridgeInputUsedByMotorId+0x60>)
 8000980:	781a      	ldrb	r2, [r3, #0]
 8000982:	2a0b      	cmp	r2, #11
 8000984:	d81d      	bhi.n	80009c2 <L6206_GetSecondBridgeInputUsedByMotorId+0x46>
 8000986:	e8df f002 	tbb	[pc, r2]
 800098a:	1a06      	.short	0x1a06
 800098c:	1c111c0c 	.word	0x1c111c0c
 8000990:	221c1c1a 	.word	0x221c1c1a
 8000994:	071c      	.short	0x071c
  {
    case PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B:
      if  (motorId == 0)
 8000996:	b958      	cbnz	r0, 80009b0 <L6206_GetSecondBridgeInputUsedByMotorId+0x34>
         bridgeInput = INPUT_1A;
       }
      break;       
    
    case PARALLELING_IN1A_IN1B__IN2A_IN2B__1_BIDIR_MOTOR:
      if (devicePrm.direction[0] == FORWARD)
 8000998:	7f18      	ldrb	r0, [r3, #28]
         bridgeInput = INPUT_1B;
 800099a:	1e43      	subs	r3, r0, #1
 800099c:	4258      	negs	r0, r3
 800099e:	4158      	adcs	r0, r3
 80009a0:	bd08      	pop	{r3, pc}
      if (motorId == 2)
 80009a2:	2802      	cmp	r0, #2
 80009a4:	d10d      	bne.n	80009c2 <L6206_GetSecondBridgeInputUsedByMotorId+0x46>
         if (devicePrm.direction[2] == FORWARD)
 80009a6:	7f9b      	ldrb	r3, [r3, #30]
           bridgeInput = INPUT_2B;
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	e005      	b.n	80009b8 <L6206_GetSecondBridgeInputUsedByMotorId+0x3c>
      if  (motorId == 1)
 80009ac:	2801      	cmp	r0, #1
 80009ae:	d108      	bne.n	80009c2 <L6206_GetSecondBridgeInputUsedByMotorId+0x46>
         if (devicePrm.direction[1] == FORWARD)
 80009b0:	7f5b      	ldrb	r3, [r3, #29]
           bridgeInput = INPUT_2B;
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	bf18      	it	ne
 80009b6:	2002      	movne	r0, #2
 80009b8:	bf08      	it	eq
 80009ba:	2003      	moveq	r0, #3
 80009bc:	bd08      	pop	{r3, pc}
      if  (motorId == 0)
 80009be:	2800      	cmp	r0, #0
 80009c0:	d0ea      	beq.n	8000998 <L6206_GetSecondBridgeInputUsedByMotorId+0x1c>
      bridgeInput = 0XFF;
      break;       
  }  
  if (bridgeInput == 0XFF)
  {
    L6206_ErrorHandler(L6206_ERROR_2);
 80009c2:	f248 0002 	movw	r0, #32770	; 0x8002
 80009c6:	f7ff fe3d 	bl	8000644 <L6206_ErrorHandler>
 80009ca:	20ff      	movs	r0, #255	; 0xff
  }
  
  return (bridgeInput);
}        
 80009cc:	bd08      	pop	{r3, pc}
      if (devicePrm.direction[0] == FORWARD)
 80009ce:	7f1b      	ldrb	r3, [r3, #28]
         bridgeInput = INPUT_1A;
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	bf0c      	ite	eq
 80009d4:	2002      	moveq	r0, #2
 80009d6:	2000      	movne	r0, #0
 80009d8:	bd08      	pop	{r3, pc}
 80009da:	bf00      	nop
 80009dc:	20000374 	.word	0x20000374

080009e0 <L6206_IsBidirectionnalMotor>:
 * @retval True if motor is bidirectionnal, else false
 **********************************************************/
bool L6206_IsBidirectionnalMotor(uint8_t motorId)
{
  bool isBiDir = FALSE;
  switch (devicePrm.config)
 80009e0:	4b0d      	ldr	r3, [pc, #52]	; (8000a18 <L6206_IsBidirectionnalMotor+0x38>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b0b      	cmp	r3, #11
 80009e6:	d814      	bhi.n	8000a12 <L6206_IsBidirectionnalMotor+0x32>
 80009e8:	e8df f003 	tbb	[pc, r3]
 80009ec:	130c0806 	.word	0x130c0806
 80009f0:	13081311 	.word	0x13081311
 80009f4:	06130613 	.word	0x06130613
  {
      case PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B:
      case PARALLELING_IN1A_IN2A__IN1B_IN2B__1_BIDIR_MOTOR:
      case PARALLELING_IN1A_IN1B__IN2A_IN2B__1_BIDIR_MOTOR:
        isBiDir = TRUE;
 80009f8:	2001      	movs	r0, #1
 80009fa:	4770      	bx	lr
 80009fc:	fab0 f080 	clz	r0, r0
 8000a00:	0940      	lsrs	r0, r0, #5
 8000a02:	4770      	bx	lr
 8000a04:	2802      	cmp	r0, #2
 8000a06:	bf14      	ite	ne
 8000a08:	2000      	movne	r0, #0
 8000a0a:	2001      	moveq	r0, #1
 8000a0c:	4770      	bx	lr
 8000a0e:	2801      	cmp	r0, #1
 8000a10:	e7f9      	b.n	8000a06 <L6206_IsBidirectionnalMotor+0x26>
  bool isBiDir = FALSE;
 8000a12:	2000      	movs	r0, #0
    default:
      break;       
  }    
  
  return (isBiDir);
}
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	20000374 	.word	0x20000374

08000a1c <L6206_HardStop>:
{	
 8000a1c:	b570      	push	{r4, r5, r6, lr}
  if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config])
 8000a1e:	4c13      	ldr	r4, [pc, #76]	; (8000a6c <L6206_HardStop+0x50>)
{	
 8000a20:	4605      	mov	r5, r0
  if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config])
 8000a22:	4a13      	ldr	r2, [pc, #76]	; (8000a70 <L6206_HardStop+0x54>)
 8000a24:	7823      	ldrb	r3, [r4, #0]
 8000a26:	5cd3      	ldrb	r3, [r2, r3]
 8000a28:	4283      	cmp	r3, r0
 8000a2a:	d205      	bcs.n	8000a38 <L6206_HardStop+0x1c>
    L6206_ErrorHandler(L6206_ERROR_1);
 8000a2c:	f248 0001 	movw	r0, #32769	; 0x8001
}
 8000a30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    L6206_ErrorHandler(L6206_ERROR_1);
 8000a34:	f7ff be06 	b.w	8000644 <L6206_ErrorHandler>
  else if (devicePrm.motionState[motorId] != INACTIVE)
 8000a38:	1823      	adds	r3, r4, r0
 8000a3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a3e:	2b08      	cmp	r3, #8
 8000a40:	d012      	beq.n	8000a68 <L6206_HardStop+0x4c>
    bridgeInputFirstPWM = L6206_GetBridgeInputUsedByMotorId(motorId);
 8000a42:	f7ff ff55 	bl	80008f0 <L6206_GetBridgeInputUsedByMotorId>
 8000a46:	4606      	mov	r6, r0
    if (L6206_IsBidirectionnalMotor(motorId))
 8000a48:	4628      	mov	r0, r5
 8000a4a:	f7ff ffc9 	bl	80009e0 <L6206_IsBidirectionnalMotor>
 8000a4e:	b120      	cbz	r0, 8000a5a <L6206_HardStop+0x3e>
    	bridgeInputSecondPWM = L6206_GetSecondBridgeInputUsedByMotorId(motorId);
 8000a50:	4628      	mov	r0, r5
 8000a52:	f7ff ff93 	bl	800097c <L6206_GetSecondBridgeInputUsedByMotorId>
    	L6206_Board_PwmStop(bridgeInputSecondPWM);
 8000a56:	f000 fabf 	bl	8000fd8 <L6206_Board_PwmStop>
    L6206_Board_PwmStop(bridgeInputFirstPWM);
 8000a5a:	4630      	mov	r0, r6
    devicePrm.motionState[motorId] = INACTIVE;
 8000a5c:	442c      	add	r4, r5
    L6206_Board_PwmStop(bridgeInputFirstPWM);
 8000a5e:	f000 fabb 	bl	8000fd8 <L6206_Board_PwmStop>
    devicePrm.motionState[motorId] = INACTIVE;
 8000a62:	2308      	movs	r3, #8
 8000a64:	f884 3020 	strb.w	r3, [r4, #32]
 8000a68:	bd70      	pop	{r4, r5, r6, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000374 	.word	0x20000374
 8000a70:	08007bf0 	.word	0x08007bf0

08000a74 <L6206_HardHiz>:
  if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config])
 8000a74:	491c      	ldr	r1, [pc, #112]	; (8000ae8 <L6206_HardHiz+0x74>)
{
 8000a76:	b538      	push	{r3, r4, r5, lr}
  if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config])
 8000a78:	780d      	ldrb	r5, [r1, #0]
{
 8000a7a:	4604      	mov	r4, r0
  if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config])
 8000a7c:	4b1b      	ldr	r3, [pc, #108]	; (8000aec <L6206_HardHiz+0x78>)
 8000a7e:	5d5b      	ldrb	r3, [r3, r5]
 8000a80:	4283      	cmp	r3, r0
 8000a82:	d205      	bcs.n	8000a90 <L6206_HardHiz+0x1c>
    L6206_ErrorHandler(L6206_ERROR_1);
 8000a84:	f248 0001 	movw	r0, #32769	; 0x8001
}
 8000a88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    L6206_ErrorHandler(L6206_ERROR_1);
 8000a8c:	f7ff bdda 	b.w	8000644 <L6206_ErrorHandler>
    uint8_t bridgeId = L6206_GetBridgeIdUsedByMotorId(motorId);
 8000a90:	f7ff feea 	bl	8000868 <L6206_GetBridgeIdUsedByMotorId>
    if (devicePrm.bridgeEnabled[bridgeId] != FALSE)
 8000a94:	180b      	adds	r3, r1, r0
 8000a96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a9a:	b193      	cbz	r3, 8000ac2 <L6206_HardHiz+0x4e>
      switch (devicePrm.config)
 8000a9c:	3d01      	subs	r5, #1
 8000a9e:	2d09      	cmp	r5, #9
 8000aa0:	d81f      	bhi.n	8000ae2 <L6206_HardHiz+0x6e>
 8000aa2:	e8df f005 	tbb	[pc, r5]
 8000aa6:	1305      	.short	0x1305
 8000aa8:	1e051e17 	.word	0x1e051e17
 8000aac:	151e1e13 	.word	0x151e1e13
          if ((motorId > 0) && (devicePrm.motionState[1] == STEADY) && (devicePrm.motionState[2] == STEADY))
 8000ab0:	b1bc      	cbz	r4, 8000ae2 <L6206_HardHiz+0x6e>
 8000ab2:	6a0b      	ldr	r3, [r1, #32]
 8000ab4:	4a0e      	ldr	r2, [pc, #56]	; (8000af0 <L6206_HardHiz+0x7c>)
 8000ab6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000aba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000abe:	4293      	cmp	r3, r2
          if ((devicePrm.motionState[0] == STEADY) && (devicePrm.motionState[1] == STEADY))
 8000ac0:	d10f      	bne.n	8000ae2 <L6206_HardHiz+0x6e>
    L6206_HardStop(motorId);
 8000ac2:	4620      	mov	r0, r4
}
 8000ac4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    L6206_HardStop(motorId);
 8000ac8:	f7ff bfa8 	b.w	8000a1c <L6206_HardStop>
          if ((motorId < 2) && (devicePrm.motionState[0] == STEADY) && (devicePrm.motionState[1] == STEADY))
 8000acc:	2c01      	cmp	r4, #1
 8000ace:	d808      	bhi.n	8000ae2 <L6206_HardHiz+0x6e>
          if ((devicePrm.motionState[0] == STEADY) && (devicePrm.motionState[1] == STEADY))
 8000ad0:	8c0a      	ldrh	r2, [r1, #32]
 8000ad2:	e002      	b.n	8000ada <L6206_HardHiz+0x66>
          if (((motorId < 2) && (devicePrm.motionState[0] == STEADY) && (devicePrm.motionState[1] == STEADY))|| 
 8000ad4:	2c01      	cmp	r4, #1
 8000ad6:	d9fb      	bls.n	8000ad0 <L6206_HardHiz+0x5c>
              ((motorId > 1) && (devicePrm.motionState[2] == STEADY) && (devicePrm.motionState[3] == STEADY)))
 8000ad8:	8c4a      	ldrh	r2, [r1, #34]	; 0x22
          if ((devicePrm.motionState[0] == STEADY) && (devicePrm.motionState[1] == STEADY))
 8000ada:	f240 3303 	movw	r3, #771	; 0x303
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	e7ee      	b.n	8000ac0 <L6206_HardHiz+0x4c>
        L6206_DisableBridge(bridgeId);
 8000ae2:	f7ff fe7f 	bl	80007e4 <L6206_DisableBridge>
 8000ae6:	e7ec      	b.n	8000ac2 <L6206_HardHiz+0x4e>
 8000ae8:	20000374 	.word	0x20000374
 8000aec:	08007bf0 	.word	0x08007bf0
 8000af0:	00030300 	.word	0x00030300

08000af4 <L6206_Run>:
{
 8000af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config])
 8000af6:	4c25      	ldr	r4, [pc, #148]	; (8000b8c <L6206_Run+0x98>)
{
 8000af8:	4605      	mov	r5, r0
  if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config])
 8000afa:	4a25      	ldr	r2, [pc, #148]	; (8000b90 <L6206_Run+0x9c>)
{
 8000afc:	460e      	mov	r6, r1
  if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config])
 8000afe:	7823      	ldrb	r3, [r4, #0]
 8000b00:	5cd3      	ldrb	r3, [r2, r3]
 8000b02:	4283      	cmp	r3, r0
 8000b04:	d205      	bcs.n	8000b12 <L6206_Run+0x1e>
    L6206_ErrorHandler(L6206_ERROR_1);
 8000b06:	f248 0001 	movw	r0, #32769	; 0x8001
}
 8000b0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    L6206_ErrorHandler(L6206_ERROR_1);
 8000b0e:	f7ff bd99 	b.w	8000644 <L6206_ErrorHandler>
  else if ((devicePrm.motionState[motorId] == INACTIVE) ||
 8000b12:	1823      	adds	r3, r4, r0
 8000b14:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000b18:	2a08      	cmp	r2, #8
 8000b1a:	d004      	beq.n	8000b26 <L6206_Run+0x32>
 8000b1c:	7f1b      	ldrb	r3, [r3, #28]
 8000b1e:	428b      	cmp	r3, r1
 8000b20:	d033      	beq.n	8000b8a <L6206_Run+0x96>
      L6206_HardStop(motorId);
 8000b22:	f7ff ff7b 	bl	8000a1c <L6206_HardStop>
    devicePrm.direction[motorId] = direction;
 8000b26:	1963      	adds	r3, r4, r5
    devicePrm.motionState[motorId] = STEADY;
 8000b28:	2203      	movs	r2, #3
    bridgeId = L6206_GetBridgeIdUsedByMotorId(motorId);    
 8000b2a:	4628      	mov	r0, r5
    devicePrm.direction[motorId] = direction;
 8000b2c:	771e      	strb	r6, [r3, #28]
    devicePrm.motionState[motorId] = STEADY;
 8000b2e:	f883 2020 	strb.w	r2, [r3, #32]
    bridgeId = L6206_GetBridgeIdUsedByMotorId(motorId);    
 8000b32:	f7ff fe99 	bl	8000868 <L6206_GetBridgeIdUsedByMotorId>
 8000b36:	4607      	mov	r7, r0
    bridgeInput = L6206_GetBridgeInputUsedByMotorId(motorId);    
 8000b38:	4628      	mov	r0, r5
 8000b3a:	f7ff fed9 	bl	80008f0 <L6206_GetBridgeInputUsedByMotorId>
 8000b3e:	4606      	mov	r6, r0
    L6206_EnableBridge(bridgeId);
 8000b40:	4638      	mov	r0, r7
 8000b42:	f7ff fe6b 	bl	800081c <L6206_EnableBridge>
    if (L6206_IsBidirectionnalMotor(motorId))
 8000b46:	4628      	mov	r0, r5
 8000b48:	f7ff ff4a 	bl	80009e0 <L6206_IsBidirectionnalMotor>
 8000b4c:	f105 0308 	add.w	r3, r5, #8
 8000b50:	00b1      	lsls	r1, r6, #2
      L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput],(100 - devicePrm.speed[motorId]));
 8000b52:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    if (L6206_IsBidirectionnalMotor(motorId))
 8000b56:	b198      	cbz	r0, 8000b80 <L6206_Run+0x8c>
      L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput],(100 - devicePrm.speed[motorId]));
 8000b58:	791a      	ldrb	r2, [r3, #4]
 8000b5a:	4421      	add	r1, r4
 8000b5c:	4630      	mov	r0, r6
 8000b5e:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
 8000b62:	6849      	ldr	r1, [r1, #4]
 8000b64:	b2d2      	uxtb	r2, r2
 8000b66:	f000 f9f3 	bl	8000f50 <L6206_Board_PwmSetFreq>
      bridgeInput = L6206_GetSecondBridgeInputUsedByMotorId(motorId);
 8000b6a:	4628      	mov	r0, r5
 8000b6c:	f7ff ff06 	bl	800097c <L6206_GetSecondBridgeInputUsedByMotorId>
      L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput],100);
 8000b70:	2264      	movs	r2, #100	; 0x64
 8000b72:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8000b76:	6861      	ldr	r1, [r4, #4]
}
 8000b78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput],devicePrm.speed[motorId]);
 8000b7c:	f000 b9e8 	b.w	8000f50 <L6206_Board_PwmSetFreq>
 8000b80:	440c      	add	r4, r1
 8000b82:	791a      	ldrb	r2, [r3, #4]
 8000b84:	4630      	mov	r0, r6
 8000b86:	6861      	ldr	r1, [r4, #4]
 8000b88:	e7f6      	b.n	8000b78 <L6206_Run+0x84>
 8000b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b8c:	20000374 	.word	0x20000374
 8000b90:	08007bf0 	.word	0x08007bf0

08000b94 <L6206_SetMaxSpeed>:
{                                                  
 8000b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config])
 8000b96:	4c15      	ldr	r4, [pc, #84]	; (8000bec <L6206_SetMaxSpeed+0x58>)
{                                                  
 8000b98:	4606      	mov	r6, r0
  if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config])
 8000b9a:	4a15      	ldr	r2, [pc, #84]	; (8000bf0 <L6206_SetMaxSpeed+0x5c>)
{                                                  
 8000b9c:	460d      	mov	r5, r1
  if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config])
 8000b9e:	7823      	ldrb	r3, [r4, #0]
 8000ba0:	5cd3      	ldrb	r3, [r2, r3]
 8000ba2:	4283      	cmp	r3, r0
 8000ba4:	d205      	bcs.n	8000bb2 <L6206_SetMaxSpeed+0x1e>
    L6206_ErrorHandler(L6206_ERROR_1);
 8000ba6:	f248 0001 	movw	r0, #32769	; 0x8001
 8000baa:	f7ff fd4b 	bl	8000644 <L6206_ErrorHandler>
  bool cmdExecuted = FALSE;
 8000bae:	2000      	movs	r0, #0
 8000bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    devicePrm.speed[motorId] = newMaxSpeed;
 8000bb2:	eb04 0340 	add.w	r3, r4, r0, lsl #1
 8000bb6:	8299      	strh	r1, [r3, #20]
    if (devicePrm.motionState[motorId] != INACTIVE)
 8000bb8:	1823      	adds	r3, r4, r0
 8000bba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bbe:	2b08      	cmp	r3, #8
 8000bc0:	d00f      	beq.n	8000be2 <L6206_SetMaxSpeed+0x4e>
      bridgeInput = L6206_GetBridgeInputUsedByMotorId(motorId);
 8000bc2:	f7ff fe95 	bl	80008f0 <L6206_GetBridgeInputUsedByMotorId>
 8000bc6:	4607      	mov	r7, r0
      if (L6206_IsBidirectionnalMotor(motorId))
 8000bc8:	4630      	mov	r0, r6
 8000bca:	f7ff ff09 	bl	80009e0 <L6206_IsBidirectionnalMotor>
 8000bce:	00bb      	lsls	r3, r7, #2
 8000bd0:	b148      	cbz	r0, 8000be6 <L6206_SetMaxSpeed+0x52>
        L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput],(100 - devicePrm.speed[motorId]));
 8000bd2:	f1c5 0264 	rsb	r2, r5, #100	; 0x64
 8000bd6:	441c      	add	r4, r3
 8000bd8:	b2d2      	uxtb	r2, r2
        L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput],devicePrm.speed[motorId]);
 8000bda:	6861      	ldr	r1, [r4, #4]
 8000bdc:	4638      	mov	r0, r7
 8000bde:	f000 f9b7 	bl	8000f50 <L6206_Board_PwmSetFreq>
    cmdExecuted = TRUE;
 8000be2:	2001      	movs	r0, #1
}                                                     
 8000be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput],devicePrm.speed[motorId]);
 8000be6:	441c      	add	r4, r3
 8000be8:	b2ea      	uxtb	r2, r5
 8000bea:	e7f6      	b.n	8000bda <L6206_SetMaxSpeed+0x46>
 8000bec:	20000374 	.word	0x20000374
 8000bf0:	08007bf0 	.word	0x08007bf0

08000bf4 <L6206_SetBridgeInputPwmFreq>:
{                                                  
 8000bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf8:	4f1d      	ldr	r7, [pc, #116]	; (8000c70 <L6206_SetBridgeInputPwmFreq+0x7c>)
    uint8_t bridgeInput = (bridgeId << 1) + loop; 
 8000bfa:	0040      	lsls	r0, r0, #1
 8000bfc:	2600      	movs	r6, #0
    devicePrm.pwmFreq[bridgeInput] = newFreq;
 8000bfe:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8000c74 <L6206_SetBridgeInputPwmFreq+0x80>
 8000c02:	428f      	cmp	r7, r1
    uint8_t bridgeInput = (bridgeId << 1) + loop; 
 8000c04:	fa5f f980 	uxtb.w	r9, r0
 8000c08:	bf28      	it	cs
 8000c0a:	460f      	movcs	r7, r1
 8000c0c:	eb09 0506 	add.w	r5, r9, r6
 8000c10:	b2ed      	uxtb	r5, r5
    devicePrm.pwmFreq[bridgeInput] = newFreq;
 8000c12:	eb08 0a85 	add.w	sl, r8, r5, lsl #2
    motorId = L6206_GetMotorIdUsingbridgeInput(bridgeInput);
 8000c16:	4628      	mov	r0, r5
    devicePrm.pwmFreq[bridgeInput] = newFreq;
 8000c18:	f8ca 7004 	str.w	r7, [sl, #4]
    motorId = L6206_GetMotorIdUsingbridgeInput(bridgeInput);
 8000c1c:	f7ff fe3e 	bl	800089c <L6206_GetMotorIdUsingbridgeInput>
    if (devicePrm.motionState[motorId] != INACTIVE)
 8000c20:	eb08 0300 	add.w	r3, r8, r0
    motorId = L6206_GetMotorIdUsingbridgeInput(bridgeInput);
 8000c24:	4604      	mov	r4, r0
    if (devicePrm.motionState[motorId] != INACTIVE)
 8000c26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c2a:	2b08      	cmp	r3, #8
 8000c2c:	d016      	beq.n	8000c5c <L6206_SetBridgeInputPwmFreq+0x68>
      if (L6206_IsBidirectionnalMotor(motorId))
 8000c2e:	f7ff fed7 	bl	80009e0 <L6206_IsBidirectionnalMotor>
 8000c32:	b1c0      	cbz	r0, 8000c66 <L6206_SetBridgeInputPwmFreq+0x72>
        if (bridgeInput !=  L6206_GetSecondBridgeInputUsedByMotorId(motorId))
 8000c34:	4620      	mov	r0, r4
 8000c36:	f7ff fea1 	bl	800097c <L6206_GetSecondBridgeInputUsedByMotorId>
 8000c3a:	42a8      	cmp	r0, r5
 8000c3c:	d009      	beq.n	8000c52 <L6206_SetBridgeInputPwmFreq+0x5e>
        L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput],(100 - devicePrm.speed[motorId]));
 8000c3e:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8000c42:	f8da 1004 	ldr.w	r1, [sl, #4]
 8000c46:	7d22      	ldrb	r2, [r4, #20]
 8000c48:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
 8000c4c:	b2d2      	uxtb	r2, r2
        L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput],devicePrm.speed[motorId]);
 8000c4e:	4628      	mov	r0, r5
 8000c50:	e002      	b.n	8000c58 <L6206_SetBridgeInputPwmFreq+0x64>
          L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput],100);
 8000c52:	2264      	movs	r2, #100	; 0x64
 8000c54:	f8da 1004 	ldr.w	r1, [sl, #4]
        L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput],devicePrm.speed[motorId]);
 8000c58:	f000 f97a 	bl	8000f50 <L6206_Board_PwmSetFreq>
 8000c5c:	3601      	adds	r6, #1
  for (loop = 0; loop < 2;loop ++)
 8000c5e:	2e02      	cmp	r6, #2
 8000c60:	d1d4      	bne.n	8000c0c <L6206_SetBridgeInputPwmFreq+0x18>
}
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput],devicePrm.speed[motorId]);
 8000c66:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8000c6a:	4639      	mov	r1, r7
 8000c6c:	7d22      	ldrb	r2, [r4, #20]
 8000c6e:	e7ee      	b.n	8000c4e <L6206_SetBridgeInputPwmFreq+0x5a>
 8000c70:	000186a0 	.word	0x000186a0
 8000c74:	20000374 	.word	0x20000374

08000c78 <L6206_SetDeviceParamsToPredefinedValues>:
 * @brief  Sets the parameters of the device to predefined values
 * from l6206_target_config.h
 * @retval None
 **********************************************************/
void L6206_SetDeviceParamsToPredefinedValues(void)
{
 8000c78:	b570      	push	{r4, r5, r6, lr}
  uint32_t i;

  memset(&devicePrm, 0, sizeof(devicePrm));
 8000c7a:	4c0d      	ldr	r4, [pc, #52]	; (8000cb0 <L6206_SetDeviceParamsToPredefinedValues+0x38>)
 8000c7c:	2228      	movs	r2, #40	; 0x28
 8000c7e:	2100      	movs	r1, #0
  devicePrm.pwmFreq[INPUT_1B] = L6206_CONF_PARAM_FREQ_PWM1B;
  devicePrm.pwmFreq[INPUT_2B] = L6206_CONF_PARAM_FREQ_PWM2B;
  
  for (i = 0; i < MAX_NUMBER_OF_BRUSH_DC_MOTORS; i++)
  {
    devicePrm.speed[i] = 100;
 8000c80:	2664      	movs	r6, #100	; 0x64
  memset(&devicePrm, 0, sizeof(devicePrm));
 8000c82:	4620      	mov	r0, r4
 8000c84:	f004 fb71 	bl	800536a <memset>
  devicePrm.pwmFreq[INPUT_1A] = L6206_CONF_PARAM_FREQ_PWM1A;
 8000c88:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000c8c:	f104 021b 	add.w	r2, r4, #27
    devicePrm.direction[i] = FORWARD;
 8000c90:	2001      	movs	r0, #1
  devicePrm.pwmFreq[INPUT_1A] = L6206_CONF_PARAM_FREQ_PWM1A;
 8000c92:	6063      	str	r3, [r4, #4]
    devicePrm.motionState[i] = INACTIVE;
 8000c94:	2108      	movs	r1, #8
  devicePrm.pwmFreq[INPUT_2A] = L6206_CONF_PARAM_FREQ_PWM2A;
 8000c96:	60a3      	str	r3, [r4, #8]
  devicePrm.pwmFreq[INPUT_1B] = L6206_CONF_PARAM_FREQ_PWM1B;
 8000c98:	60e3      	str	r3, [r4, #12]
  devicePrm.pwmFreq[INPUT_2B] = L6206_CONF_PARAM_FREQ_PWM2B;
 8000c9a:	6123      	str	r3, [r4, #16]
 8000c9c:	2300      	movs	r3, #0
    devicePrm.speed[i] = 100;
 8000c9e:	18e5      	adds	r5, r4, r3
 8000ca0:	3302      	adds	r3, #2
  for (i = 0; i < MAX_NUMBER_OF_BRUSH_DC_MOTORS; i++)
 8000ca2:	2b08      	cmp	r3, #8
    devicePrm.speed[i] = 100;
 8000ca4:	82ae      	strh	r6, [r5, #20]
    devicePrm.direction[i] = FORWARD;
 8000ca6:	f802 0f01 	strb.w	r0, [r2, #1]!
    devicePrm.motionState[i] = INACTIVE;
 8000caa:	7111      	strb	r1, [r2, #4]
  for (i = 0; i < MAX_NUMBER_OF_BRUSH_DC_MOTORS; i++)
 8000cac:	d1f7      	bne.n	8000c9e <L6206_SetDeviceParamsToPredefinedValues+0x26>
  }
  for (i = 0; i < L6206_NB_MAX_BRIDGES; i++)
  {  
    devicePrm.bridgeEnabled[i] = FALSE;
  }
}
 8000cae:	bd70      	pop	{r4, r5, r6, pc}
 8000cb0:	20000374 	.word	0x20000374

08000cb4 <L6206_SetDeviceParamsToGivenValues>:
 * @param initDevicePrm structure containing values to initialize the device
 * parameters
 * @retval None
 **********************************************************/
void L6206_SetDeviceParamsToGivenValues(L6206_InitTypeDef* initDevicePrm)
{
 8000cb4:	b530      	push	{r4, r5, lr}
 8000cb6:	4603      	mov	r3, r0
	  memcpy(&devicePrm, initDevicePrm, sizeof(devicePrm));
 8000cb8:	4c06      	ldr	r4, [pc, #24]	; (8000cd4 <L6206_SetDeviceParamsToGivenValues+0x20>)
 8000cba:	f100 0528 	add.w	r5, r0, #40	; 0x28
 8000cbe:	6818      	ldr	r0, [r3, #0]
 8000cc0:	3308      	adds	r3, #8
 8000cc2:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8000cc6:	4622      	mov	r2, r4
 8000cc8:	42ab      	cmp	r3, r5
 8000cca:	c203      	stmia	r2!, {r0, r1}
 8000ccc:	4614      	mov	r4, r2
 8000cce:	d1f6      	bne.n	8000cbe <L6206_SetDeviceParamsToGivenValues+0xa>
}
 8000cd0:	bd30      	pop	{r4, r5, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000374 	.word	0x20000374

08000cd8 <L6206_Init>:
	l6206DriverInstance++;
 8000cd8:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <L6206_Init+0x2c>)
 8000cda:	8813      	ldrh	r3, [r2, #0]
{
 8000cdc:	b510      	push	{r4, lr}
	l6206DriverInstance++;
 8000cde:	3301      	adds	r3, #1
{
 8000ce0:	4604      	mov	r4, r0
	l6206DriverInstance++;
 8000ce2:	8013      	strh	r3, [r2, #0]
	L6206_Board_GpioInit();
 8000ce4:	f000 f872 	bl	8000dcc <L6206_Board_GpioInit>
	if (init == NULL)
 8000ce8:	b93c      	cbnz	r4, 8000cfa <L6206_Init+0x22>
		L6206_SetDeviceParamsToPredefinedValues();
 8000cea:	f7ff ffc5 	bl	8000c78 <L6206_SetDeviceParamsToPredefinedValues>
	L6206_SetDualFullBridgeConfig(devicePrm.config);
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <L6206_Init+0x30>)
}
 8000cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	L6206_SetDualFullBridgeConfig(devicePrm.config);
 8000cf4:	7818      	ldrb	r0, [r3, #0]
 8000cf6:	f7ff bd1b 	b.w	8000730 <L6206_SetDualFullBridgeConfig>
		L6206_SetDeviceParamsToGivenValues((L6206_InitTypeDef*) init);
 8000cfa:	4620      	mov	r0, r4
 8000cfc:	f7ff ffda 	bl	8000cb4 <L6206_SetDeviceParamsToGivenValues>
 8000d00:	e7f5      	b.n	8000cee <L6206_Init+0x16>
 8000d02:	bf00      	nop
 8000d04:	2000035c 	.word	0x2000035c
 8000d08:	20000374 	.word	0x20000374

08000d0c <L6206_Board_DisableBridge>:
{
  GPIO_InitTypeDef GPIO_InitStruct;
  uint32_t gpioPin;
  GPIO_TypeDef* gpioPort;
  
  if (bridgeId == 0)
 8000d0c:	2800      	cmp	r0, #0
    gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT;    
  }
  
  /* Configure the GPIO connected to EN pin as an output */
  GPIO_InitStruct.Pin = gpioPin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0e:	f04f 0301 	mov.w	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
  HAL_GPIO_Init(gpioPort, &GPIO_InitStruct);
 8000d12:	480d      	ldr	r0, [pc, #52]	; (8000d48 <L6206_Board_DisableBridge+0x3c>)
{
 8000d14:	b530      	push	{r4, r5, lr}
 8000d16:	b087      	sub	sp, #28
    gpioPin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
 8000d18:	bf0c      	ite	eq
 8000d1a:	f44f 4400 	moveq.w	r4, #32768	; 0x8000
 8000d1e:	f44f 6480 	movne.w	r4, #1024	; 0x400
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2500      	movs	r5, #0
  HAL_GPIO_Init(gpioPort, &GPIO_InitStruct);
 8000d24:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d26:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pin = gpioPin;
 8000d28:	9401      	str	r4, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8000d2c:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(gpioPort, &GPIO_InitStruct);
 8000d2e:	f000 fd73 	bl	8001818 <HAL_GPIO_Init>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d32:	b672      	cpsid	i
  
  __disable_irq();
  HAL_GPIO_WritePin(gpioPort, gpioPin, GPIO_PIN_RESET);  
 8000d34:	4804      	ldr	r0, [pc, #16]	; (8000d48 <L6206_Board_DisableBridge+0x3c>)
 8000d36:	462a      	mov	r2, r5
 8000d38:	4621      	mov	r1, r4
 8000d3a:	f000 ff01 	bl	8001b40 <HAL_GPIO_WritePin>
  __HAL_GPIO_EXTI_CLEAR_IT(gpioPin);
 8000d3e:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <L6206_Board_DisableBridge+0x40>)
 8000d40:	615c      	str	r4, [r3, #20]
  __ASM volatile ("cpsie i" : : : "memory");
 8000d42:	b662      	cpsie	i
  __enable_irq();
    
}
 8000d44:	b007      	add	sp, #28
 8000d46:	bd30      	pop	{r4, r5, pc}
 8000d48:	40021400 	.word	0x40021400
 8000d4c:	40013c00 	.word	0x40013c00

08000d50 <L6206_Board_EnableBridge>:
  }
  else
  {
    gpioPin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
    gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT;    
    flagIrqn = EXTI_FLAG_B_IRQn;    
 8000d50:	2800      	cmp	r0, #0
  }
  
  HAL_GPIO_WritePin(gpioPort, gpioPin, GPIO_PIN_SET);
 8000d52:	f04f 0201 	mov.w	r2, #1
 8000d56:	4813      	ldr	r0, [pc, #76]	; (8000da4 <L6206_Board_EnableBridge+0x54>)
{
 8000d58:	b570      	push	{r4, r5, r6, lr}
    flagIrqn = EXTI_FLAG_B_IRQn;    
 8000d5a:	bf0c      	ite	eq
 8000d5c:	f44f 4400 	moveq.w	r4, #32768	; 0x8000
 8000d60:	f44f 6480 	movne.w	r4, #1024	; 0x400
{
 8000d64:	460e      	mov	r6, r1
 8000d66:	b086      	sub	sp, #24
  HAL_GPIO_WritePin(gpioPort, gpioPin, GPIO_PIN_SET);
 8000d68:	4621      	mov	r1, r4
    flagIrqn = EXTI_FLAG_B_IRQn;    
 8000d6a:	bf0c      	ite	eq
 8000d6c:	2528      	moveq	r5, #40	; 0x28
 8000d6e:	2507      	movne	r5, #7
  HAL_GPIO_WritePin(gpioPort, gpioPin, GPIO_PIN_SET);
 8000d70:	f000 fee6 	bl	8001b40 <HAL_GPIO_WritePin>
  if (addDelay != 0)
 8000d74:	b116      	cbz	r6, 8000d7c <L6206_Board_EnableBridge+0x2c>
  {
    HAL_Delay(BSP_MOTOR_CONTROL_BOARD_BRIDGE_TURN_ON_DELAY);
 8000d76:	2014      	movs	r0, #20
 8000d78:	f000 fa7a 	bl	8001270 <HAL_Delay>
  }
  /* Configure the GPIO connected to EN pin to take interrupt */
  GPIO_InitStruct.Pin = gpioPin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d7c:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <L6206_Board_EnableBridge+0x58>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
  HAL_GPIO_Init(gpioPort, &GPIO_InitStruct);
 8000d7e:	a901      	add	r1, sp, #4
 8000d80:	4808      	ldr	r0, [pc, #32]	; (8000da4 <L6206_Board_EnableBridge+0x54>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d82:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d84:	2301      	movs	r3, #1
  GPIO_InitStruct.Pin = gpioPin;
 8000d86:	9401      	str	r4, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d88:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8000d8a:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(gpioPort, &GPIO_InitStruct);
 8000d8c:	f000 fd44 	bl	8001818 <HAL_GPIO_Init>
  
  __HAL_GPIO_EXTI_CLEAR_IT(gpioPin);
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <L6206_Board_EnableBridge+0x5c>)
  HAL_NVIC_ClearPendingIRQ(flagIrqn);
 8000d92:	4628      	mov	r0, r5
  __HAL_GPIO_EXTI_CLEAR_IT(gpioPin);
 8000d94:	615c      	str	r4, [r3, #20]
  HAL_NVIC_ClearPendingIRQ(flagIrqn);
 8000d96:	f000 faf7 	bl	8001388 <HAL_NVIC_ClearPendingIRQ>
  HAL_NVIC_EnableIRQ(flagIrqn);  
 8000d9a:	4628      	mov	r0, r5
 8000d9c:	f000 fac4 	bl	8001328 <HAL_NVIC_EnableIRQ>
}
 8000da0:	b006      	add	sp, #24
 8000da2:	bd70      	pop	{r4, r5, r6, pc}
 8000da4:	40021400 	.word	0x40021400
 8000da8:	10210000 	.word	0x10210000
 8000dac:	40013c00 	.word	0x40013c00

08000db0 <L6206_Board_GetFlagPinState>:
uint32_t L6206_Board_GetFlagPinState(uint8_t bridgeId)
{
  uint32_t gpioPin;
  GPIO_TypeDef* gpioPort;

  if (bridgeId == 0)
 8000db0:	2800      	cmp	r0, #0
  else
  {
    gpioPin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
    gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT;    
  }
  return HAL_GPIO_ReadPin(gpioPort, gpioPin);
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <L6206_Board_GetFlagPinState+0x18>)
{
 8000db4:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(gpioPort, gpioPin);
 8000db6:	bf0c      	ite	eq
 8000db8:	f44f 4100 	moveq.w	r1, #32768	; 0x8000
 8000dbc:	f44f 6180 	movne.w	r1, #1024	; 0x400
 8000dc0:	f000 feb8 	bl	8001b34 <HAL_GPIO_ReadPin>
}
 8000dc4:	bd08      	pop	{r3, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40021400 	.word	0x40021400

08000dcc <L6206_Board_GpioInit>:
void L6206_Board_GpioInit(void)
{
   GPIO_InitTypeDef GPIO_InitStruct;
  
  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 8000dcc:	4b28      	ldr	r3, [pc, #160]	; (8000e70 <L6206_Board_GpioInit+0xa4>)
 8000dce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dd0:	f042 0204 	orr.w	r2, r2, #4
{
 8000dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __GPIOC_CLK_ENABLE();
 8000dd6:	631a      	str	r2, [r3, #48]	; 0x30
{
 8000dd8:	b089      	sub	sp, #36	; 0x24
  __GPIOC_CLK_ENABLE();
 8000dda:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /* Configure L6206 Enable pin of Bridge A ------------------------------*/
  /* This pin is reconfigured later for OCD and OVT as GPIO_MODE_IT_FALLING with GPIO_PULLUP */
  GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2400      	movs	r4, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
  HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT, &GPIO_InitStruct);
 8000dde:	4d25      	ldr	r5, [pc, #148]	; (8000e74 <L6206_Board_GpioInit+0xa8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de0:	2601      	movs	r6, #1
  __GPIOC_CLK_ENABLE();
 8000de2:	f002 0204 	and.w	r2, r2, #4
  GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PIN;
 8000de6:	f44f 4700 	mov.w	r7, #32768	; 0x8000
  HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT, &GPIO_InitStruct);
 8000dea:	a903      	add	r1, sp, #12
 8000dec:	4628      	mov	r0, r5
  __GPIOC_CLK_ENABLE();
 8000dee:	9200      	str	r2, [sp, #0]
 8000df0:	9a00      	ldr	r2, [sp, #0]
  __GPIOA_CLK_ENABLE();
 8000df2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000df4:	f042 0201 	orr.w	r2, r2, #1
 8000df8:	631a      	str	r2, [r3, #48]	; 0x30
 8000dfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dfc:	f002 0201 	and.w	r2, r2, #1
 8000e00:	9201      	str	r2, [sp, #4]
 8000e02:	9a01      	ldr	r2, [sp, #4]
  __GPIOB_CLK_ENABLE();
 8000e04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e06:	f042 0202 	orr.w	r2, r2, #2
 8000e0a:	631a      	str	r2, [r3, #48]	; 0x30
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PIN;
 8000e0e:	9703      	str	r7, [sp, #12]
  __GPIOB_CLK_ENABLE();
 8000e10:	f003 0302 	and.w	r3, r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e14:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	9405      	str	r4, [sp, #20]
  __GPIOB_CLK_ENABLE();
 8000e18:	9302      	str	r3, [sp, #8]
 8000e1a:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8000e1c:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT, &GPIO_InitStruct);
 8000e1e:	f000 fcfb 	bl	8001818 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT, BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PIN, GPIO_PIN_RESET);
 8000e22:	4622      	mov	r2, r4
 8000e24:	4639      	mov	r1, r7
 8000e26:	4628      	mov	r0, r5
  /* Enable the External Line Interrupt used for the OCD OVT interrupt*/
  HAL_NVIC_EnableIRQ(EXTI_FLAG_A_IRQn);    
  
/* Configure L6206 Enable pin of Bridge B ------------------------------*/
  /* This pin is reconfigured later for OCD and OVT as GPIO_MODE_IT_FALLING with GPIO_PULLUP */
  GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
 8000e28:	f44f 6780 	mov.w	r7, #1024	; 0x400
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT, BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PIN, GPIO_PIN_RESET);
 8000e2c:	f000 fe88 	bl	8001b40 <HAL_GPIO_WritePin>
  HAL_NVIC_SetPriority(EXTI_FLAG_A_IRQn, BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PRIORITY, 0);
 8000e30:	4622      	mov	r2, r4
 8000e32:	2104      	movs	r1, #4
 8000e34:	2028      	movs	r0, #40	; 0x28
 8000e36:	f000 fa3f 	bl	80012b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI_FLAG_A_IRQn);    
 8000e3a:	2028      	movs	r0, #40	; 0x28
 8000e3c:	f000 fa74 	bl	8001328 <HAL_NVIC_EnableIRQ>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
  HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT, &GPIO_InitStruct);
 8000e40:	a903      	add	r1, sp, #12
 8000e42:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
 8000e44:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e46:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8000e4a:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT, &GPIO_InitStruct);
 8000e4c:	f000 fce4 	bl	8001818 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT, BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN, GPIO_PIN_RESET);
 8000e50:	4622      	mov	r2, r4
 8000e52:	4639      	mov	r1, r7
 8000e54:	4628      	mov	r0, r5
 8000e56:	f000 fe73 	bl	8001b40 <HAL_GPIO_WritePin>
  
  /* Set Priority of External Line Interrupt used for the OCD OVT interrupt*/ 
  HAL_NVIC_SetPriority(EXTI_FLAG_B_IRQn, BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PRIORITY, 0);
 8000e5a:	4622      	mov	r2, r4
 8000e5c:	2104      	movs	r1, #4
 8000e5e:	2007      	movs	r0, #7
 8000e60:	f000 fa2a 	bl	80012b8 <HAL_NVIC_SetPriority>
    
  /* Enable the External Line Interrupt used for the OCD OVT interrupt*/
  HAL_NVIC_EnableIRQ(EXTI_FLAG_B_IRQn);    
 8000e64:	2007      	movs	r0, #7
 8000e66:	f000 fa5f 	bl	8001328 <HAL_NVIC_EnableIRQ>

}
 8000e6a:	b009      	add	sp, #36	; 0x24
 8000e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40021400 	.word	0x40021400

08000e78 <L6206_Board_PwmDeInit>:
  **********************************************************/
void L6206_Board_PwmDeInit(uint8_t bridgeInput)
{
  TIM_HandleTypeDef *pHTim;

  switch (bridgeInput)
 8000e78:	2802      	cmp	r0, #2
 8000e7a:	d00e      	beq.n	8000e9a <L6206_Board_PwmDeInit+0x22>
 8000e7c:	2803      	cmp	r0, #3
 8000e7e:	d012      	beq.n	8000ea6 <L6206_Board_PwmDeInit+0x2e>
 8000e80:	2801      	cmp	r0, #1
 8000e82:	4a0b      	ldr	r2, [pc, #44]	; (8000eb0 <L6206_Board_PwmDeInit+0x38>)
 8000e84:	d003      	beq.n	8000e8e <L6206_Board_PwmDeInit+0x16>
  {
    case 0:
    default:
      pHTim = &hTimPwm1A;
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1A;
 8000e86:	480b      	ldr	r0, [pc, #44]	; (8000eb4 <L6206_Board_PwmDeInit+0x3c>)
 8000e88:	6002      	str	r2, [r0, #0]

      break;
    case 3:
      pHTim = &hTimPwm2B;
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
      pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2B;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	e009      	b.n	8000ea2 <L6206_Board_PwmDeInit+0x2a>
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2A;
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <L6206_Board_PwmDeInit+0x40>)
      pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2A;
 8000e90:	7718      	strb	r0, [r3, #28]
      pHTim = &hTimPwm2A;
 8000e92:	4618      	mov	r0, r3
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2A;
 8000e94:	601a      	str	r2, [r3, #0]

      break;      
  }
  HAL_TIM_PWM_DeInit(pHTim);
 8000e96:	f001 bd43 	b.w	8002920 <HAL_TIM_PWM_DeInit>
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1B;
 8000e9a:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <L6206_Board_PwmDeInit+0x44>)
 8000e9c:	4808      	ldr	r0, [pc, #32]	; (8000ec0 <L6206_Board_PwmDeInit+0x48>)
 8000e9e:	6003      	str	r3, [r0, #0]
      pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM1B;
 8000ea0:	2301      	movs	r3, #1
      pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2B;
 8000ea2:	7703      	strb	r3, [r0, #28]
      break;      
 8000ea4:	e7f7      	b.n	8000e96 <L6206_Board_PwmDeInit+0x1e>
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
 8000ea6:	4807      	ldr	r0, [pc, #28]	; (8000ec4 <L6206_Board_PwmDeInit+0x4c>)
 8000ea8:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <L6206_Board_PwmDeInit+0x44>)
 8000eaa:	6003      	str	r3, [r0, #0]
 8000eac:	e7ed      	b.n	8000e8a <L6206_Board_PwmDeInit+0x12>
 8000eae:	bf00      	nop
 8000eb0:	40010000 	.word	0x40010000
 8000eb4:	200004d4 	.word	0x200004d4
 8000eb8:	20000414 	.word	0x20000414
 8000ebc:	40000800 	.word	0x40000800
 8000ec0:	20000454 	.word	0x20000454
 8000ec4:	20000494 	.word	0x20000494

08000ec8 <L6206_Board_PwmInit>:
  TIM_OC_InitTypeDef sConfigOC;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_HandleTypeDef *pHTim;
  uint32_t  channel;

  switch (bridgeInput)
 8000ec8:	2802      	cmp	r0, #2
{
 8000eca:	b570      	push	{r4, r5, r6, lr}
 8000ecc:	b08a      	sub	sp, #40	; 0x28
  switch (bridgeInput)
 8000ece:	d029      	beq.n	8000f24 <L6206_Board_PwmInit+0x5c>
 8000ed0:	2803      	cmp	r0, #3
 8000ed2:	d02d      	beq.n	8000f30 <L6206_Board_PwmInit+0x68>
 8000ed4:	2801      	cmp	r0, #1
 8000ed6:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <L6206_Board_PwmInit+0x70>)
 8000ed8:	d005      	beq.n	8000ee6 <L6206_Board_PwmInit+0x1e>
  {
    case 0:
    default:
      pHTim = &hTimPwm1A;
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1A;
 8000eda:	4c18      	ldr	r4, [pc, #96]	; (8000f3c <L6206_Board_PwmInit+0x74>)
      pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM1B;
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1B;
      break;
    case 3:
      pHTim = &hTimPwm2B;
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
 8000edc:	6023      	str	r3, [r4, #0]
      pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2B;
 8000ede:	2302      	movs	r3, #2
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2B;
 8000ee0:	2604      	movs	r6, #4
      pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2B;
 8000ee2:	7723      	strb	r3, [r4, #28]
      break;      
 8000ee4:	e003      	b.n	8000eee <L6206_Board_PwmInit+0x26>
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2A;
 8000ee6:	4c16      	ldr	r4, [pc, #88]	; (8000f40 <L6206_Board_PwmInit+0x78>)
 8000ee8:	6023      	str	r3, [r4, #0]
      pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2A;
 8000eea:	7720      	strb	r0, [r4, #28]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1B;
 8000eec:	2600      	movs	r6, #0
  }
  pHTim->Init.Prescaler = TIMER_PRESCALER -1;
  pHTim->Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eee:	2500      	movs	r5, #0
  pHTim->Init.Prescaler = TIMER_PRESCALER -1;
 8000ef0:	233f      	movs	r3, #63	; 0x3f
  pHTim->Init.Period = 0;
  pHTim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  HAL_TIM_PWM_Init(pHTim);
 8000ef2:	4620      	mov	r0, r4
  pHTim->Init.Prescaler = TIMER_PRESCALER -1;
 8000ef4:	6063      	str	r3, [r4, #4]
  pHTim->Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef6:	60a5      	str	r5, [r4, #8]
  pHTim->Init.Period = 0;
 8000ef8:	60e5      	str	r5, [r4, #12]
  pHTim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000efa:	6125      	str	r5, [r4, #16]
  HAL_TIM_PWM_Init(pHTim);
 8000efc:	f001 fdb0 	bl	8002a60 <HAL_TIM_PWM_Init>
  
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f00:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  HAL_TIM_PWM_ConfigChannel(pHTim, &sConfigOC, channel);
 8000f02:	4632      	mov	r2, r6
 8000f04:	a903      	add	r1, sp, #12
 8000f06:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f08:	9303      	str	r3, [sp, #12]
  sConfigOC.Pulse = 0;
 8000f0a:	9504      	str	r5, [sp, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f0c:	9505      	str	r5, [sp, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f0e:	9507      	str	r5, [sp, #28]
  HAL_TIM_PWM_ConfigChannel(pHTim, &sConfigOC, channel);
 8000f10:	f002 f824 	bl	8002f5c <HAL_TIM_PWM_ConfigChannel>
  
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(pHTim, &sMasterConfig);
 8000f14:	4669      	mov	r1, sp
 8000f16:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f18:	9500      	str	r5, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f1a:	9502      	str	r5, [sp, #8]
  HAL_TIMEx_MasterConfigSynchronization(pHTim, &sMasterConfig);
 8000f1c:	f001 ffb6 	bl	8002e8c <HAL_TIMEx_MasterConfigSynchronization>
}
 8000f20:	b00a      	add	sp, #40	; 0x28
 8000f22:	bd70      	pop	{r4, r5, r6, pc}
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1B;
 8000f24:	4c07      	ldr	r4, [pc, #28]	; (8000f44 <L6206_Board_PwmInit+0x7c>)
 8000f26:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <L6206_Board_PwmInit+0x80>)
 8000f28:	6023      	str	r3, [r4, #0]
      pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM1B;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	7723      	strb	r3, [r4, #28]
 8000f2e:	e7dd      	b.n	8000eec <L6206_Board_PwmInit+0x24>
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
 8000f30:	4c06      	ldr	r4, [pc, #24]	; (8000f4c <L6206_Board_PwmInit+0x84>)
 8000f32:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <L6206_Board_PwmInit+0x80>)
 8000f34:	e7d2      	b.n	8000edc <L6206_Board_PwmInit+0x14>
 8000f36:	bf00      	nop
 8000f38:	40010000 	.word	0x40010000
 8000f3c:	200004d4 	.word	0x200004d4
 8000f40:	20000414 	.word	0x20000414
 8000f44:	20000454 	.word	0x20000454
 8000f48:	40000800 	.word	0x40000800
 8000f4c:	20000494 	.word	0x20000494

08000f50 <L6206_Board_PwmSetFreq>:
 * @param[in] duty Duty cycle
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6206_Board_PwmSetFreq(uint8_t bridgeInput, uint32_t newFreq, uint8_t duty)
{
 8000f50:	b570      	push	{r4, r5, r6, lr}
 8000f52:	4605      	mov	r5, r0
 8000f54:	460c      	mov	r4, r1
 8000f56:	4616      	mov	r6, r2
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 8000f58:	f001 f86c 	bl	8002034 <HAL_RCC_GetSysClockFreq>
  TIM_HandleTypeDef *pHTim;
  uint32_t period;
  uint32_t pulse;
  uint32_t channel;
  
  switch (bridgeInput)
 8000f5c:	2d02      	cmp	r5, #2
 8000f5e:	d023      	beq.n	8000fa8 <L6206_Board_PwmSetFreq+0x58>
 8000f60:	2d03      	cmp	r5, #3
 8000f62:	d024      	beq.n	8000fae <L6206_Board_PwmSetFreq+0x5e>
 8000f64:	2d01      	cmp	r5, #1
 8000f66:	4a16      	ldr	r2, [pc, #88]	; (8000fc0 <L6206_Board_PwmSetFreq+0x70>)
 8000f68:	d003      	beq.n	8000f72 <L6206_Board_PwmSetFreq+0x22>
  {
    case 0:
    default:
      pHTim = &hTimPwm1A;
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1A;
 8000f6a:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <L6206_Board_PwmSetFreq+0x74>)
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1B;
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1B;
      break;
    case 3:
      pHTim = &hTimPwm2B;
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
 8000f6c:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2B;
 8000f6e:	2104      	movs	r1, #4
      break;      
 8000f70:	e002      	b.n	8000f78 <L6206_Board_PwmSetFreq+0x28>
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2A;
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <L6206_Board_PwmSetFreq+0x78>)
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1B;
 8000f74:	2100      	movs	r1, #0
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1B;
 8000f76:	601a      	str	r2, [r3, #0]
  }
  
   period = (uint32_t)( (uint32_t)sysFreq / (uint32_t)(TIMER_PRESCALER * newFreq)) - 1;
 8000f78:	01a4      	lsls	r4, r4, #6
 8000f7a:	fbb0 f0f4 	udiv	r0, r0, r4


  __HAL_TIM_SetAutoreload(pHTim, period);
 8000f7e:	681c      	ldr	r4, [r3, #0]
   period = (uint32_t)( (uint32_t)sysFreq / (uint32_t)(TIMER_PRESCALER * newFreq)) - 1;
 8000f80:	3801      	subs	r0, #1
  __HAL_TIM_SetAutoreload(pHTim, period);
 8000f82:	62e0      	str	r0, [r4, #44]	; 0x2c
 8000f84:	60d8      	str	r0, [r3, #12]
  
  if (duty == 0) 
 8000f86:	b146      	cbz	r6, 8000f9a <L6206_Board_PwmSetFreq+0x4a>
    pulse = 0 ;
  }
  else 
  {
    if (duty > 100) duty = 100;  
    pulse = (uint32_t) ( ((uint32_t)period * (uint32_t)duty) / 100) + 1;
 8000f88:	2e64      	cmp	r6, #100	; 0x64
 8000f8a:	4632      	mov	r2, r6
 8000f8c:	bf28      	it	cs
 8000f8e:	2264      	movcs	r2, #100	; 0x64
 8000f90:	4350      	muls	r0, r2
 8000f92:	2264      	movs	r2, #100	; 0x64
 8000f94:	fbb0 f0f2 	udiv	r0, r0, r2
 8000f98:	1c46      	adds	r6, r0, #1
  }    
  __HAL_TIM_SetCompare(pHTim, channel, pulse);
 8000f9a:	b959      	cbnz	r1, 8000fb4 <L6206_Board_PwmSetFreq+0x64>
 8000f9c:	6366      	str	r6, [r4, #52]	; 0x34
  HAL_TIM_PWM_Start(pHTim, channel);
 8000f9e:	4618      	mov	r0, r3

}
 8000fa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_TIM_PWM_Start(pHTim, channel);
 8000fa4:	f001 bed6 	b.w	8002d54 <HAL_TIM_PWM_Start>
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1B;
 8000fa8:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <L6206_Board_PwmSetFreq+0x7c>)
 8000faa:	4a09      	ldr	r2, [pc, #36]	; (8000fd0 <L6206_Board_PwmSetFreq+0x80>)
 8000fac:	e7e2      	b.n	8000f74 <L6206_Board_PwmSetFreq+0x24>
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <L6206_Board_PwmSetFreq+0x84>)
 8000fb0:	4a07      	ldr	r2, [pc, #28]	; (8000fd0 <L6206_Board_PwmSetFreq+0x80>)
 8000fb2:	e7db      	b.n	8000f6c <L6206_Board_PwmSetFreq+0x1c>
  __HAL_TIM_SetCompare(pHTim, channel, pulse);
 8000fb4:	b109      	cbz	r1, 8000fba <L6206_Board_PwmSetFreq+0x6a>
 8000fb6:	63a6      	str	r6, [r4, #56]	; 0x38
 8000fb8:	e7f1      	b.n	8000f9e <L6206_Board_PwmSetFreq+0x4e>
 8000fba:	65e6      	str	r6, [r4, #92]	; 0x5c
 8000fbc:	e7ef      	b.n	8000f9e <L6206_Board_PwmSetFreq+0x4e>
 8000fbe:	bf00      	nop
 8000fc0:	40010000 	.word	0x40010000
 8000fc4:	200004d4 	.word	0x200004d4
 8000fc8:	20000414 	.word	0x20000414
 8000fcc:	20000454 	.word	0x20000454
 8000fd0:	40000800 	.word	0x40000800
 8000fd4:	20000494 	.word	0x20000494

08000fd8 <L6206_Board_PwmStop>:
 * 2 for input 1B, 3 for input 2B
 * @retval None
 **********************************************************/
void L6206_Board_PwmStop(uint8_t bridgeInput)
{
  switch (bridgeInput)
 8000fd8:	2803      	cmp	r0, #3
 8000fda:	d810      	bhi.n	8000ffe <L6206_Board_PwmStop+0x26>
 8000fdc:	e8df f000 	tbb	[pc, r0]
 8000fe0:	0c090602 	.word	0x0c090602
  {
    case 0:
       HAL_TIM_PWM_Stop(&hTimPwm1A,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1A);
 8000fe4:	2104      	movs	r1, #4
 8000fe6:	4806      	ldr	r0, [pc, #24]	; (8001000 <L6206_Board_PwmStop+0x28>)
      break;
    case  2:
      HAL_TIM_PWM_Stop(&hTimPwm1B,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1B);
      break;
    case  3:
      HAL_TIM_PWM_Stop(&hTimPwm2B,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2B);
 8000fe8:	f001 bece 	b.w	8002d88 <HAL_TIM_PWM_Stop>
      HAL_TIM_PWM_Stop(&hTimPwm2A,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2A);
 8000fec:	2100      	movs	r1, #0
 8000fee:	4805      	ldr	r0, [pc, #20]	; (8001004 <L6206_Board_PwmStop+0x2c>)
 8000ff0:	e7fa      	b.n	8000fe8 <L6206_Board_PwmStop+0x10>
      HAL_TIM_PWM_Stop(&hTimPwm1B,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1B);
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4804      	ldr	r0, [pc, #16]	; (8001008 <L6206_Board_PwmStop+0x30>)
 8000ff6:	e7f7      	b.n	8000fe8 <L6206_Board_PwmStop+0x10>
      HAL_TIM_PWM_Stop(&hTimPwm2B,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2B);
 8000ff8:	2104      	movs	r1, #4
 8000ffa:	4804      	ldr	r0, [pc, #16]	; (800100c <L6206_Board_PwmStop+0x34>)
 8000ffc:	e7f4      	b.n	8000fe8 <L6206_Board_PwmStop+0x10>
 8000ffe:	4770      	bx	lr
 8001000:	200004d4 	.word	0x200004d4
 8001004:	20000414 	.word	0x20000414
 8001008:	20000454 	.word	0x20000454
 800100c:	20000494 	.word	0x20000494

08001010 <L6474_GetMotorHandle>:
 8001010:	2000      	movs	r0, #0
 8001012:	4770      	bx	lr

08001014 <l647x_GetMotorHandle>:
 8001014:	2000      	movs	r0, #0
 8001016:	4770      	bx	lr

08001018 <l648x_GetMotorHandle>:
 8001018:	2000      	movs	r0, #0
 800101a:	4770      	bx	lr

0800101c <Powerstep01_GetMotorHandle>:
 800101c:	2000      	movs	r0, #0
 800101e:	4770      	bx	lr

08001020 <L6208_GetMotorHandle>:
 8001020:	2000      	movs	r0, #0
 8001022:	4770      	bx	lr

08001024 <Stspin220_GetMotorHandle>:
 8001024:	2000      	movs	r0, #0
 8001026:	4770      	bx	lr

08001028 <Stspin240_250_GetMotorHandle>:
/// Get motor handle for L6208
__weak motorDrv_t* L6208_GetMotorHandle(void){return ((motorDrv_t* )0);}
/// Get motor handle for STSPIN220
__weak motorDrv_t* Stspin220_GetMotorHandle(void){return ((motorDrv_t* )0);}
/// Get motor handle for STSPIN240
__weak motorDrv_t* Stspin240_250_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8001028:	2000      	movs	r0, #0
 800102a:	4770      	bx	lr

0800102c <BSP_MotorControl_ErrorHandler>:
 * @param[in] error number of the error
 * @retval None
 **********************************************************/
void BSP_MotorControl_ErrorHandler(uint16_t error)
{
  if ((motorDrvHandle != 0)&&(motorDrvHandle->ErrorHandler != 0))
 800102c:	4b03      	ldr	r3, [pc, #12]	; (800103c <BSP_MotorControl_ErrorHandler+0x10>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	b11b      	cbz	r3, 800103a <BSP_MotorControl_ErrorHandler+0xe>
 8001032:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001036:	b103      	cbz	r3, 800103a <BSP_MotorControl_ErrorHandler+0xe>
  {
    motorDrvHandle->ErrorHandler(error);
 8001038:	4718      	bx	r3
 800103a:	e7fe      	b.n	800103a <BSP_MotorControl_ErrorHandler+0xe>
 800103c:	20000360 	.word	0x20000360

08001040 <BSP_MotorControl_AttachErrorHandler>:
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachErrorHandler != 0))
 8001040:	4b04      	ldr	r3, [pc, #16]	; (8001054 <BSP_MotorControl_AttachErrorHandler+0x14>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	b113      	cbz	r3, 800104c <BSP_MotorControl_AttachErrorHandler+0xc>
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	b103      	cbz	r3, 800104c <BSP_MotorControl_AttachErrorHandler+0xc>
    motorDrvHandle->AttachErrorHandler(callback);
 800104a:	4718      	bx	r3
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(2);
 800104c:	f640 0002 	movw	r0, #2050	; 0x802
 8001050:	f7ff bfec 	b.w	800102c <BSP_MotorControl_ErrorHandler>
 8001054:	20000360 	.word	0x20000360

08001058 <BSP_MotorControl_AttachFlagInterrupt>:
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachFlagInterrupt != 0))
 8001058:	4b04      	ldr	r3, [pc, #16]	; (800106c <BSP_MotorControl_AttachFlagInterrupt+0x14>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	b113      	cbz	r3, 8001064 <BSP_MotorControl_AttachFlagInterrupt+0xc>
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	b103      	cbz	r3, 8001064 <BSP_MotorControl_AttachFlagInterrupt+0xc>
    motorDrvHandle->AttachFlagInterrupt(callback);
 8001062:	4718      	bx	r3
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(3);
 8001064:	f640 0003 	movw	r0, #2051	; 0x803
 8001068:	f7ff bfe0 	b.w	800102c <BSP_MotorControl_ErrorHandler>
 800106c:	20000360 	.word	0x20000360

08001070 <BSP_MotorControl_Init>:
 * @param[in] initDeviceParameters Initialization structure for one device
 * @retval None
 **********************************************************/
void BSP_MotorControl_Init(uint16_t id, void* initDeviceParameters)
{
  if ((motorDrvHandle != 0)&&(motorDrvHandle->Init != 0))
 8001070:	4b05      	ldr	r3, [pc, #20]	; (8001088 <BSP_MotorControl_Init+0x18>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	b11b      	cbz	r3, 800107e <BSP_MotorControl_Init+0xe>
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	b10b      	cbz	r3, 800107e <BSP_MotorControl_Init+0xe>
  {
    motorDrvHandle->Init(initDeviceParameters);
 800107a:	4608      	mov	r0, r1
 800107c:	4718      	bx	r3
  }  
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(0);
 800107e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001082:	f7ff bfd3 	b.w	800102c <BSP_MotorControl_ErrorHandler>
 8001086:	bf00      	nop
 8001088:	20000360 	.word	0x20000360

0800108c <BSP_MotorControl_GetDeviceState>:
 **********************************************************/
motorState_t BSP_MotorControl_GetDeviceState(uint8_t deviceId)
{
  motorState_t state = INACTIVE;

  if ((motorDrvHandle != 0)&&(motorDrvHandle->GetDeviceState != 0))
 800108c:	4b07      	ldr	r3, [pc, #28]	; (80010ac <BSP_MotorControl_GetDeviceState+0x20>)
 800108e:	681b      	ldr	r3, [r3, #0]
{
 8001090:	b510      	push	{r4, lr}
  if ((motorDrvHandle != 0)&&(motorDrvHandle->GetDeviceState != 0))
 8001092:	b123      	cbz	r3, 800109e <BSP_MotorControl_GetDeviceState+0x12>
 8001094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001096:	b113      	cbz	r3, 800109e <BSP_MotorControl_GetDeviceState+0x12>
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(9);
  }  
  return(state);   
}
 8001098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    state = motorDrvHandle->GetDeviceState(deviceId);
 800109c:	4718      	bx	r3
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(9);
 800109e:	f640 0009 	movw	r0, #2057	; 0x809
 80010a2:	f7ff ffc3 	bl	800102c <BSP_MotorControl_ErrorHandler>
}
 80010a6:	2008      	movs	r0, #8
 80010a8:	bd10      	pop	{r4, pc}
 80010aa:	bf00      	nop
 80010ac:	20000360 	.word	0x20000360

080010b0 <BSP_MotorControl_Run>:
 * @note For unidirectionnal brush DC motor, direction parameter 
 * has no effect
 **********************************************************/
void BSP_MotorControl_Run(uint8_t deviceId, motorDir_t direction)
{
  if ((motorDrvHandle != 0)&&(motorDrvHandle->Run != 0))
 80010b0:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <BSP_MotorControl_Run+0x14>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	b113      	cbz	r3, 80010bc <BSP_MotorControl_Run+0xc>
 80010b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010b8:	b103      	cbz	r3, 80010bc <BSP_MotorControl_Run+0xc>
  {
    motorDrvHandle->Run(deviceId, direction); 
 80010ba:	4718      	bx	r3
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(21);
 80010bc:	f640 0015 	movw	r0, #2069	; 0x815
 80010c0:	f7ff bfb4 	b.w	800102c <BSP_MotorControl_ErrorHandler>
 80010c4:	20000360 	.word	0x20000360

080010c8 <BSP_MotorControl_SetMaxSpeed>:
 * is executing a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool BSP_MotorControl_SetMaxSpeed(uint8_t deviceId, uint16_t newMaxSpeed)
{                                                  
  bool status = FALSE;
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetMaxSpeed != 0))
 80010c8:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <BSP_MotorControl_SetMaxSpeed+0x20>)
 80010ca:	681b      	ldr	r3, [r3, #0]
{                                                  
 80010cc:	b510      	push	{r4, lr}
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetMaxSpeed != 0))
 80010ce:	b123      	cbz	r3, 80010da <BSP_MotorControl_SetMaxSpeed+0x12>
 80010d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80010d2:	b113      	cbz	r3, 80010da <BSP_MotorControl_SetMaxSpeed+0x12>
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(26);
  }     
  return (status);  
}                                                     
 80010d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    status = motorDrvHandle->SetMaxSpeed(deviceId, newMaxSpeed);
 80010d8:	4718      	bx	r3
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(26);
 80010da:	f640 001a 	movw	r0, #2074	; 0x81a
 80010de:	f7ff ffa5 	bl	800102c <BSP_MotorControl_ErrorHandler>
}                                                     
 80010e2:	2000      	movs	r0, #0
 80010e4:	bd10      	pop	{r4, pc}
 80010e6:	bf00      	nop
 80010e8:	20000360 	.word	0x20000360

080010ec <BSP_MotorControl_CmdGetStatus>:
 * GetParam command (via the functions ReadStatusRegister or CmdGetParam).
 **********************************************************/
uint16_t BSP_MotorControl_CmdGetStatus(uint8_t deviceId)
{
  uint16_t status = 0;
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CmdGetStatus != 0))
 80010ec:	4b07      	ldr	r3, [pc, #28]	; (800110c <BSP_MotorControl_CmdGetStatus+0x20>)
 80010ee:	681b      	ldr	r3, [r3, #0]
{
 80010f0:	b510      	push	{r4, lr}
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CmdGetStatus != 0))
 80010f2:	b12b      	cbz	r3, 8001100 <BSP_MotorControl_CmdGetStatus+0x14>
 80010f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010f8:	b113      	cbz	r3, 8001100 <BSP_MotorControl_CmdGetStatus+0x14>
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(34);
  }      
  return (status);
}
 80010fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    status = motorDrvHandle->CmdGetStatus(deviceId);
 80010fe:	4718      	bx	r3
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(34);
 8001100:	f640 0022 	movw	r0, #2082	; 0x822
 8001104:	f7ff ff92 	bl	800102c <BSP_MotorControl_ErrorHandler>
}
 8001108:	2000      	movs	r0, #0
 800110a:	bd10      	pop	{r4, pc}
 800110c:	20000360 	.word	0x20000360

08001110 <BSP_MotorControl_SetDualFullBridgeConfig>:
 * for Stspin250, 0 only as no dual brush DC configuration is supported
 * @retval None
 **********************************************************/
void BSP_MotorControl_SetDualFullBridgeConfig(uint8_t config)
{	
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetDualFullBridgeConfig != 0))
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <BSP_MotorControl_SetDualFullBridgeConfig+0x18>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	b11b      	cbz	r3, 800111e <BSP_MotorControl_SetDualFullBridgeConfig+0xe>
 8001116:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800111a:	b103      	cbz	r3, 800111e <BSP_MotorControl_SetDualFullBridgeConfig+0xe>
  {
    motorDrvHandle->SetDualFullBridgeConfig(config);
 800111c:	4718      	bx	r3
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(65);
 800111e:	f640 0041 	movw	r0, #2113	; 0x841
 8001122:	f7ff bf83 	b.w	800102c <BSP_MotorControl_ErrorHandler>
 8001126:	bf00      	nop
 8001128:	20000360 	.word	0x20000360

0800112c <BSP_MotorControl_SetBridgeInputPwmFreq>:
 * @param[in] newFreq in Hz up to 100000Hz
 * @retval None
 **********************************************************/
void BSP_MotorControl_SetBridgeInputPwmFreq(uint8_t bridgeId, uint32_t newFreq)
{	
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetBridgeInputPwmFreq != 0))
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <BSP_MotorControl_SetBridgeInputPwmFreq+0x18>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	b11b      	cbz	r3, 800113a <BSP_MotorControl_SetBridgeInputPwmFreq+0xe>
 8001132:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001136:	b103      	cbz	r3, 800113a <BSP_MotorControl_SetBridgeInputPwmFreq+0xe>
  {
    motorDrvHandle->SetBridgeInputPwmFreq(bridgeId, newFreq);
 8001138:	4718      	bx	r3
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(67);
 800113a:	f640 0043 	movw	r0, #2115	; 0x843
 800113e:	f7ff bf75 	b.w	800102c <BSP_MotorControl_ErrorHandler>
 8001142:	bf00      	nop
 8001144:	20000360 	.word	0x20000360

08001148 <BSP_MotorControl_SetNbDevices>:
 * @retval TRUE if successfull, FALSE if failure, attempt 
 * to set a number of devices greater than MAX_NUMBER_OF_DEVICES
 **********************************************************/
bool BSP_MotorControl_SetNbDevices(uint16_t id, uint8_t nbDevices)
{
  MotorControlBoardId = id;
 8001148:	4b26      	ldr	r3, [pc, #152]	; (80011e4 <BSP_MotorControl_SetNbDevices+0x9c>)
{
 800114a:	b570      	push	{r4, r5, r6, lr}
  MotorControlBoardId = id;
 800114c:	8018      	strh	r0, [r3, #0]
  bool status = FALSE;
  if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6474)
 800114e:	f641 134a 	movw	r3, #6474	; 0x194a
{
 8001152:	460d      	mov	r5, r1
 8001154:	4c24      	ldr	r4, [pc, #144]	; (80011e8 <BSP_MotorControl_SetNbDevices+0xa0>)
  if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6474)
 8001156:	4298      	cmp	r0, r3
 8001158:	d10c      	bne.n	8001174 <BSP_MotorControl_SetNbDevices+0x2c>
  {
    motorDrvHandle = L6474_GetMotorHandle();
 800115a:	f7ff ff59 	bl	8001010 <L6474_GetMotorHandle>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01)
  {
    motorDrvHandle = Powerstep01_GetMotorHandle();
 800115e:	6020      	str	r0, [r4, #0]
  }  
  else
  {
    motorDrvHandle = 0;
  }
  if ((motorDrvHandle != 0)&&
 8001160:	6823      	ldr	r3, [r4, #0]
 8001162:	b3e3      	cbz	r3, 80011de <BSP_MotorControl_SetNbDevices+0x96>
      (motorDrvHandle->SetNbDevices != 0)&&
 8001164:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
  if ((motorDrvHandle != 0)&&
 8001168:	b3cb      	cbz	r3, 80011de <BSP_MotorControl_SetNbDevices+0x96>
      (motorDrvHandle->SetNbDevices != 0)&&
 800116a:	b3c5      	cbz	r5, 80011de <BSP_MotorControl_SetNbDevices+0x96>
      (nbDevices !=0))
  {
    status = motorDrvHandle->SetNbDevices(nbDevices);
 800116c:	4628      	mov	r0, r5
  }
  return (status);
}
 800116e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    status = motorDrvHandle->SetNbDevices(nbDevices);
 8001172:	4718      	bx	r3
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01)
 8001174:	2801      	cmp	r0, #1
 8001176:	d102      	bne.n	800117e <BSP_MotorControl_SetNbDevices+0x36>
    motorDrvHandle = Powerstep01_GetMotorHandle();
 8001178:	f7ff ff50 	bl	800101c <Powerstep01_GetMotorHandle>
 800117c:	e7ef      	b.n	800115e <BSP_MotorControl_SetNbDevices+0x16>
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6206)
 800117e:	f641 033e 	movw	r3, #6206	; 0x183e
 8001182:	4298      	cmp	r0, r3
 8001184:	d102      	bne.n	800118c <BSP_MotorControl_SetNbDevices+0x44>
    motorDrvHandle = L6206_GetMotorHandle();
 8001186:	f7ff fb6b 	bl	8000860 <L6206_GetMotorHandle>
 800118a:	e7e8      	b.n	800115e <BSP_MotorControl_SetNbDevices+0x16>
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6208)
 800118c:	f5b0 5fc2 	cmp.w	r0, #6208	; 0x1840
 8001190:	d102      	bne.n	8001198 <BSP_MotorControl_SetNbDevices+0x50>
    motorDrvHandle = L6208_GetMotorHandle();
 8001192:	f7ff ff45 	bl	8001020 <L6208_GetMotorHandle>
 8001196:	e7e2      	b.n	800115e <BSP_MotorControl_SetNbDevices+0x16>
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN220)
 8001198:	28dc      	cmp	r0, #220	; 0xdc
 800119a:	d102      	bne.n	80011a2 <BSP_MotorControl_SetNbDevices+0x5a>
    motorDrvHandle = Stspin220_GetMotorHandle();
 800119c:	f7ff ff42 	bl	8001024 <Stspin220_GetMotorHandle>
 80011a0:	e7dd      	b.n	800115e <BSP_MotorControl_SetNbDevices+0x16>
  else if ( (id == BSP_MOTOR_CONTROL_BOARD_ID_L6470) ||
 80011a2:	f641 1346 	movw	r3, #6470	; 0x1946
 80011a6:	4298      	cmp	r0, r3
 80011a8:	d003      	beq.n	80011b2 <BSP_MotorControl_SetNbDevices+0x6a>
 80011aa:	f641 1348 	movw	r3, #6472	; 0x1948
 80011ae:	4298      	cmp	r0, r3
 80011b0:	d102      	bne.n	80011b8 <BSP_MotorControl_SetNbDevices+0x70>
    motorDrvHandle = l647x_GetMotorHandle();
 80011b2:	f7ff ff2f 	bl	8001014 <l647x_GetMotorHandle>
 80011b6:	e7d2      	b.n	800115e <BSP_MotorControl_SetNbDevices+0x16>
  else if ( (id == BSP_MOTOR_CONTROL_BOARD_ID_L6480) ||
 80011b8:	f020 0302 	bic.w	r3, r0, #2
 80011bc:	f641 1250 	movw	r2, #6480	; 0x1950
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d102      	bne.n	80011ca <BSP_MotorControl_SetNbDevices+0x82>
    motorDrvHandle = l648x_GetMotorHandle();
 80011c4:	f7ff ff28 	bl	8001018 <l648x_GetMotorHandle>
 80011c8:	e7c9      	b.n	800115e <BSP_MotorControl_SetNbDevices+0x16>
  else if ((id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN240)||
 80011ca:	28f0      	cmp	r0, #240	; 0xf0
 80011cc:	d001      	beq.n	80011d2 <BSP_MotorControl_SetNbDevices+0x8a>
 80011ce:	28fa      	cmp	r0, #250	; 0xfa
 80011d0:	d102      	bne.n	80011d8 <BSP_MotorControl_SetNbDevices+0x90>
    motorDrvHandle = Stspin240_250_GetMotorHandle();
 80011d2:	f7ff ff29 	bl	8001028 <Stspin240_250_GetMotorHandle>
 80011d6:	e7c2      	b.n	800115e <BSP_MotorControl_SetNbDevices+0x16>
    motorDrvHandle = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	6023      	str	r3, [r4, #0]
 80011dc:	e7c0      	b.n	8001160 <BSP_MotorControl_SetNbDevices+0x18>
}
 80011de:	2000      	movs	r0, #0
 80011e0:	bd70      	pop	{r4, r5, r6, pc}
 80011e2:	bf00      	nop
 80011e4:	2000035e 	.word	0x2000035e
 80011e8:	20000360 	.word	0x20000360

080011ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ec:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <HAL_InitTick+0x3c>)
{
 80011f0:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011f2:	4a0e      	ldr	r2, [pc, #56]	; (800122c <HAL_InitTick+0x40>)
 80011f4:	7818      	ldrb	r0, [r3, #0]
 80011f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fa:	fbb3 f3f0 	udiv	r3, r3, r0
 80011fe:	6810      	ldr	r0, [r2, #0]
 8001200:	fbb0 f0f3 	udiv	r0, r0, r3
 8001204:	f000 f8aa 	bl	800135c <HAL_SYSTICK_Config>
 8001208:	4604      	mov	r4, r0
 800120a:	b958      	cbnz	r0, 8001224 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800120c:	2d0f      	cmp	r5, #15
 800120e:	d809      	bhi.n	8001224 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001210:	4602      	mov	r2, r0
 8001212:	4629      	mov	r1, r5
 8001214:	f04f 30ff 	mov.w	r0, #4294967295
 8001218:	f000 f84e 	bl	80012b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800121c:	4b04      	ldr	r3, [pc, #16]	; (8001230 <HAL_InitTick+0x44>)
 800121e:	4620      	mov	r0, r4
 8001220:	601d      	str	r5, [r3, #0]
 8001222:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001224:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001226:	bd38      	pop	{r3, r4, r5, pc}
 8001228:	20000164 	.word	0x20000164
 800122c:	2000016c 	.word	0x2000016c
 8001230:	20000168 	.word	0x20000168

08001234 <HAL_Init>:
{
 8001234:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001236:	2003      	movs	r0, #3
 8001238:	f000 f82c 	bl	8001294 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800123c:	2000      	movs	r0, #0
 800123e:	f7ff ffd5 	bl	80011ec <HAL_InitTick>
  HAL_MspInit();
 8001242:	f003 f8b5 	bl	80043b0 <HAL_MspInit>
}
 8001246:	2000      	movs	r0, #0
 8001248:	bd08      	pop	{r3, pc}
	...

0800124c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800124c:	4a03      	ldr	r2, [pc, #12]	; (800125c <HAL_IncTick+0x10>)
 800124e:	4b04      	ldr	r3, [pc, #16]	; (8001260 <HAL_IncTick+0x14>)
 8001250:	6811      	ldr	r1, [r2, #0]
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	440b      	add	r3, r1
 8001256:	6013      	str	r3, [r2, #0]
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000514 	.word	0x20000514
 8001260:	20000164 	.word	0x20000164

08001264 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001264:	4b01      	ldr	r3, [pc, #4]	; (800126c <HAL_GetTick+0x8>)
 8001266:	6818      	ldr	r0, [r3, #0]
}
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	20000514 	.word	0x20000514

08001270 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001270:	b538      	push	{r3, r4, r5, lr}
 8001272:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001274:	f7ff fff6 	bl	8001264 <HAL_GetTick>
 8001278:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800127a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800127c:	bf1e      	ittt	ne
 800127e:	4b04      	ldrne	r3, [pc, #16]	; (8001290 <HAL_Delay+0x20>)
 8001280:	781b      	ldrbne	r3, [r3, #0]
 8001282:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001284:	f7ff ffee 	bl	8001264 <HAL_GetTick>
 8001288:	1b40      	subs	r0, r0, r5
 800128a:	4284      	cmp	r4, r0
 800128c:	d8fa      	bhi.n	8001284 <HAL_Delay+0x14>
  {
  }
}
 800128e:	bd38      	pop	{r3, r4, r5, pc}
 8001290:	20000164 	.word	0x20000164

08001294 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001294:	4a07      	ldr	r2, [pc, #28]	; (80012b4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001296:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001298:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800129a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80012a2:	041b      	lsls	r3, r3, #16
 80012a4:	0c1b      	lsrs	r3, r3, #16
 80012a6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80012ae:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80012b0:	60d3      	str	r3, [r2, #12]
 80012b2:	4770      	bx	lr
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b8:	4b19      	ldr	r3, [pc, #100]	; (8001320 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ba:	b530      	push	{r4, r5, lr}
 80012bc:	68dc      	ldr	r4, [r3, #12]
 80012be:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c8:	2b04      	cmp	r3, #4
 80012ca:	bf28      	it	cs
 80012cc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ce:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012d4:	bf8c      	ite	hi
 80012d6:	3c03      	subhi	r4, #3
 80012d8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012da:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) < 0)
 80012de:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e0:	f103 33ff 	add.w	r3, r3, #4294967295
 80012e4:	ea01 0103 	and.w	r1, r1, r3
 80012e8:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ec:	fa05 f404 	lsl.w	r4, r5, r4
 80012f0:	f104 34ff 	add.w	r4, r4, #4294967295
 80012f4:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f8:	ea42 0201 	orr.w	r2, r2, r1
 80012fc:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) < 0)
 8001300:	da05      	bge.n	800130e <HAL_NVIC_SetPriority+0x56>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001302:	f000 000f 	and.w	r0, r0, #15
 8001306:	b2d2      	uxtb	r2, r2
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <HAL_NVIC_SetPriority+0x6c>)
 800130a:	541a      	strb	r2, [r3, r0]
 800130c:	bd30      	pop	{r4, r5, pc}
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001312:	b2d2      	uxtb	r2, r2
 8001314:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001318:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 800131c:	bd30      	pop	{r4, r5, pc}
 800131e:	bf00      	nop
 8001320:	e000ed00 	.word	0xe000ed00
 8001324:	e000ed14 	.word	0xe000ed14

08001328 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001328:	0942      	lsrs	r2, r0, #5
 800132a:	2301      	movs	r3, #1
 800132c:	f000 001f 	and.w	r0, r0, #31
 8001330:	fa03 f000 	lsl.w	r0, r3, r0
 8001334:	4b01      	ldr	r3, [pc, #4]	; (800133c <HAL_NVIC_EnableIRQ+0x14>)
 8001336:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800133a:	4770      	bx	lr
 800133c:	e000e100 	.word	0xe000e100

08001340 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001340:	0943      	lsrs	r3, r0, #5
 8001342:	2201      	movs	r2, #1
 8001344:	f000 001f 	and.w	r0, r0, #31
 8001348:	3320      	adds	r3, #32
 800134a:	fa02 f000 	lsl.w	r0, r2, r0
 800134e:	4a02      	ldr	r2, [pc, #8]	; (8001358 <HAL_NVIC_DisableIRQ+0x18>)
 8001350:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	e000e100 	.word	0xe000e100

0800135c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800135c:	3801      	subs	r0, #1
 800135e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001362:	d20a      	bcs.n	800137a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001364:	4b06      	ldr	r3, [pc, #24]	; (8001380 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001366:	21f0      	movs	r1, #240	; 0xf0
 8001368:	4a06      	ldr	r2, [pc, #24]	; (8001384 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800136a:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800136c:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001372:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001374:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800137a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000e010 	.word	0xe000e010
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <HAL_NVIC_ClearPendingIRQ>:
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001388:	0943      	lsrs	r3, r0, #5
 800138a:	2201      	movs	r2, #1
 800138c:	f000 001f 	and.w	r0, r0, #31
 8001390:	3360      	adds	r3, #96	; 0x60
 8001392:	fa02 f000 	lsl.w	r0, r2, r0
 8001396:	4a02      	ldr	r2, [pc, #8]	; (80013a0 <HAL_NVIC_ClearPendingIRQ+0x18>)
 8001398:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	e000e100 	.word	0xe000e100

080013a4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80013a4:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80013a6:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	bf0c      	ite	eq
 80013ac:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80013b0:	f022 0204 	bicne.w	r2, r2, #4
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	4770      	bx	lr
 80013b8:	e000e010 	.word	0xe000e010

080013bc <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80013bc:	4770      	bx	lr

080013be <HAL_SYSTICK_IRQHandler>:
{
 80013be:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80013c0:	f7ff fffc 	bl	80013bc <HAL_SYSTICK_Callback>
 80013c4:	bd08      	pop	{r3, pc}
	...

080013c8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80013c8:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 80013ca:	4604      	mov	r4, r0
 80013cc:	b908      	cbnz	r0, 80013d2 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 80013ce:	2001      	movs	r0, #1
 80013d0:	bd10      	pop	{r4, pc}
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if(hcrc->State == HAL_CRC_STATE_RESET)
 80013d2:	7f43      	ldrb	r3, [r0, #29]
 80013d4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80013d8:	b913      	cbnz	r3, 80013e0 <HAL_CRC_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80013da:	7702      	strb	r2, [r0, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80013dc:	f002 fb7a 	bl	8003ad4 <HAL_CRC_MspInit>
  }
  
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80013e0:	2302      	movs	r3, #2
 80013e2:	7763      	strb	r3, [r4, #29]
  
  /* check whether or not non-default generating polynomial has been 
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse)); 
  if(hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80013e4:	7923      	ldrb	r3, [r4, #4]
 80013e6:	b9e3      	cbnz	r3, 8001422 <HAL_CRC_Init+0x5a>
  {
    /* initialize IP with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 80013e8:	6823      	ldr	r3, [r4, #0]
 80013ea:	4a13      	ldr	r2, [pc, #76]	; (8001438 <HAL_CRC_Init+0x70>)
 80013ec:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	f022 0218 	bic.w	r2, r2, #24
 80013f4:	609a      	str	r2, [r3, #8]
  }
  
  /* check whether or not non-default CRC initial value has been 
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if(hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80013f6:	7962      	ldrb	r2, [r4, #5]
 80013f8:	6823      	ldr	r3, [r4, #0]
 80013fa:	b9d2      	cbnz	r2, 8001432 <HAL_CRC_Init+0x6a>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 80013fc:	f04f 32ff 	mov.w	r2, #4294967295
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001400:	611a      	str	r2, [r3, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
  
  /* Return function status */
  return HAL_OK;
 8001402:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 8001404:	689a      	ldr	r2, [r3, #8]
 8001406:	6961      	ldr	r1, [r4, #20]
 8001408:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800140c:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 800140e:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 8001410:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 8001412:	689a      	ldr	r2, [r3, #8]
 8001414:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001418:	430a      	orrs	r2, r1
 800141a:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800141c:	2301      	movs	r3, #1
 800141e:	7763      	strb	r3, [r4, #29]
}
 8001420:	bd10      	pop	{r4, pc}
    if(HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001422:	68e2      	ldr	r2, [r4, #12]
 8001424:	4620      	mov	r0, r4
 8001426:	68a1      	ldr	r1, [r4, #8]
 8001428:	f000 f808 	bl	800143c <HAL_CRCEx_Polynomial_Set>
 800142c:	2800      	cmp	r0, #0
 800142e:	d0e2      	beq.n	80013f6 <HAL_CRC_Init+0x2e>
 8001430:	e7cd      	b.n	80013ce <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001432:	6922      	ldr	r2, [r4, #16]
 8001434:	e7e4      	b.n	8001400 <HAL_CRC_Init+0x38>
 8001436:	bf00      	nop
 8001438:	04c11db7 	.word	0x04c11db7

0800143c <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800143c:	231f      	movs	r3, #31
{
 800143e:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & ((uint32_t)(0x1) << msb)) == 0) && (msb-- > 0))
 8001440:	fa21 f403 	lsr.w	r4, r1, r3
 8001444:	07e4      	lsls	r4, r4, #31
 8001446:	d40a      	bmi.n	800145e <HAL_CRCEx_Polynomial_Set+0x22>
 8001448:	f113 33ff 	adds.w	r3, r3, #4294967295
 800144c:	d2f8      	bcs.n	8001440 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 800144e:	2a10      	cmp	r2, #16
 8001450:	d003      	beq.n	800145a <HAL_CRCEx_Polynomial_Set+0x1e>
 8001452:	2a18      	cmp	r2, #24
 8001454:	d001      	beq.n	800145a <HAL_CRCEx_Polynomial_Set+0x1e>
 8001456:	2a08      	cmp	r2, #8
 8001458:	d10b      	bne.n	8001472 <HAL_CRCEx_Polynomial_Set+0x36>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
      { 
        return  HAL_ERROR;
 800145a:	2001      	movs	r0, #1
 800145c:	bd10      	pop	{r4, pc}
  switch (PolyLength)
 800145e:	2a10      	cmp	r2, #16
 8001460:	d010      	beq.n	8001484 <HAL_CRCEx_Polynomial_Set+0x48>
 8001462:	2a18      	cmp	r2, #24
 8001464:	d003      	beq.n	800146e <HAL_CRCEx_Polynomial_Set+0x32>
 8001466:	2a08      	cmp	r2, #8
 8001468:	d103      	bne.n	8001472 <HAL_CRCEx_Polynomial_Set+0x36>
      {
        return  HAL_ERROR;
      }
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800146a:	2b0f      	cmp	r3, #15
 800146c:	e000      	b.n	8001470 <HAL_CRCEx_Polynomial_Set+0x34>
      if (msb >= HAL_CRC_LENGTH_7B)
 800146e:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8001470:	d8f3      	bhi.n	800145a <HAL_CRCEx_Polynomial_Set+0x1e>
  default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 8001472:	6800      	ldr	r0, [r0, #0]
 8001474:	6141      	str	r1, [r0, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 8001476:	6883      	ldr	r3, [r0, #8]
 8001478:	f023 0318 	bic.w	r3, r3, #24
 800147c:	431a      	orrs	r2, r3
 800147e:	6082      	str	r2, [r0, #8]
  
  /* Return function status */
  return HAL_OK;
 8001480:	2000      	movs	r0, #0
 8001482:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8001484:	2b07      	cmp	r3, #7
 8001486:	e7f3      	b.n	8001470 <HAL_CRCEx_Polynomial_Set+0x34>

08001488 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001488:	6803      	ldr	r3, [r0, #0]
 800148a:	2118      	movs	r1, #24
 800148c:	b2da      	uxtb	r2, r3
 800148e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001492:	3a10      	subs	r2, #16
 8001494:	f023 0303 	bic.w	r3, r3, #3
 8001498:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800149c:	4904      	ldr	r1, [pc, #16]	; (80014b0 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 800149e:	2a03      	cmp	r2, #3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80014a0:	5c89      	ldrb	r1, [r1, r2]
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80014a2:	bf88      	it	hi
 80014a4:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80014a6:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80014a8:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 80014aa:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	08007bfd 	.word	0x08007bfd

080014b4 <HAL_DMA_Init>:
{
 80014b4:	b570      	push	{r4, r5, r6, lr}
 80014b6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80014b8:	f7ff fed4 	bl	8001264 <HAL_GetTick>
 80014bc:	4605      	mov	r5, r0
  if(hdma == NULL)
 80014be:	2c00      	cmp	r4, #0
 80014c0:	d071      	beq.n	80015a6 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 80014c2:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 80014c4:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 80014c6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80014ca:	2302      	movs	r3, #2
 80014cc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80014d0:	6813      	ldr	r3, [r2, #0]
 80014d2:	f023 0301 	bic.w	r3, r3, #1
 80014d6:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014d8:	6821      	ldr	r1, [r4, #0]
 80014da:	680b      	ldr	r3, [r1, #0]
 80014dc:	07d8      	lsls	r0, r3, #31
 80014de:	d43c      	bmi.n	800155a <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 80014e0:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014e2:	4d32      	ldr	r5, [pc, #200]	; (80015ac <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014e4:	6862      	ldr	r2, [r4, #4]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014e6:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014e8:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014ea:	69a0      	ldr	r0, [r4, #24]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014ec:	4313      	orrs	r3, r2
 80014ee:	68e2      	ldr	r2, [r4, #12]
 80014f0:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014f2:	6922      	ldr	r2, [r4, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	6962      	ldr	r2, [r4, #20]
 80014f8:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014fa:	69e2      	ldr	r2, [r4, #28]
 80014fc:	4303      	orrs	r3, r0
 80014fe:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8001500:	6a22      	ldr	r2, [r4, #32]
 8001502:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001504:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001506:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001508:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800150c:	bf01      	itttt	eq
 800150e:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8001510:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8001512:	4335      	orreq	r5, r6
 8001514:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001516:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 8001518:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 800151a:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800151c:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8001520:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001524:	d10b      	bne.n	800153e <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8001526:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001528:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 800152a:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800152c:	b13d      	cbz	r5, 800153e <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800152e:	b9f8      	cbnz	r0, 8001570 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8001530:	2a01      	cmp	r2, #1
 8001532:	d02d      	beq.n	8001590 <HAL_DMA_Init+0xdc>
 8001534:	d301      	bcc.n	800153a <HAL_DMA_Init+0x86>
 8001536:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001538:	d101      	bne.n	800153e <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800153a:	01ea      	lsls	r2, r5, #7
 800153c:	d42b      	bmi.n	8001596 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 800153e:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001540:	4620      	mov	r0, r4
 8001542:	f7ff ffa1 	bl	8001488 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001546:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001548:	233f      	movs	r3, #63	; 0x3f
 800154a:	4093      	lsls	r3, r2
 800154c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800154e:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001550:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001552:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001554:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001558:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800155a:	f7ff fe83 	bl	8001264 <HAL_GetTick>
 800155e:	1b40      	subs	r0, r0, r5
 8001560:	2805      	cmp	r0, #5
 8001562:	d9b9      	bls.n	80014d8 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001564:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001566:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001568:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800156a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800156e:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001570:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8001574:	d113      	bne.n	800159e <HAL_DMA_Init+0xea>
    switch (tmp)
 8001576:	2a03      	cmp	r2, #3
 8001578:	d8e1      	bhi.n	800153e <HAL_DMA_Init+0x8a>
 800157a:	a001      	add	r0, pc, #4	; (adr r0, 8001580 <HAL_DMA_Init+0xcc>)
 800157c:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8001580:	08001597 	.word	0x08001597
 8001584:	0800153b 	.word	0x0800153b
 8001588:	08001597 	.word	0x08001597
 800158c:	08001591 	.word	0x08001591
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001590:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8001594:	d1d3      	bne.n	800153e <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001596:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8001598:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800159a:	6563      	str	r3, [r4, #84]	; 0x54
 800159c:	e7e5      	b.n	800156a <HAL_DMA_Init+0xb6>
    switch (tmp)
 800159e:	2a02      	cmp	r2, #2
 80015a0:	d9f9      	bls.n	8001596 <HAL_DMA_Init+0xe2>
 80015a2:	2a03      	cmp	r2, #3
 80015a4:	e7c8      	b.n	8001538 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 80015a6:	2001      	movs	r0, #1
 80015a8:	bd70      	pop	{r4, r5, r6, pc}
 80015aa:	bf00      	nop
 80015ac:	e010803f 	.word	0xe010803f

080015b0 <HAL_DMA_DeInit>:
{
 80015b0:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 80015b2:	4605      	mov	r5, r0
 80015b4:	b320      	cbz	r0, 8001600 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80015b6:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 80015ba:	b2e4      	uxtb	r4, r4
 80015bc:	2c02      	cmp	r4, #2
 80015be:	d01d      	beq.n	80015fc <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 80015c0:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
 80015c2:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	f022 0201 	bic.w	r2, r2, #1
 80015ca:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80015cc:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 80015ce:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 80015d0:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 80015d2:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 80015d4:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 80015d6:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80015d8:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015da:	f7ff ff55 	bl	8001488 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015de:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80015e0:	233f      	movs	r3, #63	; 0x3f
 80015e2:	4093      	lsls	r3, r2
 80015e4:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015e6:	656c      	str	r4, [r5, #84]	; 0x54
  hdma->XferCpltCallback = NULL;
 80015e8:	63ec      	str	r4, [r5, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80015ea:	642c      	str	r4, [r5, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80015ec:	646c      	str	r4, [r5, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80015ee:	64ac      	str	r4, [r5, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80015f0:	64ec      	str	r4, [r5, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80015f2:	652c      	str	r4, [r5, #80]	; 0x50
  hdma->State = HAL_DMA_STATE_RESET;
 80015f4:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 80015f8:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
    return HAL_BUSY;
 80015fc:	4620      	mov	r0, r4
}
 80015fe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001600:	2001      	movs	r0, #1
 8001602:	bd38      	pop	{r3, r4, r5, pc}

08001604 <HAL_DMA_Start_IT>:
{
 8001604:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8001606:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800160a:	2c01      	cmp	r4, #1
 800160c:	d035      	beq.n	800167a <HAL_DMA_Start_IT+0x76>
 800160e:	2401      	movs	r4, #1
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001610:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8001612:	2500      	movs	r5, #0
  __HAL_LOCK(hdma);
 8001614:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001618:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 800161c:	2c01      	cmp	r4, #1
 800161e:	f04f 0402 	mov.w	r4, #2
 8001622:	d128      	bne.n	8001676 <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001624:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001628:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800162a:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800162c:	6825      	ldr	r5, [r4, #0]
 800162e:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8001632:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8001634:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001636:	6883      	ldr	r3, [r0, #8]
 8001638:	2b40      	cmp	r3, #64	; 0x40
 800163a:	d119      	bne.n	8001670 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 800163c:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 800163e:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001640:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001642:	233f      	movs	r3, #63	; 0x3f
 8001644:	4093      	lsls	r3, r2
 8001646:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001648:	6823      	ldr	r3, [r4, #0]
 800164a:	f043 0316 	orr.w	r3, r3, #22
 800164e:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001650:	6963      	ldr	r3, [r4, #20]
 8001652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001656:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8001658:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800165a:	b11b      	cbz	r3, 8001664 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 800165c:	6823      	ldr	r3, [r4, #0]
 800165e:	f043 0308 	orr.w	r3, r3, #8
 8001662:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001664:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001666:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6023      	str	r3, [r4, #0]
 800166e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 8001670:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8001672:	60e2      	str	r2, [r4, #12]
 8001674:	e7e4      	b.n	8001640 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8001676:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 800167a:	2002      	movs	r0, #2
}
 800167c:	bd70      	pop	{r4, r5, r6, pc}

0800167e <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800167e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001682:	2b02      	cmp	r3, #2
 8001684:	d003      	beq.n	800168e <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001686:	2380      	movs	r3, #128	; 0x80
 8001688:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800168a:	2001      	movs	r0, #1
 800168c:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 800168e:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8001690:	2305      	movs	r3, #5
 8001692:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  return HAL_OK;
 8001696:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8001698:	6813      	ldr	r3, [r2, #0]
 800169a:	f023 0301 	bic.w	r3, r3, #1
 800169e:	6013      	str	r3, [r2, #0]
}
 80016a0:	4770      	bx	lr
	...

080016a4 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 80016a4:	2300      	movs	r3, #0
{
 80016a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 80016a8:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016aa:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 80016ac:	4b59      	ldr	r3, [pc, #356]	; (8001814 <HAL_DMA_IRQHandler+0x170>)
{
 80016ae:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016b0:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 80016b2:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016b4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80016b6:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016b8:	409a      	lsls	r2, r3
 80016ba:	4216      	tst	r6, r2
 80016bc:	d00c      	beq.n	80016d8 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80016be:	6801      	ldr	r1, [r0, #0]
 80016c0:	6808      	ldr	r0, [r1, #0]
 80016c2:	0740      	lsls	r0, r0, #29
 80016c4:	d508      	bpl.n	80016d8 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80016c6:	6808      	ldr	r0, [r1, #0]
 80016c8:	f020 0004 	bic.w	r0, r0, #4
 80016cc:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80016ce:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80016d0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80016d2:	f042 0201 	orr.w	r2, r2, #1
 80016d6:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80016d8:	2201      	movs	r2, #1
 80016da:	409a      	lsls	r2, r3
 80016dc:	4216      	tst	r6, r2
 80016de:	d008      	beq.n	80016f2 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80016e0:	6821      	ldr	r1, [r4, #0]
 80016e2:	6949      	ldr	r1, [r1, #20]
 80016e4:	0609      	lsls	r1, r1, #24
 80016e6:	d504      	bpl.n	80016f2 <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80016e8:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80016ea:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80016ec:	f042 0202 	orr.w	r2, r2, #2
 80016f0:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80016f2:	2204      	movs	r2, #4
 80016f4:	409a      	lsls	r2, r3
 80016f6:	4216      	tst	r6, r2
 80016f8:	d008      	beq.n	800170c <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80016fa:	6821      	ldr	r1, [r4, #0]
 80016fc:	6809      	ldr	r1, [r1, #0]
 80016fe:	0788      	lsls	r0, r1, #30
 8001700:	d504      	bpl.n	800170c <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001702:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001704:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001706:	f042 0204 	orr.w	r2, r2, #4
 800170a:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800170c:	2210      	movs	r2, #16
 800170e:	409a      	lsls	r2, r3
 8001710:	4216      	tst	r6, r2
 8001712:	d010      	beq.n	8001736 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001714:	6823      	ldr	r3, [r4, #0]
 8001716:	6819      	ldr	r1, [r3, #0]
 8001718:	0709      	lsls	r1, r1, #28
 800171a:	d50c      	bpl.n	8001736 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800171c:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	0350      	lsls	r0, r2, #13
 8001722:	d535      	bpl.n	8001790 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	0319      	lsls	r1, r3, #12
 8001728:	d401      	bmi.n	800172e <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 800172a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800172c:	e000      	b.n	8001730 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800172e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8001730:	b10b      	cbz	r3, 8001736 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8001732:	4620      	mov	r0, r4
 8001734:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001736:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001738:	2220      	movs	r2, #32
 800173a:	408a      	lsls	r2, r1
 800173c:	4216      	tst	r6, r2
 800173e:	d038      	beq.n	80017b2 <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001740:	6823      	ldr	r3, [r4, #0]
 8001742:	6818      	ldr	r0, [r3, #0]
 8001744:	06c6      	lsls	r6, r0, #27
 8001746:	d534      	bpl.n	80017b2 <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001748:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800174a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800174e:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001750:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001752:	d125      	bne.n	80017a0 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001754:	f022 0216 	bic.w	r2, r2, #22
 8001758:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800175a:	695a      	ldr	r2, [r3, #20]
 800175c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001760:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001762:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001764:	b90a      	cbnz	r2, 800176a <HAL_DMA_IRQHandler+0xc6>
 8001766:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001768:	b11a      	cbz	r2, 8001772 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	f022 0208 	bic.w	r2, r2, #8
 8001770:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001772:	233f      	movs	r3, #63	; 0x3f
 8001774:	408b      	lsls	r3, r1
 8001776:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8001778:	2300      	movs	r3, #0
 800177a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800177e:	2301      	movs	r3, #1
 8001780:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8001784:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8001786:	b10b      	cbz	r3, 800178c <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8001788:	4620      	mov	r0, r4
 800178a:	4798      	blx	r3
}
 800178c:	b003      	add	sp, #12
 800178e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	05d2      	lsls	r2, r2, #23
 8001794:	d4c9      	bmi.n	800172a <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	f022 0208 	bic.w	r2, r2, #8
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	e7c4      	b.n	800172a <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017a0:	0350      	lsls	r0, r2, #13
 80017a2:	d528      	bpl.n	80017f6 <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	0319      	lsls	r1, r3, #12
 80017a8:	d432      	bmi.n	8001810 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 80017aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 80017ac:	b10b      	cbz	r3, 80017b2 <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 80017ae:	4620      	mov	r0, r4
 80017b0:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80017b2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0e9      	beq.n	800178c <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80017b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80017ba:	07da      	lsls	r2, r3, #31
 80017bc:	d519      	bpl.n	80017f2 <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 80017be:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 80017c0:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 80017c2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80017c6:	6813      	ldr	r3, [r2, #0]
 80017c8:	f023 0301 	bic.w	r3, r3, #1
 80017cc:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 80017ce:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80017d2:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 80017d6:	9b01      	ldr	r3, [sp, #4]
 80017d8:	3301      	adds	r3, #1
 80017da:	429f      	cmp	r7, r3
 80017dc:	9301      	str	r3, [sp, #4]
 80017de:	d302      	bcc.n	80017e6 <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80017e0:	6813      	ldr	r3, [r2, #0]
 80017e2:	07db      	lsls	r3, r3, #31
 80017e4:	d4f7      	bmi.n	80017d6 <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 80017e6:	2300      	movs	r3, #0
 80017e8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80017ec:	2301      	movs	r3, #1
 80017ee:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80017f2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80017f4:	e7c7      	b.n	8001786 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80017fc:	d108      	bne.n	8001810 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017fe:	6819      	ldr	r1, [r3, #0]
 8001800:	f021 0110 	bic.w	r1, r1, #16
 8001804:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001806:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8001808:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800180c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8001810:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001812:	e7cb      	b.n	80017ac <HAL_DMA_IRQHandler+0x108>
 8001814:	2000016c 	.word	0x2000016c

08001818 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800181c:	680b      	ldr	r3, [r1, #0]
{
 800181e:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001820:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80019e4 <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001824:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001826:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001828:	4a6c      	ldr	r2, [pc, #432]	; (80019dc <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800182a:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 80019e8 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 800182e:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001832:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8001834:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001838:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 800183c:	45b6      	cmp	lr, r6
 800183e:	f040 80b3 	bne.w	80019a8 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001842:	684c      	ldr	r4, [r1, #4]
 8001844:	f024 0710 	bic.w	r7, r4, #16
 8001848:	2f02      	cmp	r7, #2
 800184a:	d116      	bne.n	800187a <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 800184c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001850:	f003 0b07 	and.w	fp, r3, #7
 8001854:	f04f 0c0f 	mov.w	ip, #15
 8001858:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 800185c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8001860:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001864:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001868:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800186c:	690d      	ldr	r5, [r1, #16]
 800186e:	fa05 f50b 	lsl.w	r5, r5, fp
 8001872:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8001876:	f8ca 5020 	str.w	r5, [sl, #32]
 800187a:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800187e:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001880:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001884:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001888:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800188c:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800188e:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001892:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001894:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001896:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800189a:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 800189e:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018a2:	d811      	bhi.n	80018c8 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80018a4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80018a6:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 80018aa:	68cf      	ldr	r7, [r1, #12]
 80018ac:	fa07 fc0a 	lsl.w	ip, r7, sl
 80018b0:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80018b4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80018b6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018b8:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80018bc:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80018c0:	409f      	lsls	r7, r3
 80018c2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80018c6:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80018c8:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80018ca:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80018cc:	688f      	ldr	r7, [r1, #8]
 80018ce:	fa07 f70a 	lsl.w	r7, r7, sl
 80018d2:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80018d4:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018d6:	00e5      	lsls	r5, r4, #3
 80018d8:	d566      	bpl.n	80019a8 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018da:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 80018de:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80018e2:	f003 0e03 	and.w	lr, r3, #3
 80018e6:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ea:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 80018ee:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80018f2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f6:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 80018fa:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 80018fe:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8001902:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8001906:	9503      	str	r5, [sp, #12]
 8001908:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800190a:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 800190e:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001912:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001916:	4d32      	ldr	r5, [pc, #200]	; (80019e0 <HAL_GPIO_Init+0x1c8>)
 8001918:	42a8      	cmp	r0, r5
 800191a:	d04c      	beq.n	80019b6 <HAL_GPIO_Init+0x19e>
 800191c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001920:	42a8      	cmp	r0, r5
 8001922:	d04a      	beq.n	80019ba <HAL_GPIO_Init+0x1a2>
 8001924:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001928:	42a8      	cmp	r0, r5
 800192a:	d048      	beq.n	80019be <HAL_GPIO_Init+0x1a6>
 800192c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001930:	42a8      	cmp	r0, r5
 8001932:	d046      	beq.n	80019c2 <HAL_GPIO_Init+0x1aa>
 8001934:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001938:	42a8      	cmp	r0, r5
 800193a:	d044      	beq.n	80019c6 <HAL_GPIO_Init+0x1ae>
 800193c:	4548      	cmp	r0, r9
 800193e:	d044      	beq.n	80019ca <HAL_GPIO_Init+0x1b2>
 8001940:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001944:	42a8      	cmp	r0, r5
 8001946:	d042      	beq.n	80019ce <HAL_GPIO_Init+0x1b6>
 8001948:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800194c:	42a8      	cmp	r0, r5
 800194e:	d040      	beq.n	80019d2 <HAL_GPIO_Init+0x1ba>
 8001950:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001954:	42a8      	cmp	r0, r5
 8001956:	d03e      	beq.n	80019d6 <HAL_GPIO_Init+0x1be>
 8001958:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800195c:	42a8      	cmp	r0, r5
 800195e:	bf14      	ite	ne
 8001960:	250a      	movne	r5, #10
 8001962:	2509      	moveq	r5, #9
 8001964:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001968:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800196c:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8001970:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8001972:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 8001976:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001978:	bf0c      	ite	eq
 800197a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800197c:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800197e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8001982:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8001984:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8001986:	bf0c      	ite	eq
 8001988:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800198a:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800198c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8001990:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8001992:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001994:	bf0c      	ite	eq
 8001996:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001998:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800199a:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 800199c:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800199e:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 80019a0:	bf54      	ite	pl
 80019a2:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80019a4:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80019a6:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80019a8:	3301      	adds	r3, #1
 80019aa:	2b10      	cmp	r3, #16
 80019ac:	f47f af3f 	bne.w	800182e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80019b0:	b005      	add	sp, #20
 80019b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80019b6:	2500      	movs	r5, #0
 80019b8:	e7d4      	b.n	8001964 <HAL_GPIO_Init+0x14c>
 80019ba:	2501      	movs	r5, #1
 80019bc:	e7d2      	b.n	8001964 <HAL_GPIO_Init+0x14c>
 80019be:	2502      	movs	r5, #2
 80019c0:	e7d0      	b.n	8001964 <HAL_GPIO_Init+0x14c>
 80019c2:	2503      	movs	r5, #3
 80019c4:	e7ce      	b.n	8001964 <HAL_GPIO_Init+0x14c>
 80019c6:	2504      	movs	r5, #4
 80019c8:	e7cc      	b.n	8001964 <HAL_GPIO_Init+0x14c>
 80019ca:	2505      	movs	r5, #5
 80019cc:	e7ca      	b.n	8001964 <HAL_GPIO_Init+0x14c>
 80019ce:	2506      	movs	r5, #6
 80019d0:	e7c8      	b.n	8001964 <HAL_GPIO_Init+0x14c>
 80019d2:	2507      	movs	r5, #7
 80019d4:	e7c6      	b.n	8001964 <HAL_GPIO_Init+0x14c>
 80019d6:	2508      	movs	r5, #8
 80019d8:	e7c4      	b.n	8001964 <HAL_GPIO_Init+0x14c>
 80019da:	bf00      	nop
 80019dc:	40013c00 	.word	0x40013c00
 80019e0:	40020000 	.word	0x40020000
 80019e4:	40023800 	.word	0x40023800
 80019e8:	40021400 	.word	0x40021400

080019ec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80019ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80019f0:	2400      	movs	r4, #0
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80019f2:	4e4c      	ldr	r6, [pc, #304]	; (8001b24 <HAL_GPIO_DeInit+0x138>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80019f4:	f8df a134 	ldr.w	sl, [pc, #308]	; 8001b2c <HAL_GPIO_DeInit+0x140>
 80019f8:	f8df b134 	ldr.w	fp, [pc, #308]	; 8001b30 <HAL_GPIO_DeInit+0x144>
    ioposition = ((uint32_t)0x01) << position;
 80019fc:	f04f 0901 	mov.w	r9, #1
 8001a00:	fa09 f204 	lsl.w	r2, r9, r4
    if(iocurrent == ioposition)
 8001a04:	ea32 0301 	bics.w	r3, r2, r1
 8001a08:	d174      	bne.n	8001af4 <HAL_GPIO_DeInit+0x108>
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	fa04 f509 	lsl.w	r5, r4, r9
 8001a10:	6807      	ldr	r7, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a12:	f004 0e07 	and.w	lr, r4, #7
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a16:	fa03 f505 	lsl.w	r5, r3, r5
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a1a:	fa24 fc03 	lsr.w	ip, r4, r3
 8001a1e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a22:	43d2      	mvns	r2, r2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a24:	43ed      	mvns	r5, r5
 8001a26:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8001a2a:	402f      	ands	r7, r5
 8001a2c:	6007      	str	r7, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a2e:	270f      	movs	r7, #15
 8001a30:	f8dc 8020 	ldr.w	r8, [ip, #32]
 8001a34:	fa07 fe0e 	lsl.w	lr, r7, lr
 8001a38:	ea28 0e0e 	bic.w	lr, r8, lr
 8001a3c:	f8cc e020 	str.w	lr, [ip, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a40:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8001a44:	ea05 0e0e 	and.w	lr, r5, lr
 8001a48:	f8c0 e008 	str.w	lr, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a4c:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8001a50:	ea02 0e0e 	and.w	lr, r2, lr
 8001a54:	f8c0 e004 	str.w	lr, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a58:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8001a5c:	ea05 050e 	and.w	r5, r5, lr
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a60:	ea04 0e03 	and.w	lr, r4, r3
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8001a64:	4b30      	ldr	r3, [pc, #192]	; (8001b28 <HAL_GPIO_DeInit+0x13c>)
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a66:	60c5      	str	r5, [r0, #12]
 8001a68:	f024 0503 	bic.w	r5, r4, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a6c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8001a70:	4298      	cmp	r0, r3
 8001a72:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a76:	fa07 f70e 	lsl.w	r7, r7, lr
 8001a7a:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp = SYSCFG->EXTICR[position >> 2];
 8001a7e:	f8d5 c008 	ldr.w	ip, [r5, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a82:	ea0c 0c07 	and.w	ip, ip, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8001a86:	d03a      	beq.n	8001afe <HAL_GPIO_DeInit+0x112>
 8001a88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a8c:	4298      	cmp	r0, r3
 8001a8e:	d038      	beq.n	8001b02 <HAL_GPIO_DeInit+0x116>
 8001a90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a94:	4298      	cmp	r0, r3
 8001a96:	d036      	beq.n	8001b06 <HAL_GPIO_DeInit+0x11a>
 8001a98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a9c:	4298      	cmp	r0, r3
 8001a9e:	d034      	beq.n	8001b0a <HAL_GPIO_DeInit+0x11e>
 8001aa0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001aa4:	4298      	cmp	r0, r3
 8001aa6:	d032      	beq.n	8001b0e <HAL_GPIO_DeInit+0x122>
 8001aa8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001aac:	4298      	cmp	r0, r3
 8001aae:	d030      	beq.n	8001b12 <HAL_GPIO_DeInit+0x126>
 8001ab0:	4550      	cmp	r0, sl
 8001ab2:	d030      	beq.n	8001b16 <HAL_GPIO_DeInit+0x12a>
 8001ab4:	4558      	cmp	r0, fp
 8001ab6:	d030      	beq.n	8001b1a <HAL_GPIO_DeInit+0x12e>
 8001ab8:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001abc:	4298      	cmp	r0, r3
 8001abe:	d02e      	beq.n	8001b1e <HAL_GPIO_DeInit+0x132>
 8001ac0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ac4:	4298      	cmp	r0, r3
 8001ac6:	bf0c      	ite	eq
 8001ac8:	2309      	moveq	r3, #9
 8001aca:	230a      	movne	r3, #10
 8001acc:	fa03 f30e 	lsl.w	r3, r3, lr
 8001ad0:	459c      	cmp	ip, r3
 8001ad2:	d10f      	bne.n	8001af4 <HAL_GPIO_DeInit+0x108>
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8001ad4:	68ab      	ldr	r3, [r5, #8]
 8001ad6:	ea23 0707 	bic.w	r7, r3, r7
 8001ada:	60af      	str	r7, [r5, #8]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001adc:	6833      	ldr	r3, [r6, #0]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	6033      	str	r3, [r6, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001ae2:	6873      	ldr	r3, [r6, #4]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	6073      	str	r3, [r6, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001ae8:	68b3      	ldr	r3, [r6, #8]
 8001aea:	4013      	ands	r3, r2
 8001aec:	60b3      	str	r3, [r6, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001aee:	68f3      	ldr	r3, [r6, #12]
 8001af0:	401a      	ands	r2, r3
 8001af2:	60f2      	str	r2, [r6, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001af4:	3401      	adds	r4, #1
 8001af6:	2c10      	cmp	r4, #16
 8001af8:	d180      	bne.n	80019fc <HAL_GPIO_DeInit+0x10>
	  }
    }
  }
}
 8001afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8001afe:	2300      	movs	r3, #0
 8001b00:	e7e4      	b.n	8001acc <HAL_GPIO_DeInit+0xe0>
 8001b02:	464b      	mov	r3, r9
 8001b04:	e7e2      	b.n	8001acc <HAL_GPIO_DeInit+0xe0>
 8001b06:	2302      	movs	r3, #2
 8001b08:	e7e0      	b.n	8001acc <HAL_GPIO_DeInit+0xe0>
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e7de      	b.n	8001acc <HAL_GPIO_DeInit+0xe0>
 8001b0e:	2304      	movs	r3, #4
 8001b10:	e7dc      	b.n	8001acc <HAL_GPIO_DeInit+0xe0>
 8001b12:	2305      	movs	r3, #5
 8001b14:	e7da      	b.n	8001acc <HAL_GPIO_DeInit+0xe0>
 8001b16:	2306      	movs	r3, #6
 8001b18:	e7d8      	b.n	8001acc <HAL_GPIO_DeInit+0xe0>
 8001b1a:	2307      	movs	r3, #7
 8001b1c:	e7d6      	b.n	8001acc <HAL_GPIO_DeInit+0xe0>
 8001b1e:	2308      	movs	r3, #8
 8001b20:	e7d4      	b.n	8001acc <HAL_GPIO_DeInit+0xe0>
 8001b22:	bf00      	nop
 8001b24:	40013c00 	.word	0x40013c00
 8001b28:	40020000 	.word	0x40020000
 8001b2c:	40021800 	.word	0x40021800
 8001b30:	40021c00 	.word	0x40021c00

08001b34 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b34:	6903      	ldr	r3, [r0, #16]
 8001b36:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001b38:	bf14      	ite	ne
 8001b3a:	2001      	movne	r0, #1
 8001b3c:	2000      	moveq	r0, #0
 8001b3e:	4770      	bx	lr

08001b40 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b40:	b10a      	cbz	r2, 8001b46 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001b42:	6181      	str	r1, [r0, #24]
 8001b44:	4770      	bx	lr
 8001b46:	0409      	lsls	r1, r1, #16
 8001b48:	e7fb      	b.n	8001b42 <HAL_GPIO_WritePin+0x2>

08001b4a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b4a:	4770      	bx	lr

08001b4c <HAL_GPIO_EXTI_IRQHandler>:
{
 8001b4c:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001b4e:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001b50:	6959      	ldr	r1, [r3, #20]
 8001b52:	4201      	tst	r1, r0
 8001b54:	d002      	beq.n	8001b5c <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b56:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b58:	f7ff fff7 	bl	8001b4a <HAL_GPIO_EXTI_Callback>
 8001b5c:	bd08      	pop	{r3, pc}
 8001b5e:	bf00      	nop
 8001b60:	40013c00 	.word	0x40013c00

08001b64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b64:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b66:	4604      	mov	r4, r0
 8001b68:	2800      	cmp	r0, #0
 8001b6a:	d04a      	beq.n	8001c02 <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b6c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001b70:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001b74:	b91b      	cbnz	r3, 8001b7e <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b76:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b7a:	f002 f989 	bl	8003e90 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b7e:	2324      	movs	r3, #36	; 0x24
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b80:	68e1      	ldr	r1, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b82:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b86:	2901      	cmp	r1, #1
  __HAL_I2C_DISABLE(hi2c);
 8001b88:	6823      	ldr	r3, [r4, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	f022 0201 	bic.w	r2, r2, #1
 8001b90:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b92:	6862      	ldr	r2, [r4, #4]
 8001b94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b98:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ba0:	609a      	str	r2, [r3, #8]
 8001ba2:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ba4:	d124      	bne.n	8001bf0 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ba6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001baa:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001bac:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bae:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001bb0:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001bb2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001bb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bba:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001bbc:	68da      	ldr	r2, [r3, #12]
 8001bbe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bc2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001bc4:	6922      	ldr	r2, [r4, #16]
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	69a1      	ldr	r1, [r4, #24]
 8001bca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001bce:	6a21      	ldr	r1, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001bd0:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001bd2:	69e2      	ldr	r2, [r4, #28]
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	f042 0201 	orr.w	r2, r2, #1
 8001bde:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001be0:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001be2:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001be4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001be8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bea:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 8001bee:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001bf0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001bf4:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001bf6:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001bf8:	d1d8      	bne.n	8001bac <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001bfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bfe:	605a      	str	r2, [r3, #4]
 8001c00:	e7d4      	b.n	8001bac <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8001c02:	2001      	movs	r0, #1
}
 8001c04:	bd10      	pop	{r4, pc}

08001c06 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c06:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	2a20      	cmp	r2, #32
{
 8001c0e:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c10:	d11d      	bne.n	8001c4e <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c12:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d019      	beq.n	8001c4e <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c1a:	2324      	movs	r3, #36	; 0x24
 8001c1c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c20:	6803      	ldr	r3, [r0, #0]
 8001c22:	681c      	ldr	r4, [r3, #0]
 8001c24:	f024 0401 	bic.w	r4, r4, #1
 8001c28:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c2a:	681c      	ldr	r4, [r3, #0]
 8001c2c:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8001c30:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c32:	681c      	ldr	r4, [r3, #0]
 8001c34:	4321      	orrs	r1, r4
 8001c36:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c38:	6819      	ldr	r1, [r3, #0]
 8001c3a:	f041 0101 	orr.w	r1, r1, #1
 8001c3e:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c40:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001c42:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001c46:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001c4e:	2002      	movs	r0, #2
  }
}
 8001c50:	bd10      	pop	{r4, pc}

08001c52 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c52:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c54:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8001c58:	b2e4      	uxtb	r4, r4
 8001c5a:	2c20      	cmp	r4, #32
 8001c5c:	d11c      	bne.n	8001c98 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c5e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d018      	beq.n	8001c98 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c66:	2324      	movs	r3, #36	; 0x24
 8001c68:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c6c:	6803      	ldr	r3, [r0, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	f022 0201 	bic.w	r2, r2, #1
 8001c74:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c76:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c78:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c7c:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c80:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	f042 0201 	orr.w	r2, r2, #1
 8001c88:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c8a:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001c8c:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001c90:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001c94:	4618      	mov	r0, r3
 8001c96:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001c98:	2002      	movs	r0, #2
  }
}
 8001c9a:	bd10      	pop	{r4, pc}

08001c9c <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c9c:	4b19      	ldr	r3, [pc, #100]	; (8001d04 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8001c9e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ca0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001ca2:	4c19      	ldr	r4, [pc, #100]	; (8001d08 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ca4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ca8:	641a      	str	r2, [r3, #64]	; 0x40
 8001caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb0:	9301      	str	r3, [sp, #4]
 8001cb2:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001cb4:	6823      	ldr	r3, [r4, #0]
 8001cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cba:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cbc:	f7ff fad2 	bl	8001264 <HAL_GetTick>
 8001cc0:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001cc2:	6863      	ldr	r3, [r4, #4]
 8001cc4:	03da      	lsls	r2, r3, #15
 8001cc6:	d50c      	bpl.n	8001ce2 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001cc8:	6823      	ldr	r3, [r4, #0]
 8001cca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cce:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cd0:	f7ff fac8 	bl	8001264 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001cd4:	4c0c      	ldr	r4, [pc, #48]	; (8001d08 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 8001cd6:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001cd8:	6863      	ldr	r3, [r4, #4]
 8001cda:	039b      	lsls	r3, r3, #14
 8001cdc:	d50a      	bpl.n	8001cf4 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8001cde:	2000      	movs	r0, #0
 8001ce0:	e006      	b.n	8001cf0 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ce2:	f7ff fabf 	bl	8001264 <HAL_GetTick>
 8001ce6:	1b40      	subs	r0, r0, r5
 8001ce8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001cec:	d9e9      	bls.n	8001cc2 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8001cee:	2003      	movs	r0, #3
}
 8001cf0:	b003      	add	sp, #12
 8001cf2:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001cf4:	f7ff fab6 	bl	8001264 <HAL_GetTick>
 8001cf8:	1b40      	subs	r0, r0, r5
 8001cfa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001cfe:	d9eb      	bls.n	8001cd8 <HAL_PWREx_EnableOverDrive+0x3c>
 8001d00:	e7f5      	b.n	8001cee <HAL_PWREx_EnableOverDrive+0x52>
 8001d02:	bf00      	nop
 8001d04:	40023800 	.word	0x40023800
 8001d08:	40007000 	.word	0x40007000

08001d0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d0c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d10:	4604      	mov	r4, r0
 8001d12:	b918      	cbnz	r0, 8001d1c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001d14:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001d16:	b002      	add	sp, #8
 8001d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d1c:	6803      	ldr	r3, [r0, #0]
 8001d1e:	07d8      	lsls	r0, r3, #31
 8001d20:	d410      	bmi.n	8001d44 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d22:	6823      	ldr	r3, [r4, #0]
 8001d24:	0799      	lsls	r1, r3, #30
 8001d26:	d45e      	bmi.n	8001de6 <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d28:	6823      	ldr	r3, [r4, #0]
 8001d2a:	0719      	lsls	r1, r3, #28
 8001d2c:	f100 80a3 	bmi.w	8001e76 <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d30:	6823      	ldr	r3, [r4, #0]
 8001d32:	075a      	lsls	r2, r3, #29
 8001d34:	f100 80c4 	bmi.w	8001ec0 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d38:	69a2      	ldr	r2, [r4, #24]
 8001d3a:	2a00      	cmp	r2, #0
 8001d3c:	f040 812e 	bne.w	8001f9c <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 8001d40:	2000      	movs	r0, #0
 8001d42:	e7e8      	b.n	8001d16 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d44:	4b93      	ldr	r3, [pc, #588]	; (8001f94 <HAL_RCC_OscConfig+0x288>)
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	f002 020c 	and.w	r2, r2, #12
 8001d4c:	2a04      	cmp	r2, #4
 8001d4e:	d007      	beq.n	8001d60 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d50:	689a      	ldr	r2, [r3, #8]
 8001d52:	f002 020c 	and.w	r2, r2, #12
 8001d56:	2a08      	cmp	r2, #8
 8001d58:	d10a      	bne.n	8001d70 <HAL_RCC_OscConfig+0x64>
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	025a      	lsls	r2, r3, #9
 8001d5e:	d507      	bpl.n	8001d70 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d60:	4b8c      	ldr	r3, [pc, #560]	; (8001f94 <HAL_RCC_OscConfig+0x288>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	039b      	lsls	r3, r3, #14
 8001d66:	d5dc      	bpl.n	8001d22 <HAL_RCC_OscConfig+0x16>
 8001d68:	6863      	ldr	r3, [r4, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1d9      	bne.n	8001d22 <HAL_RCC_OscConfig+0x16>
 8001d6e:	e7d1      	b.n	8001d14 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d70:	6863      	ldr	r3, [r4, #4]
 8001d72:	4d88      	ldr	r5, [pc, #544]	; (8001f94 <HAL_RCC_OscConfig+0x288>)
 8001d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d78:	d111      	bne.n	8001d9e <HAL_RCC_OscConfig+0x92>
 8001d7a:	682b      	ldr	r3, [r5, #0]
 8001d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d80:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001d82:	f7ff fa6f 	bl	8001264 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d86:	4d83      	ldr	r5, [pc, #524]	; (8001f94 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8001d88:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d8a:	682b      	ldr	r3, [r5, #0]
 8001d8c:	039f      	lsls	r7, r3, #14
 8001d8e:	d4c8      	bmi.n	8001d22 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d90:	f7ff fa68 	bl	8001264 <HAL_GetTick>
 8001d94:	1b80      	subs	r0, r0, r6
 8001d96:	2864      	cmp	r0, #100	; 0x64
 8001d98:	d9f7      	bls.n	8001d8a <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8001d9a:	2003      	movs	r0, #3
 8001d9c:	e7bb      	b.n	8001d16 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d9e:	b99b      	cbnz	r3, 8001dc8 <HAL_RCC_OscConfig+0xbc>
 8001da0:	682b      	ldr	r3, [r5, #0]
 8001da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001da6:	602b      	str	r3, [r5, #0]
 8001da8:	682b      	ldr	r3, [r5, #0]
 8001daa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dae:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001db0:	f7ff fa58 	bl	8001264 <HAL_GetTick>
 8001db4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001db6:	682b      	ldr	r3, [r5, #0]
 8001db8:	0398      	lsls	r0, r3, #14
 8001dba:	d5b2      	bpl.n	8001d22 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dbc:	f7ff fa52 	bl	8001264 <HAL_GetTick>
 8001dc0:	1b80      	subs	r0, r0, r6
 8001dc2:	2864      	cmp	r0, #100	; 0x64
 8001dc4:	d9f7      	bls.n	8001db6 <HAL_RCC_OscConfig+0xaa>
 8001dc6:	e7e8      	b.n	8001d9a <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dcc:	682b      	ldr	r3, [r5, #0]
 8001dce:	d103      	bne.n	8001dd8 <HAL_RCC_OscConfig+0xcc>
 8001dd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dd4:	602b      	str	r3, [r5, #0]
 8001dd6:	e7d0      	b.n	8001d7a <HAL_RCC_OscConfig+0x6e>
 8001dd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ddc:	602b      	str	r3, [r5, #0]
 8001dde:	682b      	ldr	r3, [r5, #0]
 8001de0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001de4:	e7cc      	b.n	8001d80 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001de6:	4b6b      	ldr	r3, [pc, #428]	; (8001f94 <HAL_RCC_OscConfig+0x288>)
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	f012 0f0c 	tst.w	r2, #12
 8001dee:	d007      	beq.n	8001e00 <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	f002 020c 	and.w	r2, r2, #12
 8001df6:	2a08      	cmp	r2, #8
 8001df8:	d111      	bne.n	8001e1e <HAL_RCC_OscConfig+0x112>
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	0259      	lsls	r1, r3, #9
 8001dfe:	d40e      	bmi.n	8001e1e <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e00:	4b64      	ldr	r3, [pc, #400]	; (8001f94 <HAL_RCC_OscConfig+0x288>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	0792      	lsls	r2, r2, #30
 8001e06:	d502      	bpl.n	8001e0e <HAL_RCC_OscConfig+0x102>
 8001e08:	68e2      	ldr	r2, [r4, #12]
 8001e0a:	2a01      	cmp	r2, #1
 8001e0c:	d182      	bne.n	8001d14 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	6921      	ldr	r1, [r4, #16]
 8001e12:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001e16:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001e1a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e1c:	e784      	b.n	8001d28 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e1e:	68e3      	ldr	r3, [r4, #12]
 8001e20:	4d5c      	ldr	r5, [pc, #368]	; (8001f94 <HAL_RCC_OscConfig+0x288>)
 8001e22:	b1bb      	cbz	r3, 8001e54 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8001e24:	682b      	ldr	r3, [r5, #0]
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001e2c:	f7ff fa1a 	bl	8001264 <HAL_GetTick>
 8001e30:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e32:	682b      	ldr	r3, [r5, #0]
 8001e34:	079f      	lsls	r7, r3, #30
 8001e36:	d507      	bpl.n	8001e48 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e38:	682b      	ldr	r3, [r5, #0]
 8001e3a:	6922      	ldr	r2, [r4, #16]
 8001e3c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001e40:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001e44:	602b      	str	r3, [r5, #0]
 8001e46:	e76f      	b.n	8001d28 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e48:	f7ff fa0c 	bl	8001264 <HAL_GetTick>
 8001e4c:	1b80      	subs	r0, r0, r6
 8001e4e:	2802      	cmp	r0, #2
 8001e50:	d9ef      	bls.n	8001e32 <HAL_RCC_OscConfig+0x126>
 8001e52:	e7a2      	b.n	8001d9a <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001e54:	682b      	ldr	r3, [r5, #0]
 8001e56:	f023 0301 	bic.w	r3, r3, #1
 8001e5a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001e5c:	f7ff fa02 	bl	8001264 <HAL_GetTick>
 8001e60:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e62:	682b      	ldr	r3, [r5, #0]
 8001e64:	0798      	lsls	r0, r3, #30
 8001e66:	f57f af5f 	bpl.w	8001d28 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e6a:	f7ff f9fb 	bl	8001264 <HAL_GetTick>
 8001e6e:	1b80      	subs	r0, r0, r6
 8001e70:	2802      	cmp	r0, #2
 8001e72:	d9f6      	bls.n	8001e62 <HAL_RCC_OscConfig+0x156>
 8001e74:	e791      	b.n	8001d9a <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e76:	6963      	ldr	r3, [r4, #20]
 8001e78:	4d46      	ldr	r5, [pc, #280]	; (8001f94 <HAL_RCC_OscConfig+0x288>)
 8001e7a:	b183      	cbz	r3, 8001e9e <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8001e7c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001e84:	f7ff f9ee 	bl	8001264 <HAL_GetTick>
 8001e88:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e8a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001e8c:	079b      	lsls	r3, r3, #30
 8001e8e:	f53f af4f 	bmi.w	8001d30 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e92:	f7ff f9e7 	bl	8001264 <HAL_GetTick>
 8001e96:	1b80      	subs	r0, r0, r6
 8001e98:	2802      	cmp	r0, #2
 8001e9a:	d9f6      	bls.n	8001e8a <HAL_RCC_OscConfig+0x17e>
 8001e9c:	e77d      	b.n	8001d9a <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001e9e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001ea0:	f023 0301 	bic.w	r3, r3, #1
 8001ea4:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001ea6:	f7ff f9dd 	bl	8001264 <HAL_GetTick>
 8001eaa:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eac:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001eae:	079f      	lsls	r7, r3, #30
 8001eb0:	f57f af3e 	bpl.w	8001d30 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eb4:	f7ff f9d6 	bl	8001264 <HAL_GetTick>
 8001eb8:	1b80      	subs	r0, r0, r6
 8001eba:	2802      	cmp	r0, #2
 8001ebc:	d9f6      	bls.n	8001eac <HAL_RCC_OscConfig+0x1a0>
 8001ebe:	e76c      	b.n	8001d9a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ec0:	4b34      	ldr	r3, [pc, #208]	; (8001f94 <HAL_RCC_OscConfig+0x288>)
 8001ec2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ec4:	00d0      	lsls	r0, r2, #3
 8001ec6:	d427      	bmi.n	8001f18 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ec8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8001eca:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ecc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ed0:	641a      	str	r2, [r3, #64]	; 0x40
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed8:	9301      	str	r3, [sp, #4]
 8001eda:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001edc:	4d2e      	ldr	r5, [pc, #184]	; (8001f98 <HAL_RCC_OscConfig+0x28c>)
 8001ede:	682b      	ldr	r3, [r5, #0]
 8001ee0:	05d9      	lsls	r1, r3, #23
 8001ee2:	d51b      	bpl.n	8001f1c <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee4:	68a3      	ldr	r3, [r4, #8]
 8001ee6:	4d2b      	ldr	r5, [pc, #172]	; (8001f94 <HAL_RCC_OscConfig+0x288>)
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d127      	bne.n	8001f3c <HAL_RCC_OscConfig+0x230>
 8001eec:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ef4:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001ef8:	f7ff f9b4 	bl	8001264 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001efc:	4f25      	ldr	r7, [pc, #148]	; (8001f94 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8001efe:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f02:	079b      	lsls	r3, r3, #30
 8001f04:	d53f      	bpl.n	8001f86 <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 8001f06:	2e00      	cmp	r6, #0
 8001f08:	f43f af16 	beq.w	8001d38 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f0c:	4a21      	ldr	r2, [pc, #132]	; (8001f94 <HAL_RCC_OscConfig+0x288>)
 8001f0e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001f10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f14:	6413      	str	r3, [r2, #64]	; 0x40
 8001f16:	e70f      	b.n	8001d38 <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 8001f18:	2600      	movs	r6, #0
 8001f1a:	e7df      	b.n	8001edc <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8001f1c:	682b      	ldr	r3, [r5, #0]
 8001f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f22:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001f24:	f7ff f99e 	bl	8001264 <HAL_GetTick>
 8001f28:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f2a:	682b      	ldr	r3, [r5, #0]
 8001f2c:	05da      	lsls	r2, r3, #23
 8001f2e:	d4d9      	bmi.n	8001ee4 <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001f30:	f7ff f998 	bl	8001264 <HAL_GetTick>
 8001f34:	1bc0      	subs	r0, r0, r7
 8001f36:	2864      	cmp	r0, #100	; 0x64
 8001f38:	d9f7      	bls.n	8001f2a <HAL_RCC_OscConfig+0x21e>
 8001f3a:	e72e      	b.n	8001d9a <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f3c:	b9ab      	cbnz	r3, 8001f6a <HAL_RCC_OscConfig+0x25e>
 8001f3e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f40:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f44:	f023 0301 	bic.w	r3, r3, #1
 8001f48:	672b      	str	r3, [r5, #112]	; 0x70
 8001f4a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001f4c:	f023 0304 	bic.w	r3, r3, #4
 8001f50:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001f52:	f7ff f987 	bl	8001264 <HAL_GetTick>
 8001f56:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f58:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001f5a:	0798      	lsls	r0, r3, #30
 8001f5c:	d5d3      	bpl.n	8001f06 <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f5e:	f7ff f981 	bl	8001264 <HAL_GetTick>
 8001f62:	1bc0      	subs	r0, r0, r7
 8001f64:	4540      	cmp	r0, r8
 8001f66:	d9f7      	bls.n	8001f58 <HAL_RCC_OscConfig+0x24c>
 8001f68:	e717      	b.n	8001d9a <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f6a:	2b05      	cmp	r3, #5
 8001f6c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001f6e:	d103      	bne.n	8001f78 <HAL_RCC_OscConfig+0x26c>
 8001f70:	f043 0304 	orr.w	r3, r3, #4
 8001f74:	672b      	str	r3, [r5, #112]	; 0x70
 8001f76:	e7b9      	b.n	8001eec <HAL_RCC_OscConfig+0x1e0>
 8001f78:	f023 0301 	bic.w	r3, r3, #1
 8001f7c:	672b      	str	r3, [r5, #112]	; 0x70
 8001f7e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001f80:	f023 0304 	bic.w	r3, r3, #4
 8001f84:	e7b5      	b.n	8001ef2 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f86:	f7ff f96d 	bl	8001264 <HAL_GetTick>
 8001f8a:	eba0 0008 	sub.w	r0, r0, r8
 8001f8e:	42a8      	cmp	r0, r5
 8001f90:	d9b6      	bls.n	8001f00 <HAL_RCC_OscConfig+0x1f4>
 8001f92:	e702      	b.n	8001d9a <HAL_RCC_OscConfig+0x8e>
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f9c:	4d24      	ldr	r5, [pc, #144]	; (8002030 <HAL_RCC_OscConfig+0x324>)
 8001f9e:	68ab      	ldr	r3, [r5, #8]
 8001fa0:	f003 030c 	and.w	r3, r3, #12
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	f43f aeb5 	beq.w	8001d14 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8001faa:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fac:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001fae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fb2:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fb4:	d12f      	bne.n	8002016 <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 8001fb6:	f7ff f955 	bl	8001264 <HAL_GetTick>
 8001fba:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fbc:	682b      	ldr	r3, [r5, #0]
 8001fbe:	0199      	lsls	r1, r3, #6
 8001fc0:	d423      	bmi.n	800200a <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fc2:	6a22      	ldr	r2, [r4, #32]
 8001fc4:	69e3      	ldr	r3, [r4, #28]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001fca:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001fce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001fd0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001fd4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001fd6:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001fda:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fdc:	4c14      	ldr	r4, [pc, #80]	; (8002030 <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fde:	0852      	lsrs	r2, r2, #1
 8001fe0:	3a01      	subs	r2, #1
 8001fe2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001fe6:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001fe8:	682b      	ldr	r3, [r5, #0]
 8001fea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fee:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001ff0:	f7ff f938 	bl	8001264 <HAL_GetTick>
 8001ff4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ff6:	6823      	ldr	r3, [r4, #0]
 8001ff8:	019a      	lsls	r2, r3, #6
 8001ffa:	f53f aea1 	bmi.w	8001d40 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ffe:	f7ff f931 	bl	8001264 <HAL_GetTick>
 8002002:	1b40      	subs	r0, r0, r5
 8002004:	2802      	cmp	r0, #2
 8002006:	d9f6      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x2ea>
 8002008:	e6c7      	b.n	8001d9a <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800200a:	f7ff f92b 	bl	8001264 <HAL_GetTick>
 800200e:	1b80      	subs	r0, r0, r6
 8002010:	2802      	cmp	r0, #2
 8002012:	d9d3      	bls.n	8001fbc <HAL_RCC_OscConfig+0x2b0>
 8002014:	e6c1      	b.n	8001d9a <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 8002016:	f7ff f925 	bl	8001264 <HAL_GetTick>
 800201a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800201c:	682b      	ldr	r3, [r5, #0]
 800201e:	019b      	lsls	r3, r3, #6
 8002020:	f57f ae8e 	bpl.w	8001d40 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002024:	f7ff f91e 	bl	8001264 <HAL_GetTick>
 8002028:	1b00      	subs	r0, r0, r4
 800202a:	2802      	cmp	r0, #2
 800202c:	d9f6      	bls.n	800201c <HAL_RCC_OscConfig+0x310>
 800202e:	e6b4      	b.n	8001d9a <HAL_RCC_OscConfig+0x8e>
 8002030:	40023800 	.word	0x40023800

08002034 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002034:	4913      	ldr	r1, [pc, #76]	; (8002084 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8002036:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002038:	688b      	ldr	r3, [r1, #8]
 800203a:	f003 030c 	and.w	r3, r3, #12
 800203e:	2b04      	cmp	r3, #4
 8002040:	d003      	beq.n	800204a <HAL_RCC_GetSysClockFreq+0x16>
 8002042:	2b08      	cmp	r3, #8
 8002044:	d003      	beq.n	800204e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002046:	4810      	ldr	r0, [pc, #64]	; (8002088 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002048:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800204a:	4810      	ldr	r0, [pc, #64]	; (800208c <HAL_RCC_GetSysClockFreq+0x58>)
 800204c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800204e:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002050:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002052:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002054:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002058:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800205c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002060:	bf1a      	itte	ne
 8002062:	480a      	ldrne	r0, [pc, #40]	; (800208c <HAL_RCC_GetSysClockFreq+0x58>)
 8002064:	2300      	movne	r3, #0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002066:	4808      	ldreq	r0, [pc, #32]	; (8002088 <HAL_RCC_GetSysClockFreq+0x54>)
 8002068:	fba1 0100 	umull	r0, r1, r1, r0
 800206c:	f7fe f940 	bl	80002f0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8002070:	4b04      	ldr	r3, [pc, #16]	; (8002084 <HAL_RCC_GetSysClockFreq+0x50>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002078:	3301      	adds	r3, #1
 800207a:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800207c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002080:	bd08      	pop	{r3, pc}
 8002082:	bf00      	nop
 8002084:	40023800 	.word	0x40023800
 8002088:	00f42400 	.word	0x00f42400
 800208c:	007a1200 	.word	0x007a1200

08002090 <HAL_RCC_ClockConfig>:
{
 8002090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002094:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002096:	4604      	mov	r4, r0
 8002098:	b910      	cbnz	r0, 80020a0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800209a:	2001      	movs	r0, #1
 800209c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020a0:	4a46      	ldr	r2, [pc, #280]	; (80021bc <HAL_RCC_ClockConfig+0x12c>)
 80020a2:	6813      	ldr	r3, [r2, #0]
 80020a4:	f003 030f 	and.w	r3, r3, #15
 80020a8:	428b      	cmp	r3, r1
 80020aa:	d328      	bcc.n	80020fe <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020ac:	6821      	ldr	r1, [r4, #0]
 80020ae:	078f      	lsls	r7, r1, #30
 80020b0:	d430      	bmi.n	8002114 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020b2:	07c8      	lsls	r0, r1, #31
 80020b4:	d443      	bmi.n	800213e <HAL_RCC_ClockConfig+0xae>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020b6:	4a41      	ldr	r2, [pc, #260]	; (80021bc <HAL_RCC_ClockConfig+0x12c>)
 80020b8:	6813      	ldr	r3, [r2, #0]
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	429d      	cmp	r5, r3
 80020c0:	d367      	bcc.n	8002192 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c2:	6822      	ldr	r2, [r4, #0]
 80020c4:	0751      	lsls	r1, r2, #29
 80020c6:	d470      	bmi.n	80021aa <HAL_RCC_ClockConfig+0x11a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c8:	0713      	lsls	r3, r2, #28
 80020ca:	d507      	bpl.n	80020dc <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020cc:	4a3c      	ldr	r2, [pc, #240]	; (80021c0 <HAL_RCC_ClockConfig+0x130>)
 80020ce:	6921      	ldr	r1, [r4, #16]
 80020d0:	6893      	ldr	r3, [r2, #8]
 80020d2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80020d6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80020da:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020dc:	f7ff ffaa 	bl	8002034 <HAL_RCC_GetSysClockFreq>
 80020e0:	4b37      	ldr	r3, [pc, #220]	; (80021c0 <HAL_RCC_ClockConfig+0x130>)
 80020e2:	4a38      	ldr	r2, [pc, #224]	; (80021c4 <HAL_RCC_ClockConfig+0x134>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80020ea:	5cd3      	ldrb	r3, [r2, r3]
 80020ec:	40d8      	lsrs	r0, r3
 80020ee:	4b36      	ldr	r3, [pc, #216]	; (80021c8 <HAL_RCC_ClockConfig+0x138>)
 80020f0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80020f2:	2000      	movs	r0, #0
 80020f4:	f7ff f87a 	bl	80011ec <HAL_InitTick>
  return HAL_OK;
 80020f8:	2000      	movs	r0, #0
 80020fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020fe:	6813      	ldr	r3, [r2, #0]
 8002100:	f023 030f 	bic.w	r3, r3, #15
 8002104:	430b      	orrs	r3, r1
 8002106:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002108:	6813      	ldr	r3, [r2, #0]
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	4299      	cmp	r1, r3
 8002110:	d1c3      	bne.n	800209a <HAL_RCC_ClockConfig+0xa>
 8002112:	e7cb      	b.n	80020ac <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002114:	f011 0f04 	tst.w	r1, #4
 8002118:	4b29      	ldr	r3, [pc, #164]	; (80021c0 <HAL_RCC_ClockConfig+0x130>)
 800211a:	d003      	beq.n	8002124 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800211c:	689a      	ldr	r2, [r3, #8]
 800211e:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8002122:	609a      	str	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002124:	070e      	lsls	r6, r1, #28
 8002126:	d503      	bpl.n	8002130 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002128:	689a      	ldr	r2, [r3, #8]
 800212a:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800212e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	68a0      	ldr	r0, [r4, #8]
 8002134:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002138:	4302      	orrs	r2, r0
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	e7b9      	b.n	80020b2 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800213e:	6861      	ldr	r1, [r4, #4]
 8002140:	4b1f      	ldr	r3, [pc, #124]	; (80021c0 <HAL_RCC_ClockConfig+0x130>)
 8002142:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002144:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002146:	d11c      	bne.n	8002182 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002148:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800214c:	d0a5      	beq.n	800209a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800214e:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002150:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002154:	4e1a      	ldr	r6, [pc, #104]	; (80021c0 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002156:	f022 0203 	bic.w	r2, r2, #3
 800215a:	430a      	orrs	r2, r1
 800215c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800215e:	f7ff f881 	bl	8001264 <HAL_GetTick>
 8002162:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002164:	68b3      	ldr	r3, [r6, #8]
 8002166:	6862      	ldr	r2, [r4, #4]
 8002168:	f003 030c 	and.w	r3, r3, #12
 800216c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002170:	d0a1      	beq.n	80020b6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002172:	f7ff f877 	bl	8001264 <HAL_GetTick>
 8002176:	1bc0      	subs	r0, r0, r7
 8002178:	4540      	cmp	r0, r8
 800217a:	d9f3      	bls.n	8002164 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 800217c:	2003      	movs	r0, #3
}
 800217e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002182:	2902      	cmp	r1, #2
 8002184:	d102      	bne.n	800218c <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002186:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800218a:	e7df      	b.n	800214c <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218c:	f012 0f02 	tst.w	r2, #2
 8002190:	e7dc      	b.n	800214c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002192:	6813      	ldr	r3, [r2, #0]
 8002194:	f023 030f 	bic.w	r3, r3, #15
 8002198:	432b      	orrs	r3, r5
 800219a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800219c:	6813      	ldr	r3, [r2, #0]
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	429d      	cmp	r5, r3
 80021a4:	f47f af79 	bne.w	800209a <HAL_RCC_ClockConfig+0xa>
 80021a8:	e78b      	b.n	80020c2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021aa:	4905      	ldr	r1, [pc, #20]	; (80021c0 <HAL_RCC_ClockConfig+0x130>)
 80021ac:	68e0      	ldr	r0, [r4, #12]
 80021ae:	688b      	ldr	r3, [r1, #8]
 80021b0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80021b4:	4303      	orrs	r3, r0
 80021b6:	608b      	str	r3, [r1, #8]
 80021b8:	e786      	b.n	80020c8 <HAL_RCC_ClockConfig+0x38>
 80021ba:	bf00      	nop
 80021bc:	40023c00 	.word	0x40023c00
 80021c0:	40023800 	.word	0x40023800
 80021c4:	08007c9e 	.word	0x08007c9e
 80021c8:	2000016c 	.word	0x2000016c

080021cc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80021cc:	4b01      	ldr	r3, [pc, #4]	; (80021d4 <HAL_RCC_GetHCLKFreq+0x8>)
 80021ce:	6818      	ldr	r0, [r3, #0]
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	2000016c 	.word	0x2000016c

080021d8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80021d8:	4b04      	ldr	r3, [pc, #16]	; (80021ec <HAL_RCC_GetPCLK1Freq+0x14>)
 80021da:	4a05      	ldr	r2, [pc, #20]	; (80021f0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80021e2:	5cd3      	ldrb	r3, [r2, r3]
 80021e4:	4a03      	ldr	r2, [pc, #12]	; (80021f4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80021e6:	6810      	ldr	r0, [r2, #0]
}
 80021e8:	40d8      	lsrs	r0, r3
 80021ea:	4770      	bx	lr
 80021ec:	40023800 	.word	0x40023800
 80021f0:	08007cae 	.word	0x08007cae
 80021f4:	2000016c 	.word	0x2000016c

080021f8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80021f8:	4b04      	ldr	r3, [pc, #16]	; (800220c <HAL_RCC_GetPCLK2Freq+0x14>)
 80021fa:	4a05      	ldr	r2, [pc, #20]	; (8002210 <HAL_RCC_GetPCLK2Freq+0x18>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002202:	5cd3      	ldrb	r3, [r2, r3]
 8002204:	4a03      	ldr	r2, [pc, #12]	; (8002214 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002206:	6810      	ldr	r0, [r2, #0]
}
 8002208:	40d8      	lsrs	r0, r3
 800220a:	4770      	bx	lr
 800220c:	40023800 	.word	0x40023800
 8002210:	08007cae 	.word	0x08007cae
 8002214:	2000016c 	.word	0x2000016c

08002218 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002218:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800221c:	6802      	ldr	r2, [r0, #0]
{
 800221e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002220:	f012 0601 	ands.w	r6, r2, #1
 8002224:	d00b      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002226:	4bba      	ldr	r3, [pc, #744]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002228:	6899      	ldr	r1, [r3, #8]
 800222a:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800222e:	6099      	str	r1, [r3, #8]
 8002230:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8002232:	6899      	ldr	r1, [r3, #8]
 8002234:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002236:	fab6 f686 	clz	r6, r6
 800223a:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800223c:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800223e:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 8002242:	d012      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002244:	49b2      	ldr	r1, [pc, #712]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002246:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8002248:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800224c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002250:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 8002254:	bf08      	it	eq
 8002256:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002258:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800225c:	bf16      	itet	ne
 800225e:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8002262:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002264:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002266:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800226a:	02d7      	lsls	r7, r2, #11
 800226c:	d510      	bpl.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800226e:	48a8      	ldr	r0, [pc, #672]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002270:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002272:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002276:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800227a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800227e:	ea43 0301 	orr.w	r3, r3, r1
 8002282:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002286:	f000 81a9 	beq.w	80025dc <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800228a:	2900      	cmp	r1, #0
 800228c:	bf08      	it	eq
 800228e:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8002290:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8002294:	bf18      	it	ne
 8002296:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002298:	0690      	lsls	r0, r2, #26
 800229a:	d531      	bpl.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800229c:	4b9c      	ldr	r3, [pc, #624]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800229e:	4f9d      	ldr	r7, [pc, #628]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80022a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022a2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80022a6:	641a      	str	r2, [r3, #64]	; 0x40
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ae:	9301      	str	r3, [sp, #4]
 80022b0:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b8:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022ba:	f7fe ffd3 	bl	8001264 <HAL_GetTick>
 80022be:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	05d9      	lsls	r1, r3, #23
 80022c4:	f140 818c 	bpl.w	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022c8:	4f91      	ldr	r7, [pc, #580]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80022ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022cc:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80022d0:	f040 8191 	bne.w	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80022d6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80022da:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80022de:	4a8c      	ldr	r2, [pc, #560]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80022e0:	f040 81af 	bne.w	8002642 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 80022e4:	6891      	ldr	r1, [r2, #8]
 80022e6:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80022ea:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80022ee:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80022f2:	4301      	orrs	r1, r0
 80022f4:	6091      	str	r1, [r2, #8]
 80022f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022fa:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80022fc:	430b      	orrs	r3, r1
 80022fe:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002300:	6823      	ldr	r3, [r4, #0]
 8002302:	06df      	lsls	r7, r3, #27
 8002304:	d50c      	bpl.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002306:	4a82      	ldr	r2, [pc, #520]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002308:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800230c:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8002310:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8002314:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8002318:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800231a:	4301      	orrs	r1, r0
 800231c:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002320:	0458      	lsls	r0, r3, #17
 8002322:	d508      	bpl.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002324:	497a      	ldr	r1, [pc, #488]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002326:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002328:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800232c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002330:	4302      	orrs	r2, r0
 8002332:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002336:	0419      	lsls	r1, r3, #16
 8002338:	d508      	bpl.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800233a:	4975      	ldr	r1, [pc, #468]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800233c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800233e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002342:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002346:	4302      	orrs	r2, r0
 8002348:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800234c:	03da      	lsls	r2, r3, #15
 800234e:	d508      	bpl.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002350:	496f      	ldr	r1, [pc, #444]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002352:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002354:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002358:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800235c:	4302      	orrs	r2, r0
 800235e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002362:	039f      	lsls	r7, r3, #14
 8002364:	d508      	bpl.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002366:	496a      	ldr	r1, [pc, #424]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002368:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800236a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800236e:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8002372:	4302      	orrs	r2, r0
 8002374:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002378:	0658      	lsls	r0, r3, #25
 800237a:	d508      	bpl.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800237c:	4964      	ldr	r1, [pc, #400]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800237e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002380:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002384:	f022 0203 	bic.w	r2, r2, #3
 8002388:	4302      	orrs	r2, r0
 800238a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800238e:	0619      	lsls	r1, r3, #24
 8002390:	d508      	bpl.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002392:	495f      	ldr	r1, [pc, #380]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002394:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002396:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800239a:	f022 020c 	bic.w	r2, r2, #12
 800239e:	4302      	orrs	r2, r0
 80023a0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023a4:	05da      	lsls	r2, r3, #23
 80023a6:	d508      	bpl.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023a8:	4959      	ldr	r1, [pc, #356]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80023aa:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80023ac:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80023b0:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80023b4:	4302      	orrs	r2, r0
 80023b6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023ba:	059f      	lsls	r7, r3, #22
 80023bc:	d508      	bpl.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023be:	4954      	ldr	r1, [pc, #336]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80023c0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80023c2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80023c6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80023ca:	4302      	orrs	r2, r0
 80023cc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023d0:	0558      	lsls	r0, r3, #21
 80023d2:	d508      	bpl.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023d4:	494e      	ldr	r1, [pc, #312]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80023d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80023d8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80023dc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80023e0:	4302      	orrs	r2, r0
 80023e2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80023e6:	0519      	lsls	r1, r3, #20
 80023e8:	d508      	bpl.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80023ea:	4949      	ldr	r1, [pc, #292]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80023ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80023ee:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80023f2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80023f6:	4302      	orrs	r2, r0
 80023f8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80023fc:	04da      	lsls	r2, r3, #19
 80023fe:	d508      	bpl.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002400:	4943      	ldr	r1, [pc, #268]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002402:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002404:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002408:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800240c:	4302      	orrs	r2, r0
 800240e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002412:	049f      	lsls	r7, r3, #18
 8002414:	d508      	bpl.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002416:	493e      	ldr	r1, [pc, #248]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002418:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800241a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800241e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002422:	4302      	orrs	r2, r0
 8002424:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002428:	0258      	lsls	r0, r3, #9
 800242a:	d508      	bpl.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800242c:	4938      	ldr	r1, [pc, #224]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800242e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8002430:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002434:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002438:	4302      	orrs	r2, r0
 800243a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800243e:	0299      	lsls	r1, r3, #10
 8002440:	d50c      	bpl.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002442:	4833      	ldr	r0, [pc, #204]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002444:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8002446:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800244a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800244e:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8002452:	bf08      	it	eq
 8002454:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002456:	430a      	orrs	r2, r1
 8002458:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 800245c:	f013 0f08 	tst.w	r3, #8
 8002460:	bf18      	it	ne
 8002462:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002464:	035a      	lsls	r2, r3, #13
 8002466:	d508      	bpl.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002468:	4929      	ldr	r1, [pc, #164]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800246a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800246c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002470:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002474:	4302      	orrs	r2, r0
 8002476:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800247a:	021f      	lsls	r7, r3, #8
 800247c:	d509      	bpl.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800247e:	4924      	ldr	r1, [pc, #144]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002480:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8002484:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002488:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800248c:	4302      	orrs	r2, r0
 800248e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002492:	0158      	lsls	r0, r3, #5
 8002494:	d509      	bpl.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002496:	491e      	ldr	r1, [pc, #120]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002498:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800249c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80024a0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80024a4:	4302      	orrs	r2, r0
 80024a6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80024aa:	0119      	lsls	r1, r3, #4
 80024ac:	d509      	bpl.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80024ae:	4918      	ldr	r1, [pc, #96]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80024b0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80024b4:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 80024b8:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80024bc:	4302      	orrs	r2, r0
 80024be:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80024c2:	00da      	lsls	r2, r3, #3
 80024c4:	d509      	bpl.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80024c6:	4912      	ldr	r1, [pc, #72]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80024c8:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80024cc:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 80024d0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80024d4:	4302      	orrs	r2, r0
 80024d6:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80024da:	2e01      	cmp	r6, #1
 80024dc:	f000 80b5 	beq.w	800264a <HAL_RCCEx_PeriphCLKConfig+0x432>
 80024e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024e4:	f000 80b1 	beq.w	800264a <HAL_RCCEx_PeriphCLKConfig+0x432>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80024e8:	2d01      	cmp	r5, #1
 80024ea:	d175      	bne.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80024ec:	4d08      	ldr	r5, [pc, #32]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80024ee:	682b      	ldr	r3, [r5, #0]
 80024f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024f4:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024f6:	f7fe feb5 	bl	8001264 <HAL_GetTick>
 80024fa:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80024fc:	682b      	ldr	r3, [r5, #0]
 80024fe:	009f      	lsls	r7, r3, #2
 8002500:	f100 8127 	bmi.w	8002752 <HAL_RCCEx_PeriphCLKConfig+0x53a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002504:	6821      	ldr	r1, [r4, #0]
 8002506:	030e      	lsls	r6, r1, #12
 8002508:	d506      	bpl.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800250a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800250c:	b143      	cbz	r3, 8002520 <HAL_RCCEx_PeriphCLKConfig+0x308>
 800250e:	e003      	b.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8002510:	40023800 	.word	0x40023800
 8002514:	40007000 	.word	0x40007000
 8002518:	02cd      	lsls	r5, r1, #11
 800251a:	d51d      	bpl.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x340>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800251c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800251e:	b9db      	cbnz	r3, 8002558 <HAL_RCCEx_PeriphCLKConfig+0x340>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002520:	4a93      	ldr	r2, [pc, #588]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8002522:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002526:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800252a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800252e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002532:	4303      	orrs	r3, r0
 8002534:	6960      	ldr	r0, [r4, #20]
 8002536:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800253a:	69a0      	ldr	r0, [r4, #24]
 800253c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002540:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002544:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002548:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800254a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800254e:	3801      	subs	r0, #1
 8002550:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002554:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002558:	0288      	lsls	r0, r1, #10
 800255a:	d515      	bpl.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x370>
 800255c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800255e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002562:	d111      	bne.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x370>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002564:	4a82      	ldr	r2, [pc, #520]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8002566:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800256a:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800256e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002572:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002576:	4303      	orrs	r3, r0
 8002578:	6960      	ldr	r0, [r4, #20]
 800257a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800257e:	6a20      	ldr	r0, [r4, #32]
 8002580:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002584:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002588:	070a      	lsls	r2, r1, #28
 800258a:	d519      	bpl.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800258c:	4978      	ldr	r1, [pc, #480]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800258e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002592:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002596:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800259a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800259e:	4313      	orrs	r3, r2
 80025a0:	6962      	ldr	r2, [r4, #20]
 80025a2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80025a6:	69e2      	ldr	r2, [r4, #28]
 80025a8:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80025ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80025b0:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 80025b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80025b6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80025ba:	4313      	orrs	r3, r2
 80025bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80025c0:	4c6b      	ldr	r4, [pc, #428]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80025c2:	6823      	ldr	r3, [r4, #0]
 80025c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025ca:	f7fe fe4b 	bl	8001264 <HAL_GetTick>
 80025ce:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80025d0:	6823      	ldr	r3, [r4, #0]
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	f140 80c4 	bpl.w	8002760 <HAL_RCCEx_PeriphCLKConfig+0x548>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80025d8:	2000      	movs	r0, #0
 80025da:	e009      	b.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      plli2sused = 1;
 80025dc:	2601      	movs	r6, #1
 80025de:	e657      	b.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e0:	f7fe fe40 	bl	8001264 <HAL_GetTick>
 80025e4:	eba0 0008 	sub.w	r0, r0, r8
 80025e8:	2864      	cmp	r0, #100	; 0x64
 80025ea:	f67f ae69 	bls.w	80022c0 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 80025ee:	2003      	movs	r0, #3
}
 80025f0:	b003      	add	sp, #12
 80025f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025f6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80025f8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80025fc:	4293      	cmp	r3, r2
 80025fe:	f43f ae69 	beq.w	80022d4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002602:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002604:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002606:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800260a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800260e:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002610:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002612:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002616:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8002618:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800261a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800261c:	07da      	lsls	r2, r3, #31
 800261e:	f57f ae59 	bpl.w	80022d4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8002622:	f7fe fe1f 	bl	8001264 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002626:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800262a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800262c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800262e:	079b      	lsls	r3, r3, #30
 8002630:	f53f ae50 	bmi.w	80022d4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002634:	f7fe fe16 	bl	8001264 <HAL_GetTick>
 8002638:	eba0 0008 	sub.w	r0, r0, r8
 800263c:	4548      	cmp	r0, r9
 800263e:	d9f5      	bls.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x414>
 8002640:	e7d5      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002642:	6891      	ldr	r1, [r2, #8]
 8002644:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002648:	e654      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 800264a:	4e49      	ldr	r6, [pc, #292]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800264c:	6833      	ldr	r3, [r6, #0]
 800264e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002652:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002654:	f7fe fe06 	bl	8001264 <HAL_GetTick>
 8002658:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800265a:	6833      	ldr	r3, [r6, #0]
 800265c:	011b      	lsls	r3, r3, #4
 800265e:	d472      	bmi.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002660:	6822      	ldr	r2, [r4, #0]
 8002662:	07d7      	lsls	r7, r2, #31
 8002664:	d512      	bpl.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x474>
 8002666:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002668:	b983      	cbnz	r3, 800268c <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800266a:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800266e:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002672:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002676:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800267a:	430b      	orrs	r3, r1
 800267c:	6861      	ldr	r1, [r4, #4]
 800267e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002682:	68a1      	ldr	r1, [r4, #8]
 8002684:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002688:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800268c:	0316      	lsls	r6, r2, #12
 800268e:	d503      	bpl.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002690:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002692:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002696:	d005      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002698:	02d0      	lsls	r0, r2, #11
 800269a:	d51e      	bpl.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x4c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800269c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800269e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026a2:	d11a      	bne.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80026a4:	4932      	ldr	r1, [pc, #200]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80026a6:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80026aa:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80026ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026b2:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80026b6:	4303      	orrs	r3, r0
 80026b8:	6860      	ldr	r0, [r4, #4]
 80026ba:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80026be:	68e0      	ldr	r0, [r4, #12]
 80026c0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80026c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80026c8:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 80026cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026ce:	f020 001f 	bic.w	r0, r0, #31
 80026d2:	3b01      	subs	r3, #1
 80026d4:	4303      	orrs	r3, r0
 80026d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026da:	01d1      	lsls	r1, r2, #7
 80026dc:	d511      	bpl.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80026de:	4924      	ldr	r1, [pc, #144]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80026e0:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80026e4:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80026e8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80026ec:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80026f0:	4303      	orrs	r3, r0
 80026f2:	6860      	ldr	r0, [r4, #4]
 80026f4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80026f8:	6920      	ldr	r0, [r4, #16]
 80026fa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80026fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002702:	0192      	lsls	r2, r2, #6
 8002704:	d50d      	bpl.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002706:	6923      	ldr	r3, [r4, #16]
 8002708:	6862      	ldr	r2, [r4, #4]
 800270a:	041b      	lsls	r3, r3, #16
 800270c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002710:	68e2      	ldr	r2, [r4, #12]
 8002712:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002716:	68a2      	ldr	r2, [r4, #8]
 8002718:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800271c:	4a14      	ldr	r2, [pc, #80]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800271e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002722:	4e13      	ldr	r6, [pc, #76]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8002724:	6833      	ldr	r3, [r6, #0]
 8002726:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800272a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800272c:	f7fe fd9a 	bl	8001264 <HAL_GetTick>
 8002730:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002732:	6833      	ldr	r3, [r6, #0]
 8002734:	011b      	lsls	r3, r3, #4
 8002736:	f53f aed7 	bmi.w	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800273a:	f7fe fd93 	bl	8001264 <HAL_GetTick>
 800273e:	1bc0      	subs	r0, r0, r7
 8002740:	2864      	cmp	r0, #100	; 0x64
 8002742:	d9f6      	bls.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002744:	e753      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002746:	f7fe fd8d 	bl	8001264 <HAL_GetTick>
 800274a:	1bc0      	subs	r0, r0, r7
 800274c:	2864      	cmp	r0, #100	; 0x64
 800274e:	d984      	bls.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8002750:	e74d      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002752:	f7fe fd87 	bl	8001264 <HAL_GetTick>
 8002756:	1b80      	subs	r0, r0, r6
 8002758:	2864      	cmp	r0, #100	; 0x64
 800275a:	f67f aecf 	bls.w	80024fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 800275e:	e746      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002760:	f7fe fd80 	bl	8001264 <HAL_GetTick>
 8002764:	1b40      	subs	r0, r0, r5
 8002766:	2864      	cmp	r0, #100	; 0x64
 8002768:	f67f af32 	bls.w	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 800276c:	e73f      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x3d6>
 800276e:	bf00      	nop
 8002770:	40023800 	.word	0x40023800

08002774 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002774:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0; 
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002776:	6803      	ldr	r3, [r0, #0]
{
 8002778:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800277a:	68da      	ldr	r2, [r3, #12]
 800277c:	0652      	lsls	r2, r2, #25
 800277e:	d501      	bpl.n	8002784 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8002780:	2000      	movs	r0, #0
 8002782:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002784:	f04f 32ff 	mov.w	r2, #4294967295
 8002788:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800278a:	f7fe fd6b 	bl	8001264 <HAL_GetTick>
 800278e:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002790:	6823      	ldr	r3, [r4, #0]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	065b      	lsls	r3, r3, #25
 8002796:	d4f3      	bmi.n	8002780 <RTC_EnterInitMode+0xc>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002798:	f7fe fd64 	bl	8001264 <HAL_GetTick>
 800279c:	1b40      	subs	r0, r0, r5
 800279e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80027a2:	d9f5      	bls.n	8002790 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 80027a4:	2003      	movs	r0, #3
}
 80027a6:	bd38      	pop	{r3, r4, r5, pc}

080027a8 <HAL_RTC_Init>:
{
 80027a8:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 80027aa:	4604      	mov	r4, r0
 80027ac:	b1b0      	cbz	r0, 80027dc <HAL_RTC_Init+0x34>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80027ae:	7f43      	ldrb	r3, [r0, #29]
 80027b0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80027b4:	b913      	cbnz	r3, 80027bc <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 80027b6:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80027b8:	f001 fd90 	bl	80042dc <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 80027bc:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80027be:	22ca      	movs	r2, #202	; 0xca
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80027c0:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;  
 80027c2:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80027c4:	6823      	ldr	r3, [r4, #0]
 80027c6:	625a      	str	r2, [r3, #36]	; 0x24
 80027c8:	2253      	movs	r2, #83	; 0x53
 80027ca:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80027cc:	f7ff ffd2 	bl	8002774 <RTC_EnterInitMode>
 80027d0:	6823      	ldr	r3, [r4, #0]
 80027d2:	b128      	cbz	r0, 80027e0 <HAL_RTC_Init+0x38>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80027d4:	22ff      	movs	r2, #255	; 0xff
 80027d6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80027d8:	2304      	movs	r3, #4
 80027da:	7763      	strb	r3, [r4, #29]
     return HAL_ERROR;
 80027dc:	2001      	movs	r0, #1
}
 80027de:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80027e0:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80027e2:	6925      	ldr	r5, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80027e4:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 80027e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027ec:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80027ee:	6862      	ldr	r2, [r4, #4]
 80027f0:	6899      	ldr	r1, [r3, #8]
 80027f2:	432a      	orrs	r2, r5
 80027f4:	6965      	ldr	r5, [r4, #20]
 80027f6:	432a      	orrs	r2, r5
 80027f8:	430a      	orrs	r2, r1
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80027fa:	68a1      	ldr	r1, [r4, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80027fc:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80027fe:	68e2      	ldr	r2, [r4, #12]
 8002800:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8002802:	691a      	ldr	r2, [r3, #16]
 8002804:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType); 
 8002808:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800280a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002812:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8002814:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002816:	f022 0208 	bic.w	r2, r2, #8
 800281a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType); 
 800281c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800281e:	430a      	orrs	r2, r1
 8002820:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002822:	22ff      	movs	r2, #255	; 0xff
 8002824:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8002826:	2301      	movs	r3, #1
 8002828:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 800282a:	bd38      	pop	{r3, r4, r5, pc}

0800282c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800282c:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800282e:	4604      	mov	r4, r0
 8002830:	2800      	cmp	r0, #0
 8002832:	d04e      	beq.n	80028d2 <HAL_SPI_Init+0xa6>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002834:	2300      	movs	r3, #0
 8002836:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002838:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 800283c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002840:	b91b      	cbnz	r3, 800284a <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002842:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002846:	f001 fd81 	bl	800434c <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800284a:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800284c:	6821      	ldr	r1, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800284e:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002850:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8002854:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002856:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800285a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800285e:	600b      	str	r3, [r1, #0]
 8002860:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002864:	d932      	bls.n	80028cc <HAL_SPI_Init+0xa0>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002866:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002868:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800286c:	bf18      	it	ne
 800286e:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002870:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002872:	b92b      	cbnz	r3, 8002880 <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002874:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002878:	bf8c      	ite	hi
 800287a:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800287c:	2301      	movls	r3, #1
 800287e:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002880:	68a6      	ldr	r6, [r4, #8]
 8002882:	6863      	ldr	r3, [r4, #4]
 8002884:	69a5      	ldr	r5, [r4, #24]
 8002886:	4333      	orrs	r3, r6
 8002888:	6926      	ldr	r6, [r4, #16]
 800288a:	4333      	orrs	r3, r6
 800288c:	6966      	ldr	r6, [r4, #20]
 800288e:	4333      	orrs	r3, r6
 8002890:	69e6      	ldr	r6, [r4, #28]
 8002892:	4333      	orrs	r3, r6
 8002894:	6a26      	ldr	r6, [r4, #32]
 8002896:	4333      	orrs	r3, r6
 8002898:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800289a:	4333      	orrs	r3, r6
 800289c:	f405 7600 	and.w	r6, r5, #512	; 0x200
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80028a0:	0c2d      	lsrs	r5, r5, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80028a2:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80028a4:	f005 0504 	and.w	r5, r5, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80028a8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80028aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028ac:	431a      	orrs	r2, r3
 80028ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80028b0:	431a      	orrs	r2, r3
 80028b2:	432a      	orrs	r2, r5
 80028b4:	4302      	orrs	r2, r0
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028b6:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80028b8:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028ba:	69cb      	ldr	r3, [r1, #28]
 80028bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028c0:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 80028c2:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028c4:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80028c6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 80028ca:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80028cc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80028d0:	e7cc      	b.n	800286c <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 80028d2:	2001      	movs	r0, #1
}
 80028d4:	bd70      	pop	{r4, r5, r6, pc}

080028d6 <TIM_TI1_ConfigInputStage>:
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028d6:	6a03      	ldr	r3, [r0, #32]
{
 80028d8:	b510      	push	{r4, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028da:	6a04      	ldr	r4, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028dc:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028e0:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 80028e4:	430b      	orrs	r3, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028e6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80028e8:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028ea:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 80028ee:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028f2:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80028f4:	6203      	str	r3, [r0, #32]
 80028f6:	bd10      	pop	{r4, pc}

080028f8 <TIM_TI2_ConfigInputStage>:
{
uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028f8:	6a03      	ldr	r3, [r0, #32]
 80028fa:	f023 0310 	bic.w	r3, r3, #16
{
 80028fe:	b510      	push	{r4, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002900:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002902:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002904:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002906:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800290a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12);
 800290e:	ea44 3202 	orr.w	r2, r4, r2, lsl #12
  tmpccer |= (TIM_ICPolarity << 4);
 8002912:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002916:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002918:	6203      	str	r3, [r0, #32]
 800291a:	bd10      	pop	{r4, pc}

0800291c <HAL_TIM_PWM_MspInit>:
 800291c:	4770      	bx	lr

0800291e <HAL_TIM_PWM_MspDeInit>:
 800291e:	4770      	bx	lr

08002920 <HAL_TIM_PWM_DeInit>:
  htim->State = HAL_TIM_STATE_BUSY;
 8002920:	2302      	movs	r3, #2
  __HAL_TIM_DISABLE(htim);
 8002922:	f241 1211 	movw	r2, #4369	; 0x1111
{
 8002926:	b510      	push	{r4, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 8002928:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
{
 800292c:	4604      	mov	r4, r0
  __HAL_TIM_DISABLE(htim);
 800292e:	6803      	ldr	r3, [r0, #0]
 8002930:	6a19      	ldr	r1, [r3, #32]
 8002932:	4211      	tst	r1, r2
 8002934:	d108      	bne.n	8002948 <HAL_TIM_PWM_DeInit+0x28>
 8002936:	6a19      	ldr	r1, [r3, #32]
 8002938:	f240 4244 	movw	r2, #1092	; 0x444
 800293c:	4211      	tst	r1, r2
 800293e:	d103      	bne.n	8002948 <HAL_TIM_PWM_DeInit+0x28>
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	f022 0201 	bic.w	r2, r2, #1
 8002946:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_MspDeInit(htim);
 8002948:	4620      	mov	r0, r4
 800294a:	f7ff ffe8 	bl	800291e <HAL_TIM_PWM_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET; 
 800294e:	2000      	movs	r0, #0
 8002950:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002954:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002958:	bd10      	pop	{r4, pc}
	...

0800295c <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800295c:	4a30      	ldr	r2, [pc, #192]	; (8002a20 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800295e:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002960:	4290      	cmp	r0, r2
 8002962:	d012      	beq.n	800298a <TIM_Base_SetConfig+0x2e>
 8002964:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002968:	d00f      	beq.n	800298a <TIM_Base_SetConfig+0x2e>
 800296a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800296e:	4290      	cmp	r0, r2
 8002970:	d00b      	beq.n	800298a <TIM_Base_SetConfig+0x2e>
 8002972:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002976:	4290      	cmp	r0, r2
 8002978:	d007      	beq.n	800298a <TIM_Base_SetConfig+0x2e>
 800297a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800297e:	4290      	cmp	r0, r2
 8002980:	d003      	beq.n	800298a <TIM_Base_SetConfig+0x2e>
 8002982:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002986:	4290      	cmp	r0, r2
 8002988:	d11d      	bne.n	80029c6 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 800298a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800298c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002990:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002992:	4a23      	ldr	r2, [pc, #140]	; (8002a20 <TIM_Base_SetConfig+0xc4>)
 8002994:	4290      	cmp	r0, r2
 8002996:	d104      	bne.n	80029a2 <TIM_Base_SetConfig+0x46>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002998:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800299c:	68ca      	ldr	r2, [r1, #12]
 800299e:	4313      	orrs	r3, r2
 80029a0:	e028      	b.n	80029f4 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80029a2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80029a6:	d0f7      	beq.n	8002998 <TIM_Base_SetConfig+0x3c>
 80029a8:	4a1e      	ldr	r2, [pc, #120]	; (8002a24 <TIM_Base_SetConfig+0xc8>)
 80029aa:	4290      	cmp	r0, r2
 80029ac:	d0f4      	beq.n	8002998 <TIM_Base_SetConfig+0x3c>
 80029ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029b2:	4290      	cmp	r0, r2
 80029b4:	d0f0      	beq.n	8002998 <TIM_Base_SetConfig+0x3c>
 80029b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029ba:	4290      	cmp	r0, r2
 80029bc:	d0ec      	beq.n	8002998 <TIM_Base_SetConfig+0x3c>
 80029be:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80029c2:	4290      	cmp	r0, r2
 80029c4:	d0e8      	beq.n	8002998 <TIM_Base_SetConfig+0x3c>
 80029c6:	4a18      	ldr	r2, [pc, #96]	; (8002a28 <TIM_Base_SetConfig+0xcc>)
 80029c8:	4290      	cmp	r0, r2
 80029ca:	d0e5      	beq.n	8002998 <TIM_Base_SetConfig+0x3c>
 80029cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029d0:	4290      	cmp	r0, r2
 80029d2:	d0e1      	beq.n	8002998 <TIM_Base_SetConfig+0x3c>
 80029d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029d8:	4290      	cmp	r0, r2
 80029da:	d0dd      	beq.n	8002998 <TIM_Base_SetConfig+0x3c>
 80029dc:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80029e0:	4290      	cmp	r0, r2
 80029e2:	d0d9      	beq.n	8002998 <TIM_Base_SetConfig+0x3c>
 80029e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029e8:	4290      	cmp	r0, r2
 80029ea:	d0d5      	beq.n	8002998 <TIM_Base_SetConfig+0x3c>
 80029ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029f0:	4290      	cmp	r0, r2
 80029f2:	d0d1      	beq.n	8002998 <TIM_Base_SetConfig+0x3c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029f4:	694a      	ldr	r2, [r1, #20]
 80029f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029fa:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80029fc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029fe:	688b      	ldr	r3, [r1, #8]
 8002a00:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002a02:	680b      	ldr	r3, [r1, #0]
 8002a04:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002a06:	4b06      	ldr	r3, [pc, #24]	; (8002a20 <TIM_Base_SetConfig+0xc4>)
 8002a08:	4298      	cmp	r0, r3
 8002a0a:	d006      	beq.n	8002a1a <TIM_Base_SetConfig+0xbe>
 8002a0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a10:	4298      	cmp	r0, r3
 8002a12:	d002      	beq.n	8002a1a <TIM_Base_SetConfig+0xbe>
  TIMx->EGR = TIM_EGR_UG;
 8002a14:	2301      	movs	r3, #1
 8002a16:	6143      	str	r3, [r0, #20]
}
 8002a18:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8002a1a:	690b      	ldr	r3, [r1, #16]
 8002a1c:	6303      	str	r3, [r0, #48]	; 0x30
 8002a1e:	e7f9      	b.n	8002a14 <TIM_Base_SetConfig+0xb8>
 8002a20:	40010000 	.word	0x40010000
 8002a24:	40000400 	.word	0x40000400
 8002a28:	40014000 	.word	0x40014000

08002a2c <HAL_TIM_Base_Init>:
{ 
 8002a2c:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002a2e:	4604      	mov	r4, r0
 8002a30:	b1a0      	cbz	r0, 8002a5c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002a32:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002a36:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002a3a:	b91b      	cbnz	r3, 8002a44 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002a3c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002a40:	f001 fe2e 	bl	80046a0 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002a44:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002a46:	6820      	ldr	r0, [r4, #0]
 8002a48:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;
 8002a4a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002a4e:	f7ff ff85 	bl	800295c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002a52:	2301      	movs	r3, #1
  return HAL_OK;
 8002a54:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002a56:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002a5a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002a5c:	2001      	movs	r0, #1
}
 8002a5e:	bd10      	pop	{r4, pc}

08002a60 <HAL_TIM_PWM_Init>:
{
 8002a60:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002a62:	4604      	mov	r4, r0
 8002a64:	b1a0      	cbz	r0, 8002a90 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002a66:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002a6a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002a6e:	b91b      	cbnz	r3, 8002a78 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002a70:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002a74:	f7ff ff52 	bl	800291c <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 8002a78:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002a7a:	6820      	ldr	r0, [r4, #0]
 8002a7c:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;  
 8002a7e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002a82:	f7ff ff6b 	bl	800295c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002a86:	2301      	movs	r3, #1
  return HAL_OK;
 8002a88:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002a8a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002a8e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002a90:	2001      	movs	r0, #1
}  
 8002a92:	bd10      	pop	{r4, pc}

08002a94 <TIM_OC1_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a94:	6a03      	ldr	r3, [r0, #32]
 8002a96:	f023 0301 	bic.w	r3, r3, #1
{
 8002a9a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a9c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002a9e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8002aa0:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002aa2:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8002aa4:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 8002aa8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002aaa:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8002aae:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002ab2:	432c      	orrs	r4, r5
  tmpccer |= OC_Config->OCPolarity;
 8002ab4:	688d      	ldr	r5, [r1, #8]
 8002ab6:	432b      	orrs	r3, r5
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002ab8:	4d0c      	ldr	r5, [pc, #48]	; (8002aec <TIM_OC1_SetConfig+0x58>)
 8002aba:	42a8      	cmp	r0, r5
 8002abc:	d009      	beq.n	8002ad2 <TIM_OC1_SetConfig+0x3e>
 8002abe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002ac2:	42a8      	cmp	r0, r5
 8002ac4:	d005      	beq.n	8002ad2 <TIM_OC1_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 8002ac6:	6042      	str	r2, [r0, #4]
  TIMx->CCR1 = OC_Config->Pulse;
 8002ac8:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002aca:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8002acc:	6342      	str	r2, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;  
 8002ace:	6203      	str	r3, [r0, #32]
} 
 8002ad0:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8002ad2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ad4:	f023 0308 	bic.w	r3, r3, #8
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ad8:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ada:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
 8002ade:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ae0:	694d      	ldr	r5, [r1, #20]
 8002ae2:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ae4:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ae8:	432a      	orrs	r2, r5
 8002aea:	e7ec      	b.n	8002ac6 <TIM_OC1_SetConfig+0x32>
 8002aec:	40010000 	.word	0x40010000

08002af0 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002af0:	6a03      	ldr	r3, [r0, #32]
 8002af2:	f023 0310 	bic.w	r3, r3, #16
{
 8002af6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002af8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002afa:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8002afc:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002afe:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8002b00:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002b04:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b06:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8002b0a:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002b0e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4);
 8002b12:	688d      	ldr	r5, [r1, #8]
 8002b14:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002b18:	4d0d      	ldr	r5, [pc, #52]	; (8002b50 <TIM_OC2_SetConfig+0x60>)
 8002b1a:	42a8      	cmp	r0, r5
 8002b1c:	d009      	beq.n	8002b32 <TIM_OC2_SetConfig+0x42>
 8002b1e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002b22:	42a8      	cmp	r0, r5
 8002b24:	d005      	beq.n	8002b32 <TIM_OC2_SetConfig+0x42>
  TIMx->CR2 = tmpcr2;
 8002b26:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8002b28:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002b2a:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002b2c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002b2e:	6203      	str	r3, [r0, #32]
}
 8002b30:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8002b32:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002b38:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b3a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8002b3e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8002b42:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002b44:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002b4a:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 8002b4e:	e7ea      	b.n	8002b26 <TIM_OC2_SetConfig+0x36>
 8002b50:	40010000 	.word	0x40010000

08002b54 <TIM_OC3_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b54:	6a03      	ldr	r3, [r0, #32]
 8002b56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 8002b5a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b5c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002b5e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8002b60:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8002b62:	69c4      	ldr	r4, [r0, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8002b64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 8002b68:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8002b6a:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8002b6e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002b72:	432c      	orrs	r4, r5
  tmpccer |= (OC_Config->OCPolarity << 8);
 8002b74:	688d      	ldr	r5, [r1, #8]
 8002b76:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002b7a:	4d0e      	ldr	r5, [pc, #56]	; (8002bb4 <TIM_OC3_SetConfig+0x60>)
 8002b7c:	42a8      	cmp	r0, r5
 8002b7e:	d009      	beq.n	8002b94 <TIM_OC3_SetConfig+0x40>
 8002b80:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002b84:	42a8      	cmp	r0, r5
 8002b86:	d005      	beq.n	8002b94 <TIM_OC3_SetConfig+0x40>
  TIMx->CR2 = tmpcr2;
 8002b88:	6042      	str	r2, [r0, #4]
  TIMx->CCR3 = OC_Config->Pulse;
 8002b8a:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002b8c:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8002b8e:	63c2      	str	r2, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8002b90:	6203      	str	r3, [r0, #32]
}
 8002b92:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8002b94:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8002b9a:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b9c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8002ba0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8002ba4:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8002ba6:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ba8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8002bac:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8002bb0:	e7ea      	b.n	8002b88 <TIM_OC3_SetConfig+0x34>
 8002bb2:	bf00      	nop
 8002bb4:	40010000 	.word	0x40010000

08002bb8 <TIM_OC4_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002bb8:	6a03      	ldr	r3, [r0, #32]
 8002bba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 8002bbe:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002bc0:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002bc2:	6a04      	ldr	r4, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8002bc4:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8002bc6:	69c3      	ldr	r3, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8002bc8:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002bcc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002bce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bd2:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002bd6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12);
 8002bda:	688d      	ldr	r5, [r1, #8]
 8002bdc:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002be0:	4d09      	ldr	r5, [pc, #36]	; (8002c08 <TIM_OC4_SetConfig+0x50>)
 8002be2:	42a8      	cmp	r0, r5
 8002be4:	d009      	beq.n	8002bfa <TIM_OC4_SetConfig+0x42>
 8002be6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002bea:	42a8      	cmp	r0, r5
 8002bec:	d005      	beq.n	8002bfa <TIM_OC4_SetConfig+0x42>
  TIMx->CR2 = tmpcr2;
 8002bee:	6042      	str	r2, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002bf0:	61c3      	str	r3, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8002bf2:	684b      	ldr	r3, [r1, #4]
 8002bf4:	6403      	str	r3, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8002bf6:	6204      	str	r4, [r0, #32]
}
 8002bf8:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002bfa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8002bfe:	694d      	ldr	r5, [r1, #20]
 8002c00:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 8002c04:	e7f3      	b.n	8002bee <TIM_OC4_SetConfig+0x36>
 8002c06:	bf00      	nop
 8002c08:	40010000 	.word	0x40010000

08002c0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c0c:	b510      	push	{r4, lr}

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002c0e:	430a      	orrs	r2, r1
  tmpsmcr = TIMx->SMCR;
 8002c10:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002c12:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c16:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002c1a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c1c:	6083      	str	r3, [r0, #8]
 8002c1e:	bd10      	pop	{r4, pc}

08002c20 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002c20:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002c24:	2b01      	cmp	r3, #1
{
 8002c26:	b510      	push	{r4, lr}
 8002c28:	4604      	mov	r4, r0
 8002c2a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002c2e:	d018      	beq.n	8002c62 <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 8002c30:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002c34:	2301      	movs	r3, #1
  tmpsmcr = htim->Instance->SMCR;
 8002c36:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8002c38:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002c3c:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c3e:	4b3e      	ldr	r3, [pc, #248]	; (8002d38 <HAL_TIM_ConfigClockSource+0x118>)
 8002c40:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8002c42:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002c44:	680b      	ldr	r3, [r1, #0]
 8002c46:	2b40      	cmp	r3, #64	; 0x40
 8002c48:	d059      	beq.n	8002cfe <HAL_TIM_ConfigClockSource+0xde>
 8002c4a:	d815      	bhi.n	8002c78 <HAL_TIM_ConfigClockSource+0x58>
 8002c4c:	2b10      	cmp	r3, #16
 8002c4e:	d067      	beq.n	8002d20 <HAL_TIM_ConfigClockSource+0x100>
 8002c50:	d808      	bhi.n	8002c64 <HAL_TIM_ConfigClockSource+0x44>
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d05e      	beq.n	8002d14 <HAL_TIM_ConfigClockSource+0xf4>
  htim->State = HAL_TIM_STATE_READY;
 8002c56:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002c58:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002c5a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002c5e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002c62:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8002c64:	2b20      	cmp	r3, #32
 8002c66:	d061      	beq.n	8002d2c <HAL_TIM_ConfigClockSource+0x10c>
 8002c68:	2b30      	cmp	r3, #48	; 0x30
 8002c6a:	d1f4      	bne.n	8002c56 <HAL_TIM_ConfigClockSource+0x36>
   tmpsmcr = TIMx->SMCR;
 8002c6c:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002c72:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8002c76:	e026      	b.n	8002cc6 <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8002c78:	2b70      	cmp	r3, #112	; 0x70
 8002c7a:	d026      	beq.n	8002cca <HAL_TIM_ConfigClockSource+0xaa>
 8002c7c:	d80e      	bhi.n	8002c9c <HAL_TIM_ConfigClockSource+0x7c>
 8002c7e:	2b50      	cmp	r3, #80	; 0x50
 8002c80:	d032      	beq.n	8002ce8 <HAL_TIM_ConfigClockSource+0xc8>
 8002c82:	2b60      	cmp	r3, #96	; 0x60
 8002c84:	d1e7      	bne.n	8002c56 <HAL_TIM_ConfigClockSource+0x36>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8002c86:	68ca      	ldr	r2, [r1, #12]
 8002c88:	6849      	ldr	r1, [r1, #4]
 8002c8a:	f7ff fe35 	bl	80028f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c8e:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 8002c90:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002c96:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8002c9a:	e023      	b.n	8002ce4 <HAL_TIM_ConfigClockSource+0xc4>
  switch (sClockSourceConfig->ClockSource)
 8002c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ca0:	d00c      	beq.n	8002cbc <HAL_TIM_ConfigClockSource+0x9c>
 8002ca2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ca6:	d1d6      	bne.n	8002c56 <HAL_TIM_ConfigClockSource+0x36>
      TIM_ETR_SetConfig(htim->Instance, 
 8002ca8:	68cb      	ldr	r3, [r1, #12]
 8002caa:	684a      	ldr	r2, [r1, #4]
 8002cac:	6889      	ldr	r1, [r1, #8]
 8002cae:	f7ff ffad 	bl	8002c0c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cb2:	6822      	ldr	r2, [r4, #0]
 8002cb4:	6893      	ldr	r3, [r2, #8]
 8002cb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cba:	e013      	b.n	8002ce4 <HAL_TIM_ConfigClockSource+0xc4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002cbc:	6883      	ldr	r3, [r0, #8]
 8002cbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cc2:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 8002cc6:	6083      	str	r3, [r0, #8]
 8002cc8:	e7c5      	b.n	8002c56 <HAL_TIM_ConfigClockSource+0x36>
      TIM_ETR_SetConfig(htim->Instance, 
 8002cca:	68cb      	ldr	r3, [r1, #12]
 8002ccc:	684a      	ldr	r2, [r1, #4]
 8002cce:	6889      	ldr	r1, [r1, #8]
 8002cd0:	f7ff ff9c 	bl	8002c0c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002cd4:	6822      	ldr	r2, [r4, #0]
 8002cd6:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cdc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ce0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ce4:	6093      	str	r3, [r2, #8]
    break;
 8002ce6:	e7b6      	b.n	8002c56 <HAL_TIM_ConfigClockSource+0x36>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002ce8:	68ca      	ldr	r2, [r1, #12]
 8002cea:	6849      	ldr	r1, [r1, #4]
 8002cec:	f7ff fdf3 	bl	80028d6 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cf0:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 8002cf2:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002cf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002cf8:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8002cfc:	e7f2      	b.n	8002ce4 <HAL_TIM_ConfigClockSource+0xc4>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002cfe:	68ca      	ldr	r2, [r1, #12]
 8002d00:	6849      	ldr	r1, [r1, #4]
 8002d02:	f7ff fde8 	bl	80028d6 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d06:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 8002d08:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002d0e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8002d12:	e7e7      	b.n	8002ce4 <HAL_TIM_ConfigClockSource+0xc4>
   tmpsmcr = TIMx->SMCR;
 8002d14:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002d1a:	f043 0307 	orr.w	r3, r3, #7
 8002d1e:	e7d2      	b.n	8002cc6 <HAL_TIM_ConfigClockSource+0xa6>
   tmpsmcr = TIMx->SMCR;
 8002d20:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002d26:	f043 0317 	orr.w	r3, r3, #23
 8002d2a:	e7cc      	b.n	8002cc6 <HAL_TIM_ConfigClockSource+0xa6>
   tmpsmcr = TIMx->SMCR;
 8002d2c:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002d32:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 8002d36:	e7c6      	b.n	8002cc6 <HAL_TIM_ConfigClockSource+0xa6>
 8002d38:	fffe0088 	.word	0xfffe0088

08002d3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d3c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8002d3e:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d40:	6a03      	ldr	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002d42:	408a      	lsls	r2, r1
  tmp = TIM_CCER_CC1E << Channel;
 8002d44:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8002d46:	ea23 0304 	bic.w	r3, r3, r4
 8002d4a:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002d4c:	6a03      	ldr	r3, [r0, #32]
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	6202      	str	r2, [r0, #32]
 8002d52:	bd10      	pop	{r4, pc}

08002d54 <HAL_TIM_PWM_Start>:
{
 8002d54:	b510      	push	{r4, lr}
 8002d56:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d58:	2201      	movs	r2, #1
 8002d5a:	6800      	ldr	r0, [r0, #0]
 8002d5c:	f7ff ffee 	bl	8002d3c <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8002d60:	6823      	ldr	r3, [r4, #0]
 8002d62:	4a08      	ldr	r2, [pc, #32]	; (8002d84 <HAL_TIM_PWM_Start+0x30>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d003      	beq.n	8002d70 <HAL_TIM_PWM_Start+0x1c>
 8002d68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d103      	bne.n	8002d78 <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8002d70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d76:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8002d78:	681a      	ldr	r2, [r3, #0]
} 
 8002d7a:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8002d7c:	f042 0201 	orr.w	r2, r2, #1
 8002d80:	601a      	str	r2, [r3, #0]
} 
 8002d82:	bd10      	pop	{r4, pc}
 8002d84:	40010000 	.word	0x40010000

08002d88 <HAL_TIM_PWM_Stop>:
{ 
 8002d88:	b510      	push	{r4, lr}
 8002d8a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	6800      	ldr	r0, [r0, #0]
 8002d90:	f7ff ffd4 	bl	8002d3c <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8002d94:	6823      	ldr	r3, [r4, #0]
 8002d96:	4a14      	ldr	r2, [pc, #80]	; (8002de8 <HAL_TIM_PWM_Stop+0x60>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d003      	beq.n	8002da4 <HAL_TIM_PWM_Stop+0x1c>
 8002d9c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d10d      	bne.n	8002dc0 <HAL_TIM_PWM_Stop+0x38>
    __HAL_TIM_MOE_DISABLE(htim);
 8002da4:	6a19      	ldr	r1, [r3, #32]
 8002da6:	f241 1211 	movw	r2, #4369	; 0x1111
 8002daa:	4211      	tst	r1, r2
 8002dac:	d108      	bne.n	8002dc0 <HAL_TIM_PWM_Stop+0x38>
 8002dae:	6a19      	ldr	r1, [r3, #32]
 8002db0:	f240 4244 	movw	r2, #1092	; 0x444
 8002db4:	4211      	tst	r1, r2
 8002db6:	d103      	bne.n	8002dc0 <HAL_TIM_PWM_Stop+0x38>
 8002db8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dbe:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8002dc0:	6a19      	ldr	r1, [r3, #32]
 8002dc2:	f241 1211 	movw	r2, #4369	; 0x1111
 8002dc6:	4211      	tst	r1, r2
 8002dc8:	d108      	bne.n	8002ddc <HAL_TIM_PWM_Stop+0x54>
 8002dca:	6a19      	ldr	r1, [r3, #32]
 8002dcc:	f240 4244 	movw	r2, #1092	; 0x444
 8002dd0:	4211      	tst	r1, r2
 8002dd2:	d103      	bne.n	8002ddc <HAL_TIM_PWM_Stop+0x54>
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	f022 0201 	bic.w	r2, r2, #1
 8002dda:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8002ddc:	2301      	movs	r3, #1
} 
 8002dde:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002de0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
} 
 8002de4:	bd10      	pop	{r4, pc}
 8002de6:	bf00      	nop
 8002de8:	40010000 	.word	0x40010000

08002dec <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002dec:	6a03      	ldr	r3, [r0, #32]
 8002dee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 8002df2:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002df4:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002df6:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002df8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002dfa:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002dfc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 8002e00:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002e02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8002e0a:	432b      	orrs	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 8002e0c:	688d      	ldr	r5, [r1, #8]
 8002e0e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002e12:	4d09      	ldr	r5, [pc, #36]	; (8002e38 <TIM_OC5_SetConfig+0x4c>)
 8002e14:	42a8      	cmp	r0, r5
 8002e16:	d003      	beq.n	8002e20 <TIM_OC5_SetConfig+0x34>
 8002e18:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002e1c:	42a8      	cmp	r0, r5
 8002e1e:	d104      	bne.n	8002e2a <TIM_OC5_SetConfig+0x3e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002e20:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 8002e24:	694d      	ldr	r5, [r1, #20]
 8002e26:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e2a:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002e2c:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002e2e:	684b      	ldr	r3, [r1, #4]
 8002e30:	6583      	str	r3, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002e32:	6202      	str	r2, [r0, #32]
 8002e34:	bd30      	pop	{r4, r5, pc}
 8002e36:	bf00      	nop
 8002e38:	40010000 	.word	0x40010000

08002e3c <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002e3c:	6a03      	ldr	r3, [r0, #32]
 8002e3e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 8002e42:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002e44:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e46:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002e48:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002e4a:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002e4c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002e50:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002e52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002e5a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 8002e5e:	688d      	ldr	r5, [r1, #8]
 8002e60:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002e64:	4d08      	ldr	r5, [pc, #32]	; (8002e88 <TIM_OC6_SetConfig+0x4c>)
 8002e66:	42a8      	cmp	r0, r5
 8002e68:	d003      	beq.n	8002e72 <TIM_OC6_SetConfig+0x36>
 8002e6a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002e6e:	42a8      	cmp	r0, r5
 8002e70:	d104      	bne.n	8002e7c <TIM_OC6_SetConfig+0x40>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002e72:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 8002e76:	694d      	ldr	r5, [r1, #20]
 8002e78:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e7c:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002e7e:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002e80:	684b      	ldr	r3, [r1, #4]
 8002e82:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002e84:	6202      	str	r2, [r0, #32]
 8002e86:	bd30      	pop	{r4, r5, pc}
 8002e88:	40010000 	.word	0x40010000

08002e8c <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8002e8c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002e90:	2b01      	cmp	r3, #1
{
 8002e92:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8002e94:	d01c      	beq.n	8002ed0 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  tmpcr2 = htim->Instance->CR2;
 8002e96:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002e98:	4d0e      	ldr	r5, [pc, #56]	; (8002ed4 <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  tmpcr2 = htim->Instance->CR2;
 8002e9a:	6853      	ldr	r3, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002e9c:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 8002e9e:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002ea0:	d003      	beq.n	8002eaa <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 8002ea2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002ea6:	42aa      	cmp	r2, r5
 8002ea8:	d103      	bne.n	8002eb2 <HAL_TIMEx_MasterConfigSynchronization+0x26>
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002eaa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002eae:	684d      	ldr	r5, [r1, #4]
 8002eb0:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002eb2:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002eb8:	6889      	ldr	r1, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002eba:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ebe:	432b      	orrs	r3, r5
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ec0:	4321      	orrs	r1, r4
  htim->Instance->CR2 = tmpcr2;
 8002ec2:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(htim);
 8002ec4:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 8002ec6:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8002ec8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8002ecc:	4618      	mov	r0, r3
 8002ece:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8002ed0:	2002      	movs	r0, #2
} 
 8002ed2:	bd30      	pop	{r4, r5, pc}
 8002ed4:	40010000 	.word	0x40010000

08002ed8 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8002ed8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002edc:	2b01      	cmp	r3, #1
{
 8002ede:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8002ee0:	d038      	beq.n	8002f54 <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002ee2:	68cb      	ldr	r3, [r1, #12]
 8002ee4:	688a      	ldr	r2, [r1, #8]
 8002ee6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002eea:	4c1b      	ldr	r4, [pc, #108]	; (8002f58 <HAL_TIMEx_ConfigBreakDeadTime+0x80>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002eec:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002eee:	684a      	ldr	r2, [r1, #4]
 8002ef0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ef4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002ef6:	680a      	ldr	r2, [r1, #0]
 8002ef8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002efc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002efe:	690a      	ldr	r2, [r1, #16]
 8002f00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f04:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002f06:	694a      	ldr	r2, [r1, #20]
 8002f08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f0c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002f0e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002f10:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002f14:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 8002f16:	698a      	ldr	r2, [r1, #24]
 8002f18:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002f1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002f20:	6802      	ldr	r2, [r0, #0]
 8002f22:	42a2      	cmp	r2, r4
 8002f24:	d003      	beq.n	8002f2e <HAL_TIMEx_ConfigBreakDeadTime+0x56>
 8002f26:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002f2a:	42a2      	cmp	r2, r4
 8002f2c:	d10c      	bne.n	8002f48 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 8002f2e:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8002f30:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002f34:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002f38:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002f3a:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002f3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f40:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002f42:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002f46:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8002f48:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8002f50:	4618      	mov	r0, r3
 8002f52:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8002f54:	2002      	movs	r0, #2
}
 8002f56:	bd10      	pop	{r4, pc}
 8002f58:	40010000 	.word	0x40010000

08002f5c <HAL_TIM_PWM_ConfigChannel>:
{
 8002f5c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002f5e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002f62:	4604      	mov	r4, r0
 8002f64:	460d      	mov	r5, r1
 8002f66:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d010      	beq.n	8002f8e <HAL_TIM_PWM_ConfigChannel+0x32>
 8002f6c:	2301      	movs	r3, #1
  switch (Channel)
 8002f6e:	2a08      	cmp	r2, #8
  htim->State = HAL_TIM_STATE_BUSY;
 8002f70:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002f74:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8002f78:	d043      	beq.n	8003002 <HAL_TIM_PWM_ConfigChannel+0xa6>
 8002f7a:	d809      	bhi.n	8002f90 <HAL_TIM_PWM_ConfigChannel+0x34>
 8002f7c:	b1fa      	cbz	r2, 8002fbe <HAL_TIM_PWM_ConfigChannel+0x62>
 8002f7e:	2a04      	cmp	r2, #4
 8002f80:	d02e      	beq.n	8002fe0 <HAL_TIM_PWM_ConfigChannel+0x84>
  htim->State = HAL_TIM_STATE_READY;
 8002f82:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002f84:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002f86:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002f8a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002f8e:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8002f90:	2a10      	cmp	r2, #16
 8002f92:	d047      	beq.n	8003024 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8002f94:	2a14      	cmp	r2, #20
 8002f96:	d056      	beq.n	8003046 <HAL_TIM_PWM_ConfigChannel+0xea>
 8002f98:	2a0c      	cmp	r2, #12
 8002f9a:	d1f2      	bne.n	8002f82 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f9c:	6820      	ldr	r0, [r4, #0]
 8002f9e:	f7ff fe0b 	bl	8002bb8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fa2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8002fa4:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fa6:	69da      	ldr	r2, [r3, #28]
 8002fa8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fae:	69da      	ldr	r2, [r3, #28]
 8002fb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8002fb6:	69da      	ldr	r2, [r3, #28]
 8002fb8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002fbc:	e030      	b.n	8003020 <HAL_TIM_PWM_ConfigChannel+0xc4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002fbe:	6820      	ldr	r0, [r4, #0]
 8002fc0:	f7ff fd68 	bl	8002a94 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fc4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fc6:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fc8:	699a      	ldr	r2, [r3, #24]
 8002fca:	f042 0208 	orr.w	r2, r2, #8
 8002fce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fd0:	699a      	ldr	r2, [r3, #24]
 8002fd2:	f022 0204 	bic.w	r2, r2, #4
 8002fd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fd8:	699a      	ldr	r2, [r3, #24]
 8002fda:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002fdc:	619a      	str	r2, [r3, #24]
    break;
 8002fde:	e7d0      	b.n	8002f82 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fe0:	6820      	ldr	r0, [r4, #0]
 8002fe2:	f7ff fd85 	bl	8002af0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fe6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002fe8:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fea:	699a      	ldr	r2, [r3, #24]
 8002fec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ff0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ff2:	699a      	ldr	r2, [r3, #24]
 8002ff4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ff8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002ffa:	699a      	ldr	r2, [r3, #24]
 8002ffc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003000:	e7ec      	b.n	8002fdc <HAL_TIM_PWM_ConfigChannel+0x80>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003002:	6820      	ldr	r0, [r4, #0]
 8003004:	f7ff fda6 	bl	8002b54 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003008:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 800300a:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800300c:	69da      	ldr	r2, [r3, #28]
 800300e:	f042 0208 	orr.w	r2, r2, #8
 8003012:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003014:	69da      	ldr	r2, [r3, #28]
 8003016:	f022 0204 	bic.w	r2, r2, #4
 800301a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 800301c:	69da      	ldr	r2, [r3, #28]
 800301e:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8003020:	61da      	str	r2, [r3, #28]
    break;
 8003022:	e7ae      	b.n	8002f82 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003024:	6820      	ldr	r0, [r4, #0]
 8003026:	f7ff fee1 	bl	8002dec <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800302a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 800302c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800302e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003030:	f042 0208 	orr.w	r2, r2, #8
 8003034:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003036:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003038:	f022 0204 	bic.w	r2, r2, #4
 800303c:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 800303e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003040:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8003042:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 8003044:	e79d      	b.n	8002f82 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003046:	6820      	ldr	r0, [r4, #0]
 8003048:	f7ff fef8 	bl	8002e3c <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800304c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 800304e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003050:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003052:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003056:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003058:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800305a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800305e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8003060:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003062:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003066:	e7ec      	b.n	8003042 <HAL_TIM_PWM_ConfigChannel+0xe6>

08003068 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003068:	6803      	ldr	r3, [r0, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003070:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003072:	689a      	ldr	r2, [r3, #8]
 8003074:	f022 0201 	bic.w	r2, r2, #1
 8003078:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800307a:	2320      	movs	r3, #32
 800307c:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 8003080:	4770      	bx	lr

08003082 <HAL_UART_DeInit>:
{
 8003082:	b538      	push	{r3, r4, r5, lr}
  if(huart == NULL)
 8003084:	4605      	mov	r5, r0
 8003086:	b1b0      	cbz	r0, 80030b6 <HAL_UART_DeInit+0x34>
  huart->gState = HAL_UART_STATE_BUSY;
 8003088:	2324      	movs	r3, #36	; 0x24
  huart->Instance->CR1 = 0x0U;
 800308a:	2400      	movs	r4, #0
  huart->gState = HAL_UART_STATE_BUSY;
 800308c:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8003090:	6803      	ldr	r3, [r0, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	f022 0201 	bic.w	r2, r2, #1
 8003098:	601a      	str	r2, [r3, #0]
  huart->Instance->CR1 = 0x0U;
 800309a:	601c      	str	r4, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800309c:	605c      	str	r4, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800309e:	609c      	str	r4, [r3, #8]
  HAL_UART_MspDeInit(huart);
 80030a0:	f001 fe78 	bl	8004d94 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a4:	66ec      	str	r4, [r5, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 80030a6:	f885 4068 	strb.w	r4, [r5, #104]	; 0x68
  return HAL_OK;
 80030aa:	4620      	mov	r0, r4
  huart->gState    = HAL_UART_STATE_RESET;
 80030ac:	f885 4069 	strb.w	r4, [r5, #105]	; 0x69
  huart->RxState   = HAL_UART_STATE_RESET;
 80030b0:	f885 406a 	strb.w	r4, [r5, #106]	; 0x6a
  return HAL_OK;
 80030b4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80030b6:	2001      	movs	r0, #1
}
 80030b8:	bd38      	pop	{r3, r4, r5, pc}
	...

080030bc <HAL_UART_Transmit_DMA>:
{
 80030bc:	b538      	push	{r3, r4, r5, lr}
 80030be:	4604      	mov	r4, r0
 80030c0:	4613      	mov	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80030c2:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 80030c6:	2a20      	cmp	r2, #32
 80030c8:	d12b      	bne.n	8003122 <HAL_UART_Transmit_DMA+0x66>
    if((pData == NULL ) || (Size == 0U))
 80030ca:	b341      	cbz	r1, 800311e <HAL_UART_Transmit_DMA+0x62>
 80030cc:	b33b      	cbz	r3, 800311e <HAL_UART_Transmit_DMA+0x62>
    __HAL_LOCK(huart);
 80030ce:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 80030d2:	2a01      	cmp	r2, #1
 80030d4:	d025      	beq.n	8003122 <HAL_UART_Transmit_DMA+0x66>
 80030d6:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d8:	2500      	movs	r5, #0
    huart->TxXferCount = Size;
 80030da:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    __HAL_LOCK(huart);
 80030de:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030e2:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030e4:	66e5      	str	r5, [r4, #108]	; 0x6c
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80030e6:	6e20      	ldr	r0, [r4, #96]	; 0x60
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030e8:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80030ec:	4a0e      	ldr	r2, [pc, #56]	; (8003128 <HAL_UART_Transmit_DMA+0x6c>)
    huart->TxXferSize = Size;
 80030ee:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
    huart->pTxBuffPtr = pData;
 80030f2:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80030f4:	63c2      	str	r2, [r0, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80030f6:	4a0d      	ldr	r2, [pc, #52]	; (800312c <HAL_UART_Transmit_DMA+0x70>)
    huart->hdmatx->XferAbortCallback = NULL;
 80030f8:	6505      	str	r5, [r0, #80]	; 0x50
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80030fa:	6402      	str	r2, [r0, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80030fc:	4a0c      	ldr	r2, [pc, #48]	; (8003130 <HAL_UART_Transmit_DMA+0x74>)
 80030fe:	64c2      	str	r2, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 8003100:	6822      	ldr	r2, [r4, #0]
 8003102:	3228      	adds	r2, #40	; 0x28
 8003104:	f7fe fa7e 	bl	8001604 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_IT(huart, UART_FLAG_TC);
 8003108:	6823      	ldr	r3, [r4, #0]
 800310a:	2240      	movs	r2, #64	; 0x40
    return HAL_OK;
 800310c:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_IT(huart, UART_FLAG_TC);
 800310e:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003110:	689a      	ldr	r2, [r3, #8]
    __HAL_UNLOCK(huart);
 8003112:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003116:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800311a:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 800311c:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800311e:	2001      	movs	r0, #1
 8003120:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8003122:	2002      	movs	r0, #2
}
 8003124:	bd38      	pop	{r3, r4, r5, pc}
 8003126:	bf00      	nop
 8003128:	08003329 	.word	0x08003329
 800312c:	08003359 	.word	0x08003359
 8003130:	080033d1 	.word	0x080033d1

08003134 <UART_WaitOnFlagUntilTimeout>:
{
 8003134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003138:	9d06      	ldr	r5, [sp, #24]
 800313a:	4604      	mov	r4, r0
 800313c:	460f      	mov	r7, r1
 800313e:	4616      	mov	r6, r2
 8003140:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003142:	6821      	ldr	r1, [r4, #0]
 8003144:	69ca      	ldr	r2, [r1, #28]
 8003146:	ea37 0302 	bics.w	r3, r7, r2
 800314a:	bf0c      	ite	eq
 800314c:	2201      	moveq	r2, #1
 800314e:	2200      	movne	r2, #0
 8003150:	42b2      	cmp	r2, r6
 8003152:	d002      	beq.n	800315a <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8003154:	2000      	movs	r0, #0
}
 8003156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 800315a:	1c6b      	adds	r3, r5, #1
 800315c:	d0f2      	beq.n	8003144 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 800315e:	b99d      	cbnz	r5, 8003188 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003160:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8003162:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800316a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	f022 0201 	bic.w	r2, r2, #1
 8003172:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003174:	2320      	movs	r3, #32
 8003176:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800317a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 800317e:	2300      	movs	r3, #0
 8003180:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8003184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8003188:	f7fe f86c 	bl	8001264 <HAL_GetTick>
 800318c:	eba0 0008 	sub.w	r0, r0, r8
 8003190:	4285      	cmp	r5, r0
 8003192:	d8d6      	bhi.n	8003142 <UART_WaitOnFlagUntilTimeout+0xe>
 8003194:	e7e4      	b.n	8003160 <UART_WaitOnFlagUntilTimeout+0x2c>

08003196 <HAL_UART_Transmit>:
{
 8003196:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800319a:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 800319c:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
{
 80031a0:	4604      	mov	r4, r0
 80031a2:	460d      	mov	r5, r1
  if(huart->gState == HAL_UART_STATE_READY)
 80031a4:	2b20      	cmp	r3, #32
{
 80031a6:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80031a8:	d14c      	bne.n	8003244 <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 80031aa:	2900      	cmp	r1, #0
 80031ac:	d048      	beq.n	8003240 <HAL_UART_Transmit+0xaa>
 80031ae:	2a00      	cmp	r2, #0
 80031b0:	d046      	beq.n	8003240 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 80031b2:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d044      	beq.n	8003244 <HAL_UART_Transmit+0xae>
 80031ba:	2301      	movs	r3, #1
 80031bc:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031c0:	2300      	movs	r3, #0
 80031c2:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031c4:	2321      	movs	r3, #33	; 0x21
 80031c6:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 80031ca:	f7fe f84b 	bl	8001264 <HAL_GetTick>
 80031ce:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 80031d0:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 80031d4:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80031d8:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80031dc:	b292      	uxth	r2, r2
 80031de:	b962      	cbnz	r2, 80031fa <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031e0:	9700      	str	r7, [sp, #0]
 80031e2:	4633      	mov	r3, r6
 80031e4:	2140      	movs	r1, #64	; 0x40
 80031e6:	4620      	mov	r0, r4
 80031e8:	f7ff ffa4 	bl	8003134 <UART_WaitOnFlagUntilTimeout>
 80031ec:	b998      	cbnz	r0, 8003216 <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 80031ee:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80031f0:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 80031f4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    return HAL_OK;
 80031f8:	e00e      	b.n	8003218 <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 80031fa:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031fe:	2200      	movs	r2, #0
 8003200:	9700      	str	r7, [sp, #0]
 8003202:	2180      	movs	r1, #128	; 0x80
      huart->TxXferCount--;
 8003204:	3b01      	subs	r3, #1
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003206:	4620      	mov	r0, r4
      huart->TxXferCount--;
 8003208:	b29b      	uxth	r3, r3
 800320a:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800320e:	4633      	mov	r3, r6
 8003210:	f7ff ff90 	bl	8003134 <UART_WaitOnFlagUntilTimeout>
 8003214:	b118      	cbz	r0, 800321e <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 8003216:	2003      	movs	r0, #3
}
 8003218:	b002      	add	sp, #8
 800321a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800321e:	68a3      	ldr	r3, [r4, #8]
 8003220:	6822      	ldr	r2, [r4, #0]
 8003222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003226:	d107      	bne.n	8003238 <HAL_UART_Transmit+0xa2>
 8003228:	6923      	ldr	r3, [r4, #16]
 800322a:	b92b      	cbnz	r3, 8003238 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800322c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003234:	6293      	str	r3, [r2, #40]	; 0x28
        pData += 2;
 8003236:	e7cf      	b.n	80031d8 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8003238:	782b      	ldrb	r3, [r5, #0]
 800323a:	3501      	adds	r5, #1
 800323c:	6293      	str	r3, [r2, #40]	; 0x28
 800323e:	e7cb      	b.n	80031d8 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8003240:	2001      	movs	r0, #1
 8003242:	e7e9      	b.n	8003218 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8003244:	2002      	movs	r0, #2
 8003246:	e7e7      	b.n	8003218 <HAL_UART_Transmit+0x82>

08003248 <HAL_UART_Receive>:
{
 8003248:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800324c:	4698      	mov	r8, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 800324e:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
{
 8003252:	4604      	mov	r4, r0
 8003254:	460d      	mov	r5, r1
  if(huart->RxState == HAL_UART_STATE_READY)
 8003256:	2b20      	cmp	r3, #32
{
 8003258:	4616      	mov	r6, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 800325a:	d161      	bne.n	8003320 <HAL_UART_Receive+0xd8>
    if((pData == NULL ) || (Size == 0U))
 800325c:	2900      	cmp	r1, #0
 800325e:	d05d      	beq.n	800331c <HAL_UART_Receive+0xd4>
 8003260:	2a00      	cmp	r2, #0
 8003262:	d05b      	beq.n	800331c <HAL_UART_Receive+0xd4>
    __HAL_LOCK(huart);
 8003264:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8003268:	2b01      	cmp	r3, #1
 800326a:	d059      	beq.n	8003320 <HAL_UART_Receive+0xd8>
 800326c:	2301      	movs	r3, #1
 800326e:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003272:	2300      	movs	r3, #0
 8003274:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003276:	2322      	movs	r3, #34	; 0x22
 8003278:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
    tickstart = HAL_GetTick();
 800327c:	f7fd fff2 	bl	8001264 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 8003280:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8003282:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 8003284:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8003288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferCount = Size;
 800328c:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8003290:	d115      	bne.n	80032be <HAL_UART_Receive+0x76>
 8003292:	6923      	ldr	r3, [r4, #16]
 8003294:	b98b      	cbnz	r3, 80032ba <HAL_UART_Receive+0x72>
 8003296:	f240 13ff 	movw	r3, #511	; 0x1ff
 800329a:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 800329e:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
    while(huart->RxXferCount > 0U)
 80032a2:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 80032a6:	b280      	uxth	r0, r0
 80032a8:	b9b8      	cbnz	r0, 80032da <HAL_UART_Receive+0x92>
    huart->RxState = HAL_UART_STATE_READY;
 80032aa:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80032ac:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    huart->RxState = HAL_UART_STATE_READY;
 80032b0:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
 80032b4:	b002      	add	sp, #8
 80032b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 80032ba:	23ff      	movs	r3, #255	; 0xff
 80032bc:	e7ed      	b.n	800329a <HAL_UART_Receive+0x52>
 80032be:	b923      	cbnz	r3, 80032ca <HAL_UART_Receive+0x82>
 80032c0:	6923      	ldr	r3, [r4, #16]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d0f9      	beq.n	80032ba <HAL_UART_Receive+0x72>
 80032c6:	237f      	movs	r3, #127	; 0x7f
 80032c8:	e7e7      	b.n	800329a <HAL_UART_Receive+0x52>
 80032ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032ce:	d1e6      	bne.n	800329e <HAL_UART_Receive+0x56>
 80032d0:	6923      	ldr	r3, [r4, #16]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d0f7      	beq.n	80032c6 <HAL_UART_Receive+0x7e>
 80032d6:	233f      	movs	r3, #63	; 0x3f
 80032d8:	e7df      	b.n	800329a <HAL_UART_Receive+0x52>
      huart->RxXferCount--;
 80032da:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80032de:	2200      	movs	r2, #0
 80032e0:	f8cd 8000 	str.w	r8, [sp]
 80032e4:	2120      	movs	r1, #32
      huart->RxXferCount--;
 80032e6:	3b01      	subs	r3, #1
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80032e8:	4620      	mov	r0, r4
      huart->RxXferCount--;
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80032f0:	463b      	mov	r3, r7
 80032f2:	f7ff ff1f 	bl	8003134 <UART_WaitOnFlagUntilTimeout>
 80032f6:	b9a8      	cbnz	r0, 8003324 <HAL_UART_Receive+0xdc>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032f8:	68a3      	ldr	r3, [r4, #8]
 80032fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032fe:	6823      	ldr	r3, [r4, #0]
 8003300:	d106      	bne.n	8003310 <HAL_UART_Receive+0xc8>
 8003302:	6922      	ldr	r2, [r4, #16]
 8003304:	b922      	cbnz	r2, 8003310 <HAL_UART_Receive+0xc8>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8003306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003308:	4033      	ands	r3, r6
 800330a:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 800330e:	e7c8      	b.n	80032a2 <HAL_UART_Receive+0x5a>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	3501      	adds	r5, #1
 8003314:	4033      	ands	r3, r6
 8003316:	f805 3c01 	strb.w	r3, [r5, #-1]
 800331a:	e7c2      	b.n	80032a2 <HAL_UART_Receive+0x5a>
      return  HAL_ERROR;
 800331c:	2001      	movs	r0, #1
 800331e:	e7c9      	b.n	80032b4 <HAL_UART_Receive+0x6c>
    return HAL_BUSY;
 8003320:	2002      	movs	r0, #2
 8003322:	e7c7      	b.n	80032b4 <HAL_UART_Receive+0x6c>
        return HAL_TIMEOUT;
 8003324:	2003      	movs	r0, #3
 8003326:	e7c5      	b.n	80032b4 <HAL_UART_Receive+0x6c>

08003328 <UART_DMATransmitCplt>:
{
 8003328:	b508      	push	{r3, lr}
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800332a:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800332c:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8003334:	d10b      	bne.n	800334e <UART_DMATransmitCplt+0x26>
    huart->TxXferCount = 0U;
 8003336:	f8a2 3052 	strh.w	r3, [r2, #82]	; 0x52
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800333a:	6813      	ldr	r3, [r2, #0]
 800333c:	689a      	ldr	r2, [r3, #8]
 800333e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003342:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800334e:	4610      	mov	r0, r2
 8003350:	f001 f8cb 	bl	80044ea <HAL_UART_TxCpltCallback>
 8003354:	bd08      	pop	{r3, pc}

08003356 <HAL_UART_TxHalfCpltCallback>:
 8003356:	4770      	bx	lr

08003358 <UART_DMATxHalfCplt>:
{
 8003358:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800335a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800335c:	f7ff fffb 	bl	8003356 <HAL_UART_TxHalfCpltCallback>
 8003360:	bd08      	pop	{r3, pc}

08003362 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003362:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8003366:	6802      	ldr	r2, [r0, #0]
 8003368:	2b22      	cmp	r3, #34	; 0x22
{
 800336a:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 800336c:	d12a      	bne.n	80033c4 <UART_Receive_IT+0x62>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800336e:	6883      	ldr	r3, [r0, #8]
  uint16_t uhMask = huart->Mask;
 8003370:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003374:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003378:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800337a:	d11d      	bne.n	80033b8 <UART_Receive_IT+0x56>
 800337c:	6904      	ldr	r4, [r0, #16]
 800337e:	b9dc      	cbnz	r4, 80033b8 <UART_Receive_IT+0x56>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8003380:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003382:	4011      	ands	r1, r2
 8003384:	f823 1b02 	strh.w	r1, [r3], #2
      huart->pRxBuffPtr +=2;
 8003388:	6543      	str	r3, [r0, #84]	; 0x54
    if(--huart->RxXferCount == 0)
 800338a:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 800338e:	3c01      	subs	r4, #1
 8003390:	b2a4      	uxth	r4, r4
 8003392:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 8003396:	b96c      	cbnz	r4, 80033b4 <UART_Receive_IT+0x52>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003398:	6803      	ldr	r3, [r0, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80033a0:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	f022 0201 	bic.w	r2, r2, #1
 80033a8:	609a      	str	r2, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 80033aa:	2320      	movs	r3, #32
 80033ac:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 80033b0:	f001 f89a 	bl	80044e8 <HAL_UART_RxCpltCallback>
    return HAL_OK;
 80033b4:	2000      	movs	r0, #0
}
 80033b6:	bd10      	pop	{r4, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80033b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033ba:	1c5c      	adds	r4, r3, #1
 80033bc:	4011      	ands	r1, r2
 80033be:	6544      	str	r4, [r0, #84]	; 0x54
 80033c0:	7019      	strb	r1, [r3, #0]
 80033c2:	e7e2      	b.n	800338a <UART_Receive_IT+0x28>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80033c4:	6993      	ldr	r3, [r2, #24]
    return HAL_BUSY;
 80033c6:	2002      	movs	r0, #2
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80033c8:	f043 0308 	orr.w	r3, r3, #8
 80033cc:	6193      	str	r3, [r2, #24]
    return HAL_BUSY;
 80033ce:	bd10      	pop	{r4, pc}

080033d0 <UART_DMAError>:
{
 80033d0:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80033d2:	6b81      	ldr	r1, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	f8a1 305a 	strh.w	r3, [r1, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80033da:	f8a1 3052 	strh.w	r3, [r1, #82]	; 0x52
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 80033de:	f891 3069 	ldrb.w	r3, [r1, #105]	; 0x69
 80033e2:	2b21      	cmp	r3, #33	; 0x21
 80033e4:	d10a      	bne.n	80033fc <UART_DMAError+0x2c>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 80033e6:	680b      	ldr	r3, [r1, #0]
 80033e8:	689a      	ldr	r2, [r3, #8]
 80033ea:	0612      	lsls	r2, r2, #24
 80033ec:	d506      	bpl.n	80033fc <UART_DMAError+0x2c>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80033f4:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80033f6:	2320      	movs	r3, #32
 80033f8:	f881 3069 	strb.w	r3, [r1, #105]	; 0x69
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033fc:	f891 306a 	ldrb.w	r3, [r1, #106]	; 0x6a
 8003400:	2b22      	cmp	r3, #34	; 0x22
 8003402:	d106      	bne.n	8003412 <UART_DMAError+0x42>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 8003404:	680b      	ldr	r3, [r1, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	065b      	lsls	r3, r3, #25
 800340a:	d502      	bpl.n	8003412 <UART_DMAError+0x42>
    UART_EndRxTransfer(huart);
 800340c:	4608      	mov	r0, r1
 800340e:	f7ff fe2b 	bl	8003068 <UART_EndRxTransfer>
  SET_BIT(huart->ErrorCode, HAL_UART_ERROR_DMA);
 8003412:	6ecb      	ldr	r3, [r1, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8003414:	4608      	mov	r0, r1
  SET_BIT(huart->ErrorCode, HAL_UART_ERROR_DMA);
 8003416:	f043 0310 	orr.w	r3, r3, #16
 800341a:	66cb      	str	r3, [r1, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 800341c:	f001 f866 	bl	80044ec <HAL_UART_ErrorCallback>
 8003420:	bd08      	pop	{r3, pc}
	...

08003424 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003424:	6803      	ldr	r3, [r0, #0]
 8003426:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003428:	6819      	ldr	r1, [r3, #0]
{
 800342a:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 800342c:	0716      	lsls	r6, r2, #28
{
 800342e:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003430:	689d      	ldr	r5, [r3, #8]
  if (errorflags == RESET)
 8003432:	d107      	bne.n	8003444 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003434:	0695      	lsls	r5, r2, #26
 8003436:	d563      	bpl.n	8003500 <HAL_UART_IRQHandler+0xdc>
 8003438:	068e      	lsls	r6, r1, #26
 800343a:	d561      	bpl.n	8003500 <HAL_UART_IRQHandler+0xdc>
}
 800343c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8003440:	f7ff bf8f 	b.w	8003362 <UART_Receive_IT>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8003444:	f015 0001 	ands.w	r0, r5, #1
 8003448:	d102      	bne.n	8003450 <HAL_UART_IRQHandler+0x2c>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 800344a:	f411 7f90 	tst.w	r1, #288	; 0x120
 800344e:	d057      	beq.n	8003500 <HAL_UART_IRQHandler+0xdc>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003450:	07d5      	lsls	r5, r2, #31
 8003452:	d507      	bpl.n	8003464 <HAL_UART_IRQHandler+0x40>
 8003454:	05ce      	lsls	r6, r1, #23
 8003456:	d505      	bpl.n	8003464 <HAL_UART_IRQHandler+0x40>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8003458:	2501      	movs	r5, #1
 800345a:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800345c:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800345e:	f045 0501 	orr.w	r5, r5, #1
 8003462:	66e5      	str	r5, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003464:	0795      	lsls	r5, r2, #30
 8003466:	d506      	bpl.n	8003476 <HAL_UART_IRQHandler+0x52>
 8003468:	b128      	cbz	r0, 8003476 <HAL_UART_IRQHandler+0x52>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 800346a:	2502      	movs	r5, #2
 800346c:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800346e:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8003470:	f045 0504 	orr.w	r5, r5, #4
 8003474:	66e5      	str	r5, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003476:	0756      	lsls	r6, r2, #29
 8003478:	d506      	bpl.n	8003488 <HAL_UART_IRQHandler+0x64>
 800347a:	b128      	cbz	r0, 8003488 <HAL_UART_IRQHandler+0x64>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 800347c:	2504      	movs	r5, #4
 800347e:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003480:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8003482:	f045 0502 	orr.w	r5, r5, #2
 8003486:	66e5      	str	r5, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8003488:	0715      	lsls	r5, r2, #28
 800348a:	d507      	bpl.n	800349c <HAL_UART_IRQHandler+0x78>
 800348c:	068e      	lsls	r6, r1, #26
 800348e:	d400      	bmi.n	8003492 <HAL_UART_IRQHandler+0x6e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003490:	b120      	cbz	r0, 800349c <HAL_UART_IRQHandler+0x78>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8003492:	2008      	movs	r0, #8
 8003494:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003496:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003498:	4303      	orrs	r3, r0
 800349a:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800349c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d06a      	beq.n	8003578 <HAL_UART_IRQHandler+0x154>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034a2:	0695      	lsls	r5, r2, #26
 80034a4:	d504      	bpl.n	80034b0 <HAL_UART_IRQHandler+0x8c>
 80034a6:	0688      	lsls	r0, r1, #26
 80034a8:	d502      	bpl.n	80034b0 <HAL_UART_IRQHandler+0x8c>
        UART_Receive_IT(huart);
 80034aa:	4620      	mov	r0, r4
 80034ac:	f7ff ff59 	bl	8003362 <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80034b0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        UART_EndRxTransfer(huart);
 80034b2:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80034b4:	0719      	lsls	r1, r3, #28
 80034b6:	d404      	bmi.n	80034c2 <HAL_UART_IRQHandler+0x9e>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 80034b8:	6823      	ldr	r3, [r4, #0]
 80034ba:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80034bc:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80034c0:	d01a      	beq.n	80034f8 <HAL_UART_IRQHandler+0xd4>
        UART_EndRxTransfer(huart);
 80034c2:	f7ff fdd1 	bl	8003068 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034c6:	6823      	ldr	r3, [r4, #0]
 80034c8:	689a      	ldr	r2, [r3, #8]
 80034ca:	0652      	lsls	r2, r2, #25
 80034cc:	d510      	bpl.n	80034f0 <HAL_UART_IRQHandler+0xcc>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034ce:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80034d0:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034d6:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80034d8:	b150      	cbz	r0, 80034f0 <HAL_UART_IRQHandler+0xcc>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034da:	4b28      	ldr	r3, [pc, #160]	; (800357c <HAL_UART_IRQHandler+0x158>)
 80034dc:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034de:	f7fe f8ce 	bl	800167e <HAL_DMA_Abort_IT>
 80034e2:	2800      	cmp	r0, #0
 80034e4:	d048      	beq.n	8003578 <HAL_UART_IRQHandler+0x154>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034e6:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 80034e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034ec:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80034ee:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80034f0:	4620      	mov	r0, r4
 80034f2:	f000 fffb 	bl	80044ec <HAL_UART_ErrorCallback>
 80034f6:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80034f8:	f000 fff8 	bl	80044ec <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034fc:	66e5      	str	r5, [r4, #108]	; 0x6c
 80034fe:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003500:	0616      	lsls	r6, r2, #24
 8003502:	d52b      	bpl.n	800355c <HAL_UART_IRQHandler+0x138>
 8003504:	060d      	lsls	r5, r1, #24
 8003506:	d529      	bpl.n	800355c <HAL_UART_IRQHandler+0x138>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003508:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 800350c:	2a21      	cmp	r2, #33	; 0x21
 800350e:	d133      	bne.n	8003578 <HAL_UART_IRQHandler+0x154>
    if(huart->TxXferCount == 0U)
 8003510:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8003514:	b292      	uxth	r2, r2
 8003516:	b942      	cbnz	r2, 800352a <HAL_UART_IRQHandler+0x106>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800351e:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	bd70      	pop	{r4, r5, r6, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800352a:	68a2      	ldr	r2, [r4, #8]
 800352c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003530:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8003532:	d10e      	bne.n	8003552 <HAL_UART_IRQHandler+0x12e>
 8003534:	6921      	ldr	r1, [r4, #16]
 8003536:	b961      	cbnz	r1, 8003552 <HAL_UART_IRQHandler+0x12e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003538:	f832 1b02 	ldrh.w	r1, [r2], #2
 800353c:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003540:	6299      	str	r1, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003542:	64e2      	str	r2, [r4, #76]	; 0x4c
      huart->TxXferCount--;
 8003544:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8003548:	3b01      	subs	r3, #1
 800354a:	b29b      	uxth	r3, r3
 800354c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8003550:	bd70      	pop	{r4, r5, r6, pc}
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8003552:	1c51      	adds	r1, r2, #1
 8003554:	64e1      	str	r1, [r4, #76]	; 0x4c
 8003556:	7812      	ldrb	r2, [r2, #0]
 8003558:	629a      	str	r2, [r3, #40]	; 0x28
 800355a:	e7f3      	b.n	8003544 <HAL_UART_IRQHandler+0x120>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800355c:	0650      	lsls	r0, r2, #25
 800355e:	d50b      	bpl.n	8003578 <HAL_UART_IRQHandler+0x154>
 8003560:	064a      	lsls	r2, r1, #25
 8003562:	d509      	bpl.n	8003578 <HAL_UART_IRQHandler+0x154>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003564:	681a      	ldr	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 8003566:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003568:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800356c:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800356e:	2320      	movs	r3, #32
 8003570:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  HAL_UART_TxCpltCallback(huart);
 8003574:	f000 ffb9 	bl	80044ea <HAL_UART_TxCpltCallback>
 8003578:	bd70      	pop	{r4, r5, r6, pc}
 800357a:	bf00      	nop
 800357c:	08003581 	.word	0x08003581

08003580 <UART_DMAAbortOnError>:
{
 8003580:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8003582:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8003584:	2300      	movs	r3, #0
 8003586:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800358a:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 800358e:	f000 ffad 	bl	80044ec <HAL_UART_ErrorCallback>
 8003592:	bd08      	pop	{r3, pc}

08003594 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003594:	b538      	push	{r3, r4, r5, lr}
 8003596:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003598:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800359a:	69c3      	ldr	r3, [r0, #28]
 800359c:	6921      	ldr	r1, [r4, #16]
 800359e:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80035a0:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035a2:	430a      	orrs	r2, r1
 80035a4:	6961      	ldr	r1, [r4, #20]
 80035a6:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80035a8:	4993      	ldr	r1, [pc, #588]	; (80037f8 <UART_SetConfig+0x264>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035aa:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80035ac:	4001      	ands	r1, r0
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80035ae:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80035b0:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035b2:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80035b4:	602a      	str	r2, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035b6:	686a      	ldr	r2, [r5, #4]
 80035b8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80035bc:	430a      	orrs	r2, r1
 80035be:	606a      	str	r2, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80035c0:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80035c2:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80035c4:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80035c6:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80035ca:	430a      	orrs	r2, r1
 80035cc:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035ce:	4a8b      	ldr	r2, [pc, #556]	; (80037fc <UART_SetConfig+0x268>)
 80035d0:	4295      	cmp	r5, r2
 80035d2:	d119      	bne.n	8003608 <UART_SetConfig+0x74>
 80035d4:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80035d8:	4989      	ldr	r1, [pc, #548]	; (8003800 <UART_SetConfig+0x26c>)
 80035da:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80035de:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035e6:	5c8a      	ldrb	r2, [r1, r2]
 80035e8:	f040 80b3 	bne.w	8003752 <UART_SetConfig+0x1be>
  {
    switch (clocksource)
 80035ec:	2a08      	cmp	r2, #8
 80035ee:	f200 80ad 	bhi.w	800374c <UART_SetConfig+0x1b8>
 80035f2:	e8df f012 	tbh	[pc, r2, lsl #1]
 80035f6:	0026      	.short	0x0026
 80035f8:	00e9007b 	.word	0x00e9007b
 80035fc:	00f500ab 	.word	0x00f500ab
 8003600:	00ab00ab 	.word	0x00ab00ab
 8003604:	00fb00ab 	.word	0x00fb00ab
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003608:	4a7e      	ldr	r2, [pc, #504]	; (8003804 <UART_SetConfig+0x270>)
 800360a:	4295      	cmp	r5, r2
 800360c:	d107      	bne.n	800361e <UART_SetConfig+0x8a>
 800360e:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8003612:	497d      	ldr	r1, [pc, #500]	; (8003808 <UART_SetConfig+0x274>)
 8003614:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003618:	f002 020c 	and.w	r2, r2, #12
 800361c:	e7e1      	b.n	80035e2 <UART_SetConfig+0x4e>
 800361e:	4a7b      	ldr	r2, [pc, #492]	; (800380c <UART_SetConfig+0x278>)
 8003620:	4295      	cmp	r5, r2
 8003622:	d12b      	bne.n	800367c <UART_SetConfig+0xe8>
 8003624:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 8003628:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800362c:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8003630:	2a10      	cmp	r2, #16
 8003632:	f000 80d2 	beq.w	80037da <UART_SetConfig+0x246>
 8003636:	d816      	bhi.n	8003666 <UART_SetConfig+0xd2>
 8003638:	b9da      	cbnz	r2, 8003672 <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800363a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800363e:	f040 809f 	bne.w	8003780 <UART_SetConfig+0x1ec>
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003642:	f7fe fdc9 	bl	80021d8 <HAL_RCC_GetPCLK1Freq>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003646:	6861      	ldr	r1, [r4, #4]
 8003648:	084a      	lsrs	r2, r1, #1
 800364a:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 800364e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003652:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003654:	2000      	movs	r0, #0
    default:
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 8003656:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800365a:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 800365e:	6821      	ldr	r1, [r4, #0]
 8003660:	4313      	orrs	r3, r2
 8003662:	60cb      	str	r3, [r1, #12]
 8003664:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003666:	2a20      	cmp	r2, #32
 8003668:	f000 80ab 	beq.w	80037c2 <UART_SetConfig+0x22e>
 800366c:	2a30      	cmp	r2, #48	; 0x30
 800366e:	f000 80ba 	beq.w	80037e6 <UART_SetConfig+0x252>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003672:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003676:	d069      	beq.n	800374c <UART_SetConfig+0x1b8>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8003678:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 800367a:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800367c:	4a64      	ldr	r2, [pc, #400]	; (8003810 <UART_SetConfig+0x27c>)
 800367e:	4295      	cmp	r5, r2
 8003680:	d10e      	bne.n	80036a0 <UART_SetConfig+0x10c>
 8003682:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 8003686:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800368a:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 800368e:	2a40      	cmp	r2, #64	; 0x40
 8003690:	f000 80a3 	beq.w	80037da <UART_SetConfig+0x246>
 8003694:	d9d0      	bls.n	8003638 <UART_SetConfig+0xa4>
 8003696:	2a80      	cmp	r2, #128	; 0x80
 8003698:	f000 8093 	beq.w	80037c2 <UART_SetConfig+0x22e>
 800369c:	2ac0      	cmp	r2, #192	; 0xc0
 800369e:	e7e6      	b.n	800366e <UART_SetConfig+0xda>
 80036a0:	4a5c      	ldr	r2, [pc, #368]	; (8003814 <UART_SetConfig+0x280>)
 80036a2:	4295      	cmp	r5, r2
 80036a4:	d110      	bne.n	80036c8 <UART_SetConfig+0x134>
 80036a6:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 80036aa:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80036ae:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80036b2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80036b6:	f000 8090 	beq.w	80037da <UART_SetConfig+0x246>
 80036ba:	d9bd      	bls.n	8003638 <UART_SetConfig+0xa4>
 80036bc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80036c0:	d07f      	beq.n	80037c2 <UART_SetConfig+0x22e>
 80036c2:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80036c6:	e7d2      	b.n	800366e <UART_SetConfig+0xda>
 80036c8:	4a53      	ldr	r2, [pc, #332]	; (8003818 <UART_SetConfig+0x284>)
 80036ca:	4295      	cmp	r5, r2
 80036cc:	d117      	bne.n	80036fe <UART_SetConfig+0x16a>
 80036ce:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 80036d2:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80036d6:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 80036da:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80036de:	d07c      	beq.n	80037da <UART_SetConfig+0x246>
 80036e0:	d807      	bhi.n	80036f2 <UART_SetConfig+0x15e>
 80036e2:	2a00      	cmp	r2, #0
 80036e4:	d1c5      	bne.n	8003672 <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036ea:	d154      	bne.n	8003796 <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80036ec:	f7fe fd84 	bl	80021f8 <HAL_RCC_GetPCLK2Freq>
 80036f0:	e7a9      	b.n	8003646 <UART_SetConfig+0xb2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036f2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80036f6:	d064      	beq.n	80037c2 <UART_SetConfig+0x22e>
 80036f8:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80036fc:	e7b7      	b.n	800366e <UART_SetConfig+0xda>
 80036fe:	4a47      	ldr	r2, [pc, #284]	; (800381c <UART_SetConfig+0x288>)
 8003700:	4295      	cmp	r5, r2
 8003702:	d10f      	bne.n	8003724 <UART_SetConfig+0x190>
 8003704:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8003708:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800370c:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8003710:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003714:	d061      	beq.n	80037da <UART_SetConfig+0x246>
 8003716:	d98f      	bls.n	8003638 <UART_SetConfig+0xa4>
 8003718:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800371c:	d051      	beq.n	80037c2 <UART_SetConfig+0x22e>
 800371e:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8003722:	e7a4      	b.n	800366e <UART_SetConfig+0xda>
 8003724:	4a3e      	ldr	r2, [pc, #248]	; (8003820 <UART_SetConfig+0x28c>)
 8003726:	4295      	cmp	r5, r2
 8003728:	d1a3      	bne.n	8003672 <UART_SetConfig+0xde>
 800372a:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 800372e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003732:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8003736:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800373a:	d04e      	beq.n	80037da <UART_SetConfig+0x246>
 800373c:	f67f af7c 	bls.w	8003638 <UART_SetConfig+0xa4>
 8003740:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003744:	d03d      	beq.n	80037c2 <UART_SetConfig+0x22e>
 8003746:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 800374a:	e790      	b.n	800366e <UART_SetConfig+0xda>
        ret = HAL_ERROR;
 800374c:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 800374e:	2300      	movs	r3, #0
 8003750:	e781      	b.n	8003656 <UART_SetConfig+0xc2>
    switch (clocksource)
 8003752:	2a08      	cmp	r2, #8
 8003754:	d890      	bhi.n	8003678 <UART_SetConfig+0xe4>
 8003756:	a301      	add	r3, pc, #4	; (adr r3, 800375c <UART_SetConfig+0x1c8>)
 8003758:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800375c:	08003781 	.word	0x08003781
 8003760:	08003797 	.word	0x08003797
 8003764:	0800379d 	.word	0x0800379d
 8003768:	08003679 	.word	0x08003679
 800376c:	080037b3 	.word	0x080037b3
 8003770:	08003679 	.word	0x08003679
 8003774:	08003679 	.word	0x08003679
 8003778:	08003679 	.word	0x08003679
 800377c:	080037b9 	.word	0x080037b9
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003780:	f7fe fd2a 	bl	80021d8 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003784:	6863      	ldr	r3, [r4, #4]
 8003786:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800378a:	fbb0 f0f3 	udiv	r0, r0, r3
 800378e:	b280      	uxth	r0, r0
 8003790:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003792:	2000      	movs	r0, #0
      break;
 8003794:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003796:	f7fe fd2f 	bl	80021f8 <HAL_RCC_GetPCLK2Freq>
 800379a:	e7f3      	b.n	8003784 <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800379c:	6862      	ldr	r2, [r4, #4]
 800379e:	0853      	lsrs	r3, r2, #1
 80037a0:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80037a4:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80037a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	60eb      	str	r3, [r5, #12]
 80037b0:	e7ef      	b.n	8003792 <UART_SetConfig+0x1fe>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80037b2:	f7fe fc3f 	bl	8002034 <HAL_RCC_GetSysClockFreq>
 80037b6:	e7e5      	b.n	8003784 <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80037b8:	6862      	ldr	r2, [r4, #4]
 80037ba:	0853      	lsrs	r3, r2, #1
 80037bc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80037c0:	e7f2      	b.n	80037a8 <UART_SetConfig+0x214>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037c6:	d1e9      	bne.n	800379c <UART_SetConfig+0x208>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80037c8:	6860      	ldr	r0, [r4, #4]
 80037ca:	0843      	lsrs	r3, r0, #1
 80037cc:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80037d0:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80037d4:	fbb3 f3f0 	udiv	r3, r3, r0
 80037d8:	e73b      	b.n	8003652 <UART_SetConfig+0xbe>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037de:	d1e8      	bne.n	80037b2 <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80037e0:	f7fe fc28 	bl	8002034 <HAL_RCC_GetSysClockFreq>
 80037e4:	e72f      	b.n	8003646 <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ea:	d1e5      	bne.n	80037b8 <UART_SetConfig+0x224>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80037ec:	6860      	ldr	r0, [r4, #4]
 80037ee:	0843      	lsrs	r3, r0, #1
 80037f0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80037f4:	e7ee      	b.n	80037d4 <UART_SetConfig+0x240>
 80037f6:	bf00      	nop
 80037f8:	efff69f3 	.word	0xefff69f3
 80037fc:	40011000 	.word	0x40011000
 8003800:	08007c05 	.word	0x08007c05
 8003804:	40004400 	.word	0x40004400
 8003808:	08007c09 	.word	0x08007c09
 800380c:	40004800 	.word	0x40004800
 8003810:	40004c00 	.word	0x40004c00
 8003814:	40005000 	.word	0x40005000
 8003818:	40011400 	.word	0x40011400
 800381c:	40007800 	.word	0x40007800
 8003820:	40007c00 	.word	0x40007c00

08003824 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003824:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003826:	07da      	lsls	r2, r3, #31
{
 8003828:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800382a:	d506      	bpl.n	800383a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800382c:	6801      	ldr	r1, [r0, #0]
 800382e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003830:	684a      	ldr	r2, [r1, #4]
 8003832:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003836:	4322      	orrs	r2, r4
 8003838:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800383a:	079c      	lsls	r4, r3, #30
 800383c:	d506      	bpl.n	800384c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800383e:	6801      	ldr	r1, [r0, #0]
 8003840:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003842:	684a      	ldr	r2, [r1, #4]
 8003844:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003848:	4322      	orrs	r2, r4
 800384a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800384c:	0759      	lsls	r1, r3, #29
 800384e:	d506      	bpl.n	800385e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003850:	6801      	ldr	r1, [r0, #0]
 8003852:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003854:	684a      	ldr	r2, [r1, #4]
 8003856:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800385a:	4322      	orrs	r2, r4
 800385c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800385e:	071a      	lsls	r2, r3, #28
 8003860:	d506      	bpl.n	8003870 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003862:	6801      	ldr	r1, [r0, #0]
 8003864:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003866:	684a      	ldr	r2, [r1, #4]
 8003868:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800386c:	4322      	orrs	r2, r4
 800386e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003870:	06dc      	lsls	r4, r3, #27
 8003872:	d506      	bpl.n	8003882 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003874:	6801      	ldr	r1, [r0, #0]
 8003876:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003878:	688a      	ldr	r2, [r1, #8]
 800387a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800387e:	4322      	orrs	r2, r4
 8003880:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003882:	0699      	lsls	r1, r3, #26
 8003884:	d506      	bpl.n	8003894 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003886:	6801      	ldr	r1, [r0, #0]
 8003888:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800388a:	688a      	ldr	r2, [r1, #8]
 800388c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003890:	4322      	orrs	r2, r4
 8003892:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003894:	065a      	lsls	r2, r3, #25
 8003896:	d510      	bpl.n	80038ba <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003898:	6801      	ldr	r1, [r0, #0]
 800389a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800389c:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800389e:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038a2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80038a6:	ea42 0204 	orr.w	r2, r2, r4
 80038aa:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038ac:	d105      	bne.n	80038ba <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038ae:	684a      	ldr	r2, [r1, #4]
 80038b0:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80038b2:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80038b6:	4322      	orrs	r2, r4
 80038b8:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038ba:	061b      	lsls	r3, r3, #24
 80038bc:	d506      	bpl.n	80038cc <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038be:	6802      	ldr	r2, [r0, #0]
 80038c0:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80038c2:	6853      	ldr	r3, [r2, #4]
 80038c4:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80038c8:	430b      	orrs	r3, r1
 80038ca:	6053      	str	r3, [r2, #4]
 80038cc:	bd10      	pop	{r4, pc}

080038ce <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d0:	2500      	movs	r5, #0
{
 80038d2:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d4:	66c5      	str	r5, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80038d6:	f7fd fcc5 	bl	8001264 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038da:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 80038dc:	4603      	mov	r3, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038de:	6812      	ldr	r2, [r2, #0]
 80038e0:	0712      	lsls	r2, r2, #28
 80038e2:	d409      	bmi.n	80038f8 <UART_CheckIdleState+0x2a>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 80038e4:	2320      	movs	r3, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80038e6:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80038e8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 80038ec:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState= HAL_UART_STATE_READY;
 80038f0:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  return HAL_OK;
}
 80038f4:	b003      	add	sp, #12
 80038f6:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038f8:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80038fc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003900:	4620      	mov	r0, r4
 8003902:	9200      	str	r2, [sp, #0]
 8003904:	462a      	mov	r2, r5
 8003906:	f7ff fc15 	bl	8003134 <UART_WaitOnFlagUntilTimeout>
 800390a:	2800      	cmp	r0, #0
 800390c:	d0ea      	beq.n	80038e4 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800390e:	2003      	movs	r0, #3
 8003910:	e7f0      	b.n	80038f4 <UART_CheckIdleState+0x26>

08003912 <HAL_UART_Init>:
{
 8003912:	b510      	push	{r4, lr}
  if(huart == NULL)
 8003914:	4604      	mov	r4, r0
 8003916:	b360      	cbz	r0, 8003972 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8003918:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800391c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003920:	b91b      	cbnz	r3, 800392a <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003922:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8003926:	f001 f8a9 	bl	8004a7c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800392a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800392c:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800392e:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8003930:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8003934:	6813      	ldr	r3, [r2, #0]
 8003936:	f023 0301 	bic.w	r3, r3, #1
 800393a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800393c:	f7ff fe2a 	bl	8003594 <UART_SetConfig>
 8003940:	2801      	cmp	r0, #1
 8003942:	d016      	beq.n	8003972 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003944:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003946:	b113      	cbz	r3, 800394e <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8003948:	4620      	mov	r0, r4
 800394a:	f7ff ff6b 	bl	8003824 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800394e:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8003950:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003958:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003960:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	f042 0201 	orr.w	r2, r2, #1
}
 8003968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800396c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800396e:	f7ff bfae 	b.w	80038ce <UART_CheckIdleState>
}
 8003972:	2001      	movs	r0, #1
 8003974:	bd10      	pop	{r4, pc}
	...

08003978 <Set_UartMsgHandle>:
/* Private Function ------------------------------------------------------------------*/

void Set_UartMsgHandle(UART_HandleTypeDef *UART_MsgHandle)
{

	UartMsgHandle = UART_MsgHandle;
 8003978:	4b01      	ldr	r3, [pc, #4]	; (8003980 <Set_UartMsgHandle+0x8>)
 800397a:	6018      	str	r0, [r3, #0]
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	20000540 	.word	0x20000540

08003984 <DMA1_TransferComplete>:
void DMA1_TransferComplete()
{
  /* Process Locked */
	huart6.Lock = HAL_LOCKED;

	huart6.ErrorCode = HAL_UART_ERROR_NONE;
 8003984:	4b10      	ldr	r3, [pc, #64]	; (80039c8 <DMA1_TransferComplete+0x44>)
 8003986:	2000      	movs	r0, #0
#if defined (USE_STM32F7XX_NUCLEO) || defined (USE_STM32L4XX_NUCLEO)
	huart6.gState = HAL_UART_STATE_BUSY_TX;
 8003988:	2221      	movs	r2, #33	; 0x21
	huart6.ErrorCode = HAL_UART_ERROR_NONE;
 800398a:	66d8      	str	r0, [r3, #108]	; 0x6c
	huart6.gState = HAL_UART_STATE_BUSY_TX;
 800398c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
#endif
	huart6.pTxBuffPtr = (uint8_t*) console_send_char;
 8003990:	4a0e      	ldr	r2, [pc, #56]	; (80039cc <DMA1_TransferComplete+0x48>)
#endif
  // Process Unlocked
	huart6.Lock = HAL_UNLOCKED;

  // Enable the UART Transmit data register empty Interrupt
	__HAL_UART_ENABLE_IT(&huart6, UART_IT_TXE);
 8003992:	6819      	ldr	r1, [r3, #0]
	huart6.pTxBuffPtr = (uint8_t*) console_send_char;
 8003994:	64da      	str	r2, [r3, #76]	; 0x4c
	huart6.TxXferSize = 1;
 8003996:	2201      	movs	r2, #1
	huart6.TxXferCount = 1;
 8003998:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	huart6.TxXferSize = 1;
 800399c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	__HAL_UART_ENABLE_IT(&huart6, UART_IT_TXE);
 80039a0:	680a      	ldr	r2, [r1, #0]
 80039a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80039a6:	600a      	str	r2, [r1, #0]
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 80039a8:	4a09      	ldr	r2, [pc, #36]	; (80039d0 <DMA1_TransferComplete+0x4c>)
 80039aa:	6811      	ldr	r1, [r2, #0]
 80039ac:	f041 0110 	orr.w	r1, r1, #16
 80039b0:	6011      	str	r1, [r2, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80039b2:	6811      	ldr	r1, [r2, #0]
 80039b4:	f041 0101 	orr.w	r1, r1, #1
 80039b8:	6011      	str	r1, [r2, #0]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF1);
 80039ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80039be:	f842 1c20 	str.w	r1, [r2, #-32]
  //LL_DMA_EnableChannel(WIFI_CONSOLE_DMA, WIFI_CONSOLE_LL_DMA);
#endif

#endif
  /* Process Unlocked */
	huart6.Lock = HAL_UNLOCKED;
 80039c2:	f883 0068 	strb.w	r0, [r3, #104]	; 0x68
 80039c6:	4770      	bx	lr
 80039c8:	200003a4 	.word	0x200003a4
 80039cc:	20001740 	.word	0x20001740
 80039d0:	40026028 	.word	0x40026028

080039d4 <DMA2_TransferComplete>:
void DMA2_TransferComplete()
{
    /* Process Locked */
	huart3.Lock = HAL_LOCKED;

	huart3.ErrorCode = HAL_UART_ERROR_NONE;
 80039d4:	4b10      	ldr	r3, [pc, #64]	; (8003a18 <DMA2_TransferComplete+0x44>)
 80039d6:	2200      	movs	r2, #0
#if defined (USE_STM32F7XX_NUCLEO) || defined (USE_STM32L4XX_NUCLEO)
	huart3.gState = HAL_UART_STATE_BUSY_TX;
 80039d8:	2121      	movs	r1, #33	; 0x21
	huart3.ErrorCode = HAL_UART_ERROR_NONE;
 80039da:	66da      	str	r2, [r3, #108]	; 0x6c
	huart3.gState = HAL_UART_STATE_BUSY_TX;
 80039dc:	f883 1069 	strb.w	r1, [r3, #105]	; 0x69
#endif
	huart3.pTxBuffPtr = (uint8_t*) WiFi_Counter_Variables.uart_byte;
 80039e0:	490e      	ldr	r1, [pc, #56]	; (8003a1c <DMA2_TransferComplete+0x48>)
    {
		huart3->State = HAL_UART_STATE_BUSY_TX;
    }
#endif
  // Process Unlocked
	huart3.Lock = HAL_UNLOCKED;
 80039e2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	huart3.pTxBuffPtr = (uint8_t*) WiFi_Counter_Variables.uart_byte;
 80039e6:	64d9      	str	r1, [r3, #76]	; 0x4c
	huart3.TxXferSize = 1;
 80039e8:	2101      	movs	r1, #1

  // Enable the UART Transmit data register empty Interrupt
	__HAL_UART_ENABLE_IT(&huart3, UART_IT_TXE);
 80039ea:	681a      	ldr	r2, [r3, #0]
	huart3.TxXferCount = 1;
 80039ec:	f8a3 1052 	strh.w	r1, [r3, #82]	; 0x52
	huart3.TxXferSize = 1;
 80039f0:	f8a3 1050 	strh.w	r1, [r3, #80]	; 0x50
	__HAL_UART_ENABLE_IT(&huart3, UART_IT_TXE);
 80039f4:	6813      	ldr	r3, [r2, #0]
 80039f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039fa:	6013      	str	r3, [r2, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 80039fc:	4b08      	ldr	r3, [pc, #32]	; (8003a20 <DMA2_TransferComplete+0x4c>)
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	f042 0210 	orr.w	r2, r2, #16
 8003a04:	601a      	str	r2, [r3, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	601a      	str	r2, [r3, #0]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF1);
 8003a0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a10:	f843 2c20 	str.w	r2, [r3, #-32]
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	2000147c 	.word	0x2000147c
 8003a1c:	20000812 	.word	0x20000812
 8003a20:	40026428 	.word	0x40026428

08003a24 <uartSendChar>:
/** @brief Sends a character to serial port
 * @param ch Character to send
 * @retval Character sent
 */
int uartSendChar(int ch)
{
 8003a24:	b507      	push	{r0, r1, r2, lr}
 8003a26:	a902      	add	r1, sp, #8
	// HAL_UART_Transmit(UartHandle, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart3, (uint8_t *) &ch, 1, HAL_MAX_DELAY);
 8003a28:	f04f 33ff 	mov.w	r3, #4294967295
 8003a2c:	2201      	movs	r2, #1
{
 8003a2e:	f841 0d04 	str.w	r0, [r1, #-4]!
	HAL_UART_Transmit(&huart3, (uint8_t *) &ch, 1, HAL_MAX_DELAY);
 8003a32:	4803      	ldr	r0, [pc, #12]	; (8003a40 <uartSendChar+0x1c>)
 8003a34:	f7ff fbaf 	bl	8003196 <HAL_UART_Transmit>
  return ch;
}
 8003a38:	9801      	ldr	r0, [sp, #4]
 8003a3a:	b003      	add	sp, #12
 8003a3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a40:	2000147c 	.word	0x2000147c

08003a44 <uartReceiveChar>:
/** @brief Receives a character from serial port
 * @param None
 * @retval Character received
 */
int uartReceiveChar(void)
{
 8003a44:	b513      	push	{r0, r1, r4, lr}
  uint8_t ch;
	// HAL_UART_Receive(UartHandle, &ch, 1, HAL_MAX_DELAY);
	HAL_UART_Receive(&huart3, &ch, 1, HAL_MAX_DELAY);

  /* Echo character back to console */
  HAL_UART_Transmit(UartHandle, &ch, 1, HAL_MAX_DELAY);
 8003a46:	4c11      	ldr	r4, [pc, #68]	; (8003a8c <uartReceiveChar+0x48>)
	HAL_UART_Receive(&huart3, &ch, 1, HAL_MAX_DELAY);
 8003a48:	f04f 33ff 	mov.w	r3, #4294967295
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f10d 0106 	add.w	r1, sp, #6
 8003a52:	480f      	ldr	r0, [pc, #60]	; (8003a90 <uartReceiveChar+0x4c>)
 8003a54:	f7ff fbf8 	bl	8003248 <HAL_UART_Receive>
  HAL_UART_Transmit(UartHandle, &ch, 1, HAL_MAX_DELAY);
 8003a58:	f04f 33ff 	mov.w	r3, #4294967295
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f10d 0106 	add.w	r1, sp, #6
 8003a62:	6820      	ldr	r0, [r4, #0]
 8003a64:	f7ff fb97 	bl	8003196 <HAL_UART_Transmit>

  /* And cope with Windows */
  if(ch == '\r'){
 8003a68:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003a6c:	2b0d      	cmp	r3, #13
 8003a6e:	d109      	bne.n	8003a84 <uartReceiveChar+0x40>
    uint8_t ret = '\n';
 8003a70:	230a      	movs	r3, #10
 8003a72:	a902      	add	r1, sp, #8
    HAL_UART_Transmit(UartHandle, &ret, 1, HAL_MAX_DELAY);
 8003a74:	2201      	movs	r2, #1
 8003a76:	6820      	ldr	r0, [r4, #0]
    uint8_t ret = '\n';
 8003a78:	f801 3d01 	strb.w	r3, [r1, #-1]!
    HAL_UART_Transmit(UartHandle, &ret, 1, HAL_MAX_DELAY);
 8003a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a80:	f7ff fb89 	bl	8003196 <HAL_UART_Transmit>
  }

  return ch;
}
 8003a84:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8003a88:	b002      	add	sp, #8
 8003a8a:	bd10      	pop	{r4, pc}
 8003a8c:	20000540 	.word	0x20000540
 8003a90:	2000147c 	.word	0x2000147c

08003a94 <__io_putchar>:
 * @param ch Character to print
 * @retval Character printed
 */
int __io_putchar(int ch)
{
  return uartSendChar(ch);
 8003a94:	f7ff bfc6 	b.w	8003a24 <uartSendChar>

08003a98 <__io_getchar>:
 * @param None
 * @retval Character acquired from standard input
 */
int __io_getchar(void)
{
  return uartReceiveChar();
 8003a98:	f7ff bfd4 	b.w	8003a44 <uartReceiveChar>

08003a9c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8003a9c:	b508      	push	{r3, lr}

  hcrc.Instance = CRC;
 8003a9e:	480a      	ldr	r0, [pc, #40]	; (8003ac8 <MX_CRC_Init+0x2c>)
 8003aa0:	4b0a      	ldr	r3, [pc, #40]	; (8003acc <MX_CRC_Init+0x30>)
 8003aa2:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8003aa8:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8003aaa:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8003aac:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003ab2:	f7fd fc89 	bl	80013c8 <HAL_CRC_Init>
 8003ab6:	b128      	cbz	r0, 8003ac4 <MX_CRC_Init+0x28>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003ab8:	213d      	movs	r1, #61	; 0x3d
 8003aba:	4805      	ldr	r0, [pc, #20]	; (8003ad0 <MX_CRC_Init+0x34>)
  }

}
 8003abc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8003ac0:	f000 bba2 	b.w	8004208 <_Error_Handler>
 8003ac4:	bd08      	pop	{r3, pc}
 8003ac6:	bf00      	nop
 8003ac8:	20001788 	.word	0x20001788
 8003acc:	40023000 	.word	0x40023000
 8003ad0:	08007c16 	.word	0x08007c16

08003ad4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8003ad4:	6802      	ldr	r2, [r0, #0]
{
 8003ad6:	b082      	sub	sp, #8
  if(crcHandle->Instance==CRC)
 8003ad8:	4b08      	ldr	r3, [pc, #32]	; (8003afc <HAL_CRC_MspInit+0x28>)
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d10b      	bne.n	8003af6 <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003ade:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 8003ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ae6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003aea:	631a      	str	r2, [r3, #48]	; 0x30
 8003aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003af2:	9301      	str	r3, [sp, #4]
 8003af4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8003af6:	b002      	add	sp, #8
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	40023000 	.word	0x40023000

08003b00 <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b00:	4b23      	ldr	r3, [pc, #140]	; (8003b90 <MX_DMA_Init+0x90>)
{
 8003b02:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8003b06:	200c      	movs	r0, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b08:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003b0c:	631a      	str	r2, [r3, #48]	; 0x30
 8003b0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b10:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003b14:	9200      	str	r2, [sp, #0]
 8003b16:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003b18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b1a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003b1e:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8003b20:	2200      	movs	r2, #0
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8003b24:	4611      	mov	r1, r2
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b2a:	9301      	str	r3, [sp, #4]
 8003b2c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8003b2e:	f7fd fbc3 	bl	80012b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003b32:	200c      	movs	r0, #12
 8003b34:	f7fd fbf8 	bl	8001328 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8003b38:	2200      	movs	r2, #0
 8003b3a:	200e      	movs	r0, #14
 8003b3c:	4611      	mov	r1, r2
 8003b3e:	f7fd fbbb 	bl	80012b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003b42:	200e      	movs	r0, #14
 8003b44:	f7fd fbf0 	bl	8001328 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8003b48:	2200      	movs	r2, #0
 8003b4a:	2010      	movs	r0, #16
 8003b4c:	4611      	mov	r1, r2
 8003b4e:	f7fd fbb3 	bl	80012b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003b52:	2010      	movs	r0, #16
 8003b54:	f7fd fbe8 	bl	8001328 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8003b58:	2200      	movs	r2, #0
 8003b5a:	2011      	movs	r0, #17
 8003b5c:	4611      	mov	r1, r2
 8003b5e:	f7fd fbab 	bl	80012b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003b62:	2011      	movs	r0, #17
 8003b64:	f7fd fbe0 	bl	8001328 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8003b68:	2200      	movs	r2, #0
 8003b6a:	2039      	movs	r0, #57	; 0x39
 8003b6c:	4611      	mov	r1, r2
 8003b6e:	f7fd fba3 	bl	80012b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003b72:	2039      	movs	r0, #57	; 0x39
 8003b74:	f7fd fbd8 	bl	8001328 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8003b78:	2200      	movs	r2, #0
 8003b7a:	2045      	movs	r0, #69	; 0x45
 8003b7c:	4611      	mov	r1, r2
 8003b7e:	f7fd fb9b 	bl	80012b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8003b82:	2045      	movs	r0, #69	; 0x45
 8003b84:	f7fd fbd0 	bl	8001328 <HAL_NVIC_EnableIRQ>

}
 8003b88:	b003      	add	sp, #12
 8003b8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b8e:	bf00      	nop
 8003b90:	40023800 	.word	0x40023800

08003b94 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b94:	4b83      	ldr	r3, [pc, #524]	; (8003da4 <MX_GPIO_Init+0x210>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, MOTOR_ENB_Pin|MOTOR_ENA_Pin, GPIO_PIN_RESET);
 8003b96:	f44f 4104 	mov.w	r1, #33792	; 0x8400
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b9c:	f042 0204 	orr.w	r2, r2, #4
{
 8003ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ba4:	631a      	str	r2, [r3, #48]	; 0x30
{
 8003ba6:	b091      	sub	sp, #68	; 0x44
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ba8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003baa:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOF, MOTOR_ENB_Pin|MOTOR_ENA_Pin, GPIO_PIN_RESET);
 8003bac:	f8df b204 	ldr.w	fp, [pc, #516]	; 8003db4 <MX_GPIO_Init+0x220>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bb0:	2503      	movs	r5, #3
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bb2:	f002 0204 	and.w	r2, r2, #4
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003bb6:	4f7c      	ldr	r7, [pc, #496]	; (8003da8 <MX_GPIO_Init+0x214>)
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003bb8:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 8003db8 <MX_GPIO_Init+0x224>
  HAL_GPIO_WritePin(GPIOF, MOTOR_ENB_Pin|MOTOR_ENA_Pin, GPIO_PIN_RESET);
 8003bbc:	4658      	mov	r0, fp
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bbe:	9203      	str	r2, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc0:	2602      	movs	r6, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bc2:	9a03      	ldr	r2, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003bc4:	f04f 090b 	mov.w	r9, #11
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003bc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003bca:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 8003dbc <MX_GPIO_Init+0x228>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003bce:	f042 0220 	orr.w	r2, r2, #32
 8003bd2:	631a      	str	r2, [r3, #48]	; 0x30
 8003bd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bd6:	f002 0220 	and.w	r2, r2, #32
 8003bda:	9204      	str	r2, [sp, #16]
 8003bdc:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003bde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003be0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003be4:	631a      	str	r2, [r3, #48]	; 0x30
 8003be6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003be8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003bec:	9205      	str	r2, [sp, #20]
 8003bee:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bf2:	f042 0201 	orr.w	r2, r2, #1
 8003bf6:	631a      	str	r2, [r3, #48]	; 0x30
 8003bf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bfa:	f002 0201 	and.w	r2, r2, #1
 8003bfe:	9206      	str	r2, [sp, #24]
 8003c00:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c04:	f042 0210 	orr.w	r2, r2, #16
 8003c08:	631a      	str	r2, [r3, #48]	; 0x30
 8003c0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c0c:	f002 0210 	and.w	r2, r2, #16
 8003c10:	9207      	str	r2, [sp, #28]
 8003c12:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c16:	f042 0202 	orr.w	r2, r2, #2
 8003c1a:	631a      	str	r2, [r3, #48]	; 0x30
 8003c1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c1e:	f002 0202 	and.w	r2, r2, #2
 8003c22:	9208      	str	r2, [sp, #32]
 8003c24:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c28:	f042 0208 	orr.w	r2, r2, #8
 8003c2c:	631a      	str	r2, [r3, #48]	; 0x30
 8003c2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c30:	f002 0208 	and.w	r2, r2, #8
 8003c34:	9209      	str	r2, [sp, #36]	; 0x24
 8003c36:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003c38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c3e:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOF, MOTOR_ENB_Pin|MOTOR_ENA_Pin, GPIO_PIN_RESET);
 8003c40:	2200      	movs	r2, #0
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c48:	930a      	str	r3, [sp, #40]	; 0x28
 8003c4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(GPIOF, MOTOR_ENB_Pin|MOTOR_ENA_Pin, GPIO_PIN_RESET);
 8003c4c:	f7fd ff78 	bl	8001b40 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003c50:	4638      	mov	r0, r7
 8003c52:	2200      	movs	r2, #0
 8003c54:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8003c58:	f7fd ff72 	bl	8001b40 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003c5c:	4640      	mov	r0, r8
 8003c5e:	2200      	movs	r2, #0
 8003c60:	2140      	movs	r1, #64	; 0x40
 8003c62:	f7fd ff6d 	bl	8001b40 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003c66:	4951      	ldr	r1, [pc, #324]	; (8003dac <MX_GPIO_Init+0x218>)
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003c68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003c6c:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003c6e:	910c      	str	r1, [sp, #48]	; 0x30
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003c70:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003c72:	920b      	str	r2, [sp, #44]	; 0x2c
 8003c74:	9201      	str	r2, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c76:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003c78:	f7fd fdce 	bl	8001818 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MOTOR_ENB_Pin|MOTOR_ENA_Pin;
 8003c7c:	f44f 4104 	mov.w	r1, #33792	; 0x8400
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c80:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003c82:	4658      	mov	r0, fp
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c84:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Pin = MOTOR_ENB_Pin|MOTOR_ENA_Pin;
 8003c86:	910b      	str	r1, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003c88:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c8a:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c8c:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003c8e:	f7fd fdc3 	bl	8001818 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003c92:	2132      	movs	r1, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c94:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c96:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c98:	f5aa 6a00 	sub.w	sl, sl, #2048	; 0x800
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003c9c:	910b      	str	r1, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c9e:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ca2:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003ca4:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ca8:	f7fd fdb6 	bl	8001818 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003cac:	2186      	movs	r1, #134	; 0x86
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cae:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cb0:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003cb2:	910b      	str	r1, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cb4:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cb8:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003cba:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cbe:	f7fd fdab 	bl	8001818 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003cc2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003cc6:	4658      	mov	r0, fp
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cc8:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003cca:	910b      	str	r1, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003ccc:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cce:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003cd0:	f7fd fda2 	bl	8001818 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003cd4:	9a01      	ldr	r2, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003cd6:	a90b      	add	r1, sp, #44	; 0x2c
 8003cd8:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cda:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003cdc:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cde:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ce0:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003ce2:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003ce6:	f7fd fd97 	bl	8001818 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8003cea:	f44f 4381 	mov.w	r3, #16512	; 0x4080
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cee:	a90b      	add	r1, sp, #44	; 0x2c
 8003cf0:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8003cf4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cf6:	2301      	movs	r3, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cf8:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cfa:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cfc:	f7fd fd8c 	bl	8001818 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8003d00:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003d02:	a90b      	add	r1, sp, #44	; 0x2c
 8003d04:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d06:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8003d08:	930b      	str	r3, [sp, #44]	; 0x2c
 8003d0a:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d0c:	2301      	movs	r3, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d0e:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d10:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003d12:	f7fd fd81 	bl	8001818 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003d16:	2280      	movs	r2, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003d18:	a90b      	add	r1, sp, #44	; 0x2c
 8003d1a:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d1c:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003d1e:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d20:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003d22:	f7fd fd79 	bl	8001818 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003d26:	f44f 52e8 	mov.w	r2, #7424	; 0x1d00
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d2a:	a90b      	add	r1, sp, #44	; 0x2c
 8003d2c:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d2e:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003d30:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003d32:	220a      	movs	r2, #10
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d34:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003d36:	920f      	str	r2, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d38:	950e      	str	r5, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d3a:	f7fd fd6d 	bl	8001818 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003d3e:	f44f 7200 	mov.w	r2, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003d42:	a90b      	add	r1, sp, #44	; 0x2c
 8003d44:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d46:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003d48:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d4a:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003d4c:	f7fd fd64 	bl	8001818 <HAL_GPIO_Init>
  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003d50:	2209      	movs	r2, #9
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d52:	a90b      	add	r1, sp, #44	; 0x2c
 8003d54:	4816      	ldr	r0, [pc, #88]	; (8003db0 <MX_GPIO_Init+0x21c>)
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003d56:	920f      	str	r2, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003d58:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d5a:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d5c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d5e:	950e      	str	r5, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d60:	f7fd fd5a 	bl	8001818 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003d64:	f44f 5220 	mov.w	r2, #10240	; 0x2800
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003d68:	a90b      	add	r1, sp, #44	; 0x2c
 8003d6a:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d6c:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003d6e:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d70:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d72:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003d74:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003d78:	f7fd fd4e 	bl	8001818 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003d7c:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d7e:	a90b      	add	r1, sp, #44	; 0x2c
 8003d80:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d82:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003d84:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d86:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d88:	f7fd fd46 	bl	8001818 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003d8c:	4622      	mov	r2, r4
 8003d8e:	4621      	mov	r1, r4
 8003d90:	2028      	movs	r0, #40	; 0x28
 8003d92:	f7fd fa91 	bl	80012b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003d96:	2028      	movs	r0, #40	; 0x28
 8003d98:	f7fd fac6 	bl	8001328 <HAL_NVIC_EnableIRQ>

}
 8003d9c:	b011      	add	sp, #68	; 0x44
 8003d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003da2:	bf00      	nop
 8003da4:	40023800 	.word	0x40023800
 8003da8:	40020400 	.word	0x40020400
 8003dac:	10110000 	.word	0x10110000
 8003db0:	40020c00 	.word	0x40020c00
 8003db4:	40021400 	.word	0x40021400
 8003db8:	40021800 	.word	0x40021800
 8003dbc:	40020800 	.word	0x40020800

08003dc0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003dc0:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8003dc2:	4815      	ldr	r0, [pc, #84]	; (8003e18 <MX_I2C1_Init+0x58>)
  hi2c1.Init.Timing = 0x00C0EAFF;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003dc4:	2201      	movs	r2, #1
  hi2c1.Init.Timing = 0x00C0EAFF;
 8003dc6:	4b15      	ldr	r3, [pc, #84]	; (8003e1c <MX_I2C1_Init+0x5c>)
 8003dc8:	4915      	ldr	r1, [pc, #84]	; (8003e20 <MX_I2C1_Init+0x60>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003dca:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8003dcc:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c1.Init.OwnAddress1 = 0;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	6083      	str	r3, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003dd4:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003dd6:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003dd8:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003dda:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003ddc:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003dde:	f7fd fec1 	bl	8001b64 <HAL_I2C_Init>
 8003de2:	b118      	cbz	r0, 8003dec <MX_I2C1_Init+0x2c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003de4:	2143      	movs	r1, #67	; 0x43
 8003de6:	480f      	ldr	r0, [pc, #60]	; (8003e24 <MX_I2C1_Init+0x64>)
 8003de8:	f000 fa0e 	bl	8004208 <_Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003dec:	2100      	movs	r1, #0
 8003dee:	480a      	ldr	r0, [pc, #40]	; (8003e18 <MX_I2C1_Init+0x58>)
 8003df0:	f7fd ff09 	bl	8001c06 <HAL_I2CEx_ConfigAnalogFilter>
 8003df4:	b118      	cbz	r0, 8003dfe <MX_I2C1_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003df6:	214a      	movs	r1, #74	; 0x4a
 8003df8:	480a      	ldr	r0, [pc, #40]	; (8003e24 <MX_I2C1_Init+0x64>)
 8003dfa:	f000 fa05 	bl	8004208 <_Error_Handler>
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003dfe:	2100      	movs	r1, #0
 8003e00:	4805      	ldr	r0, [pc, #20]	; (8003e18 <MX_I2C1_Init+0x58>)
 8003e02:	f7fd ff26 	bl	8001c52 <HAL_I2CEx_ConfigDigitalFilter>
 8003e06:	b128      	cbz	r0, 8003e14 <MX_I2C1_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003e08:	2151      	movs	r1, #81	; 0x51
 8003e0a:	4806      	ldr	r0, [pc, #24]	; (8003e24 <MX_I2C1_Init+0x64>)
  }

}
 8003e0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8003e10:	f000 b9fa 	b.w	8004208 <_Error_Handler>
 8003e14:	bd08      	pop	{r3, pc}
 8003e16:	bf00      	nop
 8003e18:	200017ac 	.word	0x200017ac
 8003e1c:	00c0eaff 	.word	0x00c0eaff
 8003e20:	40005400 	.word	0x40005400
 8003e24:	08007c23 	.word	0x08007c23

08003e28 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8003e28:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 8003e2a:	4815      	ldr	r0, [pc, #84]	; (8003e80 <MX_I2C2_Init+0x58>)
  hi2c2.Init.Timing = 0x00C0EAFF;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e2c:	2201      	movs	r2, #1
  hi2c2.Init.Timing = 0x00C0EAFF;
 8003e2e:	4b15      	ldr	r3, [pc, #84]	; (8003e84 <MX_I2C2_Init+0x5c>)
 8003e30:	4915      	ldr	r1, [pc, #84]	; (8003e88 <MX_I2C2_Init+0x60>)
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e32:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.Timing = 0x00C0EAFF;
 8003e34:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c2.Init.OwnAddress1 = 0;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	6083      	str	r3, [r0, #8]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003e3c:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003e3e:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003e40:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e42:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e44:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003e46:	f7fd fe8d 	bl	8001b64 <HAL_I2C_Init>
 8003e4a:	b118      	cbz	r0, 8003e54 <MX_I2C2_Init+0x2c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003e4c:	2164      	movs	r1, #100	; 0x64
 8003e4e:	480f      	ldr	r0, [pc, #60]	; (8003e8c <MX_I2C2_Init+0x64>)
 8003e50:	f000 f9da 	bl	8004208 <_Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003e54:	2100      	movs	r1, #0
 8003e56:	480a      	ldr	r0, [pc, #40]	; (8003e80 <MX_I2C2_Init+0x58>)
 8003e58:	f7fd fed5 	bl	8001c06 <HAL_I2CEx_ConfigAnalogFilter>
 8003e5c:	b118      	cbz	r0, 8003e66 <MX_I2C2_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003e5e:	216b      	movs	r1, #107	; 0x6b
 8003e60:	480a      	ldr	r0, [pc, #40]	; (8003e8c <MX_I2C2_Init+0x64>)
 8003e62:	f000 f9d1 	bl	8004208 <_Error_Handler>
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003e66:	2100      	movs	r1, #0
 8003e68:	4805      	ldr	r0, [pc, #20]	; (8003e80 <MX_I2C2_Init+0x58>)
 8003e6a:	f7fd fef2 	bl	8001c52 <HAL_I2CEx_ConfigDigitalFilter>
 8003e6e:	b128      	cbz	r0, 8003e7c <MX_I2C2_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003e70:	2172      	movs	r1, #114	; 0x72
 8003e72:	4806      	ldr	r0, [pc, #24]	; (8003e8c <MX_I2C2_Init+0x64>)
  }

}
 8003e74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8003e78:	f000 b9c6 	b.w	8004208 <_Error_Handler>
 8003e7c:	bd08      	pop	{r3, pc}
 8003e7e:	bf00      	nop
 8003e80:	200017f8 	.word	0x200017f8
 8003e84:	00c0eaff 	.word	0x00c0eaff
 8003e88:	40005800 	.word	0x40005800
 8003e8c:	08007c23 	.word	0x08007c23

08003e90 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 8003e90:	6803      	ldr	r3, [r0, #0]
 8003e92:	4a1e      	ldr	r2, [pc, #120]	; (8003f0c <HAL_I2C_MspInit+0x7c>)
 8003e94:	4293      	cmp	r3, r2
{
 8003e96:	b500      	push	{lr}
 8003e98:	b089      	sub	sp, #36	; 0x24
  if(i2cHandle->Instance==I2C1)
 8003e9a:	d11b      	bne.n	8003ed4 <HAL_I2C_MspInit+0x44>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_X_SCL_Pin|I2C1_X_SDA_Pin;
 8003e9c:	f44f 7340 	mov.w	r3, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ea0:	a903      	add	r1, sp, #12
 8003ea2:	481b      	ldr	r0, [pc, #108]	; (8003f10 <HAL_I2C_MspInit+0x80>)
    GPIO_InitStruct.Pin = I2C1_X_SCL_Pin|I2C1_X_SDA_Pin;
 8003ea4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ea6:	2312      	movs	r3, #18
 8003ea8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003eb2:	2304      	movs	r3, #4
 8003eb4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eb6:	f7fd fcaf 	bl	8001818 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003eba:	4b16      	ldr	r3, [pc, #88]	; (8003f14 <HAL_I2C_MspInit+0x84>)
 8003ebc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ebe:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003ec2:	641a      	str	r2, [r3, #64]	; 0x40
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003eca:	9301      	str	r3, [sp, #4]
 8003ecc:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8003ece:	b009      	add	sp, #36	; 0x24
 8003ed0:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(i2cHandle->Instance==I2C2)
 8003ed4:	4a10      	ldr	r2, [pc, #64]	; (8003f18 <HAL_I2C_MspInit+0x88>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d1f9      	bne.n	8003ece <HAL_I2C_MspInit+0x3e>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003eda:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003edc:	2212      	movs	r2, #18
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003ede:	a903      	add	r1, sp, #12
 8003ee0:	480e      	ldr	r0, [pc, #56]	; (8003f1c <HAL_I2C_MspInit+0x8c>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003ee2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ee4:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ee6:	2201      	movs	r2, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ee8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003eea:	2304      	movs	r3, #4
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003eec:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003eee:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003ef0:	f7fd fc92 	bl	8001818 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003ef4:	4b07      	ldr	r3, [pc, #28]	; (8003f14 <HAL_I2C_MspInit+0x84>)
 8003ef6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ef8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003efc:	641a      	str	r2, [r3, #64]	; 0x40
 8003efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f04:	9302      	str	r3, [sp, #8]
 8003f06:	9b02      	ldr	r3, [sp, #8]
}
 8003f08:	e7e1      	b.n	8003ece <HAL_I2C_MspInit+0x3e>
 8003f0a:	bf00      	nop
 8003f0c:	40005400 	.word	0x40005400
 8003f10:	40020400 	.word	0x40020400
 8003f14:	40023800 	.word	0x40023800
 8003f18:	40005800 	.word	0x40005800
 8003f1c:	40021400 	.word	0x40021400

08003f20 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f20:	4b33      	ldr	r3, [pc, #204]	; (8003ff0 <SystemClock_Config+0xd0>)
 8003f22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f24:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 8003f28:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f2a:	641a      	str	r2, [r3, #64]	; 0x40
{
 8003f2c:	b0b9      	sub	sp, #228	; 0xe4
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f30:	2502      	movs	r5, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003f32:	4a30      	ldr	r2, [pc, #192]	; (8003ff4 <SystemClock_Config+0xd4>)
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003f34:	2404      	movs	r4, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
  RCC_OscInitStruct.PLL.PLLN = 100;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f3a:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003f40:	6813      	ldr	r3, [r2, #0]
 8003f42:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003f46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f4a:	6013      	str	r3, [r2, #0]
 8003f4c:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f4e:	950d      	str	r5, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003f50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003f54:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003f56:	9511      	str	r5, [sp, #68]	; 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003f58:	9301      	str	r3, [sp, #4]
 8003f5a:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003f5c:	2309      	movs	r3, #9
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003f5e:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003f60:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003f62:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003f66:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003f6c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f70:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 100;
 8003f72:	2364      	movs	r3, #100	; 0x64
 8003f74:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f76:	f7fd fec9 	bl	8001d0c <HAL_RCC_OscConfig>
 8003f7a:	b100      	cbz	r0, 8003f7e <SystemClock_Config+0x5e>
 8003f7c:	e7fe      	b.n	8003f7c <SystemClock_Config+0x5c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Activate the Over-Drive mode
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003f7e:	f7fd fe8d 	bl	8001c9c <HAL_PWREx_EnableOverDrive>
 8003f82:	b100      	cbz	r0, 8003f86 <SystemClock_Config+0x66>
 8003f84:	e7fe      	b.n	8003f84 <SystemClock_Config+0x64>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f86:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f88:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003f8a:	9006      	str	r0, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003f8c:	2103      	movs	r1, #3
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f8e:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003f90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003f94:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f96:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003f98:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003f9a:	f7fe f879 	bl	8002090 <HAL_RCC_ClockConfig>
 8003f9e:	b100      	cbz	r0, 8003fa2 <SystemClock_Config+0x82>
 8003fa0:	e7fe      	b.n	8003fa0 <SystemClock_Config+0x80>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8003fa2:	f64d 53a0 	movw	r3, #56736	; 0xdda0
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART6
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_UART7
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003fa6:	9026      	str	r0, [sp, #152]	; 0x98
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003fa8:	9027      	str	r0, [sp, #156]	; 0x9c
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8003faa:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003fac:	f44f 7300 	mov.w	r3, #512	; 0x200
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8003fb0:	9029      	str	r0, [sp, #164]	; 0xa4
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8003fb2:	902a      	str	r0, [sp, #168]	; 0xa8
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8003fb4:	902b      	str	r0, [sp, #172]	; 0xac
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003fb6:	902d      	str	r0, [sp, #180]	; 0xb4
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003fb8:	902e      	str	r0, [sp, #184]	; 0xb8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003fba:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003fbc:	9320      	str	r3, [sp, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003fbe:	f7fe f92b 	bl	8002218 <HAL_RCCEx_PeriphCLKConfig>
 8003fc2:	4605      	mov	r5, r0
 8003fc4:	b100      	cbz	r0, 8003fc8 <SystemClock_Config+0xa8>
 8003fc6:	e7fe      	b.n	8003fc6 <SystemClock_Config+0xa6>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003fc8:	f7fe f900 	bl	80021cc <HAL_RCC_GetHCLKFreq>
 8003fcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fd0:	fbb0 f0f3 	udiv	r0, r0, r3
 8003fd4:	f7fd f9c2 	bl	800135c <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003fd8:	4620      	mov	r0, r4
 8003fda:	f7fd f9e3 	bl	80013a4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003fde:	462a      	mov	r2, r5
 8003fe0:	4629      	mov	r1, r5
 8003fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe6:	f7fd f967 	bl	80012b8 <HAL_NVIC_SetPriority>
}
 8003fea:	b039      	add	sp, #228	; 0xe4
 8003fec:	bd30      	pop	{r4, r5, pc}
 8003fee:	bf00      	nop
 8003ff0:	40023800 	.word	0x40023800
 8003ff4:	40007000 	.word	0x40007000

08003ff8 <USART_PRINT_MSG_Configuration>:
/* USER CODE BEGIN 4 */

#ifdef USART_PRINT_MSG
void USART_PRINT_MSG_Configuration(UART_HandleTypeDef *UART_MsgHandle,
		uint32_t baud_rate) {
	UART_MsgHandle->Instance = WIFI_UART_MSG;
 8003ff8:	4b0d      	ldr	r3, [pc, #52]	; (8004030 <USART_PRINT_MSG_Configuration+0x38>)
		uint32_t baud_rate) {
 8003ffa:	b510      	push	{r4, lr}
	UART_MsgHandle->Instance = WIFI_UART_MSG;
 8003ffc:	6003      	str	r3, [r0, #0]
	UART_MsgHandle->Init.BaudRate = baud_rate;
	UART_MsgHandle->Init.WordLength = UART_WORDLENGTH_8B;
 8003ffe:	2300      	movs	r3, #0
	UART_MsgHandle->Init.BaudRate = baud_rate;
 8004000:	6041      	str	r1, [r0, #4]
		uint32_t baud_rate) {
 8004002:	4604      	mov	r4, r0
	UART_MsgHandle->Init.WordLength = UART_WORDLENGTH_8B;
 8004004:	6083      	str	r3, [r0, #8]
	UART_MsgHandle->Init.StopBits = UART_STOPBITS_1;
 8004006:	60c3      	str	r3, [r0, #12]
	UART_MsgHandle->Init.Parity = UART_PARITY_NONE;
 8004008:	6103      	str	r3, [r0, #16]
	UART_MsgHandle->Init.HwFlowCtl = UART_HWCONTROL_NONE; // USART_HardwareFlowControl_RTS_CTS;
 800400a:	6183      	str	r3, [r0, #24]
	UART_MsgHandle->Init.Mode = UART_MODE_TX_RX;
 800400c:	230c      	movs	r3, #12
 800400e:	6143      	str	r3, [r0, #20]

	if (HAL_UART_DeInit(UART_MsgHandle) != HAL_OK) {
 8004010:	f7ff f837 	bl	8003082 <HAL_UART_DeInit>
 8004014:	b100      	cbz	r0, 8004018 <USART_PRINT_MSG_Configuration+0x20>
 8004016:	e7fe      	b.n	8004016 <USART_PRINT_MSG_Configuration+0x1e>
		Error_Handler();
	}
	if (HAL_UART_Init(UART_MsgHandle) != HAL_OK) {
 8004018:	4620      	mov	r0, r4
 800401a:	f7ff fc7a 	bl	8003912 <HAL_UART_Init>
 800401e:	b100      	cbz	r0, 8004022 <USART_PRINT_MSG_Configuration+0x2a>
 8004020:	e7fe      	b.n	8004020 <USART_PRINT_MSG_Configuration+0x28>
		Error_Handler();
	}
#ifdef WIFI_USE_VCOM
	/*## -1- Enable USART2 DMAT & DMAR #################################################*/
	UART_MsgHandle->Instance->CR3 |= 0x00000040;
 8004022:	6822      	ldr	r2, [r4, #0]
 8004024:	6893      	ldr	r3, [r2, #8]
 8004026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800402a:	6093      	str	r3, [r2, #8]
 800402c:	bd10      	pop	{r4, pc}
 800402e:	bf00      	nop
 8004030:	40004800 	.word	0x40004800

08004034 <main>:
{
 8004034:	b510      	push	{r4, lr}
	setvbuf(stdin, NULL, _IONBF, 0);
 8004036:	4c61      	ldr	r4, [pc, #388]	; (80041bc <main+0x188>)
 8004038:	2300      	movs	r3, #0
 800403a:	2202      	movs	r2, #2
 800403c:	6820      	ldr	r0, [r4, #0]
 800403e:	4619      	mov	r1, r3
{
 8004040:	ed2d 8b02 	vpush	{d8}
	setvbuf(stdin, NULL, _IONBF, 0);
 8004044:	6840      	ldr	r0, [r0, #4]
 8004046:	f001 ff1d 	bl	8005e84 <setvbuf>
	setvbuf(stdout, NULL, _IONBF, 0);
 800404a:	2300      	movs	r3, #0
 800404c:	6820      	ldr	r0, [r4, #0]
 800404e:	2202      	movs	r2, #2
 8004050:	4619      	mov	r1, r3
	 	 ssi_update(locx,locy,locz,accelx,accely,accelz,gyrox,gyroy,gyroz,dist,spd,move,temp,pssr,humd,sts);
 8004052:	ed9f 8a5b 	vldr	s16, [pc, #364]	; 80041c0 <main+0x18c>
	setvbuf(stdout, NULL, _IONBF, 0);
 8004056:	6880      	ldr	r0, [r0, #8]
 8004058:	f001 ff14 	bl	8005e84 <setvbuf>
	setvbuf(stderr, NULL, _IONBF, 0);
 800405c:	2300      	movs	r3, #0
 800405e:	6820      	ldr	r0, [r4, #0]
 8004060:	2202      	movs	r2, #2
 8004062:	4619      	mov	r1, r3
 8004064:	68c0      	ldr	r0, [r0, #12]
 8004066:	f001 ff0d 	bl	8005e84 <setvbuf>
  HAL_Init();
 800406a:	f7fd f8e3 	bl	8001234 <HAL_Init>
  SystemClock_Config();
 800406e:	f7ff ff57 	bl	8003f20 <SystemClock_Config>
  MX_GPIO_Init();
 8004072:	f7ff fd8f 	bl	8003b94 <MX_GPIO_Init>
  MX_DMA_Init();
 8004076:	f7ff fd43 	bl	8003b00 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800407a:	f000 fcbb 	bl	80049f4 <MX_USART3_UART_Init>
  MX_CRC_Init();
 800407e:	f7ff fd0d 	bl	8003a9c <MX_CRC_Init>
  MX_I2C1_Init();
 8004082:	f7ff fe9d 	bl	8003dc0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8004086:	f7ff fecf 	bl	8003e28 <MX_I2C2_Init>
  MX_RTC_Init();
 800408a:	f000 f909 	bl	80042a0 <MX_RTC_Init>
  MX_TIM1_Init();
 800408e:	f000 fb79 	bl	8004784 <MX_TIM1_Init>
  MX_TIM2_Init();
 8004092:	f000 fa99 	bl	80045c8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8004096:	f000 facb 	bl	8004630 <MX_TIM3_Init>
  MX_TIM4_Init();
 800409a:	f000 fbeb 	bl	8004874 <MX_TIM4_Init>
  MX_UART5_Init();
 800409e:	f000 fc43 	bl	8004928 <MX_UART5_Init>
  MX_UART7_Init();
 80040a2:	f000 fc63 	bl	800496c <MX_UART7_Init>
  MX_USART2_UART_Init();
 80040a6:	f000 fc83 	bl	80049b0 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80040aa:	f000 fcc5 	bl	8004a38 <MX_USART6_UART_Init>
  MX_SPI1_Init();
 80040ae:	f000 f923 	bl	80042f8 <MX_SPI1_Init>
  motor_init();
 80040b2:	f000 f8c3 	bl	800423c <motor_init>
	USART_PRINT_MSG_Configuration(&huart3, 115200);
 80040b6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80040ba:	4842      	ldr	r0, [pc, #264]	; (80041c4 <main+0x190>)
 80040bc:	f7ff ff9c 	bl	8003ff8 <USART_PRINT_MSG_Configuration>
	Set_UartMsgHandle(&huart3); //this is required for the console handler initialization
 80040c0:	4840      	ldr	r0, [pc, #256]	; (80041c4 <main+0x190>)
 80040c2:	f7ff fc59 	bl	8003978 <Set_UartMsgHandle>
	printf("\r\n Please wait... \r\n");
 80040c6:	4840      	ldr	r0, [pc, #256]	; (80041c8 <main+0x194>)
 80040c8:	f001 fec4 	bl	8005e54 <puts>
	USART6->CR3 |= 0x00000040;
 80040cc:	4a3f      	ldr	r2, [pc, #252]	; (80041cc <main+0x198>)
	HAL_Delay(4000);
 80040ce:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
	USART6->CR3 |= 0x00000040;
 80040d2:	6893      	ldr	r3, [r2, #8]
 80040d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040d8:	6093      	str	r3, [r2, #8]
	HAL_Delay(4000);
 80040da:	f7fd f8c9 	bl	8001270 <HAL_Delay>
	printf("\r\n Ready... Updating ... \r\n");
 80040de:	483c      	ldr	r0, [pc, #240]	; (80041d0 <main+0x19c>)
 80040e0:	f001 feb8 	bl	8005e54 <puts>
		BSP_MotorControl_SetMaxSpeed(0, 10);
 80040e4:	210a      	movs	r1, #10
 80040e6:	2000      	movs	r0, #0
 80040e8:	f7fc ffee 	bl	80010c8 <BSP_MotorControl_SetMaxSpeed>
		BSP_MotorControl_Run(0, FORWARD);
 80040ec:	2101      	movs	r1, #1
 80040ee:	2000      	movs	r0, #0
 		 strcpy(sts, "Status GOOD");
 80040f0:	2400      	movs	r4, #0
		BSP_MotorControl_Run(0, FORWARD);
 80040f2:	f7fc ffdd 	bl	80010b0 <BSP_MotorControl_Run>
		BSP_MotorControl_SetMaxSpeed(1, 10);
 80040f6:	210a      	movs	r1, #10
 80040f8:	2001      	movs	r0, #1
 80040fa:	f7fc ffe5 	bl	80010c8 <BSP_MotorControl_SetMaxSpeed>
		BSP_MotorControl_Run(1, FORWARD);
 80040fe:	2101      	movs	r1, #1
 8004100:	4608      	mov	r0, r1
 8004102:	f7fc ffd5 	bl	80010b0 <BSP_MotorControl_Run>
 		 strcpy(sts, "Status GOOD");
 8004106:	4933      	ldr	r1, [pc, #204]	; (80041d4 <main+0x1a0>)
 8004108:	4620      	mov	r0, r4
 800410a:	f001 ffd0 	bl	80060ae <strcpy>
	 	 ssi_update(locx,locy,locz,accelx,accely,accelz,gyrox,gyroy,gyroz,dist,spd,move,temp,pssr,humd,sts);
 800410e:	eeb0 7a48 	vmov.f32	s14, s16
 8004112:	eddf 6a31 	vldr	s13, [pc, #196]	; 80041d8 <main+0x1a4>
 8004116:	eeb0 2a0c 	vmov.f32	s4, #12	; 0x40600000  3.5
 800411a:	ed9f 6a30 	vldr	s12, [pc, #192]	; 80041dc <main+0x1a8>
 800411e:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8004122:	eddf 5a2f 	vldr	s11, [pc, #188]	; 80041e0 <main+0x1ac>
 8004126:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800412a:	ed9f 5a2e 	vldr	s10, [pc, #184]	; 80041e4 <main+0x1b0>
 800412e:	4620      	mov	r0, r4
 8004130:	eddf 4a2d 	vldr	s9, [pc, #180]	; 80041e8 <main+0x1b4>
 8004134:	ed9f 4a2d 	vldr	s8, [pc, #180]	; 80041ec <main+0x1b8>
 8004138:	eddf 3a2d 	vldr	s7, [pc, #180]	; 80041f0 <main+0x1bc>
 800413c:	ed9f 3a2d 	vldr	s6, [pc, #180]	; 80041f4 <main+0x1c0>
 8004140:	eddf 2a2d 	vldr	s5, [pc, #180]	; 80041f8 <main+0x1c4>
 8004144:	eddf 1a2d 	vldr	s3, [pc, #180]	; 80041fc <main+0x1c8>
 8004148:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 8004200 <main+0x1cc>
 800414c:	f000 fea0 	bl	8004e90 <ssi_update>
	 	 HAL_Delay(5000);
 8004150:	f241 3088 	movw	r0, #5000	; 0x1388
 8004154:	f7fd f88c 	bl	8001270 <HAL_Delay>
 		 strcpy(sts, "Status BAD");
 8004158:	492a      	ldr	r1, [pc, #168]	; (8004204 <main+0x1d0>)
 800415a:	4620      	mov	r0, r4
 800415c:	f001 ffa7 	bl	80060ae <strcpy>
	 	 ssi_update(locx,locy,locz,accelx,accely,accelz,gyrox,gyroy,gyroz,dist,spd,move,temp,pssr,humd,sts);
 8004160:	eeb0 7a48 	vmov.f32	s14, s16
 8004164:	eddf 6a1c 	vldr	s13, [pc, #112]	; 80041d8 <main+0x1a4>
 8004168:	eeb0 2a0c 	vmov.f32	s4, #12	; 0x40600000  3.5
 800416c:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 80041dc <main+0x1a8>
 8004170:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8004174:	eddf 5a1a 	vldr	s11, [pc, #104]	; 80041e0 <main+0x1ac>
 8004178:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800417c:	ed9f 5a19 	vldr	s10, [pc, #100]	; 80041e4 <main+0x1b0>
 8004180:	4620      	mov	r0, r4
 8004182:	eddf 4a19 	vldr	s9, [pc, #100]	; 80041e8 <main+0x1b4>
 8004186:	ed9f 4a19 	vldr	s8, [pc, #100]	; 80041ec <main+0x1b8>
 800418a:	eddf 3a19 	vldr	s7, [pc, #100]	; 80041f0 <main+0x1bc>
 800418e:	ed9f 3a19 	vldr	s6, [pc, #100]	; 80041f4 <main+0x1c0>
 8004192:	eddf 2a19 	vldr	s5, [pc, #100]	; 80041f8 <main+0x1c4>
 8004196:	eddf 1a19 	vldr	s3, [pc, #100]	; 80041fc <main+0x1c8>
 800419a:	ed9f 1a19 	vldr	s2, [pc, #100]	; 8004200 <main+0x1cc>
 800419e:	f000 fe77 	bl	8004e90 <ssi_update>
		BSP_MotorControl_SetMaxSpeed(0, 0);
 80041a2:	4621      	mov	r1, r4
 80041a4:	4620      	mov	r0, r4
 80041a6:	f7fc ff8f 	bl	80010c8 <BSP_MotorControl_SetMaxSpeed>
		BSP_MotorControl_SetMaxSpeed(1, 0);
 80041aa:	4621      	mov	r1, r4
 80041ac:	2001      	movs	r0, #1
 80041ae:	f7fc ff8b 	bl	80010c8 <BSP_MotorControl_SetMaxSpeed>
	 	HAL_Delay(5000);
 80041b2:	f241 3088 	movw	r0, #5000	; 0x1388
 80041b6:	f7fd f85b 	bl	8001270 <HAL_Delay>
 80041ba:	e793      	b.n	80040e4 <main+0xb0>
 80041bc:	20000170 	.word	0x20000170
 80041c0:	40875c29 	.word	0x40875c29
 80041c4:	2000147c 	.word	0x2000147c
 80041c8:	08007c30 	.word	0x08007c30
 80041cc:	40011400 	.word	0x40011400
 80041d0:	08007c44 	.word	0x08007c44
 80041d4:	08007c5f 	.word	0x08007c5f
 80041d8:	447a0000 	.word	0x447a0000
 80041dc:	42000000 	.word	0x42000000
 80041e0:	435e0000 	.word	0x435e0000
 80041e4:	42280000 	.word	0x42280000
 80041e8:	42220000 	.word	0x42220000
 80041ec:	408ccccd 	.word	0x408ccccd
 80041f0:	4089999a 	.word	0x4089999a
 80041f4:	40866666 	.word	0x40866666
 80041f8:	00000000 	.word	0x00000000
 80041fc:	40533333 	.word	0x40533333
 8004200:	41f26666 	.word	0x41f26666
 8004204:	08007c6b 	.word	0x08007c6b

08004208 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8004208:	e7fe      	b.n	8004208 <_Error_Handler>
	...

0800420c <Error_Handler>:
  * @retval None
  */
void Error_Handler(uint16_t error)
{
  /* Backup error number */
  gLastError = error;
 800420c:	4b01      	ldr	r3, [pc, #4]	; (8004214 <Error_Handler+0x8>)
 800420e:	8018      	strh	r0, [r3, #0]
 8004210:	e7fe      	b.n	8004210 <Error_Handler+0x4>
 8004212:	bf00      	nop
 8004214:	20000364 	.word	0x20000364

08004218 <MyFlagInterruptHandler>:
{
 8004218:	b508      	push	{r3, lr}
  uint16_t bridgeState  = BSP_MotorControl_CmdGetStatus(0);
 800421a:	2000      	movs	r0, #0
 800421c:	f7fc ff66 	bl	80010ec <BSP_MotorControl_CmdGetStatus>
  if (bridgeState == 0)
 8004220:	b940      	cbnz	r0, 8004234 <MyFlagInterruptHandler+0x1c>
    if (BSP_MotorControl_GetDeviceState(0) != INACTIVE)
 8004222:	f7fc ff33 	bl	800108c <BSP_MotorControl_GetDeviceState>
 8004226:	2808      	cmp	r0, #8
 8004228:	d004      	beq.n	8004234 <MyFlagInterruptHandler+0x1c>
  gLastError = error;
 800422a:	f64b 22d0 	movw	r2, #47824	; 0xbad0
 800422e:	4b02      	ldr	r3, [pc, #8]	; (8004238 <MyFlagInterruptHandler+0x20>)
 8004230:	801a      	strh	r2, [r3, #0]
 8004232:	e7fe      	b.n	8004232 <MyFlagInterruptHandler+0x1a>
 8004234:	bd08      	pop	{r3, pc}
 8004236:	bf00      	nop
 8004238:	20000364 	.word	0x20000364

0800423c <motor_init>:
void motor_init(void) {
 800423c:	b530      	push	{r4, r5, lr}
	 deviceParams_t initDeviceParameters =
 800423e:	4d15      	ldr	r5, [pc, #84]	; (8004294 <motor_init+0x58>)
void motor_init(void) {
 8004240:	b08b      	sub	sp, #44	; 0x2c
	 deviceParams_t initDeviceParameters =
 8004242:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004244:	466c      	mov	r4, sp
 8004246:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004248:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800424a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800424c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004250:	e884 0003 	stmia.w	r4, {r0, r1}
  BSP_MotorControl_SetNbDevices(BSP_MOTOR_CONTROL_BOARD_ID_L6206, 2);
 8004254:	2102      	movs	r1, #2
 8004256:	f641 003e 	movw	r0, #6206	; 0x183e
 800425a:	f7fc ff75 	bl	8001148 <BSP_MotorControl_SetNbDevices>
  BSP_MotorControl_Init(BSP_MOTOR_CONTROL_BOARD_ID_L6206, &initDeviceParameters);
 800425e:	4669      	mov	r1, sp
 8004260:	f641 003e 	movw	r0, #6206	; 0x183e
 8004264:	f7fc ff04 	bl	8001070 <BSP_MotorControl_Init>
  BSP_MotorControl_SetDualFullBridgeConfig(PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B);
 8004268:	2000      	movs	r0, #0
 800426a:	f7fc ff51 	bl	8001110 <BSP_MotorControl_SetDualFullBridgeConfig>
  BSP_MotorControl_AttachFlagInterrupt(MyFlagInterruptHandler);
 800426e:	480a      	ldr	r0, [pc, #40]	; (8004298 <motor_init+0x5c>)
 8004270:	f7fc fef2 	bl	8001058 <BSP_MotorControl_AttachFlagInterrupt>
  BSP_MotorControl_AttachErrorHandler(Error_Handler);
 8004274:	4809      	ldr	r0, [pc, #36]	; (800429c <motor_init+0x60>)
 8004276:	f7fc fee3 	bl	8001040 <BSP_MotorControl_AttachErrorHandler>
  BSP_MotorControl_SetBridgeInputPwmFreq(0,10000);
 800427a:	f242 7110 	movw	r1, #10000	; 0x2710
 800427e:	2000      	movs	r0, #0
 8004280:	f7fc ff54 	bl	800112c <BSP_MotorControl_SetBridgeInputPwmFreq>
  BSP_MotorControl_SetBridgeInputPwmFreq(1,10000);
 8004284:	f242 7110 	movw	r1, #10000	; 0x2710
 8004288:	2001      	movs	r0, #1
 800428a:	f7fc ff4f 	bl	800112c <BSP_MotorControl_SetBridgeInputPwmFreq>
}
 800428e:	b00b      	add	sp, #44	; 0x2c
 8004290:	bd30      	pop	{r4, r5, pc}
 8004292:	bf00      	nop
 8004294:	08007bc8 	.word	0x08007bc8
 8004298:	08004219 	.word	0x08004219
 800429c:	0800420d 	.word	0x0800420d

080042a0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80042a0:	b508      	push	{r3, lr}

    /**Initialize RTC Only 
    */
  hrtc.Instance = RTC;
 80042a2:	480b      	ldr	r0, [pc, #44]	; (80042d0 <MX_RTC_Init+0x30>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
 80042a4:	227f      	movs	r2, #127	; 0x7f
  hrtc.Instance = RTC;
 80042a6:	4b0b      	ldr	r3, [pc, #44]	; (80042d4 <MX_RTC_Init+0x34>)
  hrtc.Init.AsynchPrediv = 127;
 80042a8:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 80042aa:	22ff      	movs	r2, #255	; 0xff
  hrtc.Instance = RTC;
 80042ac:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80042ae:	2300      	movs	r3, #0
  hrtc.Init.SynchPrediv = 255;
 80042b0:	60c2      	str	r2, [r0, #12]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80042b2:	6043      	str	r3, [r0, #4]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80042b4:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80042b6:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80042b8:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80042ba:	f7fe fa75 	bl	80027a8 <HAL_RTC_Init>
 80042be:	b128      	cbz	r0, 80042cc <MX_RTC_Init+0x2c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80042c0:	2140      	movs	r1, #64	; 0x40
 80042c2:	4805      	ldr	r0, [pc, #20]	; (80042d8 <MX_RTC_Init+0x38>)
  }

}
 80042c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80042c8:	f7ff bf9e 	b.w	8004208 <_Error_Handler>
 80042cc:	bd08      	pop	{r3, pc}
 80042ce:	bf00      	nop
 80042d0:	20001844 	.word	0x20001844
 80042d4:	40002800 	.word	0x40002800
 80042d8:	08007c76 	.word	0x08007c76

080042dc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 80042dc:	6802      	ldr	r2, [r0, #0]
 80042de:	4b04      	ldr	r3, [pc, #16]	; (80042f0 <HAL_RTC_MspInit+0x14>)
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d104      	bne.n	80042ee <HAL_RTC_MspInit+0x12>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80042e4:	4a03      	ldr	r2, [pc, #12]	; (80042f4 <HAL_RTC_MspInit+0x18>)
 80042e6:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80042e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042ec:	6713      	str	r3, [r2, #112]	; 0x70
 80042ee:	4770      	bx	lr
 80042f0:	40002800 	.word	0x40002800
 80042f4:	40023800 	.word	0x40023800

080042f8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80042f8:	b508      	push	{r3, lr}

  hspi1.Instance = SPI1;
 80042fa:	4811      	ldr	r0, [pc, #68]	; (8004340 <MX_SPI1_Init+0x48>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80042fc:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8004300:	f44f 7240 	mov.w	r2, #768	; 0x300
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004304:	490f      	ldr	r1, [pc, #60]	; (8004344 <MX_SPI1_Init+0x4c>)
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8004306:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004308:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800430c:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004310:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004312:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8004314:	2207      	movs	r2, #7
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004316:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004318:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800431a:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800431c:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800431e:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004320:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004322:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004324:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004326:	2308      	movs	r3, #8
  hspi1.Init.CRCPolynomial = 7;
 8004328:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800432a:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800432c:	f7fe fa7e 	bl	800282c <HAL_SPI_Init>
 8004330:	b128      	cbz	r0, 800433e <MX_SPI1_Init+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004332:	2147      	movs	r1, #71	; 0x47
 8004334:	4804      	ldr	r0, [pc, #16]	; (8004348 <MX_SPI1_Init+0x50>)
  }

}
 8004336:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 800433a:	f7ff bf65 	b.w	8004208 <_Error_Handler>
 800433e:	bd08      	pop	{r3, pc}
 8004340:	20001864 	.word	0x20001864
 8004344:	40013000 	.word	0x40013000
 8004348:	08007c83 	.word	0x08007c83

0800434c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 800434c:	6802      	ldr	r2, [r0, #0]
 800434e:	4b15      	ldr	r3, [pc, #84]	; (80043a4 <HAL_SPI_MspInit+0x58>)
 8004350:	429a      	cmp	r2, r3
{
 8004352:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004354:	b087      	sub	sp, #28
  if(spiHandle->Instance==SPI1)
 8004356:	d122      	bne.n	800439e <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004358:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800435c:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800435e:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004360:	2503      	movs	r5, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004362:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004364:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004366:	a901      	add	r1, sp, #4
 8004368:	480f      	ldr	r0, [pc, #60]	; (80043a8 <HAL_SPI_MspInit+0x5c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800436a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800436e:	645a      	str	r2, [r3, #68]	; 0x44
 8004370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004372:	9702      	str	r7, [sp, #8]
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004374:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004378:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800437a:	9504      	str	r5, [sp, #16]
    __HAL_RCC_SPI1_CLK_ENABLE();
 800437c:	9300      	str	r3, [sp, #0]
 800437e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004380:	2360      	movs	r3, #96	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004382:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004384:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004386:	f7fd fa47 	bl	8001818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800438a:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800438c:	a901      	add	r1, sp, #4
 800438e:	4807      	ldr	r0, [pc, #28]	; (80043ac <HAL_SPI_MspInit+0x60>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004390:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004392:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004394:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004396:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004398:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800439a:	f7fd fa3d 	bl	8001818 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800439e:	b007      	add	sp, #28
 80043a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043a2:	bf00      	nop
 80043a4:	40013000 	.word	0x40013000
 80043a8:	40020000 	.word	0x40020000
 80043ac:	40020c00 	.word	0x40020c00

080043b0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80043b0:	4b21      	ldr	r3, [pc, #132]	; (8004438 <HAL_MspInit+0x88>)
{
 80043b2:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80043b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043b6:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 80043b8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80043bc:	641a      	str	r2, [r3, #64]	; 0x40
 80043be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043c0:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80043c4:	9200      	str	r2, [sp, #0]
 80043c6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043ce:	645a      	str	r2, [r3, #68]	; 0x44
 80043d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043d6:	9301      	str	r3, [sp, #4]
 80043d8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043da:	f7fc ff5b 	bl	8001294 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80043de:	2200      	movs	r2, #0
 80043e0:	f06f 000b 	mvn.w	r0, #11
 80043e4:	4611      	mov	r1, r2
 80043e6:	f7fc ff67 	bl	80012b8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80043ea:	2200      	movs	r2, #0
 80043ec:	f06f 000a 	mvn.w	r0, #10
 80043f0:	4611      	mov	r1, r2
 80043f2:	f7fc ff61 	bl	80012b8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80043f6:	2200      	movs	r2, #0
 80043f8:	f06f 0009 	mvn.w	r0, #9
 80043fc:	4611      	mov	r1, r2
 80043fe:	f7fc ff5b 	bl	80012b8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8004402:	2200      	movs	r2, #0
 8004404:	f06f 0004 	mvn.w	r0, #4
 8004408:	4611      	mov	r1, r2
 800440a:	f7fc ff55 	bl	80012b8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800440e:	2200      	movs	r2, #0
 8004410:	f06f 0003 	mvn.w	r0, #3
 8004414:	4611      	mov	r1, r2
 8004416:	f7fc ff4f 	bl	80012b8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800441a:	2200      	movs	r2, #0
 800441c:	f06f 0001 	mvn.w	r0, #1
 8004420:	4611      	mov	r1, r2
 8004422:	f7fc ff49 	bl	80012b8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8004426:	2200      	movs	r2, #0
 8004428:	f04f 30ff 	mov.w	r0, #4294967295
 800442c:	4611      	mov	r1, r2
 800442e:	f7fc ff43 	bl	80012b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004432:	b003      	add	sp, #12
 8004434:	f85d fb04 	ldr.w	pc, [sp], #4
 8004438:	40023800 	.word	0x40023800

0800443c <NMI_Handler>:
 800443c:	4770      	bx	lr

0800443e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800443e:	e7fe      	b.n	800443e <HardFault_Handler>

08004440 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8004440:	e7fe      	b.n	8004440 <MemManage_Handler>

08004442 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8004442:	e7fe      	b.n	8004442 <BusFault_Handler>

08004444 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8004444:	e7fe      	b.n	8004444 <UsageFault_Handler>

08004446 <SVC_Handler>:
 8004446:	4770      	bx	lr

08004448 <DebugMon_Handler>:
 8004448:	4770      	bx	lr

0800444a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800444a:	4770      	bx	lr

0800444c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800444c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800444e:	f7fc fefd 	bl	800124c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004452:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8004456:	f7fc bfb2 	b.w	80013be <HAL_SYSTICK_IRQHandler>
	...

0800445c <DMA1_Stream1_IRQHandler>:
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF1)==(DMA_LISR_TCIF1));
 800445c:	4b04      	ldr	r3, [pc, #16]	; (8004470 <DMA1_Stream1_IRQHandler+0x14>)
 800445e:	681a      	ldr	r2, [r3, #0]
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
	// CONSOLE - UART - RX

	if (LL_DMA_IsActiveFlag_TC1(DMA1) == 1) {
 8004460:	0512      	lsls	r2, r2, #20
 8004462:	d504      	bpl.n	800446e <DMA1_Stream1_IRQHandler+0x12>
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF1);
 8004464:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004468:	609a      	str	r2, [r3, #8]
		LL_DMA_ClearFlag_TC1(DMA1);
		DMA1_TransferComplete();
 800446a:	f7ff ba8b 	b.w	8003984 <DMA1_TransferComplete>
 800446e:	4770      	bx	lr
 8004470:	40026000 	.word	0x40026000

08004474 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004474:	4801      	ldr	r0, [pc, #4]	; (800447c <DMA1_Stream3_IRQHandler+0x8>)
 8004476:	f7fd b915 	b.w	80016a4 <HAL_DMA_IRQHandler>
 800447a:	bf00      	nop
 800447c:	20001620 	.word	0x20001620

08004480 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
////
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004480:	4801      	ldr	r0, [pc, #4]	; (8004488 <DMA1_Stream5_IRQHandler+0x8>)
 8004482:	f7fd b90f 	b.w	80016a4 <HAL_DMA_IRQHandler>
 8004486:	bf00      	nop
 8004488:	200019c8 	.word	0x200019c8

0800448c <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800448c:	4801      	ldr	r0, [pc, #4]	; (8004494 <DMA1_Stream6_IRQHandler+0x8>)
 800448e:	f7fd b909 	b.w	80016a4 <HAL_DMA_IRQHandler>
 8004492:	bf00      	nop
 8004494:	20001b08 	.word	0x20001b08

08004498 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */
////
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004498:	4801      	ldr	r0, [pc, #4]	; (80044a0 <USART2_IRQHandler+0x8>)
 800449a:	f7fe bfc3 	b.w	8003424 <HAL_UART_IRQHandler>
 800449e:	bf00      	nop
 80044a0:	20001b68 	.word	0x20001b68

080044a4 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */
////
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80044a4:	4801      	ldr	r0, [pc, #4]	; (80044ac <USART3_IRQHandler+0x8>)
 80044a6:	f7fe bfbd 	b.w	8003424 <HAL_UART_IRQHandler>
 80044aa:	bf00      	nop
 80044ac:	2000147c 	.word	0x2000147c

080044b0 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80044b0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80044b4:	f7fd bb4a 	b.w	8001b4c <HAL_GPIO_EXTI_IRQHandler>

080044b8 <DMA2_Stream1_IRQHandler>:
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF1)==(DMA_LISR_TCIF1));
 80044b8:	4b04      	ldr	r3, [pc, #16]	; (80044cc <DMA2_Stream1_IRQHandler+0x14>)
 80044ba:	681a      	ldr	r2, [r3, #0]
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

	// WIFI - UART - RX
	if (LL_DMA_IsActiveFlag_TC1(DMA2) == 1) {
 80044bc:	0512      	lsls	r2, r2, #20
 80044be:	d504      	bpl.n	80044ca <DMA2_Stream1_IRQHandler+0x12>
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF1);
 80044c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044c4:	609a      	str	r2, [r3, #8]
		LL_DMA_ClearFlag_TC1(DMA2);
		DMA2_TransferComplete();
 80044c6:	f7ff ba85 	b.w	80039d4 <DMA2_TransferComplete>
 80044ca:	4770      	bx	lr
 80044cc:	40026400 	.word	0x40026400

080044d0 <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80044d0:	4801      	ldr	r0, [pc, #4]	; (80044d8 <DMA2_Stream6_IRQHandler+0x8>)
 80044d2:	f7fd b8e7 	b.w	80016a4 <HAL_DMA_IRQHandler>
 80044d6:	bf00      	nop
 80044d8:	200016e0 	.word	0x200016e0

080044dc <USART6_IRQHandler>:
void USART6_IRQHandler(void)
{
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80044dc:	4801      	ldr	r0, [pc, #4]	; (80044e4 <USART6_IRQHandler+0x8>)
 80044de:	f7fe bfa1 	b.w	8003424 <HAL_UART_IRQHandler>
 80044e2:	bf00      	nop
 80044e4:	200003a4 	.word	0x200003a4

080044e8 <HAL_UART_RxCpltCallback>:
 80044e8:	4770      	bx	lr

080044ea <HAL_UART_TxCpltCallback>:
 * @brief  HAL_UART_TxCpltCallback
 *         Tx Transfer completed callback
 * @param  UsartHandle: UART handle
 * @retval None
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandleArg) {
 80044ea:	4770      	bx	lr

080044ec <HAL_UART_ErrorCallback>:
 *         add your own implementation.
 * @retval None
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle) {
	// WiFi_HAL_UART_ErrorCallback(UartHandle);
	printf("UART ERROR!!!");
 80044ec:	4801      	ldr	r0, [pc, #4]	; (80044f4 <HAL_UART_ErrorCallback+0x8>)
 80044ee:	f001 bc3d 	b.w	8005d6c <iprintf>
 80044f2:	bf00      	nop
 80044f4:	08007c90 	.word	0x08007c90

080044f8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 80044f8:	b570      	push	{r4, r5, r6, lr}
 80044fa:	460e      	mov	r6, r1
 80044fc:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044fe:	460c      	mov	r4, r1
 8004500:	1ba3      	subs	r3, r4, r6
 8004502:	429d      	cmp	r5, r3
 8004504:	dc01      	bgt.n	800450a <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8004506:	4628      	mov	r0, r5
 8004508:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800450a:	f7ff fac5 	bl	8003a98 <__io_getchar>
 800450e:	f804 0b01 	strb.w	r0, [r4], #1
 8004512:	e7f5      	b.n	8004500 <_read+0x8>

08004514 <_write>:

int _write(int file, char *ptr, int len)
{
 8004514:	b570      	push	{r4, r5, r6, lr}
 8004516:	460e      	mov	r6, r1
 8004518:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800451a:	460c      	mov	r4, r1
 800451c:	1ba3      	subs	r3, r4, r6
 800451e:	429d      	cmp	r5, r3
 8004520:	dc01      	bgt.n	8004526 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8004522:	4628      	mov	r0, r5
 8004524:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8004526:	f814 0b01 	ldrb.w	r0, [r4], #1
 800452a:	f7ff fab3 	bl	8003a94 <__io_putchar>
 800452e:	e7f5      	b.n	800451c <_write+0x8>

08004530 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8004530:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004532:	4b0a      	ldr	r3, [pc, #40]	; (800455c <_sbrk+0x2c>)
{
 8004534:	4602      	mov	r2, r0
	if (heap_end == 0)
 8004536:	6819      	ldr	r1, [r3, #0]
 8004538:	b909      	cbnz	r1, 800453e <_sbrk+0xe>
		heap_end = &end;
 800453a:	4909      	ldr	r1, [pc, #36]	; (8004560 <_sbrk+0x30>)
 800453c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800453e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8004540:	4669      	mov	r1, sp
 8004542:	4402      	add	r2, r0
 8004544:	428a      	cmp	r2, r1
 8004546:	d906      	bls.n	8004556 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8004548:	f000 fd5e 	bl	8005008 <__errno>
 800454c:	230c      	movs	r3, #12
 800454e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8004550:	f04f 30ff 	mov.w	r0, #4294967295
 8004554:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8004556:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8004558:	bd08      	pop	{r3, pc}
 800455a:	bf00      	nop
 800455c:	20000368 	.word	0x20000368
 8004560:	20001bdc 	.word	0x20001bdc

08004564 <_close>:

int _close(int file)
{
	return -1;
}
 8004564:	f04f 30ff 	mov.w	r0, #4294967295
 8004568:	4770      	bx	lr

0800456a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800456a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800456e:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8004570:	604b      	str	r3, [r1, #4]
}
 8004572:	4770      	bx	lr

08004574 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8004574:	2001      	movs	r0, #1
 8004576:	4770      	bx	lr

08004578 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8004578:	2000      	movs	r0, #0
 800457a:	4770      	bx	lr

0800457c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800457c:	490f      	ldr	r1, [pc, #60]	; (80045bc <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800457e:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004580:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004584:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004588:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 800458c:	4b0c      	ldr	r3, [pc, #48]	; (80045c0 <SystemInit+0x44>)
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	f042 0201 	orr.w	r2, r2, #1
 8004594:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8004596:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800459e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80045a2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80045a4:	4a07      	ldr	r2, [pc, #28]	; (80045c4 <SystemInit+0x48>)
 80045a6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80045ae:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80045b0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80045b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80045b6:	608b      	str	r3, [r1, #8]
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	e000ed00 	.word	0xe000ed00
 80045c0:	40023800 	.word	0x40023800
 80045c4:	24003010 	.word	0x24003010

080045c8 <MX_TIM2_Init>:
void MX_TIM2_Init(void)
{
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 80045c8:	4817      	ldr	r0, [pc, #92]	; (8004628 <MX_TIM2_Init+0x60>)
 80045ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
 80045ce:	b500      	push	{lr}
  htim2.Instance = TIM2;
 80045d0:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 0;
 80045d2:	2300      	movs	r3, #0
{
 80045d4:	b089      	sub	sp, #36	; 0x24
  htim2.Init.Prescaler = 0;
 80045d6:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045d8:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 0;
 80045da:	60c3      	str	r3, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045dc:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045de:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80045e0:	f7fe fa24 	bl	8002a2c <HAL_TIM_Base_Init>
 80045e4:	b118      	cbz	r0, 80045ee <MX_TIM2_Init+0x26>
  {
    _Error_Handler(__FILE__, __LINE__);
 80045e6:	218d      	movs	r1, #141	; 0x8d
 80045e8:	4810      	ldr	r0, [pc, #64]	; (800462c <MX_TIM2_Init+0x64>)
 80045ea:	f7ff fe0d 	bl	8004208 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045ee:	a908      	add	r1, sp, #32
 80045f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80045f4:	480c      	ldr	r0, [pc, #48]	; (8004628 <MX_TIM2_Init+0x60>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045f6:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80045fa:	f7fe fb11 	bl	8002c20 <HAL_TIM_ConfigClockSource>
 80045fe:	b118      	cbz	r0, 8004608 <MX_TIM2_Init+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004600:	2193      	movs	r1, #147	; 0x93
 8004602:	480a      	ldr	r0, [pc, #40]	; (800462c <MX_TIM2_Init+0x64>)
 8004604:	f7ff fe00 	bl	8004208 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004608:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800460a:	a901      	add	r1, sp, #4
 800460c:	4806      	ldr	r0, [pc, #24]	; (8004628 <MX_TIM2_Init+0x60>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800460e:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004610:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004612:	f7fe fc3b 	bl	8002e8c <HAL_TIMEx_MasterConfigSynchronization>
 8004616:	b118      	cbz	r0, 8004620 <MX_TIM2_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004618:	219a      	movs	r1, #154	; 0x9a
 800461a:	4804      	ldr	r0, [pc, #16]	; (800462c <MX_TIM2_Init+0x64>)
 800461c:	f7ff fdf4 	bl	8004208 <_Error_Handler>
  }

}
 8004620:	b009      	add	sp, #36	; 0x24
 8004622:	f85d fb04 	ldr.w	pc, [sp], #4
 8004626:	bf00      	nop
 8004628:	20001988 	.word	0x20001988
 800462c:	08007cb6 	.word	0x08007cb6

08004630 <MX_TIM3_Init>:
void MX_TIM3_Init(void)
{
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
 8004630:	4818      	ldr	r0, [pc, #96]	; (8004694 <MX_TIM3_Init+0x64>)
  htim3.Init.Prescaler = 9999;
 8004632:	f242 730f 	movw	r3, #9999	; 0x270f
 8004636:	4918      	ldr	r1, [pc, #96]	; (8004698 <MX_TIM3_Init+0x68>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 99;
 8004638:	2263      	movs	r2, #99	; 0x63
{
 800463a:	b500      	push	{lr}
  htim3.Init.Prescaler = 9999;
 800463c:	e880 000a 	stmia.w	r0, {r1, r3}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004640:	2300      	movs	r3, #0
{
 8004642:	b089      	sub	sp, #36	; 0x24
  htim3.Init.Period = 99;
 8004644:	60c2      	str	r2, [r0, #12]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004646:	6083      	str	r3, [r0, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004648:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800464a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800464c:	f7fe f9ee 	bl	8002a2c <HAL_TIM_Base_Init>
 8004650:	b118      	cbz	r0, 800465a <MX_TIM3_Init+0x2a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004652:	21ac      	movs	r1, #172	; 0xac
 8004654:	4811      	ldr	r0, [pc, #68]	; (800469c <MX_TIM3_Init+0x6c>)
 8004656:	f7ff fdd7 	bl	8004208 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800465a:	a908      	add	r1, sp, #32
 800465c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004660:	480c      	ldr	r0, [pc, #48]	; (8004694 <MX_TIM3_Init+0x64>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004662:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004666:	f7fe fadb 	bl	8002c20 <HAL_TIM_ConfigClockSource>
 800466a:	b118      	cbz	r0, 8004674 <MX_TIM3_Init+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
 800466c:	21b2      	movs	r1, #178	; 0xb2
 800466e:	480b      	ldr	r0, [pc, #44]	; (800469c <MX_TIM3_Init+0x6c>)
 8004670:	f7ff fdca 	bl	8004208 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004674:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004676:	a901      	add	r1, sp, #4
 8004678:	4806      	ldr	r0, [pc, #24]	; (8004694 <MX_TIM3_Init+0x64>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800467a:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800467c:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800467e:	f7fe fc05 	bl	8002e8c <HAL_TIMEx_MasterConfigSynchronization>
 8004682:	b118      	cbz	r0, 800468c <MX_TIM3_Init+0x5c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004684:	21b9      	movs	r1, #185	; 0xb9
 8004686:	4805      	ldr	r0, [pc, #20]	; (800469c <MX_TIM3_Init+0x6c>)
 8004688:	f7ff fdbe 	bl	8004208 <_Error_Handler>
  }

}
 800468c:	b009      	add	sp, #36	; 0x24
 800468e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004692:	bf00      	nop
 8004694:	20001908 	.word	0x20001908
 8004698:	40000400 	.word	0x40000400
 800469c:	08007cb6 	.word	0x08007cb6

080046a0 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 80046a0:	6803      	ldr	r3, [r0, #0]
{
 80046a2:	b084      	sub	sp, #16
  if(tim_baseHandle->Instance==TIM1)
 80046a4:	4a1c      	ldr	r2, [pc, #112]	; (8004718 <HAL_TIM_Base_MspInit+0x78>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d10b      	bne.n	80046c2 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80046aa:	4b1c      	ldr	r3, [pc, #112]	; (800471c <HAL_TIM_Base_MspInit+0x7c>)
 80046ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046ae:	f042 0201 	orr.w	r2, r2, #1
 80046b2:	645a      	str	r2, [r3, #68]	; 0x44
 80046b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	9300      	str	r3, [sp, #0]
 80046bc:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80046be:	b004      	add	sp, #16
 80046c0:	4770      	bx	lr
  else if(tim_baseHandle->Instance==TIM2)
 80046c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c6:	d10b      	bne.n	80046e0 <HAL_TIM_Base_MspInit+0x40>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80046c8:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80046cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046ce:	f042 0201 	orr.w	r2, r2, #1
 80046d2:	641a      	str	r2, [r3, #64]	; 0x40
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	9301      	str	r3, [sp, #4]
 80046dc:	9b01      	ldr	r3, [sp, #4]
 80046de:	e7ee      	b.n	80046be <HAL_TIM_Base_MspInit+0x1e>
  else if(tim_baseHandle->Instance==TIM3)
 80046e0:	4a0f      	ldr	r2, [pc, #60]	; (8004720 <HAL_TIM_Base_MspInit+0x80>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d10a      	bne.n	80046fc <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80046e6:	4b0d      	ldr	r3, [pc, #52]	; (800471c <HAL_TIM_Base_MspInit+0x7c>)
 80046e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046ea:	f042 0202 	orr.w	r2, r2, #2
 80046ee:	641a      	str	r2, [r3, #64]	; 0x40
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	9302      	str	r3, [sp, #8]
 80046f8:	9b02      	ldr	r3, [sp, #8]
 80046fa:	e7e0      	b.n	80046be <HAL_TIM_Base_MspInit+0x1e>
  else if(tim_baseHandle->Instance==TIM4)
 80046fc:	4a09      	ldr	r2, [pc, #36]	; (8004724 <HAL_TIM_Base_MspInit+0x84>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d1dd      	bne.n	80046be <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004702:	4b06      	ldr	r3, [pc, #24]	; (800471c <HAL_TIM_Base_MspInit+0x7c>)
 8004704:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004706:	f042 0204 	orr.w	r2, r2, #4
 800470a:	641a      	str	r2, [r3, #64]	; 0x40
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	f003 0304 	and.w	r3, r3, #4
 8004712:	9303      	str	r3, [sp, #12]
 8004714:	9b03      	ldr	r3, [sp, #12]
}
 8004716:	e7d2      	b.n	80046be <HAL_TIM_Base_MspInit+0x1e>
 8004718:	40010000 	.word	0x40010000
 800471c:	40023800 	.word	0x40023800
 8004720:	40000400 	.word	0x40000400
 8004724:	40000800 	.word	0x40000800

08004728 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004728:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM1)
 800472a:	6803      	ldr	r3, [r0, #0]
 800472c:	4a11      	ldr	r2, [pc, #68]	; (8004774 <HAL_TIM_MspPostInit+0x4c>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d110      	bne.n	8004754 <HAL_TIM_MspPostInit+0x2c>
  /* USER CODE END TIM1_MspPostInit 0 */
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_IN2A_Pin|MOTOR_IN1A_Pin;
 8004732:	f44f 6320 	mov.w	r3, #2560	; 0xa00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004736:	a901      	add	r1, sp, #4
 8004738:	480f      	ldr	r0, [pc, #60]	; (8004778 <HAL_TIM_MspPostInit+0x50>)
    GPIO_InitStruct.Pin = MOTOR_IN2A_Pin|MOTOR_IN1A_Pin;
 800473a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800473c:	2302      	movs	r3, #2
 800473e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004740:	2300      	movs	r3, #0
 8004742:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004744:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004746:	2301      	movs	r3, #1
 8004748:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = MOTOR_IN1B_Pin|MOTOR_IN2B_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800474a:	f7fd f865 	bl	8001818 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800474e:	b007      	add	sp, #28
 8004750:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(timHandle->Instance==TIM4)
 8004754:	4a09      	ldr	r2, [pc, #36]	; (800477c <HAL_TIM_MspPostInit+0x54>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d1f9      	bne.n	800474e <HAL_TIM_MspPostInit+0x26>
    GPIO_InitStruct.Pin = MOTOR_IN1B_Pin|MOTOR_IN2B_Pin;
 800475a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800475e:	2200      	movs	r2, #0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004760:	a901      	add	r1, sp, #4
 8004762:	4807      	ldr	r0, [pc, #28]	; (8004780 <HAL_TIM_MspPostInit+0x58>)
    GPIO_InitStruct.Pin = MOTOR_IN1B_Pin|MOTOR_IN2B_Pin;
 8004764:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004766:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004768:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800476a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800476c:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800476e:	9305      	str	r3, [sp, #20]
 8004770:	e7eb      	b.n	800474a <HAL_TIM_MspPostInit+0x22>
 8004772:	bf00      	nop
 8004774:	40010000 	.word	0x40010000
 8004778:	40021000 	.word	0x40021000
 800477c:	40000800 	.word	0x40000800
 8004780:	40020c00 	.word	0x40020c00

08004784 <MX_TIM1_Init>:
{
 8004784:	b500      	push	{lr}
  htim1.Instance = TIM1;
 8004786:	4838      	ldr	r0, [pc, #224]	; (8004868 <MX_TIM1_Init+0xe4>)
  htim1.Init.Prescaler = 1000;
 8004788:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
 800478c:	4b37      	ldr	r3, [pc, #220]	; (800486c <MX_TIM1_Init+0xe8>)
{
 800478e:	b09b      	sub	sp, #108	; 0x6c
  htim1.Init.Prescaler = 1000;
 8004790:	e880 4008 	stmia.w	r0, {r3, lr}
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004794:	2300      	movs	r3, #0
 8004796:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 0;
 8004798:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800479a:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 800479c:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800479e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80047a0:	f7fe f944 	bl	8002a2c <HAL_TIM_Base_Init>
 80047a4:	b118      	cbz	r0, 80047ae <MX_TIM1_Init+0x2a>
    _Error_Handler(__FILE__, __LINE__);
 80047a6:	2145      	movs	r1, #69	; 0x45
 80047a8:	4831      	ldr	r0, [pc, #196]	; (8004870 <MX_TIM1_Init+0xec>)
 80047aa:	f7ff fd2d 	bl	8004208 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80047ae:	a91a      	add	r1, sp, #104	; 0x68
 80047b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80047b4:	482c      	ldr	r0, [pc, #176]	; (8004868 <MX_TIM1_Init+0xe4>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80047b6:	f841 3d58 	str.w	r3, [r1, #-88]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80047ba:	f7fe fa31 	bl	8002c20 <HAL_TIM_ConfigClockSource>
 80047be:	b118      	cbz	r0, 80047c8 <MX_TIM1_Init+0x44>
    _Error_Handler(__FILE__, __LINE__);
 80047c0:	214b      	movs	r1, #75	; 0x4b
 80047c2:	482b      	ldr	r0, [pc, #172]	; (8004870 <MX_TIM1_Init+0xec>)
 80047c4:	f7ff fd20 	bl	8004208 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80047c8:	4827      	ldr	r0, [pc, #156]	; (8004868 <MX_TIM1_Init+0xe4>)
 80047ca:	f7fe f949 	bl	8002a60 <HAL_TIM_PWM_Init>
 80047ce:	b118      	cbz	r0, 80047d8 <MX_TIM1_Init+0x54>
    _Error_Handler(__FILE__, __LINE__);
 80047d0:	2150      	movs	r1, #80	; 0x50
 80047d2:	4827      	ldr	r0, [pc, #156]	; (8004870 <MX_TIM1_Init+0xec>)
 80047d4:	f7ff fd18 	bl	8004208 <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047d8:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80047da:	a901      	add	r1, sp, #4
 80047dc:	4822      	ldr	r0, [pc, #136]	; (8004868 <MX_TIM1_Init+0xe4>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047de:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80047e0:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047e2:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80047e4:	f7fe fb52 	bl	8002e8c <HAL_TIMEx_MasterConfigSynchronization>
 80047e8:	b118      	cbz	r0, 80047f2 <MX_TIM1_Init+0x6e>
    _Error_Handler(__FILE__, __LINE__);
 80047ea:	2158      	movs	r1, #88	; 0x58
 80047ec:	4820      	ldr	r0, [pc, #128]	; (8004870 <MX_TIM1_Init+0xec>)
 80047ee:	f7ff fd0b 	bl	8004208 <_Error_Handler>
  sConfigOC.Pulse = 0;
 80047f2:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80047f4:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80047f6:	a908      	add	r1, sp, #32
 80047f8:	481b      	ldr	r0, [pc, #108]	; (8004868 <MX_TIM1_Init+0xe4>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80047fa:	9308      	str	r3, [sp, #32]
  sConfigOC.Pulse = 0;
 80047fc:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80047fe:	920a      	str	r2, [sp, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004800:	920b      	str	r2, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004802:	920c      	str	r2, [sp, #48]	; 0x30
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004804:	920d      	str	r2, [sp, #52]	; 0x34
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004806:	920e      	str	r2, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004808:	f7fe fba8 	bl	8002f5c <HAL_TIM_PWM_ConfigChannel>
 800480c:	b118      	cbz	r0, 8004816 <MX_TIM1_Init+0x92>
    _Error_Handler(__FILE__, __LINE__);
 800480e:	2164      	movs	r1, #100	; 0x64
 8004810:	4817      	ldr	r0, [pc, #92]	; (8004870 <MX_TIM1_Init+0xec>)
 8004812:	f7ff fcf9 	bl	8004208 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004816:	2204      	movs	r2, #4
 8004818:	a908      	add	r1, sp, #32
 800481a:	4813      	ldr	r0, [pc, #76]	; (8004868 <MX_TIM1_Init+0xe4>)
 800481c:	f7fe fb9e 	bl	8002f5c <HAL_TIM_PWM_ConfigChannel>
 8004820:	b118      	cbz	r0, 800482a <MX_TIM1_Init+0xa6>
    _Error_Handler(__FILE__, __LINE__);
 8004822:	2169      	movs	r1, #105	; 0x69
 8004824:	4812      	ldr	r0, [pc, #72]	; (8004870 <MX_TIM1_Init+0xec>)
 8004826:	f7ff fcef 	bl	8004208 <_Error_Handler>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800482a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800482e:	2300      	movs	r3, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004830:	a90f      	add	r1, sp, #60	; 0x3c
 8004832:	480d      	ldr	r0, [pc, #52]	; (8004868 <MX_TIM1_Init+0xe4>)
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004834:	9214      	str	r2, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004836:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800483a:	930f      	str	r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800483c:	9310      	str	r3, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800483e:	9311      	str	r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.DeadTime = 0;
 8004840:	9312      	str	r3, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004842:	9313      	str	r3, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004844:	9315      	str	r3, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004846:	9316      	str	r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004848:	9217      	str	r2, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.Break2Filter = 0;
 800484a:	9318      	str	r3, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800484c:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800484e:	f7fe fb43 	bl	8002ed8 <HAL_TIMEx_ConfigBreakDeadTime>
 8004852:	b118      	cbz	r0, 800485c <MX_TIM1_Init+0xd8>
    _Error_Handler(__FILE__, __LINE__);
 8004854:	2179      	movs	r1, #121	; 0x79
 8004856:	4806      	ldr	r0, [pc, #24]	; (8004870 <MX_TIM1_Init+0xec>)
 8004858:	f7ff fcd6 	bl	8004208 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 800485c:	4802      	ldr	r0, [pc, #8]	; (8004868 <MX_TIM1_Init+0xe4>)
 800485e:	f7ff ff63 	bl	8004728 <HAL_TIM_MspPostInit>
}
 8004862:	b01b      	add	sp, #108	; 0x6c
 8004864:	f85d fb04 	ldr.w	pc, [sp], #4
 8004868:	20001948 	.word	0x20001948
 800486c:	40010000 	.word	0x40010000
 8004870:	08007cb6 	.word	0x08007cb6

08004874 <MX_TIM4_Init>:
{
 8004874:	b500      	push	{lr}
  htim4.Instance = TIM4;
 8004876:	4829      	ldr	r0, [pc, #164]	; (800491c <MX_TIM4_Init+0xa8>)
  htim4.Init.Prescaler = 1000;
 8004878:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
 800487c:	4b28      	ldr	r3, [pc, #160]	; (8004920 <MX_TIM4_Init+0xac>)
{
 800487e:	b08f      	sub	sp, #60	; 0x3c
  htim4.Init.Prescaler = 1000;
 8004880:	e880 4008 	stmia.w	r0, {r3, lr}
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004884:	2300      	movs	r3, #0
 8004886:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 0;
 8004888:	60c3      	str	r3, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800488a:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800488c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800488e:	f7fe f8cd 	bl	8002a2c <HAL_TIM_Base_Init>
 8004892:	b118      	cbz	r0, 800489c <MX_TIM4_Init+0x28>
    _Error_Handler(__FILE__, __LINE__);
 8004894:	21cc      	movs	r1, #204	; 0xcc
 8004896:	4823      	ldr	r0, [pc, #140]	; (8004924 <MX_TIM4_Init+0xb0>)
 8004898:	f7ff fcb6 	bl	8004208 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800489c:	a90e      	add	r1, sp, #56	; 0x38
 800489e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80048a2:	481e      	ldr	r0, [pc, #120]	; (800491c <MX_TIM4_Init+0xa8>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80048a4:	f841 3d2c 	str.w	r3, [r1, #-44]!
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80048a8:	f7fe f9ba 	bl	8002c20 <HAL_TIM_ConfigClockSource>
 80048ac:	b118      	cbz	r0, 80048b6 <MX_TIM4_Init+0x42>
    _Error_Handler(__FILE__, __LINE__);
 80048ae:	21d2      	movs	r1, #210	; 0xd2
 80048b0:	481c      	ldr	r0, [pc, #112]	; (8004924 <MX_TIM4_Init+0xb0>)
 80048b2:	f7ff fca9 	bl	8004208 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80048b6:	4819      	ldr	r0, [pc, #100]	; (800491c <MX_TIM4_Init+0xa8>)
 80048b8:	f7fe f8d2 	bl	8002a60 <HAL_TIM_PWM_Init>
 80048bc:	b118      	cbz	r0, 80048c6 <MX_TIM4_Init+0x52>
    _Error_Handler(__FILE__, __LINE__);
 80048be:	21d7      	movs	r1, #215	; 0xd7
 80048c0:	4818      	ldr	r0, [pc, #96]	; (8004924 <MX_TIM4_Init+0xb0>)
 80048c2:	f7ff fca1 	bl	8004208 <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048c6:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80048c8:	4669      	mov	r1, sp
 80048ca:	4814      	ldr	r0, [pc, #80]	; (800491c <MX_TIM4_Init+0xa8>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048cc:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048ce:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80048d0:	f7fe fadc 	bl	8002e8c <HAL_TIMEx_MasterConfigSynchronization>
 80048d4:	b118      	cbz	r0, 80048de <MX_TIM4_Init+0x6a>
    _Error_Handler(__FILE__, __LINE__);
 80048d6:	21de      	movs	r1, #222	; 0xde
 80048d8:	4812      	ldr	r0, [pc, #72]	; (8004924 <MX_TIM4_Init+0xb0>)
 80048da:	f7ff fc95 	bl	8004208 <_Error_Handler>
  sConfigOC.Pulse = 0;
 80048de:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80048e0:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80048e2:	a907      	add	r1, sp, #28
 80048e4:	480d      	ldr	r0, [pc, #52]	; (800491c <MX_TIM4_Init+0xa8>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80048e6:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 80048e8:	9208      	str	r2, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80048ea:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80048ec:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80048ee:	f7fe fb35 	bl	8002f5c <HAL_TIM_PWM_ConfigChannel>
 80048f2:	b118      	cbz	r0, 80048fc <MX_TIM4_Init+0x88>
    _Error_Handler(__FILE__, __LINE__);
 80048f4:	21e7      	movs	r1, #231	; 0xe7
 80048f6:	480b      	ldr	r0, [pc, #44]	; (8004924 <MX_TIM4_Init+0xb0>)
 80048f8:	f7ff fc86 	bl	8004208 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80048fc:	2204      	movs	r2, #4
 80048fe:	a907      	add	r1, sp, #28
 8004900:	4806      	ldr	r0, [pc, #24]	; (800491c <MX_TIM4_Init+0xa8>)
 8004902:	f7fe fb2b 	bl	8002f5c <HAL_TIM_PWM_ConfigChannel>
 8004906:	b118      	cbz	r0, 8004910 <MX_TIM4_Init+0x9c>
    _Error_Handler(__FILE__, __LINE__);
 8004908:	21ec      	movs	r1, #236	; 0xec
 800490a:	4806      	ldr	r0, [pc, #24]	; (8004924 <MX_TIM4_Init+0xb0>)
 800490c:	f7ff fc7c 	bl	8004208 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim4);
 8004910:	4802      	ldr	r0, [pc, #8]	; (800491c <MX_TIM4_Init+0xa8>)
 8004912:	f7ff ff09 	bl	8004728 <HAL_TIM_MspPostInit>
}
 8004916:	b00f      	add	sp, #60	; 0x3c
 8004918:	f85d fb04 	ldr.w	pc, [sp], #4
 800491c:	200018c8 	.word	0x200018c8
 8004920:	40000800 	.word	0x40000800
 8004924:	08007cb6 	.word	0x08007cb6

08004928 <MX_UART5_Init>:
DMA_HandleTypeDef hdma_usart6_rx;
DMA_HandleTypeDef hdma_usart6_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8004928:	b508      	push	{r3, lr}

  huart5.Instance = UART5;
 800492a:	480d      	ldr	r0, [pc, #52]	; (8004960 <MX_UART5_Init+0x38>)
  huart5.Init.BaudRate = 115200;
 800492c:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8004930:	4b0c      	ldr	r3, [pc, #48]	; (8004964 <MX_UART5_Init+0x3c>)
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
  huart5.Init.StopBits = UART_STOPBITS_1;
  huart5.Init.Parity = UART_PARITY_NONE;
  huart5.Init.Mode = UART_MODE_TX_RX;
 8004932:	220c      	movs	r2, #12
  huart5.Init.BaudRate = 115200;
 8004934:	e880 4008 	stmia.w	r0, {r3, lr}
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8004938:	2300      	movs	r3, #0
  huart5.Init.Mode = UART_MODE_TX_RX;
 800493a:	6142      	str	r2, [r0, #20]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800493c:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800493e:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8004940:	6103      	str	r3, [r0, #16]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004942:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8004944:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004946:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004948:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800494a:	f7fe ffe2 	bl	8003912 <HAL_UART_Init>
 800494e:	b128      	cbz	r0, 800495c <MX_UART5_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004950:	214e      	movs	r1, #78	; 0x4e
 8004952:	4805      	ldr	r0, [pc, #20]	; (8004968 <MX_UART5_Init+0x40>)
  }

}
 8004954:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8004958:	f7ff bc56 	b.w	8004208 <_Error_Handler>
 800495c:	bd08      	pop	{r3, pc}
 800495e:	bf00      	nop
 8004960:	20001a98 	.word	0x20001a98
 8004964:	40005000 	.word	0x40005000
 8004968:	08007cc3 	.word	0x08007cc3

0800496c <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 800496c:	b508      	push	{r3, lr}

  huart7.Instance = UART7;
 800496e:	480d      	ldr	r0, [pc, #52]	; (80049a4 <MX_UART7_Init+0x38>)
  huart7.Init.BaudRate = 115200;
 8004970:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8004974:	4b0c      	ldr	r3, [pc, #48]	; (80049a8 <MX_UART7_Init+0x3c>)
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
  huart7.Init.StopBits = UART_STOPBITS_1;
  huart7.Init.Parity = UART_PARITY_NONE;
  huart7.Init.Mode = UART_MODE_TX_RX;
 8004976:	220c      	movs	r2, #12
  huart7.Init.BaudRate = 115200;
 8004978:	e880 4008 	stmia.w	r0, {r3, lr}
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800497c:	2300      	movs	r3, #0
  huart7.Init.Mode = UART_MODE_TX_RX;
 800497e:	6142      	str	r2, [r0, #20]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8004980:	6083      	str	r3, [r0, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8004982:	60c3      	str	r3, [r0, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8004984:	6103      	str	r3, [r0, #16]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004986:	6183      	str	r3, [r0, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8004988:	61c3      	str	r3, [r0, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800498a:	6203      	str	r3, [r0, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800498c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800498e:	f7fe ffc0 	bl	8003912 <HAL_UART_Init>
 8004992:	b128      	cbz	r0, 80049a0 <MX_UART7_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004994:	2162      	movs	r1, #98	; 0x62
 8004996:	4805      	ldr	r0, [pc, #20]	; (80049ac <MX_UART7_Init+0x40>)
  }

}
 8004998:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 800499c:	f7ff bc34 	b.w	8004208 <_Error_Handler>
 80049a0:	bd08      	pop	{r3, pc}
 80049a2:	bf00      	nop
 80049a4:	20001a28 	.word	0x20001a28
 80049a8:	40007800 	.word	0x40007800
 80049ac:	08007cc3 	.word	0x08007cc3

080049b0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80049b0:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 80049b2:	480d      	ldr	r0, [pc, #52]	; (80049e8 <MX_USART2_UART_Init+0x38>)
  huart2.Init.BaudRate = 115200;
 80049b4:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 80049b8:	4b0c      	ldr	r3, [pc, #48]	; (80049ec <MX_USART2_UART_Init+0x3c>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80049ba:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 115200;
 80049bc:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80049c0:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 80049c2:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80049c4:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80049c6:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80049c8:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049ca:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80049cc:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80049ce:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80049d0:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80049d2:	f7fe ff9e 	bl	8003912 <HAL_UART_Init>
 80049d6:	b128      	cbz	r0, 80049e4 <MX_USART2_UART_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 80049d8:	2177      	movs	r1, #119	; 0x77
 80049da:	4805      	ldr	r0, [pc, #20]	; (80049f0 <MX_USART2_UART_Init+0x40>)
  }

}
 80049dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80049e0:	f7ff bc12 	b.w	8004208 <_Error_Handler>
 80049e4:	bd08      	pop	{r3, pc}
 80049e6:	bf00      	nop
 80049e8:	20001b68 	.word	0x20001b68
 80049ec:	40004400 	.word	0x40004400
 80049f0:	08007cc3 	.word	0x08007cc3

080049f4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80049f4:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 80049f6:	480d      	ldr	r0, [pc, #52]	; (8004a2c <MX_USART3_UART_Init+0x38>)
  huart3.Init.BaudRate = 115200;
 80049f8:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 80049fc:	4b0c      	ldr	r3, [pc, #48]	; (8004a30 <MX_USART3_UART_Init+0x3c>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 80049fe:	220c      	movs	r2, #12
  huart3.Init.BaudRate = 115200;
 8004a00:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004a04:	2300      	movs	r3, #0
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004a06:	6142      	str	r2, [r0, #20]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004a08:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004a0a:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004a0c:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a0e:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a10:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004a12:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004a14:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004a16:	f7fe ff7c 	bl	8003912 <HAL_UART_Init>
 8004a1a:	b128      	cbz	r0, 8004a28 <MX_USART3_UART_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004a1c:	218c      	movs	r1, #140	; 0x8c
 8004a1e:	4805      	ldr	r0, [pc, #20]	; (8004a34 <MX_USART3_UART_Init+0x40>)
  }

}
 8004a20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8004a24:	f7ff bbf0 	b.w	8004208 <_Error_Handler>
 8004a28:	bd08      	pop	{r3, pc}
 8004a2a:	bf00      	nop
 8004a2c:	2000147c 	.word	0x2000147c
 8004a30:	40004800 	.word	0x40004800
 8004a34:	08007cc3 	.word	0x08007cc3

08004a38 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004a38:	b508      	push	{r3, lr}

  huart6.Instance = USART6;
 8004a3a:	480d      	ldr	r0, [pc, #52]	; (8004a70 <MX_USART6_UART_Init+0x38>)
  huart6.Init.BaudRate = 115200;
 8004a3c:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8004a40:	4b0c      	ldr	r3, [pc, #48]	; (8004a74 <MX_USART6_UART_Init+0x3c>)
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
  huart6.Init.StopBits = UART_STOPBITS_1;
  huart6.Init.Parity = UART_PARITY_NONE;
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004a42:	220c      	movs	r2, #12
  huart6.Init.BaudRate = 115200;
 8004a44:	e880 4008 	stmia.w	r0, {r3, lr}
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004a48:	2300      	movs	r3, #0
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004a4a:	6142      	str	r2, [r0, #20]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004a4c:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004a4e:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004a50:	6103      	str	r3, [r0, #16]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a52:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a54:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004a56:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004a58:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004a5a:	f7fe ff5a 	bl	8003912 <HAL_UART_Init>
 8004a5e:	b128      	cbz	r0, 8004a6c <MX_USART6_UART_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004a60:	21a1      	movs	r1, #161	; 0xa1
 8004a62:	4805      	ldr	r0, [pc, #20]	; (8004a78 <MX_USART6_UART_Init+0x40>)
  }

}
 8004a64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8004a68:	f7ff bbce 	b.w	8004208 <_Error_Handler>
 8004a6c:	bd08      	pop	{r3, pc}
 8004a6e:	bf00      	nop
 8004a70:	200003a4 	.word	0x200003a4
 8004a74:	40011400 	.word	0x40011400
 8004a78:	08007cc3 	.word	0x08007cc3

08004a7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==UART5)
 8004a7c:	6803      	ldr	r3, [r0, #0]
 8004a7e:	4a7e      	ldr	r2, [pc, #504]	; (8004c78 <HAL_UART_MspInit+0x1fc>)
 8004a80:	4293      	cmp	r3, r2
{
 8004a82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a86:	4605      	mov	r5, r0
 8004a88:	b08a      	sub	sp, #40	; 0x28
  if(uartHandle->Instance==UART5)
 8004a8a:	d126      	bne.n	8004ada <HAL_UART_MspInit+0x5e>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8004a8c:	4b7b      	ldr	r3, [pc, #492]	; (8004c7c <HAL_UART_MspInit+0x200>)
  
    /**UART5 GPIO Configuration    
    PB12     ------> UART5_RX
    PC12     ------> UART5_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004a8e:	f44f 5880 	mov.w	r8, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a92:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a94:	2600      	movs	r6, #0
    __HAL_RCC_UART5_CLK_ENABLE();
 8004a96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a98:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004a9a:	2408      	movs	r4, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a9c:	a905      	add	r1, sp, #20
    __HAL_RCC_UART5_CLK_ENABLE();
 8004a9e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004aa2:	4877      	ldr	r0, [pc, #476]	; (8004c80 <HAL_UART_MspInit+0x204>)
    __HAL_RCC_UART5_CLK_ENABLE();
 8004aa4:	641a      	str	r2, [r3, #64]	; 0x40
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004aa8:	f8cd 8014 	str.w	r8, [sp, #20]
    __HAL_RCC_UART5_CLK_ENABLE();
 8004aac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ab0:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ab2:	9607      	str	r6, [sp, #28]
    __HAL_RCC_UART5_CLK_ENABLE();
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ab8:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004aba:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004abc:	f7fc feac 	bl	8001818 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ac0:	a905      	add	r1, sp, #20
 8004ac2:	4870      	ldr	r0, [pc, #448]	; (8004c84 <HAL_UART_MspInit+0x208>)
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004ac4:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ac8:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aca:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004acc:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004ace:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004ad0:	f7fc fea2 	bl	8001818 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8004ad4:	b00a      	add	sp, #40	; 0x28
 8004ad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(uartHandle->Instance==UART7)
 8004ada:	4a6b      	ldr	r2, [pc, #428]	; (8004c88 <HAL_UART_MspInit+0x20c>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d116      	bne.n	8004b0e <HAL_UART_MspInit+0x92>
    __HAL_RCC_UART7_CLK_ENABLE();
 8004ae0:	4b66      	ldr	r3, [pc, #408]	; (8004c7c <HAL_UART_MspInit+0x200>)
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004ae2:	a905      	add	r1, sp, #20
 8004ae4:	4869      	ldr	r0, [pc, #420]	; (8004c8c <HAL_UART_MspInit+0x210>)
    __HAL_RCC_UART7_CLK_ENABLE();
 8004ae6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ae8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004aec:	641a      	str	r2, [r3, #64]	; 0x40
 8004aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004af4:	9301      	str	r3, [sp, #4]
 8004af6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004af8:	23c0      	movs	r3, #192	; 0xc0
 8004afa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004afc:	2302      	movs	r3, #2
 8004afe:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b00:	2300      	movs	r3, #0
 8004b02:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b04:	2303      	movs	r3, #3
 8004b06:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8004b08:	2308      	movs	r3, #8
 8004b0a:	9309      	str	r3, [sp, #36]	; 0x24
 8004b0c:	e7e0      	b.n	8004ad0 <HAL_UART_MspInit+0x54>
  else if(uartHandle->Instance==USART2)
 8004b0e:	4a60      	ldr	r2, [pc, #384]	; (8004c90 <HAL_UART_MspInit+0x214>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d157      	bne.n	8004bc4 <HAL_UART_MspInit+0x148>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004b14:	4b59      	ldr	r3, [pc, #356]	; (8004c7c <HAL_UART_MspInit+0x200>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b16:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b18:	485e      	ldr	r0, [pc, #376]	; (8004c94 <HAL_UART_MspInit+0x218>)
 8004b1a:	a905      	add	r1, sp, #20
    __HAL_RCC_USART2_CLK_ENABLE();
 8004b1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004b1e:	4c5e      	ldr	r4, [pc, #376]	; (8004c98 <HAL_UART_MspInit+0x21c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8004b20:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004b24:	641a      	str	r2, [r3, #64]	; 0x40
 8004b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b28:	9607      	str	r6, [sp, #28]
    __HAL_RCC_USART2_CLK_ENABLE();
 8004b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b2e:	9302      	str	r3, [sp, #8]
 8004b30:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004b32:	2360      	movs	r3, #96	; 0x60
 8004b34:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b36:	2302      	movs	r3, #2
 8004b38:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004b3e:	2307      	movs	r3, #7
 8004b40:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b42:	f7fc fe69 	bl	8001818 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004b46:	4855      	ldr	r0, [pc, #340]	; (8004c9c <HAL_UART_MspInit+0x220>)
 8004b48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b4c:	60a6      	str	r6, [r4, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b4e:	60e6      	str	r6, [r4, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b50:	6166      	str	r6, [r4, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b52:	61a6      	str	r6, [r4, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004b54:	61e6      	str	r6, [r4, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004b56:	6226      	str	r6, [r4, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004b58:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004b5a:	e884 0009 	stmia.w	r4, {r0, r3}
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004b5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004b62:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004b64:	6123      	str	r3, [r4, #16]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004b66:	f7fc fca5 	bl	80014b4 <HAL_DMA_Init>
 8004b6a:	b120      	cbz	r0, 8004b76 <HAL_UART_MspInit+0xfa>
      _Error_Handler(__FILE__, __LINE__);
 8004b6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b70:	484b      	ldr	r0, [pc, #300]	; (8004ca0 <HAL_UART_MspInit+0x224>)
 8004b72:	f7ff fb49 	bl	8004208 <_Error_Handler>
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004b76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004b7a:	2340      	movs	r3, #64	; 0x40
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8004b7c:	666c      	str	r4, [r5, #100]	; 0x64
 8004b7e:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004b80:	4948      	ldr	r1, [pc, #288]	; (8004ca4 <HAL_UART_MspInit+0x228>)
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004b82:	4c49      	ldr	r4, [pc, #292]	; (8004ca8 <HAL_UART_MspInit+0x22c>)
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004b84:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b88:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004b8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004b8e:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b90:	60e3      	str	r3, [r4, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004b92:	6122      	str	r2, [r4, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b94:	6163      	str	r3, [r4, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b96:	61a3      	str	r3, [r4, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004b98:	61e3      	str	r3, [r4, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004b9a:	6223      	str	r3, [r4, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004b9c:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004b9e:	f7fc fc89 	bl	80014b4 <HAL_DMA_Init>
 8004ba2:	b120      	cbz	r0, 8004bae <HAL_UART_MspInit+0x132>
      _Error_Handler(__FILE__, __LINE__);
 8004ba4:	f44f 7189 	mov.w	r1, #274	; 0x112
 8004ba8:	483d      	ldr	r0, [pc, #244]	; (8004ca0 <HAL_UART_MspInit+0x224>)
 8004baa:	f7ff fb2d 	bl	8004208 <_Error_Handler>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004bae:	2200      	movs	r2, #0
 8004bb0:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8004bb2:	662c      	str	r4, [r5, #96]	; 0x60
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004bb4:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8004bb6:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004bb8:	f7fc fb7e 	bl	80012b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004bbc:	2026      	movs	r0, #38	; 0x26
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004bbe:	f7fc fbb3 	bl	8001328 <HAL_NVIC_EnableIRQ>
}
 8004bc2:	e787      	b.n	8004ad4 <HAL_UART_MspInit+0x58>
  else if(uartHandle->Instance==USART3)
 8004bc4:	4a39      	ldr	r2, [pc, #228]	; (8004cac <HAL_UART_MspInit+0x230>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d17a      	bne.n	8004cc0 <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004bca:	4b2c      	ldr	r3, [pc, #176]	; (8004c7c <HAL_UART_MspInit+0x200>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bcc:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004bce:	4831      	ldr	r0, [pc, #196]	; (8004c94 <HAL_UART_MspInit+0x218>)
 8004bd0:	a905      	add	r1, sp, #20
    __HAL_RCC_USART3_CLK_ENABLE();
 8004bd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004bd4:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004bd8:	4c35      	ldr	r4, [pc, #212]	; (8004cb0 <HAL_UART_MspInit+0x234>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8004bda:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004bde:	641a      	str	r2, [r3, #64]	; 0x40
 8004be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004be2:	9607      	str	r6, [sp, #28]
    __HAL_RCC_USART3_CLK_ENABLE();
 8004be4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004be8:	9303      	str	r3, [sp, #12]
 8004bea:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8004bec:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004bf0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004bfa:	2307      	movs	r3, #7
 8004bfc:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004bfe:	f7fc fe0b 	bl	8001818 <HAL_GPIO_Init>
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004c02:	4b2c      	ldr	r3, [pc, #176]	; (8004cb4 <HAL_UART_MspInit+0x238>)
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004c04:	4620      	mov	r0, r4
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c06:	60a6      	str	r6, [r4, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c08:	60e6      	str	r6, [r4, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c0a:	6166      	str	r6, [r4, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c0c:	61a6      	str	r6, [r4, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8004c0e:	61e6      	str	r6, [r4, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004c10:	6226      	str	r6, [r4, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004c12:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004c14:	e884 0088 	stmia.w	r4, {r3, r7}
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004c18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c1c:	6123      	str	r3, [r4, #16]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004c1e:	f7fc fc49 	bl	80014b4 <HAL_DMA_Init>
 8004c22:	b120      	cbz	r0, 8004c2e <HAL_UART_MspInit+0x1b2>
      _Error_Handler(__FILE__, __LINE__);
 8004c24:	f240 113f 	movw	r1, #319	; 0x13f
 8004c28:	481d      	ldr	r0, [pc, #116]	; (8004ca0 <HAL_UART_MspInit+0x224>)
 8004c2a:	f7ff faed 	bl	8004208 <_Error_Handler>
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004c2e:	4822      	ldr	r0, [pc, #136]	; (8004cb8 <HAL_UART_MspInit+0x23c>)
 8004c30:	2340      	movs	r3, #64	; 0x40
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8004c32:	666c      	str	r4, [r5, #100]	; 0x64
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004c34:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8004c38:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004c3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8004c3e:	4c1f      	ldr	r4, [pc, #124]	; (8004cbc <HAL_UART_MspInit+0x240>)
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004c40:	e884 000b 	stmia.w	r4, {r0, r1, r3}
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c44:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004c46:	4620      	mov	r0, r4
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004c48:	6122      	str	r2, [r4, #16]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c4a:	60e3      	str	r3, [r4, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c4c:	6163      	str	r3, [r4, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c4e:	61a3      	str	r3, [r4, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004c50:	61e3      	str	r3, [r4, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004c52:	6223      	str	r3, [r4, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004c54:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004c56:	f7fc fc2d 	bl	80014b4 <HAL_DMA_Init>
 8004c5a:	b120      	cbz	r0, 8004c66 <HAL_UART_MspInit+0x1ea>
      _Error_Handler(__FILE__, __LINE__);
 8004c5c:	f240 1151 	movw	r1, #337	; 0x151
 8004c60:	480f      	ldr	r0, [pc, #60]	; (8004ca0 <HAL_UART_MspInit+0x224>)
 8004c62:	f7ff fad1 	bl	8004208 <_Error_Handler>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004c66:	2200      	movs	r2, #0
 8004c68:	2027      	movs	r0, #39	; 0x27
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8004c6a:	662c      	str	r4, [r5, #96]	; 0x60
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004c6c:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8004c6e:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004c70:	f7fc fb22 	bl	80012b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004c74:	2027      	movs	r0, #39	; 0x27
 8004c76:	e7a2      	b.n	8004bbe <HAL_UART_MspInit+0x142>
 8004c78:	40005000 	.word	0x40005000
 8004c7c:	40023800 	.word	0x40023800
 8004c80:	40020400 	.word	0x40020400
 8004c84:	40020800 	.word	0x40020800
 8004c88:	40007800 	.word	0x40007800
 8004c8c:	40021400 	.word	0x40021400
 8004c90:	40004400 	.word	0x40004400
 8004c94:	40020c00 	.word	0x40020c00
 8004c98:	200019c8 	.word	0x200019c8
 8004c9c:	40026088 	.word	0x40026088
 8004ca0:	08007cc3 	.word	0x08007cc3
 8004ca4:	400260a0 	.word	0x400260a0
 8004ca8:	20001b08 	.word	0x20001b08
 8004cac:	40004800 	.word	0x40004800
 8004cb0:	200015c0 	.word	0x200015c0
 8004cb4:	40026028 	.word	0x40026028
 8004cb8:	40026058 	.word	0x40026058
 8004cbc:	20001620 	.word	0x20001620
  else if(uartHandle->Instance==USART6)
 8004cc0:	4a2c      	ldr	r2, [pc, #176]	; (8004d74 <HAL_UART_MspInit+0x2f8>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	f47f af06 	bne.w	8004ad4 <HAL_UART_MspInit+0x58>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004cc8:	4b2b      	ldr	r3, [pc, #172]	; (8004d78 <HAL_UART_MspInit+0x2fc>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cca:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004ccc:	482b      	ldr	r0, [pc, #172]	; (8004d7c <HAL_UART_MspInit+0x300>)
 8004cce:	a905      	add	r1, sp, #20
    __HAL_RCC_USART6_CLK_ENABLE();
 8004cd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8004cd2:	4c2b      	ldr	r4, [pc, #172]	; (8004d80 <HAL_UART_MspInit+0x304>)
    __HAL_RCC_USART6_CLK_ENABLE();
 8004cd4:	f042 0220 	orr.w	r2, r2, #32
 8004cd8:	645a      	str	r2, [r3, #68]	; 0x44
 8004cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cdc:	9607      	str	r6, [sp, #28]
    __HAL_RCC_USART6_CLK_ENABLE();
 8004cde:	f003 0320 	and.w	r3, r3, #32
 8004ce2:	9304      	str	r3, [sp, #16]
 8004ce4:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = UART6_WIFI_RX_Pin|UART6_WIFI_TX_Pin;
 8004ce6:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8004cea:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cec:	2302      	movs	r3, #2
 8004cee:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004cf4:	2308      	movs	r3, #8
 8004cf6:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004cf8:	f7fc fd8e 	bl	8001818 <HAL_GPIO_Init>
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004cfc:	4b21      	ldr	r3, [pc, #132]	; (8004d84 <HAL_UART_MspInit+0x308>)
 8004cfe:	f04f 6e20 	mov.w	lr, #167772160	; 0xa000000
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8004d02:	4620      	mov	r0, r4
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d04:	60a6      	str	r6, [r4, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d06:	60e6      	str	r6, [r4, #12]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d08:	6166      	str	r6, [r4, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d0a:	61a6      	str	r6, [r4, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8004d0c:	61e6      	str	r6, [r4, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004d0e:	6226      	str	r6, [r4, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d10:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004d12:	e884 4008 	stmia.w	r4, {r3, lr}
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004d16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d1a:	6123      	str	r3, [r4, #16]
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8004d1c:	f7fc fbca 	bl	80014b4 <HAL_DMA_Init>
 8004d20:	b120      	cbz	r0, 8004d2c <HAL_UART_MspInit+0x2b0>
      _Error_Handler(__FILE__, __LINE__);
 8004d22:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 8004d26:	4818      	ldr	r0, [pc, #96]	; (8004d88 <HAL_UART_MspInit+0x30c>)
 8004d28:	f7ff fa6e 	bl	8004208 <_Error_Handler>
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d2c:	4b17      	ldr	r3, [pc, #92]	; (8004d8c <HAL_UART_MspInit+0x310>)
 8004d2e:	f04f 6620 	mov.w	r6, #167772160	; 0xa000000
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8004d32:	666c      	str	r4, [r5, #100]	; 0x64
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d34:	2740      	movs	r7, #64	; 0x40
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8004d36:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8004d38:	4c15      	ldr	r4, [pc, #84]	; (8004d90 <HAL_UART_MspInit+0x314>)
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d3a:	e884 00c8 	stmia.w	r4, {r3, r6, r7}
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d3e:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8004d40:	4620      	mov	r0, r4
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d42:	60e3      	str	r3, [r4, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_DISABLE;
 8004d44:	6123      	str	r3, [r4, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d46:	6163      	str	r3, [r4, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d48:	61a3      	str	r3, [r4, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8004d4a:	61e3      	str	r3, [r4, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004d4c:	6223      	str	r3, [r4, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d4e:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8004d50:	f7fc fbb0 	bl	80014b4 <HAL_DMA_Init>
 8004d54:	b120      	cbz	r0, 8004d60 <HAL_UART_MspInit+0x2e4>
      _Error_Handler(__FILE__, __LINE__);
 8004d56:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004d5a:	480b      	ldr	r0, [pc, #44]	; (8004d88 <HAL_UART_MspInit+0x30c>)
 8004d5c:	f7ff fa54 	bl	8004208 <_Error_Handler>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8004d60:	2200      	movs	r2, #0
 8004d62:	2047      	movs	r0, #71	; 0x47
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8004d64:	662c      	str	r4, [r5, #96]	; 0x60
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8004d66:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8004d68:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8004d6a:	f7fc faa5 	bl	80012b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004d6e:	2047      	movs	r0, #71	; 0x47
 8004d70:	e725      	b.n	8004bbe <HAL_UART_MspInit+0x142>
 8004d72:	bf00      	nop
 8004d74:	40011400 	.word	0x40011400
 8004d78:	40023800 	.word	0x40023800
 8004d7c:	40021800 	.word	0x40021800
 8004d80:	20001500 	.word	0x20001500
 8004d84:	40026428 	.word	0x40026428
 8004d88:	08007cc3 	.word	0x08007cc3
 8004d8c:	400264a0 	.word	0x400264a0
 8004d90:	200016e0 	.word	0x200016e0

08004d94 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==UART5)
 8004d94:	6803      	ldr	r3, [r0, #0]
 8004d96:	4a34      	ldr	r2, [pc, #208]	; (8004e68 <HAL_UART_MspDeInit+0xd4>)
 8004d98:	4293      	cmp	r3, r2
{
 8004d9a:	b510      	push	{r4, lr}
 8004d9c:	4604      	mov	r4, r0
  if(uartHandle->Instance==UART5)
 8004d9e:	d111      	bne.n	8004dc4 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN UART5_MspDeInit 0 */

  /* USER CODE END UART5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART5_CLK_DISABLE();
 8004da0:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
  
    /**UART5 GPIO Configuration    
    PB12     ------> UART5_RX
    PC12     ------> UART5_TX 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 8004da4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004da8:	4830      	ldr	r0, [pc, #192]	; (8004e6c <HAL_UART_MspDeInit+0xd8>)
    __HAL_RCC_UART5_CLK_DISABLE();
 8004daa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004dac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004db0:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 8004db2:	f7fc fe1b 	bl	80019ec <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 8004db6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004dba:	482d      	ldr	r0, [pc, #180]	; (8004e70 <HAL_UART_MspDeInit+0xdc>)
    HAL_NVIC_DisableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }
} 
 8004dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7);
 8004dc0:	f7fc be14 	b.w	80019ec <HAL_GPIO_DeInit>
  else if(uartHandle->Instance==UART7)
 8004dc4:	4a2b      	ldr	r2, [pc, #172]	; (8004e74 <HAL_UART_MspDeInit+0xe0>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d108      	bne.n	8004ddc <HAL_UART_MspDeInit+0x48>
    __HAL_RCC_UART7_CLK_DISABLE();
 8004dca:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7);
 8004dce:	21c0      	movs	r1, #192	; 0xc0
 8004dd0:	4829      	ldr	r0, [pc, #164]	; (8004e78 <HAL_UART_MspDeInit+0xe4>)
    __HAL_RCC_UART7_CLK_DISABLE();
 8004dd2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004dd4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8004dda:	e7ef      	b.n	8004dbc <HAL_UART_MspDeInit+0x28>
  else if(uartHandle->Instance==USART2)
 8004ddc:	4a27      	ldr	r2, [pc, #156]	; (8004e7c <HAL_UART_MspDeInit+0xe8>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d114      	bne.n	8004e0c <HAL_UART_MspDeInit+0x78>
    __HAL_RCC_USART2_CLK_DISABLE();
 8004de2:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_5|GPIO_PIN_6);
 8004de6:	2160      	movs	r1, #96	; 0x60
 8004de8:	4825      	ldr	r0, [pc, #148]	; (8004e80 <HAL_UART_MspDeInit+0xec>)
    __HAL_RCC_USART2_CLK_DISABLE();
 8004dea:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004dec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004df0:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_5|GPIO_PIN_6);
 8004df2:	f7fc fdfb 	bl	80019ec <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8004df6:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8004df8:	f7fc fbda 	bl	80015b0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8004dfc:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004dfe:	f7fc fbd7 	bl	80015b0 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8004e02:	2026      	movs	r0, #38	; 0x26
} 
 8004e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8004e08:	f7fc ba9a 	b.w	8001340 <HAL_NVIC_DisableIRQ>
  else if(uartHandle->Instance==USART3)
 8004e0c:	4a1d      	ldr	r2, [pc, #116]	; (8004e84 <HAL_UART_MspDeInit+0xf0>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d112      	bne.n	8004e38 <HAL_UART_MspDeInit+0xa4>
    __HAL_RCC_USART3_CLK_DISABLE();
 8004e12:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 8004e16:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004e1a:	4819      	ldr	r0, [pc, #100]	; (8004e80 <HAL_UART_MspDeInit+0xec>)
    __HAL_RCC_USART3_CLK_DISABLE();
 8004e1c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004e1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e22:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 8004e24:	f7fc fde2 	bl	80019ec <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8004e28:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8004e2a:	f7fc fbc1 	bl	80015b0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8004e2e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004e30:	f7fc fbbe 	bl	80015b0 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 8004e34:	2027      	movs	r0, #39	; 0x27
 8004e36:	e7e5      	b.n	8004e04 <HAL_UART_MspDeInit+0x70>
  else if(uartHandle->Instance==USART6)
 8004e38:	4a13      	ldr	r2, [pc, #76]	; (8004e88 <HAL_UART_MspDeInit+0xf4>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d112      	bne.n	8004e64 <HAL_UART_MspDeInit+0xd0>
    __HAL_RCC_USART6_CLK_DISABLE();
 8004e3e:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
    HAL_GPIO_DeInit(GPIOG, UART6_WIFI_RX_Pin|UART6_WIFI_TX_Pin);
 8004e42:	f44f 4184 	mov.w	r1, #16896	; 0x4200
 8004e46:	4811      	ldr	r0, [pc, #68]	; (8004e8c <HAL_UART_MspDeInit+0xf8>)
    __HAL_RCC_USART6_CLK_DISABLE();
 8004e48:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8004e4a:	f023 0320 	bic.w	r3, r3, #32
 8004e4e:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOG, UART6_WIFI_RX_Pin|UART6_WIFI_TX_Pin);
 8004e50:	f7fc fdcc 	bl	80019ec <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8004e54:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8004e56:	f7fc fbab 	bl	80015b0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8004e5a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004e5c:	f7fc fba8 	bl	80015b0 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8004e60:	2047      	movs	r0, #71	; 0x47
 8004e62:	e7cf      	b.n	8004e04 <HAL_UART_MspDeInit+0x70>
 8004e64:	bd10      	pop	{r4, pc}
 8004e66:	bf00      	nop
 8004e68:	40005000 	.word	0x40005000
 8004e6c:	40020400 	.word	0x40020400
 8004e70:	40020800 	.word	0x40020800
 8004e74:	40007800 	.word	0x40007800
 8004e78:	40021400 	.word	0x40021400
 8004e7c:	40004400 	.word	0x40004400
 8004e80:	40020c00 	.word	0x40020c00
 8004e84:	40004800 	.word	0x40004800
 8004e88:	40011400 	.word	0x40011400
 8004e8c:	40021800 	.word	0x40021800

08004e90 <ssi_update>:

void ssi_update(float locx, float locy, float locz, float accelx,
						float accely, float accelz, float gyrox,
						float gyroy, float gyroz, float dist,
						float spd, float move, float temp, float pssr,
						float humd, char *sts) {
 8004e90:	b530      	push	{r4, r5, lr}
	char Value_Str[400];
	char AT_Rpl[400];

	uint8_t len_at, len_value;

	memset(AT_Str,'\0',400);
 8004e92:	f44f 74c8 	mov.w	r4, #400	; 0x190
						float humd, char *sts) {
 8004e96:	4605      	mov	r5, r0
	memset(AT_Str,'\0',400);
 8004e98:	2100      	movs	r1, #0
 8004e9a:	4622      	mov	r2, r4
						float humd, char *sts) {
 8004e9c:	ed2d 8b10 	vpush	{d8-d15}
 8004ea0:	f5ad 7d67 	sub.w	sp, sp, #924	; 0x39c
 8004ea4:	eef0 ea66 	vmov.f32	s29, s13
 8004ea8:	eef0 ba63 	vmov.f32	s23, s7
	memset(AT_Str,'\0',400);
 8004eac:	a81e      	add	r0, sp, #120	; 0x78
						float humd, char *sts) {
 8004eae:	eef0 ca64 	vmov.f32	s25, s9
 8004eb2:	eef0 da65 	vmov.f32	s27, s11
 8004eb6:	eef0 aa40 	vmov.f32	s21, s0
 8004eba:	eeb0 8a60 	vmov.f32	s16, s1
 8004ebe:	eeb0 ba43 	vmov.f32	s22, s6
 8004ec2:	eeb0 ca44 	vmov.f32	s24, s8
 8004ec6:	eeb0 da45 	vmov.f32	s26, s10
 8004eca:	eeb0 ea46 	vmov.f32	s28, s12
 8004ece:	eeb0 aa62 	vmov.f32	s20, s5
 8004ed2:	eef0 8a41 	vmov.f32	s17, s2
 8004ed6:	eeb0 9a61 	vmov.f32	s18, s3
 8004eda:	eef0 9a42 	vmov.f32	s19, s4
 8004ede:	eeb0 fa47 	vmov.f32	s30, s14
	memset(AT_Str,'\0',400);
 8004ee2:	f000 fa42 	bl	800536a <memset>
	memset(Value_Str,'\0',400);
 8004ee6:	4622      	mov	r2, r4
 8004ee8:	2100      	movs	r1, #0
 8004eea:	a882      	add	r0, sp, #520	; 0x208
				locx,locy,locz,accelx,accely,accelz,gyrox,gyroy,gyroz,
				dist,spd,move,temp,pssr,humd,sts);

	len_at = sprintf(AT_Str,"AT+S.INPUTSSI=%d\r",len_value);

	HAL_UART_Transmit_DMA(&huart6, (uint8_t *) AT_Str, len_at);
 8004eec:	4c2e      	ldr	r4, [pc, #184]	; (8004fa8 <ssi_update+0x118>)
	memset(Value_Str,'\0',400);
 8004eee:	f000 fa3c 	bl	800536a <memset>
	len_value = sprintf(Value_Str,
 8004ef2:	eeb7 7aee 	vcvt.f64.f32	d7, s29
 8004ef6:	eeb7 2ae9 	vcvt.f64.f32	d2, s19
 8004efa:	951c      	str	r5, [sp, #112]	; 0x70
 8004efc:	eeb7 1ae8 	vcvt.f64.f32	d1, s17
 8004f00:	492a      	ldr	r1, [pc, #168]	; (8004fac <ssi_update+0x11c>)
 8004f02:	eeb7 facf 	vcvt.f64.f32	d15, s30
 8004f06:	a882      	add	r0, sp, #520	; 0x208
 8004f08:	eeb7 eace 	vcvt.f64.f32	d14, s28
 8004f0c:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
 8004f10:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 8004f14:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 8004f18:	eeb7 7aed 	vcvt.f64.f32	d7, s27
 8004f1c:	eeb7 dacd 	vcvt.f64.f32	d13, s26
 8004f20:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8004f24:	eeb7 7aec 	vcvt.f64.f32	d7, s25
 8004f28:	eeb7 cacc 	vcvt.f64.f32	d12, s24
 8004f2c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004f30:	eeb7 7aeb 	vcvt.f64.f32	d7, s23
 8004f34:	eeb7 bacb 	vcvt.f64.f32	d11, s22
 8004f38:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8004f3c:	eeb7 7aca 	vcvt.f64.f32	d7, s20
 8004f40:	ed8d 2b06 	vstr	d2, [sp, #24]
 8004f44:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004f48:	eeb7 7aea 	vcvt.f64.f32	d7, s21
 8004f4c:	ed8d 1b02 	vstr	d1, [sp, #8]
 8004f50:	ec53 2b17 	vmov	r2, r3, d7
 8004f54:	ed8d fb1a 	vstr	d15, [sp, #104]	; 0x68
 8004f58:	ed8d eb16 	vstr	d14, [sp, #88]	; 0x58
 8004f5c:	ed8d db12 	vstr	d13, [sp, #72]	; 0x48
 8004f60:	ed8d cb0e 	vstr	d12, [sp, #56]	; 0x38
 8004f64:	ed8d bb0a 	vstr	d11, [sp, #40]	; 0x28
 8004f68:	ed8d 9b04 	vstr	d9, [sp, #16]
 8004f6c:	ed8d 8b00 	vstr	d8, [sp]
 8004f70:	f001 f836 	bl	8005fe0 <siprintf>
	len_at = sprintf(AT_Str,"AT+S.INPUTSSI=%d\r",len_value);
 8004f74:	490e      	ldr	r1, [pc, #56]	; (8004fb0 <ssi_update+0x120>)
 8004f76:	b2c5      	uxtb	r5, r0
 8004f78:	a81e      	add	r0, sp, #120	; 0x78
 8004f7a:	462a      	mov	r2, r5
 8004f7c:	f001 f830 	bl	8005fe0 <siprintf>
	HAL_UART_Transmit_DMA(&huart6, (uint8_t *) AT_Str, len_at);
 8004f80:	a91e      	add	r1, sp, #120	; 0x78
 8004f82:	b2c2      	uxtb	r2, r0
 8004f84:	4620      	mov	r0, r4
 8004f86:	f7fe f899 	bl	80030bc <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 8004f8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f8e:	f7fc f96f 	bl	8001270 <HAL_Delay>
	HAL_UART_Transmit_DMA(&huart6, (uint8_t *) Value_Str, len_value);
 8004f92:	462a      	mov	r2, r5
 8004f94:	a982      	add	r1, sp, #520	; 0x208
 8004f96:	4620      	mov	r0, r4
 8004f98:	f7fe f890 	bl	80030bc <HAL_UART_Transmit_DMA>

}
 8004f9c:	f50d 7d67 	add.w	sp, sp, #924	; 0x39c
 8004fa0:	ecbd 8b10 	vpop	{d8-d15}
 8004fa4:	bd30      	pop	{r4, r5, pc}
 8004fa6:	bf00      	nop
 8004fa8:	200003a4 	.word	0x200003a4
 8004fac:	08007cd2 	.word	0x08007cd2
 8004fb0:	08007d05 	.word	0x08007d05

08004fb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004fb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004fec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004fb8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004fba:	e003      	b.n	8004fc4 <LoopCopyDataInit>

08004fbc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004fbc:	4b0c      	ldr	r3, [pc, #48]	; (8004ff0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004fbe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004fc0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004fc2:	3104      	adds	r1, #4

08004fc4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004fc4:	480b      	ldr	r0, [pc, #44]	; (8004ff4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004fc6:	4b0c      	ldr	r3, [pc, #48]	; (8004ff8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004fc8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004fca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004fcc:	d3f6      	bcc.n	8004fbc <CopyDataInit>
  ldr  r2, =_sbss
 8004fce:	4a0b      	ldr	r2, [pc, #44]	; (8004ffc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004fd0:	e002      	b.n	8004fd8 <LoopFillZerobss>

08004fd2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004fd2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004fd4:	f842 3b04 	str.w	r3, [r2], #4

08004fd8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004fd8:	4b09      	ldr	r3, [pc, #36]	; (8005000 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004fda:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004fdc:	d3f9      	bcc.n	8004fd2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004fde:	f7ff facd 	bl	800457c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004fe2:	f000 f993 	bl	800530c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004fe6:	f7ff f825 	bl	8004034 <main>
  bx  lr    
 8004fea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004fec:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8004ff0:	08007fe8 	.word	0x08007fe8
  ldr  r0, =_sdata
 8004ff4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004ff8:	20000340 	.word	0x20000340
  ldr  r2, =_sbss
 8004ffc:	20000340 	.word	0x20000340
  ldr  r3, = _ebss
 8005000:	20001bdc 	.word	0x20001bdc

08005004 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005004:	e7fe      	b.n	8005004 <ADC_IRQHandler>
	...

08005008 <__errno>:
 8005008:	4b01      	ldr	r3, [pc, #4]	; (8005010 <__errno+0x8>)
 800500a:	6818      	ldr	r0, [r3, #0]
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	20000170 	.word	0x20000170

08005014 <__sflush_r>:
 8005014:	898a      	ldrh	r2, [r1, #12]
 8005016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800501a:	4605      	mov	r5, r0
 800501c:	0710      	lsls	r0, r2, #28
 800501e:	460c      	mov	r4, r1
 8005020:	d45a      	bmi.n	80050d8 <__sflush_r+0xc4>
 8005022:	684b      	ldr	r3, [r1, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	dc05      	bgt.n	8005034 <__sflush_r+0x20>
 8005028:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800502a:	2b00      	cmp	r3, #0
 800502c:	dc02      	bgt.n	8005034 <__sflush_r+0x20>
 800502e:	2000      	movs	r0, #0
 8005030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005034:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005036:	2e00      	cmp	r6, #0
 8005038:	d0f9      	beq.n	800502e <__sflush_r+0x1a>
 800503a:	2300      	movs	r3, #0
 800503c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005040:	682f      	ldr	r7, [r5, #0]
 8005042:	602b      	str	r3, [r5, #0]
 8005044:	d033      	beq.n	80050ae <__sflush_r+0x9a>
 8005046:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005048:	89a3      	ldrh	r3, [r4, #12]
 800504a:	075a      	lsls	r2, r3, #29
 800504c:	d505      	bpl.n	800505a <__sflush_r+0x46>
 800504e:	6863      	ldr	r3, [r4, #4]
 8005050:	1ac0      	subs	r0, r0, r3
 8005052:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005054:	b10b      	cbz	r3, 800505a <__sflush_r+0x46>
 8005056:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005058:	1ac0      	subs	r0, r0, r3
 800505a:	2300      	movs	r3, #0
 800505c:	4602      	mov	r2, r0
 800505e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005060:	6a21      	ldr	r1, [r4, #32]
 8005062:	4628      	mov	r0, r5
 8005064:	47b0      	blx	r6
 8005066:	1c43      	adds	r3, r0, #1
 8005068:	89a3      	ldrh	r3, [r4, #12]
 800506a:	d106      	bne.n	800507a <__sflush_r+0x66>
 800506c:	6829      	ldr	r1, [r5, #0]
 800506e:	291d      	cmp	r1, #29
 8005070:	d84b      	bhi.n	800510a <__sflush_r+0xf6>
 8005072:	4a2b      	ldr	r2, [pc, #172]	; (8005120 <__sflush_r+0x10c>)
 8005074:	40ca      	lsrs	r2, r1
 8005076:	07d6      	lsls	r6, r2, #31
 8005078:	d547      	bpl.n	800510a <__sflush_r+0xf6>
 800507a:	2200      	movs	r2, #0
 800507c:	6062      	str	r2, [r4, #4]
 800507e:	04d9      	lsls	r1, r3, #19
 8005080:	6922      	ldr	r2, [r4, #16]
 8005082:	6022      	str	r2, [r4, #0]
 8005084:	d504      	bpl.n	8005090 <__sflush_r+0x7c>
 8005086:	1c42      	adds	r2, r0, #1
 8005088:	d101      	bne.n	800508e <__sflush_r+0x7a>
 800508a:	682b      	ldr	r3, [r5, #0]
 800508c:	b903      	cbnz	r3, 8005090 <__sflush_r+0x7c>
 800508e:	6560      	str	r0, [r4, #84]	; 0x54
 8005090:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005092:	602f      	str	r7, [r5, #0]
 8005094:	2900      	cmp	r1, #0
 8005096:	d0ca      	beq.n	800502e <__sflush_r+0x1a>
 8005098:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800509c:	4299      	cmp	r1, r3
 800509e:	d002      	beq.n	80050a6 <__sflush_r+0x92>
 80050a0:	4628      	mov	r0, r5
 80050a2:	f000 f96b 	bl	800537c <_free_r>
 80050a6:	2000      	movs	r0, #0
 80050a8:	6360      	str	r0, [r4, #52]	; 0x34
 80050aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050ae:	6a21      	ldr	r1, [r4, #32]
 80050b0:	2301      	movs	r3, #1
 80050b2:	4628      	mov	r0, r5
 80050b4:	47b0      	blx	r6
 80050b6:	1c41      	adds	r1, r0, #1
 80050b8:	d1c6      	bne.n	8005048 <__sflush_r+0x34>
 80050ba:	682b      	ldr	r3, [r5, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d0c3      	beq.n	8005048 <__sflush_r+0x34>
 80050c0:	2b1d      	cmp	r3, #29
 80050c2:	d001      	beq.n	80050c8 <__sflush_r+0xb4>
 80050c4:	2b16      	cmp	r3, #22
 80050c6:	d101      	bne.n	80050cc <__sflush_r+0xb8>
 80050c8:	602f      	str	r7, [r5, #0]
 80050ca:	e7b0      	b.n	800502e <__sflush_r+0x1a>
 80050cc:	89a3      	ldrh	r3, [r4, #12]
 80050ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050d2:	81a3      	strh	r3, [r4, #12]
 80050d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050d8:	690f      	ldr	r7, [r1, #16]
 80050da:	2f00      	cmp	r7, #0
 80050dc:	d0a7      	beq.n	800502e <__sflush_r+0x1a>
 80050de:	0793      	lsls	r3, r2, #30
 80050e0:	680e      	ldr	r6, [r1, #0]
 80050e2:	bf08      	it	eq
 80050e4:	694b      	ldreq	r3, [r1, #20]
 80050e6:	600f      	str	r7, [r1, #0]
 80050e8:	bf18      	it	ne
 80050ea:	2300      	movne	r3, #0
 80050ec:	eba6 0807 	sub.w	r8, r6, r7
 80050f0:	608b      	str	r3, [r1, #8]
 80050f2:	f1b8 0f00 	cmp.w	r8, #0
 80050f6:	dd9a      	ble.n	800502e <__sflush_r+0x1a>
 80050f8:	4643      	mov	r3, r8
 80050fa:	463a      	mov	r2, r7
 80050fc:	6a21      	ldr	r1, [r4, #32]
 80050fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005100:	4628      	mov	r0, r5
 8005102:	47b0      	blx	r6
 8005104:	2800      	cmp	r0, #0
 8005106:	dc07      	bgt.n	8005118 <__sflush_r+0x104>
 8005108:	89a3      	ldrh	r3, [r4, #12]
 800510a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800510e:	81a3      	strh	r3, [r4, #12]
 8005110:	f04f 30ff 	mov.w	r0, #4294967295
 8005114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005118:	4407      	add	r7, r0
 800511a:	eba8 0800 	sub.w	r8, r8, r0
 800511e:	e7e8      	b.n	80050f2 <__sflush_r+0xde>
 8005120:	20400001 	.word	0x20400001

08005124 <_fflush_r>:
 8005124:	b538      	push	{r3, r4, r5, lr}
 8005126:	690b      	ldr	r3, [r1, #16]
 8005128:	4605      	mov	r5, r0
 800512a:	460c      	mov	r4, r1
 800512c:	b1db      	cbz	r3, 8005166 <_fflush_r+0x42>
 800512e:	b118      	cbz	r0, 8005138 <_fflush_r+0x14>
 8005130:	6983      	ldr	r3, [r0, #24]
 8005132:	b90b      	cbnz	r3, 8005138 <_fflush_r+0x14>
 8005134:	f000 f860 	bl	80051f8 <__sinit>
 8005138:	4b0c      	ldr	r3, [pc, #48]	; (800516c <_fflush_r+0x48>)
 800513a:	429c      	cmp	r4, r3
 800513c:	d109      	bne.n	8005152 <_fflush_r+0x2e>
 800513e:	686c      	ldr	r4, [r5, #4]
 8005140:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005144:	b17b      	cbz	r3, 8005166 <_fflush_r+0x42>
 8005146:	4621      	mov	r1, r4
 8005148:	4628      	mov	r0, r5
 800514a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800514e:	f7ff bf61 	b.w	8005014 <__sflush_r>
 8005152:	4b07      	ldr	r3, [pc, #28]	; (8005170 <_fflush_r+0x4c>)
 8005154:	429c      	cmp	r4, r3
 8005156:	d101      	bne.n	800515c <_fflush_r+0x38>
 8005158:	68ac      	ldr	r4, [r5, #8]
 800515a:	e7f1      	b.n	8005140 <_fflush_r+0x1c>
 800515c:	4b05      	ldr	r3, [pc, #20]	; (8005174 <_fflush_r+0x50>)
 800515e:	429c      	cmp	r4, r3
 8005160:	bf08      	it	eq
 8005162:	68ec      	ldreq	r4, [r5, #12]
 8005164:	e7ec      	b.n	8005140 <_fflush_r+0x1c>
 8005166:	2000      	movs	r0, #0
 8005168:	bd38      	pop	{r3, r4, r5, pc}
 800516a:	bf00      	nop
 800516c:	08007d38 	.word	0x08007d38
 8005170:	08007d58 	.word	0x08007d58
 8005174:	08007d18 	.word	0x08007d18

08005178 <_cleanup_r>:
 8005178:	4901      	ldr	r1, [pc, #4]	; (8005180 <_cleanup_r+0x8>)
 800517a:	f000 b8a9 	b.w	80052d0 <_fwalk_reent>
 800517e:	bf00      	nop
 8005180:	08005125 	.word	0x08005125

08005184 <std.isra.0>:
 8005184:	2300      	movs	r3, #0
 8005186:	b510      	push	{r4, lr}
 8005188:	4604      	mov	r4, r0
 800518a:	6003      	str	r3, [r0, #0]
 800518c:	6043      	str	r3, [r0, #4]
 800518e:	6083      	str	r3, [r0, #8]
 8005190:	8181      	strh	r1, [r0, #12]
 8005192:	6643      	str	r3, [r0, #100]	; 0x64
 8005194:	81c2      	strh	r2, [r0, #14]
 8005196:	6103      	str	r3, [r0, #16]
 8005198:	6143      	str	r3, [r0, #20]
 800519a:	6183      	str	r3, [r0, #24]
 800519c:	4619      	mov	r1, r3
 800519e:	2208      	movs	r2, #8
 80051a0:	305c      	adds	r0, #92	; 0x5c
 80051a2:	f000 f8e2 	bl	800536a <memset>
 80051a6:	4b05      	ldr	r3, [pc, #20]	; (80051bc <std.isra.0+0x38>)
 80051a8:	6263      	str	r3, [r4, #36]	; 0x24
 80051aa:	4b05      	ldr	r3, [pc, #20]	; (80051c0 <std.isra.0+0x3c>)
 80051ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80051ae:	4b05      	ldr	r3, [pc, #20]	; (80051c4 <std.isra.0+0x40>)
 80051b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80051b2:	4b05      	ldr	r3, [pc, #20]	; (80051c8 <std.isra.0+0x44>)
 80051b4:	6224      	str	r4, [r4, #32]
 80051b6:	6323      	str	r3, [r4, #48]	; 0x30
 80051b8:	bd10      	pop	{r4, pc}
 80051ba:	bf00      	nop
 80051bc:	08006029 	.word	0x08006029
 80051c0:	0800604b 	.word	0x0800604b
 80051c4:	08006083 	.word	0x08006083
 80051c8:	080060a7 	.word	0x080060a7

080051cc <__sfmoreglue>:
 80051cc:	b570      	push	{r4, r5, r6, lr}
 80051ce:	1e4a      	subs	r2, r1, #1
 80051d0:	2568      	movs	r5, #104	; 0x68
 80051d2:	4355      	muls	r5, r2
 80051d4:	460e      	mov	r6, r1
 80051d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80051da:	f000 f91d 	bl	8005418 <_malloc_r>
 80051de:	4604      	mov	r4, r0
 80051e0:	b140      	cbz	r0, 80051f4 <__sfmoreglue+0x28>
 80051e2:	2100      	movs	r1, #0
 80051e4:	e880 0042 	stmia.w	r0, {r1, r6}
 80051e8:	300c      	adds	r0, #12
 80051ea:	60a0      	str	r0, [r4, #8]
 80051ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80051f0:	f000 f8bb 	bl	800536a <memset>
 80051f4:	4620      	mov	r0, r4
 80051f6:	bd70      	pop	{r4, r5, r6, pc}

080051f8 <__sinit>:
 80051f8:	6983      	ldr	r3, [r0, #24]
 80051fa:	b510      	push	{r4, lr}
 80051fc:	4604      	mov	r4, r0
 80051fe:	bb33      	cbnz	r3, 800524e <__sinit+0x56>
 8005200:	6483      	str	r3, [r0, #72]	; 0x48
 8005202:	64c3      	str	r3, [r0, #76]	; 0x4c
 8005204:	6503      	str	r3, [r0, #80]	; 0x50
 8005206:	4b12      	ldr	r3, [pc, #72]	; (8005250 <__sinit+0x58>)
 8005208:	4a12      	ldr	r2, [pc, #72]	; (8005254 <__sinit+0x5c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6282      	str	r2, [r0, #40]	; 0x28
 800520e:	4298      	cmp	r0, r3
 8005210:	bf04      	itt	eq
 8005212:	2301      	moveq	r3, #1
 8005214:	6183      	streq	r3, [r0, #24]
 8005216:	f000 f81f 	bl	8005258 <__sfp>
 800521a:	6060      	str	r0, [r4, #4]
 800521c:	4620      	mov	r0, r4
 800521e:	f000 f81b 	bl	8005258 <__sfp>
 8005222:	60a0      	str	r0, [r4, #8]
 8005224:	4620      	mov	r0, r4
 8005226:	f000 f817 	bl	8005258 <__sfp>
 800522a:	2200      	movs	r2, #0
 800522c:	60e0      	str	r0, [r4, #12]
 800522e:	2104      	movs	r1, #4
 8005230:	6860      	ldr	r0, [r4, #4]
 8005232:	f7ff ffa7 	bl	8005184 <std.isra.0>
 8005236:	2201      	movs	r2, #1
 8005238:	2109      	movs	r1, #9
 800523a:	68a0      	ldr	r0, [r4, #8]
 800523c:	f7ff ffa2 	bl	8005184 <std.isra.0>
 8005240:	2202      	movs	r2, #2
 8005242:	2112      	movs	r1, #18
 8005244:	68e0      	ldr	r0, [r4, #12]
 8005246:	f7ff ff9d 	bl	8005184 <std.isra.0>
 800524a:	2301      	movs	r3, #1
 800524c:	61a3      	str	r3, [r4, #24]
 800524e:	bd10      	pop	{r4, pc}
 8005250:	08007d78 	.word	0x08007d78
 8005254:	08005179 	.word	0x08005179

08005258 <__sfp>:
 8005258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800525a:	4b1c      	ldr	r3, [pc, #112]	; (80052cc <__sfp+0x74>)
 800525c:	681e      	ldr	r6, [r3, #0]
 800525e:	69b3      	ldr	r3, [r6, #24]
 8005260:	4607      	mov	r7, r0
 8005262:	b913      	cbnz	r3, 800526a <__sfp+0x12>
 8005264:	4630      	mov	r0, r6
 8005266:	f7ff ffc7 	bl	80051f8 <__sinit>
 800526a:	3648      	adds	r6, #72	; 0x48
 800526c:	68b4      	ldr	r4, [r6, #8]
 800526e:	6873      	ldr	r3, [r6, #4]
 8005270:	3b01      	subs	r3, #1
 8005272:	d503      	bpl.n	800527c <__sfp+0x24>
 8005274:	6833      	ldr	r3, [r6, #0]
 8005276:	b133      	cbz	r3, 8005286 <__sfp+0x2e>
 8005278:	6836      	ldr	r6, [r6, #0]
 800527a:	e7f7      	b.n	800526c <__sfp+0x14>
 800527c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005280:	b16d      	cbz	r5, 800529e <__sfp+0x46>
 8005282:	3468      	adds	r4, #104	; 0x68
 8005284:	e7f4      	b.n	8005270 <__sfp+0x18>
 8005286:	2104      	movs	r1, #4
 8005288:	4638      	mov	r0, r7
 800528a:	f7ff ff9f 	bl	80051cc <__sfmoreglue>
 800528e:	6030      	str	r0, [r6, #0]
 8005290:	2800      	cmp	r0, #0
 8005292:	d1f1      	bne.n	8005278 <__sfp+0x20>
 8005294:	230c      	movs	r3, #12
 8005296:	603b      	str	r3, [r7, #0]
 8005298:	4604      	mov	r4, r0
 800529a:	4620      	mov	r0, r4
 800529c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800529e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80052a2:	81e3      	strh	r3, [r4, #14]
 80052a4:	2301      	movs	r3, #1
 80052a6:	81a3      	strh	r3, [r4, #12]
 80052a8:	6665      	str	r5, [r4, #100]	; 0x64
 80052aa:	6025      	str	r5, [r4, #0]
 80052ac:	60a5      	str	r5, [r4, #8]
 80052ae:	6065      	str	r5, [r4, #4]
 80052b0:	6125      	str	r5, [r4, #16]
 80052b2:	6165      	str	r5, [r4, #20]
 80052b4:	61a5      	str	r5, [r4, #24]
 80052b6:	2208      	movs	r2, #8
 80052b8:	4629      	mov	r1, r5
 80052ba:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80052be:	f000 f854 	bl	800536a <memset>
 80052c2:	6365      	str	r5, [r4, #52]	; 0x34
 80052c4:	63a5      	str	r5, [r4, #56]	; 0x38
 80052c6:	64a5      	str	r5, [r4, #72]	; 0x48
 80052c8:	64e5      	str	r5, [r4, #76]	; 0x4c
 80052ca:	e7e6      	b.n	800529a <__sfp+0x42>
 80052cc:	08007d78 	.word	0x08007d78

080052d0 <_fwalk_reent>:
 80052d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052d4:	4680      	mov	r8, r0
 80052d6:	4689      	mov	r9, r1
 80052d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80052dc:	2600      	movs	r6, #0
 80052de:	b914      	cbnz	r4, 80052e6 <_fwalk_reent+0x16>
 80052e0:	4630      	mov	r0, r6
 80052e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052e6:	68a5      	ldr	r5, [r4, #8]
 80052e8:	6867      	ldr	r7, [r4, #4]
 80052ea:	3f01      	subs	r7, #1
 80052ec:	d501      	bpl.n	80052f2 <_fwalk_reent+0x22>
 80052ee:	6824      	ldr	r4, [r4, #0]
 80052f0:	e7f5      	b.n	80052de <_fwalk_reent+0xe>
 80052f2:	89ab      	ldrh	r3, [r5, #12]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d907      	bls.n	8005308 <_fwalk_reent+0x38>
 80052f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80052fc:	3301      	adds	r3, #1
 80052fe:	d003      	beq.n	8005308 <_fwalk_reent+0x38>
 8005300:	4629      	mov	r1, r5
 8005302:	4640      	mov	r0, r8
 8005304:	47c8      	blx	r9
 8005306:	4306      	orrs	r6, r0
 8005308:	3568      	adds	r5, #104	; 0x68
 800530a:	e7ee      	b.n	80052ea <_fwalk_reent+0x1a>

0800530c <__libc_init_array>:
 800530c:	b570      	push	{r4, r5, r6, lr}
 800530e:	4e0d      	ldr	r6, [pc, #52]	; (8005344 <__libc_init_array+0x38>)
 8005310:	4c0d      	ldr	r4, [pc, #52]	; (8005348 <__libc_init_array+0x3c>)
 8005312:	1ba4      	subs	r4, r4, r6
 8005314:	10a4      	asrs	r4, r4, #2
 8005316:	2500      	movs	r5, #0
 8005318:	42a5      	cmp	r5, r4
 800531a:	d109      	bne.n	8005330 <__libc_init_array+0x24>
 800531c:	4e0b      	ldr	r6, [pc, #44]	; (800534c <__libc_init_array+0x40>)
 800531e:	4c0c      	ldr	r4, [pc, #48]	; (8005350 <__libc_init_array+0x44>)
 8005320:	f002 fc44 	bl	8007bac <_init>
 8005324:	1ba4      	subs	r4, r4, r6
 8005326:	10a4      	asrs	r4, r4, #2
 8005328:	2500      	movs	r5, #0
 800532a:	42a5      	cmp	r5, r4
 800532c:	d105      	bne.n	800533a <__libc_init_array+0x2e>
 800532e:	bd70      	pop	{r4, r5, r6, pc}
 8005330:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005334:	4798      	blx	r3
 8005336:	3501      	adds	r5, #1
 8005338:	e7ee      	b.n	8005318 <__libc_init_array+0xc>
 800533a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800533e:	4798      	blx	r3
 8005340:	3501      	adds	r5, #1
 8005342:	e7f2      	b.n	800532a <__libc_init_array+0x1e>
 8005344:	08007fe0 	.word	0x08007fe0
 8005348:	08007fe0 	.word	0x08007fe0
 800534c:	08007fe0 	.word	0x08007fe0
 8005350:	08007fe4 	.word	0x08007fe4

08005354 <memcpy>:
 8005354:	b510      	push	{r4, lr}
 8005356:	1e43      	subs	r3, r0, #1
 8005358:	440a      	add	r2, r1
 800535a:	4291      	cmp	r1, r2
 800535c:	d100      	bne.n	8005360 <memcpy+0xc>
 800535e:	bd10      	pop	{r4, pc}
 8005360:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005364:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005368:	e7f7      	b.n	800535a <memcpy+0x6>

0800536a <memset>:
 800536a:	4402      	add	r2, r0
 800536c:	4603      	mov	r3, r0
 800536e:	4293      	cmp	r3, r2
 8005370:	d100      	bne.n	8005374 <memset+0xa>
 8005372:	4770      	bx	lr
 8005374:	f803 1b01 	strb.w	r1, [r3], #1
 8005378:	e7f9      	b.n	800536e <memset+0x4>
	...

0800537c <_free_r>:
 800537c:	b538      	push	{r3, r4, r5, lr}
 800537e:	4605      	mov	r5, r0
 8005380:	2900      	cmp	r1, #0
 8005382:	d045      	beq.n	8005410 <_free_r+0x94>
 8005384:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005388:	1f0c      	subs	r4, r1, #4
 800538a:	2b00      	cmp	r3, #0
 800538c:	bfb8      	it	lt
 800538e:	18e4      	addlt	r4, r4, r3
 8005390:	f001 fe10 	bl	8006fb4 <__malloc_lock>
 8005394:	4a1f      	ldr	r2, [pc, #124]	; (8005414 <_free_r+0x98>)
 8005396:	6813      	ldr	r3, [r2, #0]
 8005398:	4610      	mov	r0, r2
 800539a:	b933      	cbnz	r3, 80053aa <_free_r+0x2e>
 800539c:	6063      	str	r3, [r4, #4]
 800539e:	6014      	str	r4, [r2, #0]
 80053a0:	4628      	mov	r0, r5
 80053a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053a6:	f001 be06 	b.w	8006fb6 <__malloc_unlock>
 80053aa:	42a3      	cmp	r3, r4
 80053ac:	d90c      	bls.n	80053c8 <_free_r+0x4c>
 80053ae:	6821      	ldr	r1, [r4, #0]
 80053b0:	1862      	adds	r2, r4, r1
 80053b2:	4293      	cmp	r3, r2
 80053b4:	bf04      	itt	eq
 80053b6:	681a      	ldreq	r2, [r3, #0]
 80053b8:	685b      	ldreq	r3, [r3, #4]
 80053ba:	6063      	str	r3, [r4, #4]
 80053bc:	bf04      	itt	eq
 80053be:	1852      	addeq	r2, r2, r1
 80053c0:	6022      	streq	r2, [r4, #0]
 80053c2:	6004      	str	r4, [r0, #0]
 80053c4:	e7ec      	b.n	80053a0 <_free_r+0x24>
 80053c6:	4613      	mov	r3, r2
 80053c8:	685a      	ldr	r2, [r3, #4]
 80053ca:	b10a      	cbz	r2, 80053d0 <_free_r+0x54>
 80053cc:	42a2      	cmp	r2, r4
 80053ce:	d9fa      	bls.n	80053c6 <_free_r+0x4a>
 80053d0:	6819      	ldr	r1, [r3, #0]
 80053d2:	1858      	adds	r0, r3, r1
 80053d4:	42a0      	cmp	r0, r4
 80053d6:	d10b      	bne.n	80053f0 <_free_r+0x74>
 80053d8:	6820      	ldr	r0, [r4, #0]
 80053da:	4401      	add	r1, r0
 80053dc:	1858      	adds	r0, r3, r1
 80053de:	4282      	cmp	r2, r0
 80053e0:	6019      	str	r1, [r3, #0]
 80053e2:	d1dd      	bne.n	80053a0 <_free_r+0x24>
 80053e4:	6810      	ldr	r0, [r2, #0]
 80053e6:	6852      	ldr	r2, [r2, #4]
 80053e8:	605a      	str	r2, [r3, #4]
 80053ea:	4401      	add	r1, r0
 80053ec:	6019      	str	r1, [r3, #0]
 80053ee:	e7d7      	b.n	80053a0 <_free_r+0x24>
 80053f0:	d902      	bls.n	80053f8 <_free_r+0x7c>
 80053f2:	230c      	movs	r3, #12
 80053f4:	602b      	str	r3, [r5, #0]
 80053f6:	e7d3      	b.n	80053a0 <_free_r+0x24>
 80053f8:	6820      	ldr	r0, [r4, #0]
 80053fa:	1821      	adds	r1, r4, r0
 80053fc:	428a      	cmp	r2, r1
 80053fe:	bf04      	itt	eq
 8005400:	6811      	ldreq	r1, [r2, #0]
 8005402:	6852      	ldreq	r2, [r2, #4]
 8005404:	6062      	str	r2, [r4, #4]
 8005406:	bf04      	itt	eq
 8005408:	1809      	addeq	r1, r1, r0
 800540a:	6021      	streq	r1, [r4, #0]
 800540c:	605c      	str	r4, [r3, #4]
 800540e:	e7c7      	b.n	80053a0 <_free_r+0x24>
 8005410:	bd38      	pop	{r3, r4, r5, pc}
 8005412:	bf00      	nop
 8005414:	2000036c 	.word	0x2000036c

08005418 <_malloc_r>:
 8005418:	b570      	push	{r4, r5, r6, lr}
 800541a:	1ccd      	adds	r5, r1, #3
 800541c:	f025 0503 	bic.w	r5, r5, #3
 8005420:	3508      	adds	r5, #8
 8005422:	2d0c      	cmp	r5, #12
 8005424:	bf38      	it	cc
 8005426:	250c      	movcc	r5, #12
 8005428:	2d00      	cmp	r5, #0
 800542a:	4606      	mov	r6, r0
 800542c:	db01      	blt.n	8005432 <_malloc_r+0x1a>
 800542e:	42a9      	cmp	r1, r5
 8005430:	d903      	bls.n	800543a <_malloc_r+0x22>
 8005432:	230c      	movs	r3, #12
 8005434:	6033      	str	r3, [r6, #0]
 8005436:	2000      	movs	r0, #0
 8005438:	bd70      	pop	{r4, r5, r6, pc}
 800543a:	f001 fdbb 	bl	8006fb4 <__malloc_lock>
 800543e:	4a23      	ldr	r2, [pc, #140]	; (80054cc <_malloc_r+0xb4>)
 8005440:	6814      	ldr	r4, [r2, #0]
 8005442:	4621      	mov	r1, r4
 8005444:	b991      	cbnz	r1, 800546c <_malloc_r+0x54>
 8005446:	4c22      	ldr	r4, [pc, #136]	; (80054d0 <_malloc_r+0xb8>)
 8005448:	6823      	ldr	r3, [r4, #0]
 800544a:	b91b      	cbnz	r3, 8005454 <_malloc_r+0x3c>
 800544c:	4630      	mov	r0, r6
 800544e:	f000 fd09 	bl	8005e64 <_sbrk_r>
 8005452:	6020      	str	r0, [r4, #0]
 8005454:	4629      	mov	r1, r5
 8005456:	4630      	mov	r0, r6
 8005458:	f000 fd04 	bl	8005e64 <_sbrk_r>
 800545c:	1c43      	adds	r3, r0, #1
 800545e:	d126      	bne.n	80054ae <_malloc_r+0x96>
 8005460:	230c      	movs	r3, #12
 8005462:	6033      	str	r3, [r6, #0]
 8005464:	4630      	mov	r0, r6
 8005466:	f001 fda6 	bl	8006fb6 <__malloc_unlock>
 800546a:	e7e4      	b.n	8005436 <_malloc_r+0x1e>
 800546c:	680b      	ldr	r3, [r1, #0]
 800546e:	1b5b      	subs	r3, r3, r5
 8005470:	d41a      	bmi.n	80054a8 <_malloc_r+0x90>
 8005472:	2b0b      	cmp	r3, #11
 8005474:	d90f      	bls.n	8005496 <_malloc_r+0x7e>
 8005476:	600b      	str	r3, [r1, #0]
 8005478:	50cd      	str	r5, [r1, r3]
 800547a:	18cc      	adds	r4, r1, r3
 800547c:	4630      	mov	r0, r6
 800547e:	f001 fd9a 	bl	8006fb6 <__malloc_unlock>
 8005482:	f104 000b 	add.w	r0, r4, #11
 8005486:	1d23      	adds	r3, r4, #4
 8005488:	f020 0007 	bic.w	r0, r0, #7
 800548c:	1ac3      	subs	r3, r0, r3
 800548e:	d01b      	beq.n	80054c8 <_malloc_r+0xb0>
 8005490:	425a      	negs	r2, r3
 8005492:	50e2      	str	r2, [r4, r3]
 8005494:	bd70      	pop	{r4, r5, r6, pc}
 8005496:	428c      	cmp	r4, r1
 8005498:	bf0d      	iteet	eq
 800549a:	6863      	ldreq	r3, [r4, #4]
 800549c:	684b      	ldrne	r3, [r1, #4]
 800549e:	6063      	strne	r3, [r4, #4]
 80054a0:	6013      	streq	r3, [r2, #0]
 80054a2:	bf18      	it	ne
 80054a4:	460c      	movne	r4, r1
 80054a6:	e7e9      	b.n	800547c <_malloc_r+0x64>
 80054a8:	460c      	mov	r4, r1
 80054aa:	6849      	ldr	r1, [r1, #4]
 80054ac:	e7ca      	b.n	8005444 <_malloc_r+0x2c>
 80054ae:	1cc4      	adds	r4, r0, #3
 80054b0:	f024 0403 	bic.w	r4, r4, #3
 80054b4:	42a0      	cmp	r0, r4
 80054b6:	d005      	beq.n	80054c4 <_malloc_r+0xac>
 80054b8:	1a21      	subs	r1, r4, r0
 80054ba:	4630      	mov	r0, r6
 80054bc:	f000 fcd2 	bl	8005e64 <_sbrk_r>
 80054c0:	3001      	adds	r0, #1
 80054c2:	d0cd      	beq.n	8005460 <_malloc_r+0x48>
 80054c4:	6025      	str	r5, [r4, #0]
 80054c6:	e7d9      	b.n	800547c <_malloc_r+0x64>
 80054c8:	bd70      	pop	{r4, r5, r6, pc}
 80054ca:	bf00      	nop
 80054cc:	2000036c 	.word	0x2000036c
 80054d0:	20000370 	.word	0x20000370

080054d4 <__cvt>:
 80054d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054d6:	ed2d 8b02 	vpush	{d8}
 80054da:	eeb0 8b40 	vmov.f64	d8, d0
 80054de:	b085      	sub	sp, #20
 80054e0:	4617      	mov	r7, r2
 80054e2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80054e4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80054e6:	ee18 2a90 	vmov	r2, s17
 80054ea:	f025 0520 	bic.w	r5, r5, #32
 80054ee:	2a00      	cmp	r2, #0
 80054f0:	bfb6      	itet	lt
 80054f2:	222d      	movlt	r2, #45	; 0x2d
 80054f4:	2200      	movge	r2, #0
 80054f6:	eeb1 8b40 	vneglt.f64	d8, d0
 80054fa:	2d46      	cmp	r5, #70	; 0x46
 80054fc:	460c      	mov	r4, r1
 80054fe:	701a      	strb	r2, [r3, #0]
 8005500:	d004      	beq.n	800550c <__cvt+0x38>
 8005502:	2d45      	cmp	r5, #69	; 0x45
 8005504:	d100      	bne.n	8005508 <__cvt+0x34>
 8005506:	3401      	adds	r4, #1
 8005508:	2102      	movs	r1, #2
 800550a:	e000      	b.n	800550e <__cvt+0x3a>
 800550c:	2103      	movs	r1, #3
 800550e:	ab03      	add	r3, sp, #12
 8005510:	9301      	str	r3, [sp, #4]
 8005512:	ab02      	add	r3, sp, #8
 8005514:	9300      	str	r3, [sp, #0]
 8005516:	4622      	mov	r2, r4
 8005518:	4633      	mov	r3, r6
 800551a:	eeb0 0b48 	vmov.f64	d0, d8
 800551e:	f000 ff3f 	bl	80063a0 <_dtoa_r>
 8005522:	2d47      	cmp	r5, #71	; 0x47
 8005524:	d101      	bne.n	800552a <__cvt+0x56>
 8005526:	07fb      	lsls	r3, r7, #31
 8005528:	d516      	bpl.n	8005558 <__cvt+0x84>
 800552a:	2d46      	cmp	r5, #70	; 0x46
 800552c:	eb00 0304 	add.w	r3, r0, r4
 8005530:	d10c      	bne.n	800554c <__cvt+0x78>
 8005532:	7802      	ldrb	r2, [r0, #0]
 8005534:	2a30      	cmp	r2, #48	; 0x30
 8005536:	d107      	bne.n	8005548 <__cvt+0x74>
 8005538:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800553c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005540:	bf1c      	itt	ne
 8005542:	f1c4 0401 	rsbne	r4, r4, #1
 8005546:	6034      	strne	r4, [r6, #0]
 8005548:	6832      	ldr	r2, [r6, #0]
 800554a:	4413      	add	r3, r2
 800554c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005554:	d10f      	bne.n	8005576 <__cvt+0xa2>
 8005556:	9303      	str	r3, [sp, #12]
 8005558:	9b03      	ldr	r3, [sp, #12]
 800555a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800555c:	1a1b      	subs	r3, r3, r0
 800555e:	6013      	str	r3, [r2, #0]
 8005560:	b005      	add	sp, #20
 8005562:	ecbd 8b02 	vpop	{d8}
 8005566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005568:	1c54      	adds	r4, r2, #1
 800556a:	9403      	str	r4, [sp, #12]
 800556c:	7011      	strb	r1, [r2, #0]
 800556e:	9a03      	ldr	r2, [sp, #12]
 8005570:	4293      	cmp	r3, r2
 8005572:	d8f9      	bhi.n	8005568 <__cvt+0x94>
 8005574:	e7f0      	b.n	8005558 <__cvt+0x84>
 8005576:	2130      	movs	r1, #48	; 0x30
 8005578:	e7f9      	b.n	800556e <__cvt+0x9a>

0800557a <__exponent>:
 800557a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800557c:	4603      	mov	r3, r0
 800557e:	2900      	cmp	r1, #0
 8005580:	bfb8      	it	lt
 8005582:	4249      	neglt	r1, r1
 8005584:	f803 2b02 	strb.w	r2, [r3], #2
 8005588:	bfb4      	ite	lt
 800558a:	222d      	movlt	r2, #45	; 0x2d
 800558c:	222b      	movge	r2, #43	; 0x2b
 800558e:	2909      	cmp	r1, #9
 8005590:	7042      	strb	r2, [r0, #1]
 8005592:	dd20      	ble.n	80055d6 <__exponent+0x5c>
 8005594:	f10d 0207 	add.w	r2, sp, #7
 8005598:	4617      	mov	r7, r2
 800559a:	260a      	movs	r6, #10
 800559c:	fb91 f5f6 	sdiv	r5, r1, r6
 80055a0:	fb06 1115 	mls	r1, r6, r5, r1
 80055a4:	3130      	adds	r1, #48	; 0x30
 80055a6:	2d09      	cmp	r5, #9
 80055a8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80055ac:	f102 34ff 	add.w	r4, r2, #4294967295
 80055b0:	4629      	mov	r1, r5
 80055b2:	dc09      	bgt.n	80055c8 <__exponent+0x4e>
 80055b4:	3130      	adds	r1, #48	; 0x30
 80055b6:	3a02      	subs	r2, #2
 80055b8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80055bc:	42ba      	cmp	r2, r7
 80055be:	461c      	mov	r4, r3
 80055c0:	d304      	bcc.n	80055cc <__exponent+0x52>
 80055c2:	1a20      	subs	r0, r4, r0
 80055c4:	b003      	add	sp, #12
 80055c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055c8:	4622      	mov	r2, r4
 80055ca:	e7e7      	b.n	800559c <__exponent+0x22>
 80055cc:	f812 1b01 	ldrb.w	r1, [r2], #1
 80055d0:	f803 1b01 	strb.w	r1, [r3], #1
 80055d4:	e7f2      	b.n	80055bc <__exponent+0x42>
 80055d6:	2230      	movs	r2, #48	; 0x30
 80055d8:	461c      	mov	r4, r3
 80055da:	4411      	add	r1, r2
 80055dc:	f804 2b02 	strb.w	r2, [r4], #2
 80055e0:	7059      	strb	r1, [r3, #1]
 80055e2:	e7ee      	b.n	80055c2 <__exponent+0x48>
 80055e4:	0000      	movs	r0, r0
	...

080055e8 <_printf_float>:
 80055e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ec:	b08d      	sub	sp, #52	; 0x34
 80055ee:	460c      	mov	r4, r1
 80055f0:	4616      	mov	r6, r2
 80055f2:	461f      	mov	r7, r3
 80055f4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80055f8:	4605      	mov	r5, r0
 80055fa:	f001 fc3d 	bl	8006e78 <_localeconv_r>
 80055fe:	f8d0 b000 	ldr.w	fp, [r0]
 8005602:	4658      	mov	r0, fp
 8005604:	f7fa fe6c 	bl	80002e0 <strlen>
 8005608:	2300      	movs	r3, #0
 800560a:	930a      	str	r3, [sp, #40]	; 0x28
 800560c:	f8d8 3000 	ldr.w	r3, [r8]
 8005610:	9005      	str	r0, [sp, #20]
 8005612:	3307      	adds	r3, #7
 8005614:	f023 0307 	bic.w	r3, r3, #7
 8005618:	f103 0108 	add.w	r1, r3, #8
 800561c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005620:	6822      	ldr	r2, [r4, #0]
 8005622:	f8c8 1000 	str.w	r1, [r8]
 8005626:	e9d3 0100 	ldrd	r0, r1, [r3]
 800562a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800562e:	ed9f 7ba0 	vldr	d7, [pc, #640]	; 80058b0 <_printf_float+0x2c8>
 8005632:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8005636:	eeb0 6bc0 	vabs.f64	d6, d0
 800563a:	eeb4 6b47 	vcmp.f64	d6, d7
 800563e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005642:	f340 81ef 	ble.w	8005a24 <_printf_float+0x43c>
 8005646:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800564a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800564e:	d502      	bpl.n	8005656 <_printf_float+0x6e>
 8005650:	232d      	movs	r3, #45	; 0x2d
 8005652:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005656:	4b98      	ldr	r3, [pc, #608]	; (80058b8 <_printf_float+0x2d0>)
 8005658:	4998      	ldr	r1, [pc, #608]	; (80058bc <_printf_float+0x2d4>)
 800565a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800565e:	bf8c      	ite	hi
 8005660:	4688      	movhi	r8, r1
 8005662:	4698      	movls	r8, r3
 8005664:	f022 0204 	bic.w	r2, r2, #4
 8005668:	2303      	movs	r3, #3
 800566a:	6123      	str	r3, [r4, #16]
 800566c:	6022      	str	r2, [r4, #0]
 800566e:	f04f 0a00 	mov.w	sl, #0
 8005672:	9700      	str	r7, [sp, #0]
 8005674:	4633      	mov	r3, r6
 8005676:	aa0b      	add	r2, sp, #44	; 0x2c
 8005678:	4621      	mov	r1, r4
 800567a:	4628      	mov	r0, r5
 800567c:	f000 f9e0 	bl	8005a40 <_printf_common>
 8005680:	3001      	adds	r0, #1
 8005682:	f040 8090 	bne.w	80057a6 <_printf_float+0x1be>
 8005686:	f04f 30ff 	mov.w	r0, #4294967295
 800568a:	b00d      	add	sp, #52	; 0x34
 800568c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005690:	6861      	ldr	r1, [r4, #4]
 8005692:	1c4b      	adds	r3, r1, #1
 8005694:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005698:	a80a      	add	r0, sp, #40	; 0x28
 800569a:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
 800569e:	d13c      	bne.n	800571a <_printf_float+0x132>
 80056a0:	2306      	movs	r3, #6
 80056a2:	6063      	str	r3, [r4, #4]
 80056a4:	2300      	movs	r3, #0
 80056a6:	9303      	str	r3, [sp, #12]
 80056a8:	9002      	str	r0, [sp, #8]
 80056aa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80056ae:	6022      	str	r2, [r4, #0]
 80056b0:	f8cd 9004 	str.w	r9, [sp, #4]
 80056b4:	f8cd e000 	str.w	lr, [sp]
 80056b8:	6861      	ldr	r1, [r4, #4]
 80056ba:	4628      	mov	r0, r5
 80056bc:	f7ff ff0a 	bl	80054d4 <__cvt>
 80056c0:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 80056c4:	2b47      	cmp	r3, #71	; 0x47
 80056c6:	4680      	mov	r8, r0
 80056c8:	d109      	bne.n	80056de <_printf_float+0xf6>
 80056ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056cc:	1cd8      	adds	r0, r3, #3
 80056ce:	db02      	blt.n	80056d6 <_printf_float+0xee>
 80056d0:	6862      	ldr	r2, [r4, #4]
 80056d2:	4293      	cmp	r3, r2
 80056d4:	dd54      	ble.n	8005780 <_printf_float+0x198>
 80056d6:	f1a9 0902 	sub.w	r9, r9, #2
 80056da:	fa5f f989 	uxtb.w	r9, r9
 80056de:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80056e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056e4:	d831      	bhi.n	800574a <_printf_float+0x162>
 80056e6:	3901      	subs	r1, #1
 80056e8:	464a      	mov	r2, r9
 80056ea:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80056ee:	9109      	str	r1, [sp, #36]	; 0x24
 80056f0:	f7ff ff43 	bl	800557a <__exponent>
 80056f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056f6:	1883      	adds	r3, r0, r2
 80056f8:	2a01      	cmp	r2, #1
 80056fa:	4682      	mov	sl, r0
 80056fc:	6123      	str	r3, [r4, #16]
 80056fe:	dc02      	bgt.n	8005706 <_printf_float+0x11e>
 8005700:	6822      	ldr	r2, [r4, #0]
 8005702:	07d1      	lsls	r1, r2, #31
 8005704:	d501      	bpl.n	800570a <_printf_float+0x122>
 8005706:	3301      	adds	r3, #1
 8005708:	6123      	str	r3, [r4, #16]
 800570a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800570e:	2b00      	cmp	r3, #0
 8005710:	d0af      	beq.n	8005672 <_printf_float+0x8a>
 8005712:	232d      	movs	r3, #45	; 0x2d
 8005714:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005718:	e7ab      	b.n	8005672 <_printf_float+0x8a>
 800571a:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 800571e:	d002      	beq.n	8005726 <_printf_float+0x13e>
 8005720:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005724:	d1be      	bne.n	80056a4 <_printf_float+0xbc>
 8005726:	b171      	cbz	r1, 8005746 <_printf_float+0x15e>
 8005728:	2300      	movs	r3, #0
 800572a:	9303      	str	r3, [sp, #12]
 800572c:	9002      	str	r0, [sp, #8]
 800572e:	6022      	str	r2, [r4, #0]
 8005730:	f8cd 9004 	str.w	r9, [sp, #4]
 8005734:	f8cd e000 	str.w	lr, [sp]
 8005738:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800573c:	4628      	mov	r0, r5
 800573e:	f7ff fec9 	bl	80054d4 <__cvt>
 8005742:	4680      	mov	r8, r0
 8005744:	e7c1      	b.n	80056ca <_printf_float+0xe2>
 8005746:	2301      	movs	r3, #1
 8005748:	e7ab      	b.n	80056a2 <_printf_float+0xba>
 800574a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800574e:	d119      	bne.n	8005784 <_printf_float+0x19c>
 8005750:	2900      	cmp	r1, #0
 8005752:	6863      	ldr	r3, [r4, #4]
 8005754:	dd0c      	ble.n	8005770 <_printf_float+0x188>
 8005756:	6121      	str	r1, [r4, #16]
 8005758:	b913      	cbnz	r3, 8005760 <_printf_float+0x178>
 800575a:	6822      	ldr	r2, [r4, #0]
 800575c:	07d2      	lsls	r2, r2, #31
 800575e:	d502      	bpl.n	8005766 <_printf_float+0x17e>
 8005760:	3301      	adds	r3, #1
 8005762:	440b      	add	r3, r1
 8005764:	6123      	str	r3, [r4, #16]
 8005766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005768:	65a3      	str	r3, [r4, #88]	; 0x58
 800576a:	f04f 0a00 	mov.w	sl, #0
 800576e:	e7cc      	b.n	800570a <_printf_float+0x122>
 8005770:	b913      	cbnz	r3, 8005778 <_printf_float+0x190>
 8005772:	6822      	ldr	r2, [r4, #0]
 8005774:	07d0      	lsls	r0, r2, #31
 8005776:	d501      	bpl.n	800577c <_printf_float+0x194>
 8005778:	3302      	adds	r3, #2
 800577a:	e7f3      	b.n	8005764 <_printf_float+0x17c>
 800577c:	2301      	movs	r3, #1
 800577e:	e7f1      	b.n	8005764 <_printf_float+0x17c>
 8005780:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005786:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005788:	4293      	cmp	r3, r2
 800578a:	db05      	blt.n	8005798 <_printf_float+0x1b0>
 800578c:	6822      	ldr	r2, [r4, #0]
 800578e:	6123      	str	r3, [r4, #16]
 8005790:	07d1      	lsls	r1, r2, #31
 8005792:	d5e8      	bpl.n	8005766 <_printf_float+0x17e>
 8005794:	3301      	adds	r3, #1
 8005796:	e7e5      	b.n	8005764 <_printf_float+0x17c>
 8005798:	2b00      	cmp	r3, #0
 800579a:	bfd4      	ite	le
 800579c:	f1c3 0302 	rsble	r3, r3, #2
 80057a0:	2301      	movgt	r3, #1
 80057a2:	4413      	add	r3, r2
 80057a4:	e7de      	b.n	8005764 <_printf_float+0x17c>
 80057a6:	6823      	ldr	r3, [r4, #0]
 80057a8:	055a      	lsls	r2, r3, #21
 80057aa:	d407      	bmi.n	80057bc <_printf_float+0x1d4>
 80057ac:	6923      	ldr	r3, [r4, #16]
 80057ae:	4642      	mov	r2, r8
 80057b0:	4631      	mov	r1, r6
 80057b2:	4628      	mov	r0, r5
 80057b4:	47b8      	blx	r7
 80057b6:	3001      	adds	r0, #1
 80057b8:	d12a      	bne.n	8005810 <_printf_float+0x228>
 80057ba:	e764      	b.n	8005686 <_printf_float+0x9e>
 80057bc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80057c0:	f240 80e5 	bls.w	800598e <_printf_float+0x3a6>
 80057c4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80057c8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80057cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057d0:	d13c      	bne.n	800584c <_printf_float+0x264>
 80057d2:	2301      	movs	r3, #1
 80057d4:	4a3a      	ldr	r2, [pc, #232]	; (80058c0 <_printf_float+0x2d8>)
 80057d6:	4631      	mov	r1, r6
 80057d8:	4628      	mov	r0, r5
 80057da:	47b8      	blx	r7
 80057dc:	3001      	adds	r0, #1
 80057de:	f43f af52 	beq.w	8005686 <_printf_float+0x9e>
 80057e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057e6:	429a      	cmp	r2, r3
 80057e8:	db02      	blt.n	80057f0 <_printf_float+0x208>
 80057ea:	6823      	ldr	r3, [r4, #0]
 80057ec:	07d8      	lsls	r0, r3, #31
 80057ee:	d50f      	bpl.n	8005810 <_printf_float+0x228>
 80057f0:	9b05      	ldr	r3, [sp, #20]
 80057f2:	465a      	mov	r2, fp
 80057f4:	4631      	mov	r1, r6
 80057f6:	4628      	mov	r0, r5
 80057f8:	47b8      	blx	r7
 80057fa:	3001      	adds	r0, #1
 80057fc:	f43f af43 	beq.w	8005686 <_printf_float+0x9e>
 8005800:	f04f 0800 	mov.w	r8, #0
 8005804:	f104 091a 	add.w	r9, r4, #26
 8005808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800580a:	3b01      	subs	r3, #1
 800580c:	4598      	cmp	r8, r3
 800580e:	db12      	blt.n	8005836 <_printf_float+0x24e>
 8005810:	6823      	ldr	r3, [r4, #0]
 8005812:	079b      	lsls	r3, r3, #30
 8005814:	d509      	bpl.n	800582a <_printf_float+0x242>
 8005816:	f04f 0800 	mov.w	r8, #0
 800581a:	f104 0919 	add.w	r9, r4, #25
 800581e:	68e3      	ldr	r3, [r4, #12]
 8005820:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005822:	1a9b      	subs	r3, r3, r2
 8005824:	4598      	cmp	r8, r3
 8005826:	f2c0 80f2 	blt.w	8005a0e <_printf_float+0x426>
 800582a:	68e0      	ldr	r0, [r4, #12]
 800582c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800582e:	4298      	cmp	r0, r3
 8005830:	bfb8      	it	lt
 8005832:	4618      	movlt	r0, r3
 8005834:	e729      	b.n	800568a <_printf_float+0xa2>
 8005836:	2301      	movs	r3, #1
 8005838:	464a      	mov	r2, r9
 800583a:	4631      	mov	r1, r6
 800583c:	4628      	mov	r0, r5
 800583e:	47b8      	blx	r7
 8005840:	3001      	adds	r0, #1
 8005842:	f43f af20 	beq.w	8005686 <_printf_float+0x9e>
 8005846:	f108 0801 	add.w	r8, r8, #1
 800584a:	e7dd      	b.n	8005808 <_printf_float+0x220>
 800584c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800584e:	2b00      	cmp	r3, #0
 8005850:	dc38      	bgt.n	80058c4 <_printf_float+0x2dc>
 8005852:	2301      	movs	r3, #1
 8005854:	4a1a      	ldr	r2, [pc, #104]	; (80058c0 <_printf_float+0x2d8>)
 8005856:	4631      	mov	r1, r6
 8005858:	4628      	mov	r0, r5
 800585a:	47b8      	blx	r7
 800585c:	3001      	adds	r0, #1
 800585e:	f43f af12 	beq.w	8005686 <_printf_float+0x9e>
 8005862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005864:	b923      	cbnz	r3, 8005870 <_printf_float+0x288>
 8005866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005868:	b913      	cbnz	r3, 8005870 <_printf_float+0x288>
 800586a:	6823      	ldr	r3, [r4, #0]
 800586c:	07d9      	lsls	r1, r3, #31
 800586e:	d5cf      	bpl.n	8005810 <_printf_float+0x228>
 8005870:	9b05      	ldr	r3, [sp, #20]
 8005872:	465a      	mov	r2, fp
 8005874:	4631      	mov	r1, r6
 8005876:	4628      	mov	r0, r5
 8005878:	47b8      	blx	r7
 800587a:	3001      	adds	r0, #1
 800587c:	f43f af03 	beq.w	8005686 <_printf_float+0x9e>
 8005880:	f04f 0900 	mov.w	r9, #0
 8005884:	f104 0a1a 	add.w	sl, r4, #26
 8005888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800588a:	425b      	negs	r3, r3
 800588c:	4599      	cmp	r9, r3
 800588e:	db01      	blt.n	8005894 <_printf_float+0x2ac>
 8005890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005892:	e78c      	b.n	80057ae <_printf_float+0x1c6>
 8005894:	2301      	movs	r3, #1
 8005896:	4652      	mov	r2, sl
 8005898:	4631      	mov	r1, r6
 800589a:	4628      	mov	r0, r5
 800589c:	47b8      	blx	r7
 800589e:	3001      	adds	r0, #1
 80058a0:	f43f aef1 	beq.w	8005686 <_printf_float+0x9e>
 80058a4:	f109 0901 	add.w	r9, r9, #1
 80058a8:	e7ee      	b.n	8005888 <_printf_float+0x2a0>
 80058aa:	bf00      	nop
 80058ac:	f3af 8000 	nop.w
 80058b0:	ffffffff 	.word	0xffffffff
 80058b4:	7fefffff 	.word	0x7fefffff
 80058b8:	08007d7c 	.word	0x08007d7c
 80058bc:	08007d80 	.word	0x08007d80
 80058c0:	08007d8c 	.word	0x08007d8c
 80058c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80058c8:	429a      	cmp	r2, r3
 80058ca:	bfa8      	it	ge
 80058cc:	461a      	movge	r2, r3
 80058ce:	2a00      	cmp	r2, #0
 80058d0:	4691      	mov	r9, r2
 80058d2:	dc38      	bgt.n	8005946 <_printf_float+0x35e>
 80058d4:	f104 031a 	add.w	r3, r4, #26
 80058d8:	f04f 0a00 	mov.w	sl, #0
 80058dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058e0:	9307      	str	r3, [sp, #28]
 80058e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80058e4:	9306      	str	r3, [sp, #24]
 80058e6:	eba3 0309 	sub.w	r3, r3, r9
 80058ea:	459a      	cmp	sl, r3
 80058ec:	db33      	blt.n	8005956 <_printf_float+0x36e>
 80058ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058f2:	429a      	cmp	r2, r3
 80058f4:	db3a      	blt.n	800596c <_printf_float+0x384>
 80058f6:	6823      	ldr	r3, [r4, #0]
 80058f8:	07da      	lsls	r2, r3, #31
 80058fa:	d437      	bmi.n	800596c <_printf_float+0x384>
 80058fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058fe:	9a06      	ldr	r2, [sp, #24]
 8005900:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005902:	1a9a      	subs	r2, r3, r2
 8005904:	eba3 0901 	sub.w	r9, r3, r1
 8005908:	4591      	cmp	r9, r2
 800590a:	bfa8      	it	ge
 800590c:	4691      	movge	r9, r2
 800590e:	f1b9 0f00 	cmp.w	r9, #0
 8005912:	dc33      	bgt.n	800597c <_printf_float+0x394>
 8005914:	f04f 0800 	mov.w	r8, #0
 8005918:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800591c:	f104 0a1a 	add.w	sl, r4, #26
 8005920:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005922:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005924:	1a9b      	subs	r3, r3, r2
 8005926:	eba3 0309 	sub.w	r3, r3, r9
 800592a:	4598      	cmp	r8, r3
 800592c:	f6bf af70 	bge.w	8005810 <_printf_float+0x228>
 8005930:	2301      	movs	r3, #1
 8005932:	4652      	mov	r2, sl
 8005934:	4631      	mov	r1, r6
 8005936:	4628      	mov	r0, r5
 8005938:	47b8      	blx	r7
 800593a:	3001      	adds	r0, #1
 800593c:	f43f aea3 	beq.w	8005686 <_printf_float+0x9e>
 8005940:	f108 0801 	add.w	r8, r8, #1
 8005944:	e7ec      	b.n	8005920 <_printf_float+0x338>
 8005946:	4613      	mov	r3, r2
 8005948:	4631      	mov	r1, r6
 800594a:	4642      	mov	r2, r8
 800594c:	4628      	mov	r0, r5
 800594e:	47b8      	blx	r7
 8005950:	3001      	adds	r0, #1
 8005952:	d1bf      	bne.n	80058d4 <_printf_float+0x2ec>
 8005954:	e697      	b.n	8005686 <_printf_float+0x9e>
 8005956:	2301      	movs	r3, #1
 8005958:	9a07      	ldr	r2, [sp, #28]
 800595a:	4631      	mov	r1, r6
 800595c:	4628      	mov	r0, r5
 800595e:	47b8      	blx	r7
 8005960:	3001      	adds	r0, #1
 8005962:	f43f ae90 	beq.w	8005686 <_printf_float+0x9e>
 8005966:	f10a 0a01 	add.w	sl, sl, #1
 800596a:	e7ba      	b.n	80058e2 <_printf_float+0x2fa>
 800596c:	9b05      	ldr	r3, [sp, #20]
 800596e:	465a      	mov	r2, fp
 8005970:	4631      	mov	r1, r6
 8005972:	4628      	mov	r0, r5
 8005974:	47b8      	blx	r7
 8005976:	3001      	adds	r0, #1
 8005978:	d1c0      	bne.n	80058fc <_printf_float+0x314>
 800597a:	e684      	b.n	8005686 <_printf_float+0x9e>
 800597c:	9a06      	ldr	r2, [sp, #24]
 800597e:	464b      	mov	r3, r9
 8005980:	4442      	add	r2, r8
 8005982:	4631      	mov	r1, r6
 8005984:	4628      	mov	r0, r5
 8005986:	47b8      	blx	r7
 8005988:	3001      	adds	r0, #1
 800598a:	d1c3      	bne.n	8005914 <_printf_float+0x32c>
 800598c:	e67b      	b.n	8005686 <_printf_float+0x9e>
 800598e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005990:	2a01      	cmp	r2, #1
 8005992:	dc01      	bgt.n	8005998 <_printf_float+0x3b0>
 8005994:	07db      	lsls	r3, r3, #31
 8005996:	d537      	bpl.n	8005a08 <_printf_float+0x420>
 8005998:	2301      	movs	r3, #1
 800599a:	4642      	mov	r2, r8
 800599c:	4631      	mov	r1, r6
 800599e:	4628      	mov	r0, r5
 80059a0:	47b8      	blx	r7
 80059a2:	3001      	adds	r0, #1
 80059a4:	f43f ae6f 	beq.w	8005686 <_printf_float+0x9e>
 80059a8:	9b05      	ldr	r3, [sp, #20]
 80059aa:	465a      	mov	r2, fp
 80059ac:	4631      	mov	r1, r6
 80059ae:	4628      	mov	r0, r5
 80059b0:	47b8      	blx	r7
 80059b2:	3001      	adds	r0, #1
 80059b4:	f43f ae67 	beq.w	8005686 <_printf_float+0x9e>
 80059b8:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80059bc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80059c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059c4:	d10b      	bne.n	80059de <_printf_float+0x3f6>
 80059c6:	f04f 0800 	mov.w	r8, #0
 80059ca:	f104 091a 	add.w	r9, r4, #26
 80059ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059d0:	3b01      	subs	r3, #1
 80059d2:	4598      	cmp	r8, r3
 80059d4:	db0d      	blt.n	80059f2 <_printf_float+0x40a>
 80059d6:	4653      	mov	r3, sl
 80059d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80059dc:	e6e8      	b.n	80057b0 <_printf_float+0x1c8>
 80059de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059e0:	f108 0201 	add.w	r2, r8, #1
 80059e4:	3b01      	subs	r3, #1
 80059e6:	4631      	mov	r1, r6
 80059e8:	4628      	mov	r0, r5
 80059ea:	47b8      	blx	r7
 80059ec:	3001      	adds	r0, #1
 80059ee:	d1f2      	bne.n	80059d6 <_printf_float+0x3ee>
 80059f0:	e649      	b.n	8005686 <_printf_float+0x9e>
 80059f2:	2301      	movs	r3, #1
 80059f4:	464a      	mov	r2, r9
 80059f6:	4631      	mov	r1, r6
 80059f8:	4628      	mov	r0, r5
 80059fa:	47b8      	blx	r7
 80059fc:	3001      	adds	r0, #1
 80059fe:	f43f ae42 	beq.w	8005686 <_printf_float+0x9e>
 8005a02:	f108 0801 	add.w	r8, r8, #1
 8005a06:	e7e2      	b.n	80059ce <_printf_float+0x3e6>
 8005a08:	2301      	movs	r3, #1
 8005a0a:	4642      	mov	r2, r8
 8005a0c:	e7eb      	b.n	80059e6 <_printf_float+0x3fe>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	464a      	mov	r2, r9
 8005a12:	4631      	mov	r1, r6
 8005a14:	4628      	mov	r0, r5
 8005a16:	47b8      	blx	r7
 8005a18:	3001      	adds	r0, #1
 8005a1a:	f43f ae34 	beq.w	8005686 <_printf_float+0x9e>
 8005a1e:	f108 0801 	add.w	r8, r8, #1
 8005a22:	e6fc      	b.n	800581e <_printf_float+0x236>
 8005a24:	eeb4 0b40 	vcmp.f64	d0, d0
 8005a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a2c:	f5ff ae30 	bvc.w	8005690 <_printf_float+0xa8>
 8005a30:	4b01      	ldr	r3, [pc, #4]	; (8005a38 <_printf_float+0x450>)
 8005a32:	4902      	ldr	r1, [pc, #8]	; (8005a3c <_printf_float+0x454>)
 8005a34:	e611      	b.n	800565a <_printf_float+0x72>
 8005a36:	bf00      	nop
 8005a38:	08007d84 	.word	0x08007d84
 8005a3c:	08007d88 	.word	0x08007d88

08005a40 <_printf_common>:
 8005a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a44:	4691      	mov	r9, r2
 8005a46:	461f      	mov	r7, r3
 8005a48:	688a      	ldr	r2, [r1, #8]
 8005a4a:	690b      	ldr	r3, [r1, #16]
 8005a4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a50:	4293      	cmp	r3, r2
 8005a52:	bfb8      	it	lt
 8005a54:	4613      	movlt	r3, r2
 8005a56:	f8c9 3000 	str.w	r3, [r9]
 8005a5a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a5e:	4606      	mov	r6, r0
 8005a60:	460c      	mov	r4, r1
 8005a62:	b112      	cbz	r2, 8005a6a <_printf_common+0x2a>
 8005a64:	3301      	adds	r3, #1
 8005a66:	f8c9 3000 	str.w	r3, [r9]
 8005a6a:	6823      	ldr	r3, [r4, #0]
 8005a6c:	0699      	lsls	r1, r3, #26
 8005a6e:	bf42      	ittt	mi
 8005a70:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005a74:	3302      	addmi	r3, #2
 8005a76:	f8c9 3000 	strmi.w	r3, [r9]
 8005a7a:	6825      	ldr	r5, [r4, #0]
 8005a7c:	f015 0506 	ands.w	r5, r5, #6
 8005a80:	d107      	bne.n	8005a92 <_printf_common+0x52>
 8005a82:	f104 0a19 	add.w	sl, r4, #25
 8005a86:	68e3      	ldr	r3, [r4, #12]
 8005a88:	f8d9 2000 	ldr.w	r2, [r9]
 8005a8c:	1a9b      	subs	r3, r3, r2
 8005a8e:	429d      	cmp	r5, r3
 8005a90:	db29      	blt.n	8005ae6 <_printf_common+0xa6>
 8005a92:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005a96:	6822      	ldr	r2, [r4, #0]
 8005a98:	3300      	adds	r3, #0
 8005a9a:	bf18      	it	ne
 8005a9c:	2301      	movne	r3, #1
 8005a9e:	0692      	lsls	r2, r2, #26
 8005aa0:	d42e      	bmi.n	8005b00 <_printf_common+0xc0>
 8005aa2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005aa6:	4639      	mov	r1, r7
 8005aa8:	4630      	mov	r0, r6
 8005aaa:	47c0      	blx	r8
 8005aac:	3001      	adds	r0, #1
 8005aae:	d021      	beq.n	8005af4 <_printf_common+0xb4>
 8005ab0:	6823      	ldr	r3, [r4, #0]
 8005ab2:	68e5      	ldr	r5, [r4, #12]
 8005ab4:	f8d9 2000 	ldr.w	r2, [r9]
 8005ab8:	f003 0306 	and.w	r3, r3, #6
 8005abc:	2b04      	cmp	r3, #4
 8005abe:	bf08      	it	eq
 8005ac0:	1aad      	subeq	r5, r5, r2
 8005ac2:	68a3      	ldr	r3, [r4, #8]
 8005ac4:	6922      	ldr	r2, [r4, #16]
 8005ac6:	bf0c      	ite	eq
 8005ac8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005acc:	2500      	movne	r5, #0
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	bfc4      	itt	gt
 8005ad2:	1a9b      	subgt	r3, r3, r2
 8005ad4:	18ed      	addgt	r5, r5, r3
 8005ad6:	f04f 0900 	mov.w	r9, #0
 8005ada:	341a      	adds	r4, #26
 8005adc:	454d      	cmp	r5, r9
 8005ade:	d11b      	bne.n	8005b18 <_printf_common+0xd8>
 8005ae0:	2000      	movs	r0, #0
 8005ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	4652      	mov	r2, sl
 8005aea:	4639      	mov	r1, r7
 8005aec:	4630      	mov	r0, r6
 8005aee:	47c0      	blx	r8
 8005af0:	3001      	adds	r0, #1
 8005af2:	d103      	bne.n	8005afc <_printf_common+0xbc>
 8005af4:	f04f 30ff 	mov.w	r0, #4294967295
 8005af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005afc:	3501      	adds	r5, #1
 8005afe:	e7c2      	b.n	8005a86 <_printf_common+0x46>
 8005b00:	18e1      	adds	r1, r4, r3
 8005b02:	1c5a      	adds	r2, r3, #1
 8005b04:	2030      	movs	r0, #48	; 0x30
 8005b06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b0a:	4422      	add	r2, r4
 8005b0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b14:	3302      	adds	r3, #2
 8005b16:	e7c4      	b.n	8005aa2 <_printf_common+0x62>
 8005b18:	2301      	movs	r3, #1
 8005b1a:	4622      	mov	r2, r4
 8005b1c:	4639      	mov	r1, r7
 8005b1e:	4630      	mov	r0, r6
 8005b20:	47c0      	blx	r8
 8005b22:	3001      	adds	r0, #1
 8005b24:	d0e6      	beq.n	8005af4 <_printf_common+0xb4>
 8005b26:	f109 0901 	add.w	r9, r9, #1
 8005b2a:	e7d7      	b.n	8005adc <_printf_common+0x9c>

08005b2c <_printf_i>:
 8005b2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b30:	4617      	mov	r7, r2
 8005b32:	7e0a      	ldrb	r2, [r1, #24]
 8005b34:	b085      	sub	sp, #20
 8005b36:	2a6e      	cmp	r2, #110	; 0x6e
 8005b38:	4698      	mov	r8, r3
 8005b3a:	4606      	mov	r6, r0
 8005b3c:	460c      	mov	r4, r1
 8005b3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b40:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8005b44:	f000 80bc 	beq.w	8005cc0 <_printf_i+0x194>
 8005b48:	d81a      	bhi.n	8005b80 <_printf_i+0x54>
 8005b4a:	2a63      	cmp	r2, #99	; 0x63
 8005b4c:	d02e      	beq.n	8005bac <_printf_i+0x80>
 8005b4e:	d80a      	bhi.n	8005b66 <_printf_i+0x3a>
 8005b50:	2a00      	cmp	r2, #0
 8005b52:	f000 80c8 	beq.w	8005ce6 <_printf_i+0x1ba>
 8005b56:	2a58      	cmp	r2, #88	; 0x58
 8005b58:	f000 808a 	beq.w	8005c70 <_printf_i+0x144>
 8005b5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b60:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8005b64:	e02a      	b.n	8005bbc <_printf_i+0x90>
 8005b66:	2a64      	cmp	r2, #100	; 0x64
 8005b68:	d001      	beq.n	8005b6e <_printf_i+0x42>
 8005b6a:	2a69      	cmp	r2, #105	; 0x69
 8005b6c:	d1f6      	bne.n	8005b5c <_printf_i+0x30>
 8005b6e:	6821      	ldr	r1, [r4, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005b76:	d023      	beq.n	8005bc0 <_printf_i+0x94>
 8005b78:	1d11      	adds	r1, r2, #4
 8005b7a:	6019      	str	r1, [r3, #0]
 8005b7c:	6813      	ldr	r3, [r2, #0]
 8005b7e:	e027      	b.n	8005bd0 <_printf_i+0xa4>
 8005b80:	2a73      	cmp	r2, #115	; 0x73
 8005b82:	f000 80b4 	beq.w	8005cee <_printf_i+0x1c2>
 8005b86:	d808      	bhi.n	8005b9a <_printf_i+0x6e>
 8005b88:	2a6f      	cmp	r2, #111	; 0x6f
 8005b8a:	d02a      	beq.n	8005be2 <_printf_i+0xb6>
 8005b8c:	2a70      	cmp	r2, #112	; 0x70
 8005b8e:	d1e5      	bne.n	8005b5c <_printf_i+0x30>
 8005b90:	680a      	ldr	r2, [r1, #0]
 8005b92:	f042 0220 	orr.w	r2, r2, #32
 8005b96:	600a      	str	r2, [r1, #0]
 8005b98:	e003      	b.n	8005ba2 <_printf_i+0x76>
 8005b9a:	2a75      	cmp	r2, #117	; 0x75
 8005b9c:	d021      	beq.n	8005be2 <_printf_i+0xb6>
 8005b9e:	2a78      	cmp	r2, #120	; 0x78
 8005ba0:	d1dc      	bne.n	8005b5c <_printf_i+0x30>
 8005ba2:	2278      	movs	r2, #120	; 0x78
 8005ba4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8005ba8:	496e      	ldr	r1, [pc, #440]	; (8005d64 <_printf_i+0x238>)
 8005baa:	e064      	b.n	8005c76 <_printf_i+0x14a>
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8005bb2:	1d11      	adds	r1, r2, #4
 8005bb4:	6019      	str	r1, [r3, #0]
 8005bb6:	6813      	ldr	r3, [r2, #0]
 8005bb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e0a3      	b.n	8005d08 <_printf_i+0x1dc>
 8005bc0:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005bc4:	f102 0104 	add.w	r1, r2, #4
 8005bc8:	6019      	str	r1, [r3, #0]
 8005bca:	d0d7      	beq.n	8005b7c <_printf_i+0x50>
 8005bcc:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	da03      	bge.n	8005bdc <_printf_i+0xb0>
 8005bd4:	222d      	movs	r2, #45	; 0x2d
 8005bd6:	425b      	negs	r3, r3
 8005bd8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005bdc:	4962      	ldr	r1, [pc, #392]	; (8005d68 <_printf_i+0x23c>)
 8005bde:	220a      	movs	r2, #10
 8005be0:	e017      	b.n	8005c12 <_printf_i+0xe6>
 8005be2:	6820      	ldr	r0, [r4, #0]
 8005be4:	6819      	ldr	r1, [r3, #0]
 8005be6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005bea:	d003      	beq.n	8005bf4 <_printf_i+0xc8>
 8005bec:	1d08      	adds	r0, r1, #4
 8005bee:	6018      	str	r0, [r3, #0]
 8005bf0:	680b      	ldr	r3, [r1, #0]
 8005bf2:	e006      	b.n	8005c02 <_printf_i+0xd6>
 8005bf4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005bf8:	f101 0004 	add.w	r0, r1, #4
 8005bfc:	6018      	str	r0, [r3, #0]
 8005bfe:	d0f7      	beq.n	8005bf0 <_printf_i+0xc4>
 8005c00:	880b      	ldrh	r3, [r1, #0]
 8005c02:	4959      	ldr	r1, [pc, #356]	; (8005d68 <_printf_i+0x23c>)
 8005c04:	2a6f      	cmp	r2, #111	; 0x6f
 8005c06:	bf14      	ite	ne
 8005c08:	220a      	movne	r2, #10
 8005c0a:	2208      	moveq	r2, #8
 8005c0c:	2000      	movs	r0, #0
 8005c0e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8005c12:	6865      	ldr	r5, [r4, #4]
 8005c14:	60a5      	str	r5, [r4, #8]
 8005c16:	2d00      	cmp	r5, #0
 8005c18:	f2c0 809c 	blt.w	8005d54 <_printf_i+0x228>
 8005c1c:	6820      	ldr	r0, [r4, #0]
 8005c1e:	f020 0004 	bic.w	r0, r0, #4
 8005c22:	6020      	str	r0, [r4, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d13f      	bne.n	8005ca8 <_printf_i+0x17c>
 8005c28:	2d00      	cmp	r5, #0
 8005c2a:	f040 8095 	bne.w	8005d58 <_printf_i+0x22c>
 8005c2e:	4675      	mov	r5, lr
 8005c30:	2a08      	cmp	r2, #8
 8005c32:	d10b      	bne.n	8005c4c <_printf_i+0x120>
 8005c34:	6823      	ldr	r3, [r4, #0]
 8005c36:	07da      	lsls	r2, r3, #31
 8005c38:	d508      	bpl.n	8005c4c <_printf_i+0x120>
 8005c3a:	6923      	ldr	r3, [r4, #16]
 8005c3c:	6862      	ldr	r2, [r4, #4]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	bfde      	ittt	le
 8005c42:	2330      	movle	r3, #48	; 0x30
 8005c44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c48:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c4c:	ebae 0305 	sub.w	r3, lr, r5
 8005c50:	6123      	str	r3, [r4, #16]
 8005c52:	f8cd 8000 	str.w	r8, [sp]
 8005c56:	463b      	mov	r3, r7
 8005c58:	aa03      	add	r2, sp, #12
 8005c5a:	4621      	mov	r1, r4
 8005c5c:	4630      	mov	r0, r6
 8005c5e:	f7ff feef 	bl	8005a40 <_printf_common>
 8005c62:	3001      	adds	r0, #1
 8005c64:	d155      	bne.n	8005d12 <_printf_i+0x1e6>
 8005c66:	f04f 30ff 	mov.w	r0, #4294967295
 8005c6a:	b005      	add	sp, #20
 8005c6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c70:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005c74:	493c      	ldr	r1, [pc, #240]	; (8005d68 <_printf_i+0x23c>)
 8005c76:	6822      	ldr	r2, [r4, #0]
 8005c78:	6818      	ldr	r0, [r3, #0]
 8005c7a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005c7e:	f100 0504 	add.w	r5, r0, #4
 8005c82:	601d      	str	r5, [r3, #0]
 8005c84:	d001      	beq.n	8005c8a <_printf_i+0x15e>
 8005c86:	6803      	ldr	r3, [r0, #0]
 8005c88:	e002      	b.n	8005c90 <_printf_i+0x164>
 8005c8a:	0655      	lsls	r5, r2, #25
 8005c8c:	d5fb      	bpl.n	8005c86 <_printf_i+0x15a>
 8005c8e:	8803      	ldrh	r3, [r0, #0]
 8005c90:	07d0      	lsls	r0, r2, #31
 8005c92:	bf44      	itt	mi
 8005c94:	f042 0220 	orrmi.w	r2, r2, #32
 8005c98:	6022      	strmi	r2, [r4, #0]
 8005c9a:	b91b      	cbnz	r3, 8005ca4 <_printf_i+0x178>
 8005c9c:	6822      	ldr	r2, [r4, #0]
 8005c9e:	f022 0220 	bic.w	r2, r2, #32
 8005ca2:	6022      	str	r2, [r4, #0]
 8005ca4:	2210      	movs	r2, #16
 8005ca6:	e7b1      	b.n	8005c0c <_printf_i+0xe0>
 8005ca8:	4675      	mov	r5, lr
 8005caa:	fbb3 f0f2 	udiv	r0, r3, r2
 8005cae:	fb02 3310 	mls	r3, r2, r0, r3
 8005cb2:	5ccb      	ldrb	r3, [r1, r3]
 8005cb4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2800      	cmp	r0, #0
 8005cbc:	d1f5      	bne.n	8005caa <_printf_i+0x17e>
 8005cbe:	e7b7      	b.n	8005c30 <_printf_i+0x104>
 8005cc0:	6808      	ldr	r0, [r1, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	6949      	ldr	r1, [r1, #20]
 8005cc6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005cca:	d004      	beq.n	8005cd6 <_printf_i+0x1aa>
 8005ccc:	1d10      	adds	r0, r2, #4
 8005cce:	6018      	str	r0, [r3, #0]
 8005cd0:	6813      	ldr	r3, [r2, #0]
 8005cd2:	6019      	str	r1, [r3, #0]
 8005cd4:	e007      	b.n	8005ce6 <_printf_i+0x1ba>
 8005cd6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005cda:	f102 0004 	add.w	r0, r2, #4
 8005cde:	6018      	str	r0, [r3, #0]
 8005ce0:	6813      	ldr	r3, [r2, #0]
 8005ce2:	d0f6      	beq.n	8005cd2 <_printf_i+0x1a6>
 8005ce4:	8019      	strh	r1, [r3, #0]
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	6123      	str	r3, [r4, #16]
 8005cea:	4675      	mov	r5, lr
 8005cec:	e7b1      	b.n	8005c52 <_printf_i+0x126>
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	1d11      	adds	r1, r2, #4
 8005cf2:	6019      	str	r1, [r3, #0]
 8005cf4:	6815      	ldr	r5, [r2, #0]
 8005cf6:	6862      	ldr	r2, [r4, #4]
 8005cf8:	2100      	movs	r1, #0
 8005cfa:	4628      	mov	r0, r5
 8005cfc:	f7fa faa0 	bl	8000240 <memchr>
 8005d00:	b108      	cbz	r0, 8005d06 <_printf_i+0x1da>
 8005d02:	1b40      	subs	r0, r0, r5
 8005d04:	6060      	str	r0, [r4, #4]
 8005d06:	6863      	ldr	r3, [r4, #4]
 8005d08:	6123      	str	r3, [r4, #16]
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d10:	e79f      	b.n	8005c52 <_printf_i+0x126>
 8005d12:	6923      	ldr	r3, [r4, #16]
 8005d14:	462a      	mov	r2, r5
 8005d16:	4639      	mov	r1, r7
 8005d18:	4630      	mov	r0, r6
 8005d1a:	47c0      	blx	r8
 8005d1c:	3001      	adds	r0, #1
 8005d1e:	d0a2      	beq.n	8005c66 <_printf_i+0x13a>
 8005d20:	6823      	ldr	r3, [r4, #0]
 8005d22:	079b      	lsls	r3, r3, #30
 8005d24:	d507      	bpl.n	8005d36 <_printf_i+0x20a>
 8005d26:	2500      	movs	r5, #0
 8005d28:	f104 0919 	add.w	r9, r4, #25
 8005d2c:	68e3      	ldr	r3, [r4, #12]
 8005d2e:	9a03      	ldr	r2, [sp, #12]
 8005d30:	1a9b      	subs	r3, r3, r2
 8005d32:	429d      	cmp	r5, r3
 8005d34:	db05      	blt.n	8005d42 <_printf_i+0x216>
 8005d36:	68e0      	ldr	r0, [r4, #12]
 8005d38:	9b03      	ldr	r3, [sp, #12]
 8005d3a:	4298      	cmp	r0, r3
 8005d3c:	bfb8      	it	lt
 8005d3e:	4618      	movlt	r0, r3
 8005d40:	e793      	b.n	8005c6a <_printf_i+0x13e>
 8005d42:	2301      	movs	r3, #1
 8005d44:	464a      	mov	r2, r9
 8005d46:	4639      	mov	r1, r7
 8005d48:	4630      	mov	r0, r6
 8005d4a:	47c0      	blx	r8
 8005d4c:	3001      	adds	r0, #1
 8005d4e:	d08a      	beq.n	8005c66 <_printf_i+0x13a>
 8005d50:	3501      	adds	r5, #1
 8005d52:	e7eb      	b.n	8005d2c <_printf_i+0x200>
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1a7      	bne.n	8005ca8 <_printf_i+0x17c>
 8005d58:	780b      	ldrb	r3, [r1, #0]
 8005d5a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d5e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d62:	e765      	b.n	8005c30 <_printf_i+0x104>
 8005d64:	08007d9f 	.word	0x08007d9f
 8005d68:	08007d8e 	.word	0x08007d8e

08005d6c <iprintf>:
 8005d6c:	b40f      	push	{r0, r1, r2, r3}
 8005d6e:	4b0a      	ldr	r3, [pc, #40]	; (8005d98 <iprintf+0x2c>)
 8005d70:	b513      	push	{r0, r1, r4, lr}
 8005d72:	681c      	ldr	r4, [r3, #0]
 8005d74:	b124      	cbz	r4, 8005d80 <iprintf+0x14>
 8005d76:	69a3      	ldr	r3, [r4, #24]
 8005d78:	b913      	cbnz	r3, 8005d80 <iprintf+0x14>
 8005d7a:	4620      	mov	r0, r4
 8005d7c:	f7ff fa3c 	bl	80051f8 <__sinit>
 8005d80:	ab05      	add	r3, sp, #20
 8005d82:	9a04      	ldr	r2, [sp, #16]
 8005d84:	68a1      	ldr	r1, [r4, #8]
 8005d86:	9301      	str	r3, [sp, #4]
 8005d88:	4620      	mov	r0, r4
 8005d8a:	f001 fd6d 	bl	8007868 <_vfiprintf_r>
 8005d8e:	b002      	add	sp, #8
 8005d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d94:	b004      	add	sp, #16
 8005d96:	4770      	bx	lr
 8005d98:	20000170 	.word	0x20000170

08005d9c <_puts_r>:
 8005d9c:	b570      	push	{r4, r5, r6, lr}
 8005d9e:	460e      	mov	r6, r1
 8005da0:	4605      	mov	r5, r0
 8005da2:	b118      	cbz	r0, 8005dac <_puts_r+0x10>
 8005da4:	6983      	ldr	r3, [r0, #24]
 8005da6:	b90b      	cbnz	r3, 8005dac <_puts_r+0x10>
 8005da8:	f7ff fa26 	bl	80051f8 <__sinit>
 8005dac:	69ab      	ldr	r3, [r5, #24]
 8005dae:	68ac      	ldr	r4, [r5, #8]
 8005db0:	b913      	cbnz	r3, 8005db8 <_puts_r+0x1c>
 8005db2:	4628      	mov	r0, r5
 8005db4:	f7ff fa20 	bl	80051f8 <__sinit>
 8005db8:	4b23      	ldr	r3, [pc, #140]	; (8005e48 <_puts_r+0xac>)
 8005dba:	429c      	cmp	r4, r3
 8005dbc:	d117      	bne.n	8005dee <_puts_r+0x52>
 8005dbe:	686c      	ldr	r4, [r5, #4]
 8005dc0:	89a3      	ldrh	r3, [r4, #12]
 8005dc2:	071b      	lsls	r3, r3, #28
 8005dc4:	d51d      	bpl.n	8005e02 <_puts_r+0x66>
 8005dc6:	6923      	ldr	r3, [r4, #16]
 8005dc8:	b1db      	cbz	r3, 8005e02 <_puts_r+0x66>
 8005dca:	3e01      	subs	r6, #1
 8005dcc:	68a3      	ldr	r3, [r4, #8]
 8005dce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	60a3      	str	r3, [r4, #8]
 8005dd6:	b9e9      	cbnz	r1, 8005e14 <_puts_r+0x78>
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	da2e      	bge.n	8005e3a <_puts_r+0x9e>
 8005ddc:	4622      	mov	r2, r4
 8005dde:	210a      	movs	r1, #10
 8005de0:	4628      	mov	r0, r5
 8005de2:	f000 f96d 	bl	80060c0 <__swbuf_r>
 8005de6:	3001      	adds	r0, #1
 8005de8:	d011      	beq.n	8005e0e <_puts_r+0x72>
 8005dea:	200a      	movs	r0, #10
 8005dec:	bd70      	pop	{r4, r5, r6, pc}
 8005dee:	4b17      	ldr	r3, [pc, #92]	; (8005e4c <_puts_r+0xb0>)
 8005df0:	429c      	cmp	r4, r3
 8005df2:	d101      	bne.n	8005df8 <_puts_r+0x5c>
 8005df4:	68ac      	ldr	r4, [r5, #8]
 8005df6:	e7e3      	b.n	8005dc0 <_puts_r+0x24>
 8005df8:	4b15      	ldr	r3, [pc, #84]	; (8005e50 <_puts_r+0xb4>)
 8005dfa:	429c      	cmp	r4, r3
 8005dfc:	bf08      	it	eq
 8005dfe:	68ec      	ldreq	r4, [r5, #12]
 8005e00:	e7de      	b.n	8005dc0 <_puts_r+0x24>
 8005e02:	4621      	mov	r1, r4
 8005e04:	4628      	mov	r0, r5
 8005e06:	f000 f9bf 	bl	8006188 <__swsetup_r>
 8005e0a:	2800      	cmp	r0, #0
 8005e0c:	d0dd      	beq.n	8005dca <_puts_r+0x2e>
 8005e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8005e12:	bd70      	pop	{r4, r5, r6, pc}
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	da04      	bge.n	8005e22 <_puts_r+0x86>
 8005e18:	69a2      	ldr	r2, [r4, #24]
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	db06      	blt.n	8005e2c <_puts_r+0x90>
 8005e1e:	290a      	cmp	r1, #10
 8005e20:	d004      	beq.n	8005e2c <_puts_r+0x90>
 8005e22:	6823      	ldr	r3, [r4, #0]
 8005e24:	1c5a      	adds	r2, r3, #1
 8005e26:	6022      	str	r2, [r4, #0]
 8005e28:	7019      	strb	r1, [r3, #0]
 8005e2a:	e7cf      	b.n	8005dcc <_puts_r+0x30>
 8005e2c:	4622      	mov	r2, r4
 8005e2e:	4628      	mov	r0, r5
 8005e30:	f000 f946 	bl	80060c0 <__swbuf_r>
 8005e34:	3001      	adds	r0, #1
 8005e36:	d1c9      	bne.n	8005dcc <_puts_r+0x30>
 8005e38:	e7e9      	b.n	8005e0e <_puts_r+0x72>
 8005e3a:	6823      	ldr	r3, [r4, #0]
 8005e3c:	200a      	movs	r0, #10
 8005e3e:	1c5a      	adds	r2, r3, #1
 8005e40:	6022      	str	r2, [r4, #0]
 8005e42:	7018      	strb	r0, [r3, #0]
 8005e44:	bd70      	pop	{r4, r5, r6, pc}
 8005e46:	bf00      	nop
 8005e48:	08007d38 	.word	0x08007d38
 8005e4c:	08007d58 	.word	0x08007d58
 8005e50:	08007d18 	.word	0x08007d18

08005e54 <puts>:
 8005e54:	4b02      	ldr	r3, [pc, #8]	; (8005e60 <puts+0xc>)
 8005e56:	4601      	mov	r1, r0
 8005e58:	6818      	ldr	r0, [r3, #0]
 8005e5a:	f7ff bf9f 	b.w	8005d9c <_puts_r>
 8005e5e:	bf00      	nop
 8005e60:	20000170 	.word	0x20000170

08005e64 <_sbrk_r>:
 8005e64:	b538      	push	{r3, r4, r5, lr}
 8005e66:	4c06      	ldr	r4, [pc, #24]	; (8005e80 <_sbrk_r+0x1c>)
 8005e68:	2300      	movs	r3, #0
 8005e6a:	4605      	mov	r5, r0
 8005e6c:	4608      	mov	r0, r1
 8005e6e:	6023      	str	r3, [r4, #0]
 8005e70:	f7fe fb5e 	bl	8004530 <_sbrk>
 8005e74:	1c43      	adds	r3, r0, #1
 8005e76:	d102      	bne.n	8005e7e <_sbrk_r+0x1a>
 8005e78:	6823      	ldr	r3, [r4, #0]
 8005e7a:	b103      	cbz	r3, 8005e7e <_sbrk_r+0x1a>
 8005e7c:	602b      	str	r3, [r5, #0]
 8005e7e:	bd38      	pop	{r3, r4, r5, pc}
 8005e80:	20001bd8 	.word	0x20001bd8

08005e84 <setvbuf>:
 8005e84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005e88:	461d      	mov	r5, r3
 8005e8a:	4b51      	ldr	r3, [pc, #324]	; (8005fd0 <setvbuf+0x14c>)
 8005e8c:	681e      	ldr	r6, [r3, #0]
 8005e8e:	4604      	mov	r4, r0
 8005e90:	460f      	mov	r7, r1
 8005e92:	4690      	mov	r8, r2
 8005e94:	b126      	cbz	r6, 8005ea0 <setvbuf+0x1c>
 8005e96:	69b3      	ldr	r3, [r6, #24]
 8005e98:	b913      	cbnz	r3, 8005ea0 <setvbuf+0x1c>
 8005e9a:	4630      	mov	r0, r6
 8005e9c:	f7ff f9ac 	bl	80051f8 <__sinit>
 8005ea0:	4b4c      	ldr	r3, [pc, #304]	; (8005fd4 <setvbuf+0x150>)
 8005ea2:	429c      	cmp	r4, r3
 8005ea4:	d152      	bne.n	8005f4c <setvbuf+0xc8>
 8005ea6:	6874      	ldr	r4, [r6, #4]
 8005ea8:	f1b8 0f02 	cmp.w	r8, #2
 8005eac:	d006      	beq.n	8005ebc <setvbuf+0x38>
 8005eae:	f1b8 0f01 	cmp.w	r8, #1
 8005eb2:	f200 8089 	bhi.w	8005fc8 <setvbuf+0x144>
 8005eb6:	2d00      	cmp	r5, #0
 8005eb8:	f2c0 8086 	blt.w	8005fc8 <setvbuf+0x144>
 8005ebc:	4621      	mov	r1, r4
 8005ebe:	4630      	mov	r0, r6
 8005ec0:	f7ff f930 	bl	8005124 <_fflush_r>
 8005ec4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ec6:	b141      	cbz	r1, 8005eda <setvbuf+0x56>
 8005ec8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ecc:	4299      	cmp	r1, r3
 8005ece:	d002      	beq.n	8005ed6 <setvbuf+0x52>
 8005ed0:	4630      	mov	r0, r6
 8005ed2:	f7ff fa53 	bl	800537c <_free_r>
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	6363      	str	r3, [r4, #52]	; 0x34
 8005eda:	2300      	movs	r3, #0
 8005edc:	61a3      	str	r3, [r4, #24]
 8005ede:	6063      	str	r3, [r4, #4]
 8005ee0:	89a3      	ldrh	r3, [r4, #12]
 8005ee2:	061b      	lsls	r3, r3, #24
 8005ee4:	d503      	bpl.n	8005eee <setvbuf+0x6a>
 8005ee6:	6921      	ldr	r1, [r4, #16]
 8005ee8:	4630      	mov	r0, r6
 8005eea:	f7ff fa47 	bl	800537c <_free_r>
 8005eee:	89a3      	ldrh	r3, [r4, #12]
 8005ef0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005ef4:	f023 0303 	bic.w	r3, r3, #3
 8005ef8:	f1b8 0f02 	cmp.w	r8, #2
 8005efc:	81a3      	strh	r3, [r4, #12]
 8005efe:	d05d      	beq.n	8005fbc <setvbuf+0x138>
 8005f00:	ab01      	add	r3, sp, #4
 8005f02:	466a      	mov	r2, sp
 8005f04:	4621      	mov	r1, r4
 8005f06:	4630      	mov	r0, r6
 8005f08:	f000 ffd6 	bl	8006eb8 <__swhatbuf_r>
 8005f0c:	89a3      	ldrh	r3, [r4, #12]
 8005f0e:	4318      	orrs	r0, r3
 8005f10:	81a0      	strh	r0, [r4, #12]
 8005f12:	bb2d      	cbnz	r5, 8005f60 <setvbuf+0xdc>
 8005f14:	9d00      	ldr	r5, [sp, #0]
 8005f16:	4628      	mov	r0, r5
 8005f18:	f001 f832 	bl	8006f80 <malloc>
 8005f1c:	4607      	mov	r7, r0
 8005f1e:	2800      	cmp	r0, #0
 8005f20:	d14e      	bne.n	8005fc0 <setvbuf+0x13c>
 8005f22:	f8dd 9000 	ldr.w	r9, [sp]
 8005f26:	45a9      	cmp	r9, r5
 8005f28:	d13c      	bne.n	8005fa4 <setvbuf+0x120>
 8005f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f2e:	89a3      	ldrh	r3, [r4, #12]
 8005f30:	f043 0302 	orr.w	r3, r3, #2
 8005f34:	81a3      	strh	r3, [r4, #12]
 8005f36:	2300      	movs	r3, #0
 8005f38:	60a3      	str	r3, [r4, #8]
 8005f3a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f3e:	6023      	str	r3, [r4, #0]
 8005f40:	6123      	str	r3, [r4, #16]
 8005f42:	2301      	movs	r3, #1
 8005f44:	6163      	str	r3, [r4, #20]
 8005f46:	b003      	add	sp, #12
 8005f48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f4c:	4b22      	ldr	r3, [pc, #136]	; (8005fd8 <setvbuf+0x154>)
 8005f4e:	429c      	cmp	r4, r3
 8005f50:	d101      	bne.n	8005f56 <setvbuf+0xd2>
 8005f52:	68b4      	ldr	r4, [r6, #8]
 8005f54:	e7a8      	b.n	8005ea8 <setvbuf+0x24>
 8005f56:	4b21      	ldr	r3, [pc, #132]	; (8005fdc <setvbuf+0x158>)
 8005f58:	429c      	cmp	r4, r3
 8005f5a:	bf08      	it	eq
 8005f5c:	68f4      	ldreq	r4, [r6, #12]
 8005f5e:	e7a3      	b.n	8005ea8 <setvbuf+0x24>
 8005f60:	2f00      	cmp	r7, #0
 8005f62:	d0d8      	beq.n	8005f16 <setvbuf+0x92>
 8005f64:	69b3      	ldr	r3, [r6, #24]
 8005f66:	b913      	cbnz	r3, 8005f6e <setvbuf+0xea>
 8005f68:	4630      	mov	r0, r6
 8005f6a:	f7ff f945 	bl	80051f8 <__sinit>
 8005f6e:	f1b8 0f01 	cmp.w	r8, #1
 8005f72:	bf08      	it	eq
 8005f74:	89a3      	ldrheq	r3, [r4, #12]
 8005f76:	6027      	str	r7, [r4, #0]
 8005f78:	bf04      	itt	eq
 8005f7a:	f043 0301 	orreq.w	r3, r3, #1
 8005f7e:	81a3      	strheq	r3, [r4, #12]
 8005f80:	89a3      	ldrh	r3, [r4, #12]
 8005f82:	6127      	str	r7, [r4, #16]
 8005f84:	f013 0008 	ands.w	r0, r3, #8
 8005f88:	6165      	str	r5, [r4, #20]
 8005f8a:	d01b      	beq.n	8005fc4 <setvbuf+0x140>
 8005f8c:	f013 0001 	ands.w	r0, r3, #1
 8005f90:	bf18      	it	ne
 8005f92:	426d      	negne	r5, r5
 8005f94:	f04f 0300 	mov.w	r3, #0
 8005f98:	bf1d      	ittte	ne
 8005f9a:	60a3      	strne	r3, [r4, #8]
 8005f9c:	61a5      	strne	r5, [r4, #24]
 8005f9e:	4618      	movne	r0, r3
 8005fa0:	60a5      	streq	r5, [r4, #8]
 8005fa2:	e7d0      	b.n	8005f46 <setvbuf+0xc2>
 8005fa4:	4648      	mov	r0, r9
 8005fa6:	f000 ffeb 	bl	8006f80 <malloc>
 8005faa:	4607      	mov	r7, r0
 8005fac:	2800      	cmp	r0, #0
 8005fae:	d0bc      	beq.n	8005f2a <setvbuf+0xa6>
 8005fb0:	89a3      	ldrh	r3, [r4, #12]
 8005fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fb6:	81a3      	strh	r3, [r4, #12]
 8005fb8:	464d      	mov	r5, r9
 8005fba:	e7d3      	b.n	8005f64 <setvbuf+0xe0>
 8005fbc:	2000      	movs	r0, #0
 8005fbe:	e7b6      	b.n	8005f2e <setvbuf+0xaa>
 8005fc0:	46a9      	mov	r9, r5
 8005fc2:	e7f5      	b.n	8005fb0 <setvbuf+0x12c>
 8005fc4:	60a0      	str	r0, [r4, #8]
 8005fc6:	e7be      	b.n	8005f46 <setvbuf+0xc2>
 8005fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fcc:	e7bb      	b.n	8005f46 <setvbuf+0xc2>
 8005fce:	bf00      	nop
 8005fd0:	20000170 	.word	0x20000170
 8005fd4:	08007d38 	.word	0x08007d38
 8005fd8:	08007d58 	.word	0x08007d58
 8005fdc:	08007d18 	.word	0x08007d18

08005fe0 <siprintf>:
 8005fe0:	b40e      	push	{r1, r2, r3}
 8005fe2:	b500      	push	{lr}
 8005fe4:	b09c      	sub	sp, #112	; 0x70
 8005fe6:	f44f 7102 	mov.w	r1, #520	; 0x208
 8005fea:	ab1d      	add	r3, sp, #116	; 0x74
 8005fec:	f8ad 1014 	strh.w	r1, [sp, #20]
 8005ff0:	9002      	str	r0, [sp, #8]
 8005ff2:	9006      	str	r0, [sp, #24]
 8005ff4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ff8:	480a      	ldr	r0, [pc, #40]	; (8006024 <siprintf+0x44>)
 8005ffa:	9104      	str	r1, [sp, #16]
 8005ffc:	9107      	str	r1, [sp, #28]
 8005ffe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006002:	f853 2b04 	ldr.w	r2, [r3], #4
 8006006:	f8ad 1016 	strh.w	r1, [sp, #22]
 800600a:	6800      	ldr	r0, [r0, #0]
 800600c:	9301      	str	r3, [sp, #4]
 800600e:	a902      	add	r1, sp, #8
 8006010:	f001 fb0c 	bl	800762c <_svfiprintf_r>
 8006014:	9b02      	ldr	r3, [sp, #8]
 8006016:	2200      	movs	r2, #0
 8006018:	701a      	strb	r2, [r3, #0]
 800601a:	b01c      	add	sp, #112	; 0x70
 800601c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006020:	b003      	add	sp, #12
 8006022:	4770      	bx	lr
 8006024:	20000170 	.word	0x20000170

08006028 <__sread>:
 8006028:	b510      	push	{r4, lr}
 800602a:	460c      	mov	r4, r1
 800602c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006030:	f001 fd30 	bl	8007a94 <_read_r>
 8006034:	2800      	cmp	r0, #0
 8006036:	bfab      	itete	ge
 8006038:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800603a:	89a3      	ldrhlt	r3, [r4, #12]
 800603c:	181b      	addge	r3, r3, r0
 800603e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006042:	bfac      	ite	ge
 8006044:	6563      	strge	r3, [r4, #84]	; 0x54
 8006046:	81a3      	strhlt	r3, [r4, #12]
 8006048:	bd10      	pop	{r4, pc}

0800604a <__swrite>:
 800604a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800604e:	461f      	mov	r7, r3
 8006050:	898b      	ldrh	r3, [r1, #12]
 8006052:	05db      	lsls	r3, r3, #23
 8006054:	4605      	mov	r5, r0
 8006056:	460c      	mov	r4, r1
 8006058:	4616      	mov	r6, r2
 800605a:	d505      	bpl.n	8006068 <__swrite+0x1e>
 800605c:	2302      	movs	r3, #2
 800605e:	2200      	movs	r2, #0
 8006060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006064:	f000 ff16 	bl	8006e94 <_lseek_r>
 8006068:	89a3      	ldrh	r3, [r4, #12]
 800606a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800606e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006072:	81a3      	strh	r3, [r4, #12]
 8006074:	4632      	mov	r2, r6
 8006076:	463b      	mov	r3, r7
 8006078:	4628      	mov	r0, r5
 800607a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800607e:	f000 b871 	b.w	8006164 <_write_r>

08006082 <__sseek>:
 8006082:	b510      	push	{r4, lr}
 8006084:	460c      	mov	r4, r1
 8006086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800608a:	f000 ff03 	bl	8006e94 <_lseek_r>
 800608e:	1c43      	adds	r3, r0, #1
 8006090:	89a3      	ldrh	r3, [r4, #12]
 8006092:	bf15      	itete	ne
 8006094:	6560      	strne	r0, [r4, #84]	; 0x54
 8006096:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800609a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800609e:	81a3      	strheq	r3, [r4, #12]
 80060a0:	bf18      	it	ne
 80060a2:	81a3      	strhne	r3, [r4, #12]
 80060a4:	bd10      	pop	{r4, pc}

080060a6 <__sclose>:
 80060a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060aa:	f000 b8db 	b.w	8006264 <_close_r>

080060ae <strcpy>:
 80060ae:	4603      	mov	r3, r0
 80060b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80060b4:	f803 2b01 	strb.w	r2, [r3], #1
 80060b8:	2a00      	cmp	r2, #0
 80060ba:	d1f9      	bne.n	80060b0 <strcpy+0x2>
 80060bc:	4770      	bx	lr
	...

080060c0 <__swbuf_r>:
 80060c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060c2:	460e      	mov	r6, r1
 80060c4:	4614      	mov	r4, r2
 80060c6:	4605      	mov	r5, r0
 80060c8:	b118      	cbz	r0, 80060d2 <__swbuf_r+0x12>
 80060ca:	6983      	ldr	r3, [r0, #24]
 80060cc:	b90b      	cbnz	r3, 80060d2 <__swbuf_r+0x12>
 80060ce:	f7ff f893 	bl	80051f8 <__sinit>
 80060d2:	4b21      	ldr	r3, [pc, #132]	; (8006158 <__swbuf_r+0x98>)
 80060d4:	429c      	cmp	r4, r3
 80060d6:	d12a      	bne.n	800612e <__swbuf_r+0x6e>
 80060d8:	686c      	ldr	r4, [r5, #4]
 80060da:	69a3      	ldr	r3, [r4, #24]
 80060dc:	60a3      	str	r3, [r4, #8]
 80060de:	89a3      	ldrh	r3, [r4, #12]
 80060e0:	071a      	lsls	r2, r3, #28
 80060e2:	d52e      	bpl.n	8006142 <__swbuf_r+0x82>
 80060e4:	6923      	ldr	r3, [r4, #16]
 80060e6:	b363      	cbz	r3, 8006142 <__swbuf_r+0x82>
 80060e8:	6923      	ldr	r3, [r4, #16]
 80060ea:	6820      	ldr	r0, [r4, #0]
 80060ec:	1ac0      	subs	r0, r0, r3
 80060ee:	6963      	ldr	r3, [r4, #20]
 80060f0:	b2f6      	uxtb	r6, r6
 80060f2:	4298      	cmp	r0, r3
 80060f4:	4637      	mov	r7, r6
 80060f6:	db04      	blt.n	8006102 <__swbuf_r+0x42>
 80060f8:	4621      	mov	r1, r4
 80060fa:	4628      	mov	r0, r5
 80060fc:	f7ff f812 	bl	8005124 <_fflush_r>
 8006100:	bb28      	cbnz	r0, 800614e <__swbuf_r+0x8e>
 8006102:	68a3      	ldr	r3, [r4, #8]
 8006104:	3b01      	subs	r3, #1
 8006106:	60a3      	str	r3, [r4, #8]
 8006108:	6823      	ldr	r3, [r4, #0]
 800610a:	1c5a      	adds	r2, r3, #1
 800610c:	6022      	str	r2, [r4, #0]
 800610e:	701e      	strb	r6, [r3, #0]
 8006110:	6963      	ldr	r3, [r4, #20]
 8006112:	3001      	adds	r0, #1
 8006114:	4298      	cmp	r0, r3
 8006116:	d004      	beq.n	8006122 <__swbuf_r+0x62>
 8006118:	89a3      	ldrh	r3, [r4, #12]
 800611a:	07db      	lsls	r3, r3, #31
 800611c:	d519      	bpl.n	8006152 <__swbuf_r+0x92>
 800611e:	2e0a      	cmp	r6, #10
 8006120:	d117      	bne.n	8006152 <__swbuf_r+0x92>
 8006122:	4621      	mov	r1, r4
 8006124:	4628      	mov	r0, r5
 8006126:	f7fe fffd 	bl	8005124 <_fflush_r>
 800612a:	b190      	cbz	r0, 8006152 <__swbuf_r+0x92>
 800612c:	e00f      	b.n	800614e <__swbuf_r+0x8e>
 800612e:	4b0b      	ldr	r3, [pc, #44]	; (800615c <__swbuf_r+0x9c>)
 8006130:	429c      	cmp	r4, r3
 8006132:	d101      	bne.n	8006138 <__swbuf_r+0x78>
 8006134:	68ac      	ldr	r4, [r5, #8]
 8006136:	e7d0      	b.n	80060da <__swbuf_r+0x1a>
 8006138:	4b09      	ldr	r3, [pc, #36]	; (8006160 <__swbuf_r+0xa0>)
 800613a:	429c      	cmp	r4, r3
 800613c:	bf08      	it	eq
 800613e:	68ec      	ldreq	r4, [r5, #12]
 8006140:	e7cb      	b.n	80060da <__swbuf_r+0x1a>
 8006142:	4621      	mov	r1, r4
 8006144:	4628      	mov	r0, r5
 8006146:	f000 f81f 	bl	8006188 <__swsetup_r>
 800614a:	2800      	cmp	r0, #0
 800614c:	d0cc      	beq.n	80060e8 <__swbuf_r+0x28>
 800614e:	f04f 37ff 	mov.w	r7, #4294967295
 8006152:	4638      	mov	r0, r7
 8006154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006156:	bf00      	nop
 8006158:	08007d38 	.word	0x08007d38
 800615c:	08007d58 	.word	0x08007d58
 8006160:	08007d18 	.word	0x08007d18

08006164 <_write_r>:
 8006164:	b538      	push	{r3, r4, r5, lr}
 8006166:	4c07      	ldr	r4, [pc, #28]	; (8006184 <_write_r+0x20>)
 8006168:	4605      	mov	r5, r0
 800616a:	4608      	mov	r0, r1
 800616c:	4611      	mov	r1, r2
 800616e:	2200      	movs	r2, #0
 8006170:	6022      	str	r2, [r4, #0]
 8006172:	461a      	mov	r2, r3
 8006174:	f7fe f9ce 	bl	8004514 <_write>
 8006178:	1c43      	adds	r3, r0, #1
 800617a:	d102      	bne.n	8006182 <_write_r+0x1e>
 800617c:	6823      	ldr	r3, [r4, #0]
 800617e:	b103      	cbz	r3, 8006182 <_write_r+0x1e>
 8006180:	602b      	str	r3, [r5, #0]
 8006182:	bd38      	pop	{r3, r4, r5, pc}
 8006184:	20001bd8 	.word	0x20001bd8

08006188 <__swsetup_r>:
 8006188:	4b32      	ldr	r3, [pc, #200]	; (8006254 <__swsetup_r+0xcc>)
 800618a:	b570      	push	{r4, r5, r6, lr}
 800618c:	681d      	ldr	r5, [r3, #0]
 800618e:	4606      	mov	r6, r0
 8006190:	460c      	mov	r4, r1
 8006192:	b125      	cbz	r5, 800619e <__swsetup_r+0x16>
 8006194:	69ab      	ldr	r3, [r5, #24]
 8006196:	b913      	cbnz	r3, 800619e <__swsetup_r+0x16>
 8006198:	4628      	mov	r0, r5
 800619a:	f7ff f82d 	bl	80051f8 <__sinit>
 800619e:	4b2e      	ldr	r3, [pc, #184]	; (8006258 <__swsetup_r+0xd0>)
 80061a0:	429c      	cmp	r4, r3
 80061a2:	d10f      	bne.n	80061c4 <__swsetup_r+0x3c>
 80061a4:	686c      	ldr	r4, [r5, #4]
 80061a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	0715      	lsls	r5, r2, #28
 80061ae:	d42c      	bmi.n	800620a <__swsetup_r+0x82>
 80061b0:	06d0      	lsls	r0, r2, #27
 80061b2:	d411      	bmi.n	80061d8 <__swsetup_r+0x50>
 80061b4:	2209      	movs	r2, #9
 80061b6:	6032      	str	r2, [r6, #0]
 80061b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061bc:	81a3      	strh	r3, [r4, #12]
 80061be:	f04f 30ff 	mov.w	r0, #4294967295
 80061c2:	bd70      	pop	{r4, r5, r6, pc}
 80061c4:	4b25      	ldr	r3, [pc, #148]	; (800625c <__swsetup_r+0xd4>)
 80061c6:	429c      	cmp	r4, r3
 80061c8:	d101      	bne.n	80061ce <__swsetup_r+0x46>
 80061ca:	68ac      	ldr	r4, [r5, #8]
 80061cc:	e7eb      	b.n	80061a6 <__swsetup_r+0x1e>
 80061ce:	4b24      	ldr	r3, [pc, #144]	; (8006260 <__swsetup_r+0xd8>)
 80061d0:	429c      	cmp	r4, r3
 80061d2:	bf08      	it	eq
 80061d4:	68ec      	ldreq	r4, [r5, #12]
 80061d6:	e7e6      	b.n	80061a6 <__swsetup_r+0x1e>
 80061d8:	0751      	lsls	r1, r2, #29
 80061da:	d512      	bpl.n	8006202 <__swsetup_r+0x7a>
 80061dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061de:	b141      	cbz	r1, 80061f2 <__swsetup_r+0x6a>
 80061e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061e4:	4299      	cmp	r1, r3
 80061e6:	d002      	beq.n	80061ee <__swsetup_r+0x66>
 80061e8:	4630      	mov	r0, r6
 80061ea:	f7ff f8c7 	bl	800537c <_free_r>
 80061ee:	2300      	movs	r3, #0
 80061f0:	6363      	str	r3, [r4, #52]	; 0x34
 80061f2:	89a3      	ldrh	r3, [r4, #12]
 80061f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80061f8:	81a3      	strh	r3, [r4, #12]
 80061fa:	2300      	movs	r3, #0
 80061fc:	6063      	str	r3, [r4, #4]
 80061fe:	6923      	ldr	r3, [r4, #16]
 8006200:	6023      	str	r3, [r4, #0]
 8006202:	89a3      	ldrh	r3, [r4, #12]
 8006204:	f043 0308 	orr.w	r3, r3, #8
 8006208:	81a3      	strh	r3, [r4, #12]
 800620a:	6923      	ldr	r3, [r4, #16]
 800620c:	b94b      	cbnz	r3, 8006222 <__swsetup_r+0x9a>
 800620e:	89a3      	ldrh	r3, [r4, #12]
 8006210:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006218:	d003      	beq.n	8006222 <__swsetup_r+0x9a>
 800621a:	4621      	mov	r1, r4
 800621c:	4630      	mov	r0, r6
 800621e:	f000 fe6f 	bl	8006f00 <__smakebuf_r>
 8006222:	89a2      	ldrh	r2, [r4, #12]
 8006224:	f012 0301 	ands.w	r3, r2, #1
 8006228:	d00c      	beq.n	8006244 <__swsetup_r+0xbc>
 800622a:	2300      	movs	r3, #0
 800622c:	60a3      	str	r3, [r4, #8]
 800622e:	6963      	ldr	r3, [r4, #20]
 8006230:	425b      	negs	r3, r3
 8006232:	61a3      	str	r3, [r4, #24]
 8006234:	6923      	ldr	r3, [r4, #16]
 8006236:	b953      	cbnz	r3, 800624e <__swsetup_r+0xc6>
 8006238:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800623c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006240:	d1ba      	bne.n	80061b8 <__swsetup_r+0x30>
 8006242:	bd70      	pop	{r4, r5, r6, pc}
 8006244:	0792      	lsls	r2, r2, #30
 8006246:	bf58      	it	pl
 8006248:	6963      	ldrpl	r3, [r4, #20]
 800624a:	60a3      	str	r3, [r4, #8]
 800624c:	e7f2      	b.n	8006234 <__swsetup_r+0xac>
 800624e:	2000      	movs	r0, #0
 8006250:	e7f7      	b.n	8006242 <__swsetup_r+0xba>
 8006252:	bf00      	nop
 8006254:	20000170 	.word	0x20000170
 8006258:	08007d38 	.word	0x08007d38
 800625c:	08007d58 	.word	0x08007d58
 8006260:	08007d18 	.word	0x08007d18

08006264 <_close_r>:
 8006264:	b538      	push	{r3, r4, r5, lr}
 8006266:	4c06      	ldr	r4, [pc, #24]	; (8006280 <_close_r+0x1c>)
 8006268:	2300      	movs	r3, #0
 800626a:	4605      	mov	r5, r0
 800626c:	4608      	mov	r0, r1
 800626e:	6023      	str	r3, [r4, #0]
 8006270:	f7fe f978 	bl	8004564 <_close>
 8006274:	1c43      	adds	r3, r0, #1
 8006276:	d102      	bne.n	800627e <_close_r+0x1a>
 8006278:	6823      	ldr	r3, [r4, #0]
 800627a:	b103      	cbz	r3, 800627e <_close_r+0x1a>
 800627c:	602b      	str	r3, [r5, #0]
 800627e:	bd38      	pop	{r3, r4, r5, pc}
 8006280:	20001bd8 	.word	0x20001bd8

08006284 <quorem>:
 8006284:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006288:	6903      	ldr	r3, [r0, #16]
 800628a:	690c      	ldr	r4, [r1, #16]
 800628c:	429c      	cmp	r4, r3
 800628e:	4680      	mov	r8, r0
 8006290:	f300 8082 	bgt.w	8006398 <quorem+0x114>
 8006294:	3c01      	subs	r4, #1
 8006296:	f101 0714 	add.w	r7, r1, #20
 800629a:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800629e:	f100 0614 	add.w	r6, r0, #20
 80062a2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80062a6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80062aa:	eb06 030e 	add.w	r3, r6, lr
 80062ae:	3501      	adds	r5, #1
 80062b0:	eb07 090e 	add.w	r9, r7, lr
 80062b4:	9301      	str	r3, [sp, #4]
 80062b6:	fbb0 f5f5 	udiv	r5, r0, r5
 80062ba:	b395      	cbz	r5, 8006322 <quorem+0x9e>
 80062bc:	f04f 0a00 	mov.w	sl, #0
 80062c0:	4638      	mov	r0, r7
 80062c2:	46b4      	mov	ip, r6
 80062c4:	46d3      	mov	fp, sl
 80062c6:	f850 2b04 	ldr.w	r2, [r0], #4
 80062ca:	b293      	uxth	r3, r2
 80062cc:	fb05 a303 	mla	r3, r5, r3, sl
 80062d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	ebab 0303 	sub.w	r3, fp, r3
 80062da:	0c12      	lsrs	r2, r2, #16
 80062dc:	f8bc b000 	ldrh.w	fp, [ip]
 80062e0:	fb05 a202 	mla	r2, r5, r2, sl
 80062e4:	fa13 f38b 	uxtah	r3, r3, fp
 80062e8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80062ec:	fa1f fb82 	uxth.w	fp, r2
 80062f0:	f8dc 2000 	ldr.w	r2, [ip]
 80062f4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80062f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006302:	4581      	cmp	r9, r0
 8006304:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006308:	f84c 3b04 	str.w	r3, [ip], #4
 800630c:	d2db      	bcs.n	80062c6 <quorem+0x42>
 800630e:	f856 300e 	ldr.w	r3, [r6, lr]
 8006312:	b933      	cbnz	r3, 8006322 <quorem+0x9e>
 8006314:	9b01      	ldr	r3, [sp, #4]
 8006316:	3b04      	subs	r3, #4
 8006318:	429e      	cmp	r6, r3
 800631a:	461a      	mov	r2, r3
 800631c:	d330      	bcc.n	8006380 <quorem+0xfc>
 800631e:	f8c8 4010 	str.w	r4, [r8, #16]
 8006322:	4640      	mov	r0, r8
 8006324:	f001 f851 	bl	80073ca <__mcmp>
 8006328:	2800      	cmp	r0, #0
 800632a:	db25      	blt.n	8006378 <quorem+0xf4>
 800632c:	3501      	adds	r5, #1
 800632e:	4630      	mov	r0, r6
 8006330:	f04f 0e00 	mov.w	lr, #0
 8006334:	f857 2b04 	ldr.w	r2, [r7], #4
 8006338:	f8d0 c000 	ldr.w	ip, [r0]
 800633c:	b293      	uxth	r3, r2
 800633e:	ebae 0303 	sub.w	r3, lr, r3
 8006342:	0c12      	lsrs	r2, r2, #16
 8006344:	fa13 f38c 	uxtah	r3, r3, ip
 8006348:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800634c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006350:	b29b      	uxth	r3, r3
 8006352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006356:	45b9      	cmp	r9, r7
 8006358:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800635c:	f840 3b04 	str.w	r3, [r0], #4
 8006360:	d2e8      	bcs.n	8006334 <quorem+0xb0>
 8006362:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006366:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800636a:	b92a      	cbnz	r2, 8006378 <quorem+0xf4>
 800636c:	3b04      	subs	r3, #4
 800636e:	429e      	cmp	r6, r3
 8006370:	461a      	mov	r2, r3
 8006372:	d30b      	bcc.n	800638c <quorem+0x108>
 8006374:	f8c8 4010 	str.w	r4, [r8, #16]
 8006378:	4628      	mov	r0, r5
 800637a:	b003      	add	sp, #12
 800637c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006380:	6812      	ldr	r2, [r2, #0]
 8006382:	3b04      	subs	r3, #4
 8006384:	2a00      	cmp	r2, #0
 8006386:	d1ca      	bne.n	800631e <quorem+0x9a>
 8006388:	3c01      	subs	r4, #1
 800638a:	e7c5      	b.n	8006318 <quorem+0x94>
 800638c:	6812      	ldr	r2, [r2, #0]
 800638e:	3b04      	subs	r3, #4
 8006390:	2a00      	cmp	r2, #0
 8006392:	d1ef      	bne.n	8006374 <quorem+0xf0>
 8006394:	3c01      	subs	r4, #1
 8006396:	e7ea      	b.n	800636e <quorem+0xea>
 8006398:	2000      	movs	r0, #0
 800639a:	e7ee      	b.n	800637a <quorem+0xf6>
 800639c:	0000      	movs	r0, r0
	...

080063a0 <_dtoa_r>:
 80063a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063a4:	ec57 6b10 	vmov	r6, r7, d0
 80063a8:	b095      	sub	sp, #84	; 0x54
 80063aa:	e9cd 6700 	strd	r6, r7, [sp]
 80063ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80063b0:	9107      	str	r1, [sp, #28]
 80063b2:	4605      	mov	r5, r0
 80063b4:	920b      	str	r2, [sp, #44]	; 0x2c
 80063b6:	9310      	str	r3, [sp, #64]	; 0x40
 80063b8:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80063ba:	b93e      	cbnz	r6, 80063cc <_dtoa_r+0x2c>
 80063bc:	2010      	movs	r0, #16
 80063be:	f000 fddf 	bl	8006f80 <malloc>
 80063c2:	6268      	str	r0, [r5, #36]	; 0x24
 80063c4:	6046      	str	r6, [r0, #4]
 80063c6:	6086      	str	r6, [r0, #8]
 80063c8:	6006      	str	r6, [r0, #0]
 80063ca:	60c6      	str	r6, [r0, #12]
 80063cc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80063ce:	6819      	ldr	r1, [r3, #0]
 80063d0:	b151      	cbz	r1, 80063e8 <_dtoa_r+0x48>
 80063d2:	685a      	ldr	r2, [r3, #4]
 80063d4:	604a      	str	r2, [r1, #4]
 80063d6:	2301      	movs	r3, #1
 80063d8:	4093      	lsls	r3, r2
 80063da:	608b      	str	r3, [r1, #8]
 80063dc:	4628      	mov	r0, r5
 80063de:	f000 fe1f 	bl	8007020 <_Bfree>
 80063e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80063e4:	2200      	movs	r2, #0
 80063e6:	601a      	str	r2, [r3, #0]
 80063e8:	9b01      	ldr	r3, [sp, #4]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	bfbf      	itttt	lt
 80063ee:	2301      	movlt	r3, #1
 80063f0:	6023      	strlt	r3, [r4, #0]
 80063f2:	9b01      	ldrlt	r3, [sp, #4]
 80063f4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80063f8:	bfb2      	itee	lt
 80063fa:	9301      	strlt	r3, [sp, #4]
 80063fc:	2300      	movge	r3, #0
 80063fe:	6023      	strge	r3, [r4, #0]
 8006400:	9c01      	ldr	r4, [sp, #4]
 8006402:	4b73      	ldr	r3, [pc, #460]	; (80065d0 <_dtoa_r+0x230>)
 8006404:	43a3      	bics	r3, r4
 8006406:	d118      	bne.n	800643a <_dtoa_r+0x9a>
 8006408:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800640a:	f242 730f 	movw	r3, #9999	; 0x270f
 800640e:	6013      	str	r3, [r2, #0]
 8006410:	9b00      	ldr	r3, [sp, #0]
 8006412:	b923      	cbnz	r3, 800641e <_dtoa_r+0x7e>
 8006414:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006418:	2c00      	cmp	r4, #0
 800641a:	f000 8518 	beq.w	8006e4e <_dtoa_r+0xaae>
 800641e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006420:	b93b      	cbnz	r3, 8006432 <_dtoa_r+0x92>
 8006422:	4b6c      	ldr	r3, [pc, #432]	; (80065d4 <_dtoa_r+0x234>)
 8006424:	e01d      	b.n	8006462 <_dtoa_r+0xc2>
 8006426:	4b6c      	ldr	r3, [pc, #432]	; (80065d8 <_dtoa_r+0x238>)
 8006428:	9304      	str	r3, [sp, #16]
 800642a:	3308      	adds	r3, #8
 800642c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800642e:	6013      	str	r3, [r2, #0]
 8006430:	e2a6      	b.n	8006980 <_dtoa_r+0x5e0>
 8006432:	4b68      	ldr	r3, [pc, #416]	; (80065d4 <_dtoa_r+0x234>)
 8006434:	9304      	str	r3, [sp, #16]
 8006436:	3303      	adds	r3, #3
 8006438:	e7f8      	b.n	800642c <_dtoa_r+0x8c>
 800643a:	ed9d 7b00 	vldr	d7, [sp]
 800643e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006446:	ed8d 7b04 	vstr	d7, [sp, #16]
 800644a:	d10c      	bne.n	8006466 <_dtoa_r+0xc6>
 800644c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800644e:	2301      	movs	r3, #1
 8006450:	6013      	str	r3, [r2, #0]
 8006452:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006454:	2b00      	cmp	r3, #0
 8006456:	f000 84f7 	beq.w	8006e48 <_dtoa_r+0xaa8>
 800645a:	4b60      	ldr	r3, [pc, #384]	; (80065dc <_dtoa_r+0x23c>)
 800645c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800645e:	6013      	str	r3, [r2, #0]
 8006460:	3b01      	subs	r3, #1
 8006462:	9304      	str	r3, [sp, #16]
 8006464:	e28c      	b.n	8006980 <_dtoa_r+0x5e0>
 8006466:	a913      	add	r1, sp, #76	; 0x4c
 8006468:	aa12      	add	r2, sp, #72	; 0x48
 800646a:	ed9d 0b04 	vldr	d0, [sp, #16]
 800646e:	4628      	mov	r0, r5
 8006470:	f001 f823 	bl	80074ba <__d2b>
 8006474:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8006478:	9003      	str	r0, [sp, #12]
 800647a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800647c:	2900      	cmp	r1, #0
 800647e:	d046      	beq.n	800650e <_dtoa_r+0x16e>
 8006480:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006484:	f3c3 0413 	ubfx	r4, r3, #0, #20
 8006488:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800648c:	f2a1 3aff 	subw	sl, r1, #1023	; 0x3ff
 8006490:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006494:	2100      	movs	r1, #0
 8006496:	ee07 aa90 	vmov	s15, sl
 800649a:	ec43 2b16 	vmov	d6, r2, r3
 800649e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80064a2:	ed9f 4b45 	vldr	d4, [pc, #276]	; 80065b8 <_dtoa_r+0x218>
 80064a6:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80064aa:	ee36 7b47 	vsub.f64	d7, d6, d7
 80064ae:	ed9f 6b44 	vldr	d6, [pc, #272]	; 80065c0 <_dtoa_r+0x220>
 80064b2:	eea7 6b04 	vfma.f64	d6, d7, d4
 80064b6:	eeb0 7b46 	vmov.f64	d7, d6
 80064ba:	ed9f 6b43 	vldr	d6, [pc, #268]	; 80065c8 <_dtoa_r+0x228>
 80064be:	eea5 7b06 	vfma.f64	d7, d5, d6
 80064c2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80064c6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80064ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064ce:	9111      	str	r1, [sp, #68]	; 0x44
 80064d0:	ee16 ba90 	vmov	fp, s13
 80064d4:	d508      	bpl.n	80064e8 <_dtoa_r+0x148>
 80064d6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80064da:	eeb4 7b46 	vcmp.f64	d7, d6
 80064de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064e2:	bf18      	it	ne
 80064e4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80064e8:	f1bb 0f16 	cmp.w	fp, #22
 80064ec:	d831      	bhi.n	8006552 <_dtoa_r+0x1b2>
 80064ee:	4b3c      	ldr	r3, [pc, #240]	; (80065e0 <_dtoa_r+0x240>)
 80064f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80064f4:	ed93 7b00 	vldr	d7, [r3]
 80064f8:	ed9d 6b00 	vldr	d6, [sp]
 80064fc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006504:	dd01      	ble.n	800650a <_dtoa_r+0x16a>
 8006506:	f10b 3bff 	add.w	fp, fp, #4294967295
 800650a:	2300      	movs	r3, #0
 800650c:	e022      	b.n	8006554 <_dtoa_r+0x1b4>
 800650e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006510:	4401      	add	r1, r0
 8006512:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8006516:	2b20      	cmp	r3, #32
 8006518:	dd15      	ble.n	8006546 <_dtoa_r+0x1a6>
 800651a:	9e00      	ldr	r6, [sp, #0]
 800651c:	f201 4212 	addw	r2, r1, #1042	; 0x412
 8006520:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8006524:	fa26 f202 	lsr.w	r2, r6, r2
 8006528:	fa04 f303 	lsl.w	r3, r4, r3
 800652c:	431a      	orrs	r2, r3
 800652e:	ee07 2a90 	vmov	s15, r2
 8006532:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006536:	f101 3aff 	add.w	sl, r1, #4294967295
 800653a:	ec53 2b17 	vmov	r2, r3, d7
 800653e:	2101      	movs	r1, #1
 8006540:	f1a3 73f8 	sub.w	r3, r3, #32505856	; 0x1f00000
 8006544:	e7a7      	b.n	8006496 <_dtoa_r+0xf6>
 8006546:	f1c3 0220 	rsb	r2, r3, #32
 800654a:	9b00      	ldr	r3, [sp, #0]
 800654c:	fa03 f202 	lsl.w	r2, r3, r2
 8006550:	e7ed      	b.n	800652e <_dtoa_r+0x18e>
 8006552:	2301      	movs	r3, #1
 8006554:	eba0 0a0a 	sub.w	sl, r0, sl
 8006558:	f1ba 0701 	subs.w	r7, sl, #1
 800655c:	bf46      	itte	mi
 800655e:	f1ca 0a01 	rsbmi	sl, sl, #1
 8006562:	2700      	movmi	r7, #0
 8006564:	f04f 0a00 	movpl.w	sl, #0
 8006568:	f1bb 0f00 	cmp.w	fp, #0
 800656c:	930d      	str	r3, [sp, #52]	; 0x34
 800656e:	bfbc      	itt	lt
 8006570:	2300      	movlt	r3, #0
 8006572:	930c      	strlt	r3, [sp, #48]	; 0x30
 8006574:	9b07      	ldr	r3, [sp, #28]
 8006576:	bfa3      	ittte	ge
 8006578:	f8cd b030 	strge.w	fp, [sp, #48]	; 0x30
 800657c:	445f      	addge	r7, fp
 800657e:	f04f 0800 	movge.w	r8, #0
 8006582:	ebaa 0a0b 	sublt.w	sl, sl, fp
 8006586:	bfb8      	it	lt
 8006588:	f1cb 0800 	rsblt	r8, fp, #0
 800658c:	2b09      	cmp	r3, #9
 800658e:	f200 80f8 	bhi.w	8006782 <_dtoa_r+0x3e2>
 8006592:	2b05      	cmp	r3, #5
 8006594:	bfc4      	itt	gt
 8006596:	3b04      	subgt	r3, #4
 8006598:	9307      	strgt	r3, [sp, #28]
 800659a:	9b07      	ldr	r3, [sp, #28]
 800659c:	f1a3 0302 	sub.w	r3, r3, #2
 80065a0:	bfcc      	ite	gt
 80065a2:	2400      	movgt	r4, #0
 80065a4:	2401      	movle	r4, #1
 80065a6:	2b03      	cmp	r3, #3
 80065a8:	f200 80f7 	bhi.w	800679a <_dtoa_r+0x3fa>
 80065ac:	e8df f013 	tbh	[pc, r3, lsl #1]
 80065b0:	00e700e5 	.word	0x00e700e5
 80065b4:	00d9001a 	.word	0x00d9001a
 80065b8:	636f4361 	.word	0x636f4361
 80065bc:	3fd287a7 	.word	0x3fd287a7
 80065c0:	8b60c8b3 	.word	0x8b60c8b3
 80065c4:	3fc68a28 	.word	0x3fc68a28
 80065c8:	509f79fb 	.word	0x509f79fb
 80065cc:	3fd34413 	.word	0x3fd34413
 80065d0:	7ff00000 	.word	0x7ff00000
 80065d4:	08007db9 	.word	0x08007db9
 80065d8:	08007db0 	.word	0x08007db0
 80065dc:	08007d8d 	.word	0x08007d8d
 80065e0:	08007df0 	.word	0x08007df0
 80065e4:	2301      	movs	r3, #1
 80065e6:	930a      	str	r3, [sp, #40]	; 0x28
 80065e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f340 80d8 	ble.w	80067a0 <_dtoa_r+0x400>
 80065f0:	9306      	str	r3, [sp, #24]
 80065f2:	4699      	mov	r9, r3
 80065f4:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 80065f6:	2200      	movs	r2, #0
 80065f8:	6072      	str	r2, [r6, #4]
 80065fa:	2104      	movs	r1, #4
 80065fc:	f101 0214 	add.w	r2, r1, #20
 8006600:	429a      	cmp	r2, r3
 8006602:	f240 80d2 	bls.w	80067aa <_dtoa_r+0x40a>
 8006606:	6871      	ldr	r1, [r6, #4]
 8006608:	4628      	mov	r0, r5
 800660a:	f000 fcd5 	bl	8006fb8 <_Balloc>
 800660e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006610:	6030      	str	r0, [r6, #0]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	9304      	str	r3, [sp, #16]
 8006616:	f1b9 0f0e 	cmp.w	r9, #14
 800661a:	d875      	bhi.n	8006708 <_dtoa_r+0x368>
 800661c:	2c00      	cmp	r4, #0
 800661e:	d073      	beq.n	8006708 <_dtoa_r+0x368>
 8006620:	ed9d 7b00 	vldr	d7, [sp]
 8006624:	f1bb 0f00 	cmp.w	fp, #0
 8006628:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800662c:	f340 80ce 	ble.w	80067cc <_dtoa_r+0x42c>
 8006630:	4ab5      	ldr	r2, [pc, #724]	; (8006908 <_dtoa_r+0x568>)
 8006632:	f00b 030f 	and.w	r3, fp, #15
 8006636:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800663a:	ea4f 122b 	mov.w	r2, fp, asr #4
 800663e:	ed93 7b00 	vldr	d7, [r3]
 8006642:	06d3      	lsls	r3, r2, #27
 8006644:	f140 80b6 	bpl.w	80067b4 <_dtoa_r+0x414>
 8006648:	4bb0      	ldr	r3, [pc, #704]	; (800690c <_dtoa_r+0x56c>)
 800664a:	ed9d 4b0e 	vldr	d4, [sp, #56]	; 0x38
 800664e:	ed93 6b08 	vldr	d6, [r3, #32]
 8006652:	ee84 5b06 	vdiv.f64	d5, d4, d6
 8006656:	ed8d 5b00 	vstr	d5, [sp]
 800665a:	f002 020f 	and.w	r2, r2, #15
 800665e:	2303      	movs	r3, #3
 8006660:	49aa      	ldr	r1, [pc, #680]	; (800690c <_dtoa_r+0x56c>)
 8006662:	2a00      	cmp	r2, #0
 8006664:	f040 80a8 	bne.w	80067b8 <_dtoa_r+0x418>
 8006668:	ed9d 5b00 	vldr	d5, [sp]
 800666c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8006670:	ed8d 6b00 	vstr	d6, [sp]
 8006674:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006676:	2a00      	cmp	r2, #0
 8006678:	f000 80da 	beq.w	8006830 <_dtoa_r+0x490>
 800667c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006680:	ed9d 7b00 	vldr	d7, [sp]
 8006684:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800668c:	f140 80d0 	bpl.w	8006830 <_dtoa_r+0x490>
 8006690:	f1b9 0f00 	cmp.w	r9, #0
 8006694:	f000 80cc 	beq.w	8006830 <_dtoa_r+0x490>
 8006698:	9a06      	ldr	r2, [sp, #24]
 800669a:	2a00      	cmp	r2, #0
 800669c:	dd30      	ble.n	8006700 <_dtoa_r+0x360>
 800669e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80066a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80066a6:	ed8d 7b00 	vstr	d7, [sp]
 80066aa:	9c06      	ldr	r4, [sp, #24]
 80066ac:	f10b 32ff 	add.w	r2, fp, #4294967295
 80066b0:	3301      	adds	r3, #1
 80066b2:	ed9d 6b00 	vldr	d6, [sp]
 80066b6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80066ba:	ee07 3a90 	vmov	s15, r3
 80066be:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80066c2:	eea7 5b06 	vfma.f64	d5, d7, d6
 80066c6:	ed8d 5b00 	vstr	d5, [sp]
 80066ca:	9b01      	ldr	r3, [sp, #4]
 80066cc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80066d0:	9301      	str	r3, [sp, #4]
 80066d2:	2c00      	cmp	r4, #0
 80066d4:	f040 80af 	bne.w	8006836 <_dtoa_r+0x496>
 80066d8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80066dc:	ee36 6b47 	vsub.f64	d6, d6, d7
 80066e0:	ed9d 7b00 	vldr	d7, [sp]
 80066e4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80066e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066ec:	f300 8300 	bgt.w	8006cf0 <_dtoa_r+0x950>
 80066f0:	eeb1 7b47 	vneg.f64	d7, d7
 80066f4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80066f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066fc:	f100 82f6 	bmi.w	8006cec <_dtoa_r+0x94c>
 8006700:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 8006704:	e88d 0018 	stmia.w	sp, {r3, r4}
 8006708:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800670a:	2b00      	cmp	r3, #0
 800670c:	f2c0 8158 	blt.w	80069c0 <_dtoa_r+0x620>
 8006710:	f1bb 0f0e 	cmp.w	fp, #14
 8006714:	f300 8154 	bgt.w	80069c0 <_dtoa_r+0x620>
 8006718:	4b7b      	ldr	r3, [pc, #492]	; (8006908 <_dtoa_r+0x568>)
 800671a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800671e:	ed93 6b00 	vldr	d6, [r3]
 8006722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006724:	2b00      	cmp	r3, #0
 8006726:	f280 80f3 	bge.w	8006910 <_dtoa_r+0x570>
 800672a:	f1b9 0f00 	cmp.w	r9, #0
 800672e:	f300 80ef 	bgt.w	8006910 <_dtoa_r+0x570>
 8006732:	f040 82da 	bne.w	8006cea <_dtoa_r+0x94a>
 8006736:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800673a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800673e:	ed9d 7b00 	vldr	d7, [sp]
 8006742:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800674a:	464c      	mov	r4, r9
 800674c:	464e      	mov	r6, r9
 800674e:	f280 82ac 	bge.w	8006caa <_dtoa_r+0x90a>
 8006752:	9b04      	ldr	r3, [sp, #16]
 8006754:	9904      	ldr	r1, [sp, #16]
 8006756:	2231      	movs	r2, #49	; 0x31
 8006758:	3301      	adds	r3, #1
 800675a:	700a      	strb	r2, [r1, #0]
 800675c:	f10b 0b01 	add.w	fp, fp, #1
 8006760:	e2a7      	b.n	8006cb2 <_dtoa_r+0x912>
 8006762:	2301      	movs	r3, #1
 8006764:	930a      	str	r3, [sp, #40]	; 0x28
 8006766:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006768:	445b      	add	r3, fp
 800676a:	f103 0901 	add.w	r9, r3, #1
 800676e:	9306      	str	r3, [sp, #24]
 8006770:	464b      	mov	r3, r9
 8006772:	2b01      	cmp	r3, #1
 8006774:	bfb8      	it	lt
 8006776:	2301      	movlt	r3, #1
 8006778:	e73c      	b.n	80065f4 <_dtoa_r+0x254>
 800677a:	2300      	movs	r3, #0
 800677c:	e733      	b.n	80065e6 <_dtoa_r+0x246>
 800677e:	2300      	movs	r3, #0
 8006780:	e7f0      	b.n	8006764 <_dtoa_r+0x3c4>
 8006782:	2401      	movs	r4, #1
 8006784:	2300      	movs	r3, #0
 8006786:	9307      	str	r3, [sp, #28]
 8006788:	940a      	str	r4, [sp, #40]	; 0x28
 800678a:	f04f 33ff 	mov.w	r3, #4294967295
 800678e:	9306      	str	r3, [sp, #24]
 8006790:	4699      	mov	r9, r3
 8006792:	2200      	movs	r2, #0
 8006794:	2312      	movs	r3, #18
 8006796:	920b      	str	r2, [sp, #44]	; 0x2c
 8006798:	e72c      	b.n	80065f4 <_dtoa_r+0x254>
 800679a:	2301      	movs	r3, #1
 800679c:	930a      	str	r3, [sp, #40]	; 0x28
 800679e:	e7f4      	b.n	800678a <_dtoa_r+0x3ea>
 80067a0:	2301      	movs	r3, #1
 80067a2:	9306      	str	r3, [sp, #24]
 80067a4:	4699      	mov	r9, r3
 80067a6:	461a      	mov	r2, r3
 80067a8:	e7f5      	b.n	8006796 <_dtoa_r+0x3f6>
 80067aa:	6872      	ldr	r2, [r6, #4]
 80067ac:	3201      	adds	r2, #1
 80067ae:	6072      	str	r2, [r6, #4]
 80067b0:	0049      	lsls	r1, r1, #1
 80067b2:	e723      	b.n	80065fc <_dtoa_r+0x25c>
 80067b4:	2302      	movs	r3, #2
 80067b6:	e753      	b.n	8006660 <_dtoa_r+0x2c0>
 80067b8:	07d6      	lsls	r6, r2, #31
 80067ba:	d504      	bpl.n	80067c6 <_dtoa_r+0x426>
 80067bc:	ed91 6b00 	vldr	d6, [r1]
 80067c0:	3301      	adds	r3, #1
 80067c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80067c6:	1052      	asrs	r2, r2, #1
 80067c8:	3108      	adds	r1, #8
 80067ca:	e74a      	b.n	8006662 <_dtoa_r+0x2c2>
 80067cc:	d02e      	beq.n	800682c <_dtoa_r+0x48c>
 80067ce:	f1cb 0200 	rsb	r2, fp, #0
 80067d2:	4b4d      	ldr	r3, [pc, #308]	; (8006908 <_dtoa_r+0x568>)
 80067d4:	f002 010f 	and.w	r1, r2, #15
 80067d8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80067dc:	ed93 7b00 	vldr	d7, [r3]
 80067e0:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 80067e4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80067e8:	ed8d 7b08 	vstr	d7, [sp, #32]
 80067ec:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 80067f0:	4946      	ldr	r1, [pc, #280]	; (800690c <_dtoa_r+0x56c>)
 80067f2:	e88d 0018 	stmia.w	sp, {r3, r4}
 80067f6:	1112      	asrs	r2, r2, #4
 80067f8:	2000      	movs	r0, #0
 80067fa:	2302      	movs	r3, #2
 80067fc:	b93a      	cbnz	r2, 800680e <_dtoa_r+0x46e>
 80067fe:	2800      	cmp	r0, #0
 8006800:	f43f af38 	beq.w	8006674 <_dtoa_r+0x2d4>
 8006804:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8006808:	e88d 0006 	stmia.w	sp, {r1, r2}
 800680c:	e732      	b.n	8006674 <_dtoa_r+0x2d4>
 800680e:	07d4      	lsls	r4, r2, #31
 8006810:	d509      	bpl.n	8006826 <_dtoa_r+0x486>
 8006812:	ed9d 6b08 	vldr	d6, [sp, #32]
 8006816:	ed91 7b00 	vldr	d7, [r1]
 800681a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800681e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006822:	3301      	adds	r3, #1
 8006824:	2001      	movs	r0, #1
 8006826:	1052      	asrs	r2, r2, #1
 8006828:	3108      	adds	r1, #8
 800682a:	e7e7      	b.n	80067fc <_dtoa_r+0x45c>
 800682c:	2302      	movs	r3, #2
 800682e:	e721      	b.n	8006674 <_dtoa_r+0x2d4>
 8006830:	465a      	mov	r2, fp
 8006832:	464c      	mov	r4, r9
 8006834:	e73d      	b.n	80066b2 <_dtoa_r+0x312>
 8006836:	9804      	ldr	r0, [sp, #16]
 8006838:	4b33      	ldr	r3, [pc, #204]	; (8006908 <_dtoa_r+0x568>)
 800683a:	1e61      	subs	r1, r4, #1
 800683c:	4404      	add	r4, r0
 800683e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006840:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8006844:	ed93 5b00 	vldr	d5, [r3]
 8006848:	b358      	cbz	r0, 80068a2 <_dtoa_r+0x502>
 800684a:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800684e:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8006852:	ed9d 5b00 	vldr	d5, [sp]
 8006856:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800685a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800685e:	9b04      	ldr	r3, [sp, #16]
 8006860:	ee37 7b45 	vsub.f64	d7, d7, d5
 8006864:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8006868:	ee14 1a90 	vmov	r1, s9
 800686c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006870:	3130      	adds	r1, #48	; 0x30
 8006872:	ee36 6b45 	vsub.f64	d6, d6, d5
 8006876:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800687a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800687e:	f803 1b01 	strb.w	r1, [r3], #1
 8006882:	d439      	bmi.n	80068f8 <_dtoa_r+0x558>
 8006884:	ee32 5b46 	vsub.f64	d5, d2, d6
 8006888:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800688c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006890:	d47b      	bmi.n	800698a <_dtoa_r+0x5ea>
 8006892:	42a3      	cmp	r3, r4
 8006894:	f43f af34 	beq.w	8006700 <_dtoa_r+0x360>
 8006898:	ee27 7b03 	vmul.f64	d7, d7, d3
 800689c:	ee26 6b03 	vmul.f64	d6, d6, d3
 80068a0:	e7e0      	b.n	8006864 <_dtoa_r+0x4c4>
 80068a2:	ed9d 7b00 	vldr	d7, [sp]
 80068a6:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80068aa:	9b04      	ldr	r3, [sp, #16]
 80068ac:	ee25 5b07 	vmul.f64	d5, d5, d7
 80068b0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80068b4:	ee14 1a90 	vmov	r1, s9
 80068b8:	3130      	adds	r1, #48	; 0x30
 80068ba:	f803 1b01 	strb.w	r1, [r3], #1
 80068be:	429c      	cmp	r4, r3
 80068c0:	eeb8 7be4 	vcvt.f64.s32	d7, s9
 80068c4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80068c8:	d11a      	bne.n	8006900 <_dtoa_r+0x560>
 80068ca:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80068ce:	ee35 4b07 	vadd.f64	d4, d5, d7
 80068d2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80068d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068da:	dc56      	bgt.n	800698a <_dtoa_r+0x5ea>
 80068dc:	ee37 5b45 	vsub.f64	d5, d7, d5
 80068e0:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80068e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068e8:	f57f af0a 	bpl.w	8006700 <_dtoa_r+0x360>
 80068ec:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80068f0:	2930      	cmp	r1, #48	; 0x30
 80068f2:	f103 30ff 	add.w	r0, r3, #4294967295
 80068f6:	d001      	beq.n	80068fc <_dtoa_r+0x55c>
 80068f8:	4693      	mov	fp, r2
 80068fa:	e031      	b.n	8006960 <_dtoa_r+0x5c0>
 80068fc:	4603      	mov	r3, r0
 80068fe:	e7f5      	b.n	80068ec <_dtoa_r+0x54c>
 8006900:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006904:	e7d4      	b.n	80068b0 <_dtoa_r+0x510>
 8006906:	bf00      	nop
 8006908:	08007df0 	.word	0x08007df0
 800690c:	08007dc8 	.word	0x08007dc8
 8006910:	ed9d 7b00 	vldr	d7, [sp]
 8006914:	eeb1 3b46 	vneg.f64	d3, d6
 8006918:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800691c:	9b04      	ldr	r3, [sp, #16]
 800691e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8006922:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8006926:	ee15 2a10 	vmov	r2, s10
 800692a:	3230      	adds	r2, #48	; 0x30
 800692c:	f803 2b01 	strb.w	r2, [r3], #1
 8006930:	9a04      	ldr	r2, [sp, #16]
 8006932:	1a9a      	subs	r2, r3, r2
 8006934:	4591      	cmp	r9, r2
 8006936:	eeb8 2bc5 	vcvt.f64.s32	d2, s10
 800693a:	eea3 7b02 	vfma.f64	d7, d3, d2
 800693e:	d137      	bne.n	80069b0 <_dtoa_r+0x610>
 8006940:	ee37 7b07 	vadd.f64	d7, d7, d7
 8006944:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800694c:	d41c      	bmi.n	8006988 <_dtoa_r+0x5e8>
 800694e:	eeb4 6b47 	vcmp.f64	d6, d7
 8006952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006956:	d103      	bne.n	8006960 <_dtoa_r+0x5c0>
 8006958:	ee15 2a10 	vmov	r2, s10
 800695c:	07d2      	lsls	r2, r2, #31
 800695e:	d413      	bmi.n	8006988 <_dtoa_r+0x5e8>
 8006960:	9903      	ldr	r1, [sp, #12]
 8006962:	9300      	str	r3, [sp, #0]
 8006964:	4628      	mov	r0, r5
 8006966:	f000 fb5b 	bl	8007020 <_Bfree>
 800696a:	9b00      	ldr	r3, [sp, #0]
 800696c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800696e:	2200      	movs	r2, #0
 8006970:	701a      	strb	r2, [r3, #0]
 8006972:	f10b 0201 	add.w	r2, fp, #1
 8006976:	600a      	str	r2, [r1, #0]
 8006978:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800697a:	2a00      	cmp	r2, #0
 800697c:	f47f ad57 	bne.w	800642e <_dtoa_r+0x8e>
 8006980:	9804      	ldr	r0, [sp, #16]
 8006982:	b015      	add	sp, #84	; 0x54
 8006984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006988:	465a      	mov	r2, fp
 800698a:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800698e:	2839      	cmp	r0, #57	; 0x39
 8006990:	f103 31ff 	add.w	r1, r3, #4294967295
 8006994:	d106      	bne.n	80069a4 <_dtoa_r+0x604>
 8006996:	9804      	ldr	r0, [sp, #16]
 8006998:	4288      	cmp	r0, r1
 800699a:	d107      	bne.n	80069ac <_dtoa_r+0x60c>
 800699c:	2130      	movs	r1, #48	; 0x30
 800699e:	7001      	strb	r1, [r0, #0]
 80069a0:	3201      	adds	r2, #1
 80069a2:	4601      	mov	r1, r0
 80069a4:	7808      	ldrb	r0, [r1, #0]
 80069a6:	3001      	adds	r0, #1
 80069a8:	7008      	strb	r0, [r1, #0]
 80069aa:	e7a5      	b.n	80068f8 <_dtoa_r+0x558>
 80069ac:	460b      	mov	r3, r1
 80069ae:	e7ec      	b.n	800698a <_dtoa_r+0x5ea>
 80069b0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80069b4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80069b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069bc:	d1af      	bne.n	800691e <_dtoa_r+0x57e>
 80069be:	e7cf      	b.n	8006960 <_dtoa_r+0x5c0>
 80069c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069c2:	2a00      	cmp	r2, #0
 80069c4:	f000 8129 	beq.w	8006c1a <_dtoa_r+0x87a>
 80069c8:	9a07      	ldr	r2, [sp, #28]
 80069ca:	2a01      	cmp	r2, #1
 80069cc:	f300 810b 	bgt.w	8006be6 <_dtoa_r+0x846>
 80069d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80069d2:	2a00      	cmp	r2, #0
 80069d4:	f000 8103 	beq.w	8006bde <_dtoa_r+0x83e>
 80069d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80069dc:	4644      	mov	r4, r8
 80069de:	f8cd a020 	str.w	sl, [sp, #32]
 80069e2:	2101      	movs	r1, #1
 80069e4:	4628      	mov	r0, r5
 80069e6:	449a      	add	sl, r3
 80069e8:	441f      	add	r7, r3
 80069ea:	f000 fbb9 	bl	8007160 <__i2b>
 80069ee:	4606      	mov	r6, r0
 80069f0:	9b08      	ldr	r3, [sp, #32]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	dd0a      	ble.n	8006a0c <_dtoa_r+0x66c>
 80069f6:	2f00      	cmp	r7, #0
 80069f8:	dd08      	ble.n	8006a0c <_dtoa_r+0x66c>
 80069fa:	42bb      	cmp	r3, r7
 80069fc:	9a08      	ldr	r2, [sp, #32]
 80069fe:	bfa8      	it	ge
 8006a00:	463b      	movge	r3, r7
 8006a02:	1ad2      	subs	r2, r2, r3
 8006a04:	ebaa 0a03 	sub.w	sl, sl, r3
 8006a08:	9208      	str	r2, [sp, #32]
 8006a0a:	1aff      	subs	r7, r7, r3
 8006a0c:	f1b8 0f00 	cmp.w	r8, #0
 8006a10:	d01f      	beq.n	8006a52 <_dtoa_r+0x6b2>
 8006a12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f000 8105 	beq.w	8006c24 <_dtoa_r+0x884>
 8006a1a:	2c00      	cmp	r4, #0
 8006a1c:	dd11      	ble.n	8006a42 <_dtoa_r+0x6a2>
 8006a1e:	4631      	mov	r1, r6
 8006a20:	4622      	mov	r2, r4
 8006a22:	4628      	mov	r0, r5
 8006a24:	f000 fc32 	bl	800728c <__pow5mult>
 8006a28:	9a03      	ldr	r2, [sp, #12]
 8006a2a:	4601      	mov	r1, r0
 8006a2c:	4606      	mov	r6, r0
 8006a2e:	4628      	mov	r0, r5
 8006a30:	f000 fb9f 	bl	8007172 <__multiply>
 8006a34:	9903      	ldr	r1, [sp, #12]
 8006a36:	900e      	str	r0, [sp, #56]	; 0x38
 8006a38:	4628      	mov	r0, r5
 8006a3a:	f000 faf1 	bl	8007020 <_Bfree>
 8006a3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a40:	9303      	str	r3, [sp, #12]
 8006a42:	ebb8 0204 	subs.w	r2, r8, r4
 8006a46:	d004      	beq.n	8006a52 <_dtoa_r+0x6b2>
 8006a48:	9903      	ldr	r1, [sp, #12]
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	f000 fc1e 	bl	800728c <__pow5mult>
 8006a50:	9003      	str	r0, [sp, #12]
 8006a52:	2101      	movs	r1, #1
 8006a54:	4628      	mov	r0, r5
 8006a56:	f000 fb83 	bl	8007160 <__i2b>
 8006a5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	4604      	mov	r4, r0
 8006a60:	f340 80e2 	ble.w	8006c28 <_dtoa_r+0x888>
 8006a64:	461a      	mov	r2, r3
 8006a66:	4601      	mov	r1, r0
 8006a68:	4628      	mov	r0, r5
 8006a6a:	f000 fc0f 	bl	800728c <__pow5mult>
 8006a6e:	9b07      	ldr	r3, [sp, #28]
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	4604      	mov	r4, r0
 8006a74:	f340 80db 	ble.w	8006c2e <_dtoa_r+0x88e>
 8006a78:	f04f 0800 	mov.w	r8, #0
 8006a7c:	6923      	ldr	r3, [r4, #16]
 8006a7e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006a82:	6918      	ldr	r0, [r3, #16]
 8006a84:	f000 fb1e 	bl	80070c4 <__hi0bits>
 8006a88:	f1c0 0020 	rsb	r0, r0, #32
 8006a8c:	4438      	add	r0, r7
 8006a8e:	f010 001f 	ands.w	r0, r0, #31
 8006a92:	f000 80f1 	beq.w	8006c78 <_dtoa_r+0x8d8>
 8006a96:	f1c0 0320 	rsb	r3, r0, #32
 8006a9a:	2b04      	cmp	r3, #4
 8006a9c:	f340 80e3 	ble.w	8006c66 <_dtoa_r+0x8c6>
 8006aa0:	9b08      	ldr	r3, [sp, #32]
 8006aa2:	f1c0 001c 	rsb	r0, r0, #28
 8006aa6:	4403      	add	r3, r0
 8006aa8:	4482      	add	sl, r0
 8006aaa:	9308      	str	r3, [sp, #32]
 8006aac:	4407      	add	r7, r0
 8006aae:	f1ba 0f00 	cmp.w	sl, #0
 8006ab2:	dd05      	ble.n	8006ac0 <_dtoa_r+0x720>
 8006ab4:	4652      	mov	r2, sl
 8006ab6:	9903      	ldr	r1, [sp, #12]
 8006ab8:	4628      	mov	r0, r5
 8006aba:	f000 fc35 	bl	8007328 <__lshift>
 8006abe:	9003      	str	r0, [sp, #12]
 8006ac0:	2f00      	cmp	r7, #0
 8006ac2:	dd05      	ble.n	8006ad0 <_dtoa_r+0x730>
 8006ac4:	4621      	mov	r1, r4
 8006ac6:	463a      	mov	r2, r7
 8006ac8:	4628      	mov	r0, r5
 8006aca:	f000 fc2d 	bl	8007328 <__lshift>
 8006ace:	4604      	mov	r4, r0
 8006ad0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	f000 80d2 	beq.w	8006c7c <_dtoa_r+0x8dc>
 8006ad8:	4621      	mov	r1, r4
 8006ada:	9803      	ldr	r0, [sp, #12]
 8006adc:	f000 fc75 	bl	80073ca <__mcmp>
 8006ae0:	2800      	cmp	r0, #0
 8006ae2:	f280 80cb 	bge.w	8006c7c <_dtoa_r+0x8dc>
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	220a      	movs	r2, #10
 8006aea:	9903      	ldr	r1, [sp, #12]
 8006aec:	4628      	mov	r0, r5
 8006aee:	f000 faae 	bl	800704e <__multadd>
 8006af2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006af4:	9003      	str	r0, [sp, #12]
 8006af6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f000 81ae 	beq.w	8006e5c <_dtoa_r+0xabc>
 8006b00:	2300      	movs	r3, #0
 8006b02:	4631      	mov	r1, r6
 8006b04:	220a      	movs	r2, #10
 8006b06:	4628      	mov	r0, r5
 8006b08:	f000 faa1 	bl	800704e <__multadd>
 8006b0c:	9b06      	ldr	r3, [sp, #24]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	4606      	mov	r6, r0
 8006b12:	dc03      	bgt.n	8006b1c <_dtoa_r+0x77c>
 8006b14:	9b07      	ldr	r3, [sp, #28]
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	f300 80b8 	bgt.w	8006c8c <_dtoa_r+0x8ec>
 8006b1c:	9b08      	ldr	r3, [sp, #32]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	dd05      	ble.n	8006b2e <_dtoa_r+0x78e>
 8006b22:	4631      	mov	r1, r6
 8006b24:	461a      	mov	r2, r3
 8006b26:	4628      	mov	r0, r5
 8006b28:	f000 fbfe 	bl	8007328 <__lshift>
 8006b2c:	4606      	mov	r6, r0
 8006b2e:	f1b8 0f00 	cmp.w	r8, #0
 8006b32:	f000 8115 	beq.w	8006d60 <_dtoa_r+0x9c0>
 8006b36:	6871      	ldr	r1, [r6, #4]
 8006b38:	4628      	mov	r0, r5
 8006b3a:	f000 fa3d 	bl	8006fb8 <_Balloc>
 8006b3e:	6932      	ldr	r2, [r6, #16]
 8006b40:	3202      	adds	r2, #2
 8006b42:	4607      	mov	r7, r0
 8006b44:	0092      	lsls	r2, r2, #2
 8006b46:	f106 010c 	add.w	r1, r6, #12
 8006b4a:	300c      	adds	r0, #12
 8006b4c:	f7fe fc02 	bl	8005354 <memcpy>
 8006b50:	2201      	movs	r2, #1
 8006b52:	4639      	mov	r1, r7
 8006b54:	4628      	mov	r0, r5
 8006b56:	f000 fbe7 	bl	8007328 <__lshift>
 8006b5a:	9b00      	ldr	r3, [sp, #0]
 8006b5c:	9f04      	ldr	r7, [sp, #16]
 8006b5e:	f003 0301 	and.w	r3, r3, #1
 8006b62:	46b1      	mov	r9, r6
 8006b64:	9308      	str	r3, [sp, #32]
 8006b66:	4606      	mov	r6, r0
 8006b68:	4621      	mov	r1, r4
 8006b6a:	9803      	ldr	r0, [sp, #12]
 8006b6c:	f7ff fb8a 	bl	8006284 <quorem>
 8006b70:	4649      	mov	r1, r9
 8006b72:	4682      	mov	sl, r0
 8006b74:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006b78:	9803      	ldr	r0, [sp, #12]
 8006b7a:	f000 fc26 	bl	80073ca <__mcmp>
 8006b7e:	4632      	mov	r2, r6
 8006b80:	9000      	str	r0, [sp, #0]
 8006b82:	4621      	mov	r1, r4
 8006b84:	4628      	mov	r0, r5
 8006b86:	f000 fc3a 	bl	80073fe <__mdiff>
 8006b8a:	68c3      	ldr	r3, [r0, #12]
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	f040 80e8 	bne.w	8006d64 <_dtoa_r+0x9c4>
 8006b94:	4601      	mov	r1, r0
 8006b96:	900a      	str	r0, [sp, #40]	; 0x28
 8006b98:	9803      	ldr	r0, [sp, #12]
 8006b9a:	f000 fc16 	bl	80073ca <__mcmp>
 8006b9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	4611      	mov	r1, r2
 8006ba4:	4628      	mov	r0, r5
 8006ba6:	930a      	str	r3, [sp, #40]	; 0x28
 8006ba8:	f000 fa3a 	bl	8007020 <_Bfree>
 8006bac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	f040 80da 	bne.w	8006d68 <_dtoa_r+0x9c8>
 8006bb4:	9a07      	ldr	r2, [sp, #28]
 8006bb6:	2a00      	cmp	r2, #0
 8006bb8:	f040 80d6 	bne.w	8006d68 <_dtoa_r+0x9c8>
 8006bbc:	9a08      	ldr	r2, [sp, #32]
 8006bbe:	2a00      	cmp	r2, #0
 8006bc0:	f040 80d2 	bne.w	8006d68 <_dtoa_r+0x9c8>
 8006bc4:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006bc8:	f000 80ee 	beq.w	8006da8 <_dtoa_r+0xa08>
 8006bcc:	9b00      	ldr	r3, [sp, #0]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	dd01      	ble.n	8006bd6 <_dtoa_r+0x836>
 8006bd2:	f10a 0831 	add.w	r8, sl, #49	; 0x31
 8006bd6:	1c7b      	adds	r3, r7, #1
 8006bd8:	f887 8000 	strb.w	r8, [r7]
 8006bdc:	e06b      	b.n	8006cb6 <_dtoa_r+0x916>
 8006bde:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006be0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006be4:	e6fa      	b.n	80069dc <_dtoa_r+0x63c>
 8006be6:	f109 34ff 	add.w	r4, r9, #4294967295
 8006bea:	45a0      	cmp	r8, r4
 8006bec:	bfbf      	itttt	lt
 8006bee:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8006bf0:	eba4 0808 	sublt.w	r8, r4, r8
 8006bf4:	4443      	addlt	r3, r8
 8006bf6:	930c      	strlt	r3, [sp, #48]	; 0x30
 8006bf8:	bfb6      	itet	lt
 8006bfa:	46a0      	movlt	r8, r4
 8006bfc:	eba8 0404 	subge.w	r4, r8, r4
 8006c00:	2400      	movlt	r4, #0
 8006c02:	f1b9 0f00 	cmp.w	r9, #0
 8006c06:	bfbb      	ittet	lt
 8006c08:	ebaa 0309 	sublt.w	r3, sl, r9
 8006c0c:	9308      	strlt	r3, [sp, #32]
 8006c0e:	f8cd a020 	strge.w	sl, [sp, #32]
 8006c12:	2300      	movlt	r3, #0
 8006c14:	bfa8      	it	ge
 8006c16:	464b      	movge	r3, r9
 8006c18:	e6e3      	b.n	80069e2 <_dtoa_r+0x642>
 8006c1a:	4644      	mov	r4, r8
 8006c1c:	f8cd a020 	str.w	sl, [sp, #32]
 8006c20:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006c22:	e6e5      	b.n	80069f0 <_dtoa_r+0x650>
 8006c24:	4642      	mov	r2, r8
 8006c26:	e70f      	b.n	8006a48 <_dtoa_r+0x6a8>
 8006c28:	9b07      	ldr	r3, [sp, #28]
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	dc16      	bgt.n	8006c5c <_dtoa_r+0x8bc>
 8006c2e:	9b00      	ldr	r3, [sp, #0]
 8006c30:	b9a3      	cbnz	r3, 8006c5c <_dtoa_r+0x8bc>
 8006c32:	9b01      	ldr	r3, [sp, #4]
 8006c34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c38:	b983      	cbnz	r3, 8006c5c <_dtoa_r+0x8bc>
 8006c3a:	9b01      	ldr	r3, [sp, #4]
 8006c3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c40:	0d1b      	lsrs	r3, r3, #20
 8006c42:	051b      	lsls	r3, r3, #20
 8006c44:	b16b      	cbz	r3, 8006c62 <_dtoa_r+0x8c2>
 8006c46:	f10a 0a01 	add.w	sl, sl, #1
 8006c4a:	3701      	adds	r7, #1
 8006c4c:	f04f 0801 	mov.w	r8, #1
 8006c50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	f47f af12 	bne.w	8006a7c <_dtoa_r+0x6dc>
 8006c58:	2001      	movs	r0, #1
 8006c5a:	e717      	b.n	8006a8c <_dtoa_r+0x6ec>
 8006c5c:	f04f 0800 	mov.w	r8, #0
 8006c60:	e7f6      	b.n	8006c50 <_dtoa_r+0x8b0>
 8006c62:	4698      	mov	r8, r3
 8006c64:	e7f4      	b.n	8006c50 <_dtoa_r+0x8b0>
 8006c66:	f43f af22 	beq.w	8006aae <_dtoa_r+0x70e>
 8006c6a:	9a08      	ldr	r2, [sp, #32]
 8006c6c:	331c      	adds	r3, #28
 8006c6e:	441a      	add	r2, r3
 8006c70:	449a      	add	sl, r3
 8006c72:	9208      	str	r2, [sp, #32]
 8006c74:	441f      	add	r7, r3
 8006c76:	e71a      	b.n	8006aae <_dtoa_r+0x70e>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	e7f6      	b.n	8006c6a <_dtoa_r+0x8ca>
 8006c7c:	f1b9 0f00 	cmp.w	r9, #0
 8006c80:	dc39      	bgt.n	8006cf6 <_dtoa_r+0x956>
 8006c82:	9b07      	ldr	r3, [sp, #28]
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	dd36      	ble.n	8006cf6 <_dtoa_r+0x956>
 8006c88:	f8cd 9018 	str.w	r9, [sp, #24]
 8006c8c:	9b06      	ldr	r3, [sp, #24]
 8006c8e:	b963      	cbnz	r3, 8006caa <_dtoa_r+0x90a>
 8006c90:	4621      	mov	r1, r4
 8006c92:	2205      	movs	r2, #5
 8006c94:	4628      	mov	r0, r5
 8006c96:	f000 f9da 	bl	800704e <__multadd>
 8006c9a:	4601      	mov	r1, r0
 8006c9c:	4604      	mov	r4, r0
 8006c9e:	9803      	ldr	r0, [sp, #12]
 8006ca0:	f000 fb93 	bl	80073ca <__mcmp>
 8006ca4:	2800      	cmp	r0, #0
 8006ca6:	f73f ad54 	bgt.w	8006752 <_dtoa_r+0x3b2>
 8006caa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cac:	ea6f 0b03 	mvn.w	fp, r3
 8006cb0:	9b04      	ldr	r3, [sp, #16]
 8006cb2:	f04f 0900 	mov.w	r9, #0
 8006cb6:	4621      	mov	r1, r4
 8006cb8:	4628      	mov	r0, r5
 8006cba:	9300      	str	r3, [sp, #0]
 8006cbc:	f000 f9b0 	bl	8007020 <_Bfree>
 8006cc0:	9b00      	ldr	r3, [sp, #0]
 8006cc2:	2e00      	cmp	r6, #0
 8006cc4:	f43f ae4c 	beq.w	8006960 <_dtoa_r+0x5c0>
 8006cc8:	f1b9 0f00 	cmp.w	r9, #0
 8006ccc:	d006      	beq.n	8006cdc <_dtoa_r+0x93c>
 8006cce:	45b1      	cmp	r9, r6
 8006cd0:	d004      	beq.n	8006cdc <_dtoa_r+0x93c>
 8006cd2:	4649      	mov	r1, r9
 8006cd4:	4628      	mov	r0, r5
 8006cd6:	f000 f9a3 	bl	8007020 <_Bfree>
 8006cda:	9b00      	ldr	r3, [sp, #0]
 8006cdc:	9300      	str	r3, [sp, #0]
 8006cde:	4631      	mov	r1, r6
 8006ce0:	4628      	mov	r0, r5
 8006ce2:	f000 f99d 	bl	8007020 <_Bfree>
 8006ce6:	9b00      	ldr	r3, [sp, #0]
 8006ce8:	e63a      	b.n	8006960 <_dtoa_r+0x5c0>
 8006cea:	2400      	movs	r4, #0
 8006cec:	4626      	mov	r6, r4
 8006cee:	e7dc      	b.n	8006caa <_dtoa_r+0x90a>
 8006cf0:	4693      	mov	fp, r2
 8006cf2:	4626      	mov	r6, r4
 8006cf4:	e52d      	b.n	8006752 <_dtoa_r+0x3b2>
 8006cf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cf8:	f8cd 9018 	str.w	r9, [sp, #24]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f47f af0d 	bne.w	8006b1c <_dtoa_r+0x77c>
 8006d02:	9f04      	ldr	r7, [sp, #16]
 8006d04:	9803      	ldr	r0, [sp, #12]
 8006d06:	4621      	mov	r1, r4
 8006d08:	f7ff fabc 	bl	8006284 <quorem>
 8006d0c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006d10:	f807 8b01 	strb.w	r8, [r7], #1
 8006d14:	9b04      	ldr	r3, [sp, #16]
 8006d16:	9a06      	ldr	r2, [sp, #24]
 8006d18:	1afb      	subs	r3, r7, r3
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	f300 8081 	bgt.w	8006e22 <_dtoa_r+0xa82>
 8006d20:	9b04      	ldr	r3, [sp, #16]
 8006d22:	2a01      	cmp	r2, #1
 8006d24:	bfac      	ite	ge
 8006d26:	189b      	addge	r3, r3, r2
 8006d28:	3301      	addlt	r3, #1
 8006d2a:	461f      	mov	r7, r3
 8006d2c:	f04f 0900 	mov.w	r9, #0
 8006d30:	2201      	movs	r2, #1
 8006d32:	9903      	ldr	r1, [sp, #12]
 8006d34:	4628      	mov	r0, r5
 8006d36:	f000 faf7 	bl	8007328 <__lshift>
 8006d3a:	4621      	mov	r1, r4
 8006d3c:	9003      	str	r0, [sp, #12]
 8006d3e:	f000 fb44 	bl	80073ca <__mcmp>
 8006d42:	2800      	cmp	r0, #0
 8006d44:	dc33      	bgt.n	8006dae <_dtoa_r+0xa0e>
 8006d46:	d102      	bne.n	8006d4e <_dtoa_r+0x9ae>
 8006d48:	f018 0f01 	tst.w	r8, #1
 8006d4c:	d12f      	bne.n	8006dae <_dtoa_r+0xa0e>
 8006d4e:	463b      	mov	r3, r7
 8006d50:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8006d54:	2a30      	cmp	r2, #48	; 0x30
 8006d56:	f103 31ff 	add.w	r1, r3, #4294967295
 8006d5a:	d1ac      	bne.n	8006cb6 <_dtoa_r+0x916>
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	e7f7      	b.n	8006d50 <_dtoa_r+0x9b0>
 8006d60:	4630      	mov	r0, r6
 8006d62:	e6fa      	b.n	8006b5a <_dtoa_r+0x7ba>
 8006d64:	2301      	movs	r3, #1
 8006d66:	e71c      	b.n	8006ba2 <_dtoa_r+0x802>
 8006d68:	9a00      	ldr	r2, [sp, #0]
 8006d6a:	2a00      	cmp	r2, #0
 8006d6c:	db04      	blt.n	8006d78 <_dtoa_r+0x9d8>
 8006d6e:	d127      	bne.n	8006dc0 <_dtoa_r+0xa20>
 8006d70:	9a07      	ldr	r2, [sp, #28]
 8006d72:	bb2a      	cbnz	r2, 8006dc0 <_dtoa_r+0xa20>
 8006d74:	9a08      	ldr	r2, [sp, #32]
 8006d76:	bb1a      	cbnz	r2, 8006dc0 <_dtoa_r+0xa20>
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f77f af2c 	ble.w	8006bd6 <_dtoa_r+0x836>
 8006d7e:	2201      	movs	r2, #1
 8006d80:	9903      	ldr	r1, [sp, #12]
 8006d82:	4628      	mov	r0, r5
 8006d84:	f000 fad0 	bl	8007328 <__lshift>
 8006d88:	4621      	mov	r1, r4
 8006d8a:	9003      	str	r0, [sp, #12]
 8006d8c:	f000 fb1d 	bl	80073ca <__mcmp>
 8006d90:	2800      	cmp	r0, #0
 8006d92:	dc05      	bgt.n	8006da0 <_dtoa_r+0xa00>
 8006d94:	f47f af1f 	bne.w	8006bd6 <_dtoa_r+0x836>
 8006d98:	f018 0f01 	tst.w	r8, #1
 8006d9c:	f43f af1b 	beq.w	8006bd6 <_dtoa_r+0x836>
 8006da0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006da4:	f47f af15 	bne.w	8006bd2 <_dtoa_r+0x832>
 8006da8:	2339      	movs	r3, #57	; 0x39
 8006daa:	703b      	strb	r3, [r7, #0]
 8006dac:	3701      	adds	r7, #1
 8006dae:	463b      	mov	r3, r7
 8006db0:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8006db4:	2a39      	cmp	r2, #57	; 0x39
 8006db6:	f103 31ff 	add.w	r1, r3, #4294967295
 8006dba:	d03a      	beq.n	8006e32 <_dtoa_r+0xa92>
 8006dbc:	3201      	adds	r2, #1
 8006dbe:	e03f      	b.n	8006e40 <_dtoa_r+0xaa0>
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	f107 0301 	add.w	r3, r7, #1
 8006dc6:	dd05      	ble.n	8006dd4 <_dtoa_r+0xa34>
 8006dc8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006dcc:	d0ec      	beq.n	8006da8 <_dtoa_r+0xa08>
 8006dce:	f108 0801 	add.w	r8, r8, #1
 8006dd2:	e701      	b.n	8006bd8 <_dtoa_r+0x838>
 8006dd4:	461f      	mov	r7, r3
 8006dd6:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006dda:	9b04      	ldr	r3, [sp, #16]
 8006ddc:	9a06      	ldr	r2, [sp, #24]
 8006dde:	1afb      	subs	r3, r7, r3
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d0a5      	beq.n	8006d30 <_dtoa_r+0x990>
 8006de4:	2300      	movs	r3, #0
 8006de6:	220a      	movs	r2, #10
 8006de8:	9903      	ldr	r1, [sp, #12]
 8006dea:	4628      	mov	r0, r5
 8006dec:	f000 f92f 	bl	800704e <__multadd>
 8006df0:	45b1      	cmp	r9, r6
 8006df2:	9003      	str	r0, [sp, #12]
 8006df4:	f04f 0300 	mov.w	r3, #0
 8006df8:	f04f 020a 	mov.w	r2, #10
 8006dfc:	4649      	mov	r1, r9
 8006dfe:	4628      	mov	r0, r5
 8006e00:	d104      	bne.n	8006e0c <_dtoa_r+0xa6c>
 8006e02:	f000 f924 	bl	800704e <__multadd>
 8006e06:	4681      	mov	r9, r0
 8006e08:	4606      	mov	r6, r0
 8006e0a:	e6ad      	b.n	8006b68 <_dtoa_r+0x7c8>
 8006e0c:	f000 f91f 	bl	800704e <__multadd>
 8006e10:	4631      	mov	r1, r6
 8006e12:	4681      	mov	r9, r0
 8006e14:	2300      	movs	r3, #0
 8006e16:	220a      	movs	r2, #10
 8006e18:	4628      	mov	r0, r5
 8006e1a:	f000 f918 	bl	800704e <__multadd>
 8006e1e:	4606      	mov	r6, r0
 8006e20:	e6a2      	b.n	8006b68 <_dtoa_r+0x7c8>
 8006e22:	2300      	movs	r3, #0
 8006e24:	220a      	movs	r2, #10
 8006e26:	9903      	ldr	r1, [sp, #12]
 8006e28:	4628      	mov	r0, r5
 8006e2a:	f000 f910 	bl	800704e <__multadd>
 8006e2e:	9003      	str	r0, [sp, #12]
 8006e30:	e768      	b.n	8006d04 <_dtoa_r+0x964>
 8006e32:	9a04      	ldr	r2, [sp, #16]
 8006e34:	428a      	cmp	r2, r1
 8006e36:	d105      	bne.n	8006e44 <_dtoa_r+0xaa4>
 8006e38:	9904      	ldr	r1, [sp, #16]
 8006e3a:	f10b 0b01 	add.w	fp, fp, #1
 8006e3e:	2231      	movs	r2, #49	; 0x31
 8006e40:	700a      	strb	r2, [r1, #0]
 8006e42:	e738      	b.n	8006cb6 <_dtoa_r+0x916>
 8006e44:	460b      	mov	r3, r1
 8006e46:	e7b3      	b.n	8006db0 <_dtoa_r+0xa10>
 8006e48:	4b09      	ldr	r3, [pc, #36]	; (8006e70 <_dtoa_r+0xad0>)
 8006e4a:	f7ff bb0a 	b.w	8006462 <_dtoa_r+0xc2>
 8006e4e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	f47f aae8 	bne.w	8006426 <_dtoa_r+0x86>
 8006e56:	4b07      	ldr	r3, [pc, #28]	; (8006e74 <_dtoa_r+0xad4>)
 8006e58:	f7ff bb03 	b.w	8006462 <_dtoa_r+0xc2>
 8006e5c:	9b06      	ldr	r3, [sp, #24]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	f73f af4f 	bgt.w	8006d02 <_dtoa_r+0x962>
 8006e64:	9b07      	ldr	r3, [sp, #28]
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	f77f af4b 	ble.w	8006d02 <_dtoa_r+0x962>
 8006e6c:	e70e      	b.n	8006c8c <_dtoa_r+0x8ec>
 8006e6e:	bf00      	nop
 8006e70:	08007d8c 	.word	0x08007d8c
 8006e74:	08007db0 	.word	0x08007db0

08006e78 <_localeconv_r>:
 8006e78:	4b04      	ldr	r3, [pc, #16]	; (8006e8c <_localeconv_r+0x14>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	6a18      	ldr	r0, [r3, #32]
 8006e7e:	4b04      	ldr	r3, [pc, #16]	; (8006e90 <_localeconv_r+0x18>)
 8006e80:	2800      	cmp	r0, #0
 8006e82:	bf08      	it	eq
 8006e84:	4618      	moveq	r0, r3
 8006e86:	30f0      	adds	r0, #240	; 0xf0
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	20000170 	.word	0x20000170
 8006e90:	200001d4 	.word	0x200001d4

08006e94 <_lseek_r>:
 8006e94:	b538      	push	{r3, r4, r5, lr}
 8006e96:	4c07      	ldr	r4, [pc, #28]	; (8006eb4 <_lseek_r+0x20>)
 8006e98:	4605      	mov	r5, r0
 8006e9a:	4608      	mov	r0, r1
 8006e9c:	4611      	mov	r1, r2
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	6022      	str	r2, [r4, #0]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	f7fd fb68 	bl	8004578 <_lseek>
 8006ea8:	1c43      	adds	r3, r0, #1
 8006eaa:	d102      	bne.n	8006eb2 <_lseek_r+0x1e>
 8006eac:	6823      	ldr	r3, [r4, #0]
 8006eae:	b103      	cbz	r3, 8006eb2 <_lseek_r+0x1e>
 8006eb0:	602b      	str	r3, [r5, #0]
 8006eb2:	bd38      	pop	{r3, r4, r5, pc}
 8006eb4:	20001bd8 	.word	0x20001bd8

08006eb8 <__swhatbuf_r>:
 8006eb8:	b570      	push	{r4, r5, r6, lr}
 8006eba:	460e      	mov	r6, r1
 8006ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ec0:	2900      	cmp	r1, #0
 8006ec2:	b090      	sub	sp, #64	; 0x40
 8006ec4:	4614      	mov	r4, r2
 8006ec6:	461d      	mov	r5, r3
 8006ec8:	da07      	bge.n	8006eda <__swhatbuf_r+0x22>
 8006eca:	2300      	movs	r3, #0
 8006ecc:	602b      	str	r3, [r5, #0]
 8006ece:	89b3      	ldrh	r3, [r6, #12]
 8006ed0:	061a      	lsls	r2, r3, #24
 8006ed2:	d410      	bmi.n	8006ef6 <__swhatbuf_r+0x3e>
 8006ed4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ed8:	e00e      	b.n	8006ef8 <__swhatbuf_r+0x40>
 8006eda:	aa01      	add	r2, sp, #4
 8006edc:	f000 fdfa 	bl	8007ad4 <_fstat_r>
 8006ee0:	2800      	cmp	r0, #0
 8006ee2:	dbf2      	blt.n	8006eca <__swhatbuf_r+0x12>
 8006ee4:	9a02      	ldr	r2, [sp, #8]
 8006ee6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006eea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006eee:	425a      	negs	r2, r3
 8006ef0:	415a      	adcs	r2, r3
 8006ef2:	602a      	str	r2, [r5, #0]
 8006ef4:	e7ee      	b.n	8006ed4 <__swhatbuf_r+0x1c>
 8006ef6:	2340      	movs	r3, #64	; 0x40
 8006ef8:	2000      	movs	r0, #0
 8006efa:	6023      	str	r3, [r4, #0]
 8006efc:	b010      	add	sp, #64	; 0x40
 8006efe:	bd70      	pop	{r4, r5, r6, pc}

08006f00 <__smakebuf_r>:
 8006f00:	898b      	ldrh	r3, [r1, #12]
 8006f02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f04:	079d      	lsls	r5, r3, #30
 8006f06:	4606      	mov	r6, r0
 8006f08:	460c      	mov	r4, r1
 8006f0a:	d507      	bpl.n	8006f1c <__smakebuf_r+0x1c>
 8006f0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f10:	6023      	str	r3, [r4, #0]
 8006f12:	6123      	str	r3, [r4, #16]
 8006f14:	2301      	movs	r3, #1
 8006f16:	6163      	str	r3, [r4, #20]
 8006f18:	b002      	add	sp, #8
 8006f1a:	bd70      	pop	{r4, r5, r6, pc}
 8006f1c:	ab01      	add	r3, sp, #4
 8006f1e:	466a      	mov	r2, sp
 8006f20:	f7ff ffca 	bl	8006eb8 <__swhatbuf_r>
 8006f24:	9900      	ldr	r1, [sp, #0]
 8006f26:	4605      	mov	r5, r0
 8006f28:	4630      	mov	r0, r6
 8006f2a:	f7fe fa75 	bl	8005418 <_malloc_r>
 8006f2e:	b948      	cbnz	r0, 8006f44 <__smakebuf_r+0x44>
 8006f30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f34:	059a      	lsls	r2, r3, #22
 8006f36:	d4ef      	bmi.n	8006f18 <__smakebuf_r+0x18>
 8006f38:	f023 0303 	bic.w	r3, r3, #3
 8006f3c:	f043 0302 	orr.w	r3, r3, #2
 8006f40:	81a3      	strh	r3, [r4, #12]
 8006f42:	e7e3      	b.n	8006f0c <__smakebuf_r+0xc>
 8006f44:	4b0d      	ldr	r3, [pc, #52]	; (8006f7c <__smakebuf_r+0x7c>)
 8006f46:	62b3      	str	r3, [r6, #40]	; 0x28
 8006f48:	89a3      	ldrh	r3, [r4, #12]
 8006f4a:	6020      	str	r0, [r4, #0]
 8006f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f50:	81a3      	strh	r3, [r4, #12]
 8006f52:	9b00      	ldr	r3, [sp, #0]
 8006f54:	6163      	str	r3, [r4, #20]
 8006f56:	9b01      	ldr	r3, [sp, #4]
 8006f58:	6120      	str	r0, [r4, #16]
 8006f5a:	b15b      	cbz	r3, 8006f74 <__smakebuf_r+0x74>
 8006f5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f60:	4630      	mov	r0, r6
 8006f62:	f000 fdc9 	bl	8007af8 <_isatty_r>
 8006f66:	b128      	cbz	r0, 8006f74 <__smakebuf_r+0x74>
 8006f68:	89a3      	ldrh	r3, [r4, #12]
 8006f6a:	f023 0303 	bic.w	r3, r3, #3
 8006f6e:	f043 0301 	orr.w	r3, r3, #1
 8006f72:	81a3      	strh	r3, [r4, #12]
 8006f74:	89a3      	ldrh	r3, [r4, #12]
 8006f76:	431d      	orrs	r5, r3
 8006f78:	81a5      	strh	r5, [r4, #12]
 8006f7a:	e7cd      	b.n	8006f18 <__smakebuf_r+0x18>
 8006f7c:	08005179 	.word	0x08005179

08006f80 <malloc>:
 8006f80:	4b02      	ldr	r3, [pc, #8]	; (8006f8c <malloc+0xc>)
 8006f82:	4601      	mov	r1, r0
 8006f84:	6818      	ldr	r0, [r3, #0]
 8006f86:	f7fe ba47 	b.w	8005418 <_malloc_r>
 8006f8a:	bf00      	nop
 8006f8c:	20000170 	.word	0x20000170

08006f90 <__ascii_mbtowc>:
 8006f90:	b082      	sub	sp, #8
 8006f92:	b901      	cbnz	r1, 8006f96 <__ascii_mbtowc+0x6>
 8006f94:	a901      	add	r1, sp, #4
 8006f96:	b142      	cbz	r2, 8006faa <__ascii_mbtowc+0x1a>
 8006f98:	b14b      	cbz	r3, 8006fae <__ascii_mbtowc+0x1e>
 8006f9a:	7813      	ldrb	r3, [r2, #0]
 8006f9c:	600b      	str	r3, [r1, #0]
 8006f9e:	7812      	ldrb	r2, [r2, #0]
 8006fa0:	1c10      	adds	r0, r2, #0
 8006fa2:	bf18      	it	ne
 8006fa4:	2001      	movne	r0, #1
 8006fa6:	b002      	add	sp, #8
 8006fa8:	4770      	bx	lr
 8006faa:	4610      	mov	r0, r2
 8006fac:	e7fb      	b.n	8006fa6 <__ascii_mbtowc+0x16>
 8006fae:	f06f 0001 	mvn.w	r0, #1
 8006fb2:	e7f8      	b.n	8006fa6 <__ascii_mbtowc+0x16>

08006fb4 <__malloc_lock>:
 8006fb4:	4770      	bx	lr

08006fb6 <__malloc_unlock>:
 8006fb6:	4770      	bx	lr

08006fb8 <_Balloc>:
 8006fb8:	b570      	push	{r4, r5, r6, lr}
 8006fba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006fbc:	4604      	mov	r4, r0
 8006fbe:	460e      	mov	r6, r1
 8006fc0:	b93d      	cbnz	r5, 8006fd2 <_Balloc+0x1a>
 8006fc2:	2010      	movs	r0, #16
 8006fc4:	f7ff ffdc 	bl	8006f80 <malloc>
 8006fc8:	6260      	str	r0, [r4, #36]	; 0x24
 8006fca:	6045      	str	r5, [r0, #4]
 8006fcc:	6085      	str	r5, [r0, #8]
 8006fce:	6005      	str	r5, [r0, #0]
 8006fd0:	60c5      	str	r5, [r0, #12]
 8006fd2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006fd4:	68eb      	ldr	r3, [r5, #12]
 8006fd6:	b183      	cbz	r3, 8006ffa <_Balloc+0x42>
 8006fd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006fe0:	b9b8      	cbnz	r0, 8007012 <_Balloc+0x5a>
 8006fe2:	2101      	movs	r1, #1
 8006fe4:	fa01 f506 	lsl.w	r5, r1, r6
 8006fe8:	1d6a      	adds	r2, r5, #5
 8006fea:	0092      	lsls	r2, r2, #2
 8006fec:	4620      	mov	r0, r4
 8006fee:	f000 fab3 	bl	8007558 <_calloc_r>
 8006ff2:	b160      	cbz	r0, 800700e <_Balloc+0x56>
 8006ff4:	6046      	str	r6, [r0, #4]
 8006ff6:	6085      	str	r5, [r0, #8]
 8006ff8:	e00e      	b.n	8007018 <_Balloc+0x60>
 8006ffa:	2221      	movs	r2, #33	; 0x21
 8006ffc:	2104      	movs	r1, #4
 8006ffe:	4620      	mov	r0, r4
 8007000:	f000 faaa 	bl	8007558 <_calloc_r>
 8007004:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007006:	60e8      	str	r0, [r5, #12]
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1e4      	bne.n	8006fd8 <_Balloc+0x20>
 800700e:	2000      	movs	r0, #0
 8007010:	bd70      	pop	{r4, r5, r6, pc}
 8007012:	6802      	ldr	r2, [r0, #0]
 8007014:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007018:	2300      	movs	r3, #0
 800701a:	6103      	str	r3, [r0, #16]
 800701c:	60c3      	str	r3, [r0, #12]
 800701e:	bd70      	pop	{r4, r5, r6, pc}

08007020 <_Bfree>:
 8007020:	b570      	push	{r4, r5, r6, lr}
 8007022:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007024:	4606      	mov	r6, r0
 8007026:	460d      	mov	r5, r1
 8007028:	b93c      	cbnz	r4, 800703a <_Bfree+0x1a>
 800702a:	2010      	movs	r0, #16
 800702c:	f7ff ffa8 	bl	8006f80 <malloc>
 8007030:	6270      	str	r0, [r6, #36]	; 0x24
 8007032:	6044      	str	r4, [r0, #4]
 8007034:	6084      	str	r4, [r0, #8]
 8007036:	6004      	str	r4, [r0, #0]
 8007038:	60c4      	str	r4, [r0, #12]
 800703a:	b13d      	cbz	r5, 800704c <_Bfree+0x2c>
 800703c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800703e:	686a      	ldr	r2, [r5, #4]
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007046:	6029      	str	r1, [r5, #0]
 8007048:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800704c:	bd70      	pop	{r4, r5, r6, pc}

0800704e <__multadd>:
 800704e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007052:	690d      	ldr	r5, [r1, #16]
 8007054:	461f      	mov	r7, r3
 8007056:	4606      	mov	r6, r0
 8007058:	460c      	mov	r4, r1
 800705a:	f101 0e14 	add.w	lr, r1, #20
 800705e:	2300      	movs	r3, #0
 8007060:	f8de 0000 	ldr.w	r0, [lr]
 8007064:	b281      	uxth	r1, r0
 8007066:	fb02 7101 	mla	r1, r2, r1, r7
 800706a:	0c0f      	lsrs	r7, r1, #16
 800706c:	0c00      	lsrs	r0, r0, #16
 800706e:	fb02 7000 	mla	r0, r2, r0, r7
 8007072:	b289      	uxth	r1, r1
 8007074:	3301      	adds	r3, #1
 8007076:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800707a:	429d      	cmp	r5, r3
 800707c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007080:	f84e 1b04 	str.w	r1, [lr], #4
 8007084:	dcec      	bgt.n	8007060 <__multadd+0x12>
 8007086:	b1d7      	cbz	r7, 80070be <__multadd+0x70>
 8007088:	68a3      	ldr	r3, [r4, #8]
 800708a:	429d      	cmp	r5, r3
 800708c:	db12      	blt.n	80070b4 <__multadd+0x66>
 800708e:	6861      	ldr	r1, [r4, #4]
 8007090:	4630      	mov	r0, r6
 8007092:	3101      	adds	r1, #1
 8007094:	f7ff ff90 	bl	8006fb8 <_Balloc>
 8007098:	6922      	ldr	r2, [r4, #16]
 800709a:	3202      	adds	r2, #2
 800709c:	f104 010c 	add.w	r1, r4, #12
 80070a0:	4680      	mov	r8, r0
 80070a2:	0092      	lsls	r2, r2, #2
 80070a4:	300c      	adds	r0, #12
 80070a6:	f7fe f955 	bl	8005354 <memcpy>
 80070aa:	4621      	mov	r1, r4
 80070ac:	4630      	mov	r0, r6
 80070ae:	f7ff ffb7 	bl	8007020 <_Bfree>
 80070b2:	4644      	mov	r4, r8
 80070b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80070b8:	3501      	adds	r5, #1
 80070ba:	615f      	str	r7, [r3, #20]
 80070bc:	6125      	str	r5, [r4, #16]
 80070be:	4620      	mov	r0, r4
 80070c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080070c4 <__hi0bits>:
 80070c4:	0c02      	lsrs	r2, r0, #16
 80070c6:	0412      	lsls	r2, r2, #16
 80070c8:	4603      	mov	r3, r0
 80070ca:	b9b2      	cbnz	r2, 80070fa <__hi0bits+0x36>
 80070cc:	0403      	lsls	r3, r0, #16
 80070ce:	2010      	movs	r0, #16
 80070d0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80070d4:	bf04      	itt	eq
 80070d6:	021b      	lsleq	r3, r3, #8
 80070d8:	3008      	addeq	r0, #8
 80070da:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80070de:	bf04      	itt	eq
 80070e0:	011b      	lsleq	r3, r3, #4
 80070e2:	3004      	addeq	r0, #4
 80070e4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80070e8:	bf04      	itt	eq
 80070ea:	009b      	lsleq	r3, r3, #2
 80070ec:	3002      	addeq	r0, #2
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	db06      	blt.n	8007100 <__hi0bits+0x3c>
 80070f2:	005b      	lsls	r3, r3, #1
 80070f4:	d503      	bpl.n	80070fe <__hi0bits+0x3a>
 80070f6:	3001      	adds	r0, #1
 80070f8:	4770      	bx	lr
 80070fa:	2000      	movs	r0, #0
 80070fc:	e7e8      	b.n	80070d0 <__hi0bits+0xc>
 80070fe:	2020      	movs	r0, #32
 8007100:	4770      	bx	lr

08007102 <__lo0bits>:
 8007102:	6803      	ldr	r3, [r0, #0]
 8007104:	f013 0207 	ands.w	r2, r3, #7
 8007108:	4601      	mov	r1, r0
 800710a:	d00b      	beq.n	8007124 <__lo0bits+0x22>
 800710c:	07da      	lsls	r2, r3, #31
 800710e:	d423      	bmi.n	8007158 <__lo0bits+0x56>
 8007110:	0798      	lsls	r0, r3, #30
 8007112:	bf49      	itett	mi
 8007114:	085b      	lsrmi	r3, r3, #1
 8007116:	089b      	lsrpl	r3, r3, #2
 8007118:	2001      	movmi	r0, #1
 800711a:	600b      	strmi	r3, [r1, #0]
 800711c:	bf5c      	itt	pl
 800711e:	600b      	strpl	r3, [r1, #0]
 8007120:	2002      	movpl	r0, #2
 8007122:	4770      	bx	lr
 8007124:	b298      	uxth	r0, r3
 8007126:	b9a8      	cbnz	r0, 8007154 <__lo0bits+0x52>
 8007128:	0c1b      	lsrs	r3, r3, #16
 800712a:	2010      	movs	r0, #16
 800712c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007130:	bf04      	itt	eq
 8007132:	0a1b      	lsreq	r3, r3, #8
 8007134:	3008      	addeq	r0, #8
 8007136:	071a      	lsls	r2, r3, #28
 8007138:	bf04      	itt	eq
 800713a:	091b      	lsreq	r3, r3, #4
 800713c:	3004      	addeq	r0, #4
 800713e:	079a      	lsls	r2, r3, #30
 8007140:	bf04      	itt	eq
 8007142:	089b      	lsreq	r3, r3, #2
 8007144:	3002      	addeq	r0, #2
 8007146:	07da      	lsls	r2, r3, #31
 8007148:	d402      	bmi.n	8007150 <__lo0bits+0x4e>
 800714a:	085b      	lsrs	r3, r3, #1
 800714c:	d006      	beq.n	800715c <__lo0bits+0x5a>
 800714e:	3001      	adds	r0, #1
 8007150:	600b      	str	r3, [r1, #0]
 8007152:	4770      	bx	lr
 8007154:	4610      	mov	r0, r2
 8007156:	e7e9      	b.n	800712c <__lo0bits+0x2a>
 8007158:	2000      	movs	r0, #0
 800715a:	4770      	bx	lr
 800715c:	2020      	movs	r0, #32
 800715e:	4770      	bx	lr

08007160 <__i2b>:
 8007160:	b510      	push	{r4, lr}
 8007162:	460c      	mov	r4, r1
 8007164:	2101      	movs	r1, #1
 8007166:	f7ff ff27 	bl	8006fb8 <_Balloc>
 800716a:	2201      	movs	r2, #1
 800716c:	6144      	str	r4, [r0, #20]
 800716e:	6102      	str	r2, [r0, #16]
 8007170:	bd10      	pop	{r4, pc}

08007172 <__multiply>:
 8007172:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007176:	4614      	mov	r4, r2
 8007178:	690a      	ldr	r2, [r1, #16]
 800717a:	6923      	ldr	r3, [r4, #16]
 800717c:	429a      	cmp	r2, r3
 800717e:	bfb8      	it	lt
 8007180:	460b      	movlt	r3, r1
 8007182:	4689      	mov	r9, r1
 8007184:	bfbc      	itt	lt
 8007186:	46a1      	movlt	r9, r4
 8007188:	461c      	movlt	r4, r3
 800718a:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800718e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007192:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8007196:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800719a:	eb07 060a 	add.w	r6, r7, sl
 800719e:	429e      	cmp	r6, r3
 80071a0:	bfc8      	it	gt
 80071a2:	3101      	addgt	r1, #1
 80071a4:	f7ff ff08 	bl	8006fb8 <_Balloc>
 80071a8:	f100 0514 	add.w	r5, r0, #20
 80071ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80071b0:	462b      	mov	r3, r5
 80071b2:	2200      	movs	r2, #0
 80071b4:	4543      	cmp	r3, r8
 80071b6:	d316      	bcc.n	80071e6 <__multiply+0x74>
 80071b8:	f104 0214 	add.w	r2, r4, #20
 80071bc:	f109 0114 	add.w	r1, r9, #20
 80071c0:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 80071c4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80071c8:	9301      	str	r3, [sp, #4]
 80071ca:	9c01      	ldr	r4, [sp, #4]
 80071cc:	4294      	cmp	r4, r2
 80071ce:	4613      	mov	r3, r2
 80071d0:	d80c      	bhi.n	80071ec <__multiply+0x7a>
 80071d2:	2e00      	cmp	r6, #0
 80071d4:	dd03      	ble.n	80071de <__multiply+0x6c>
 80071d6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d054      	beq.n	8007288 <__multiply+0x116>
 80071de:	6106      	str	r6, [r0, #16]
 80071e0:	b003      	add	sp, #12
 80071e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071e6:	f843 2b04 	str.w	r2, [r3], #4
 80071ea:	e7e3      	b.n	80071b4 <__multiply+0x42>
 80071ec:	f8b3 a000 	ldrh.w	sl, [r3]
 80071f0:	3204      	adds	r2, #4
 80071f2:	f1ba 0f00 	cmp.w	sl, #0
 80071f6:	d020      	beq.n	800723a <__multiply+0xc8>
 80071f8:	46ae      	mov	lr, r5
 80071fa:	4689      	mov	r9, r1
 80071fc:	f04f 0c00 	mov.w	ip, #0
 8007200:	f859 4b04 	ldr.w	r4, [r9], #4
 8007204:	f8be b000 	ldrh.w	fp, [lr]
 8007208:	b2a3      	uxth	r3, r4
 800720a:	fb0a b303 	mla	r3, sl, r3, fp
 800720e:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8007212:	f8de 4000 	ldr.w	r4, [lr]
 8007216:	4463      	add	r3, ip
 8007218:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800721c:	fb0a c40b 	mla	r4, sl, fp, ip
 8007220:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007224:	b29b      	uxth	r3, r3
 8007226:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800722a:	454f      	cmp	r7, r9
 800722c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8007230:	f84e 3b04 	str.w	r3, [lr], #4
 8007234:	d8e4      	bhi.n	8007200 <__multiply+0x8e>
 8007236:	f8ce c000 	str.w	ip, [lr]
 800723a:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 800723e:	f1b9 0f00 	cmp.w	r9, #0
 8007242:	d01f      	beq.n	8007284 <__multiply+0x112>
 8007244:	682b      	ldr	r3, [r5, #0]
 8007246:	46ae      	mov	lr, r5
 8007248:	468c      	mov	ip, r1
 800724a:	f04f 0a00 	mov.w	sl, #0
 800724e:	f8bc 4000 	ldrh.w	r4, [ip]
 8007252:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007256:	fb09 b404 	mla	r4, r9, r4, fp
 800725a:	44a2      	add	sl, r4
 800725c:	b29b      	uxth	r3, r3
 800725e:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8007262:	f84e 3b04 	str.w	r3, [lr], #4
 8007266:	f85c 3b04 	ldr.w	r3, [ip], #4
 800726a:	f8be 4000 	ldrh.w	r4, [lr]
 800726e:	0c1b      	lsrs	r3, r3, #16
 8007270:	fb09 4303 	mla	r3, r9, r3, r4
 8007274:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8007278:	4567      	cmp	r7, ip
 800727a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800727e:	d8e6      	bhi.n	800724e <__multiply+0xdc>
 8007280:	f8ce 3000 	str.w	r3, [lr]
 8007284:	3504      	adds	r5, #4
 8007286:	e7a0      	b.n	80071ca <__multiply+0x58>
 8007288:	3e01      	subs	r6, #1
 800728a:	e7a2      	b.n	80071d2 <__multiply+0x60>

0800728c <__pow5mult>:
 800728c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007290:	4615      	mov	r5, r2
 8007292:	f012 0203 	ands.w	r2, r2, #3
 8007296:	4606      	mov	r6, r0
 8007298:	460f      	mov	r7, r1
 800729a:	d007      	beq.n	80072ac <__pow5mult+0x20>
 800729c:	3a01      	subs	r2, #1
 800729e:	4c21      	ldr	r4, [pc, #132]	; (8007324 <__pow5mult+0x98>)
 80072a0:	2300      	movs	r3, #0
 80072a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80072a6:	f7ff fed2 	bl	800704e <__multadd>
 80072aa:	4607      	mov	r7, r0
 80072ac:	10ad      	asrs	r5, r5, #2
 80072ae:	d035      	beq.n	800731c <__pow5mult+0x90>
 80072b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80072b2:	b93c      	cbnz	r4, 80072c4 <__pow5mult+0x38>
 80072b4:	2010      	movs	r0, #16
 80072b6:	f7ff fe63 	bl	8006f80 <malloc>
 80072ba:	6270      	str	r0, [r6, #36]	; 0x24
 80072bc:	6044      	str	r4, [r0, #4]
 80072be:	6084      	str	r4, [r0, #8]
 80072c0:	6004      	str	r4, [r0, #0]
 80072c2:	60c4      	str	r4, [r0, #12]
 80072c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80072c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80072cc:	b94c      	cbnz	r4, 80072e2 <__pow5mult+0x56>
 80072ce:	f240 2171 	movw	r1, #625	; 0x271
 80072d2:	4630      	mov	r0, r6
 80072d4:	f7ff ff44 	bl	8007160 <__i2b>
 80072d8:	2300      	movs	r3, #0
 80072da:	f8c8 0008 	str.w	r0, [r8, #8]
 80072de:	4604      	mov	r4, r0
 80072e0:	6003      	str	r3, [r0, #0]
 80072e2:	f04f 0800 	mov.w	r8, #0
 80072e6:	07eb      	lsls	r3, r5, #31
 80072e8:	d50a      	bpl.n	8007300 <__pow5mult+0x74>
 80072ea:	4639      	mov	r1, r7
 80072ec:	4622      	mov	r2, r4
 80072ee:	4630      	mov	r0, r6
 80072f0:	f7ff ff3f 	bl	8007172 <__multiply>
 80072f4:	4639      	mov	r1, r7
 80072f6:	4681      	mov	r9, r0
 80072f8:	4630      	mov	r0, r6
 80072fa:	f7ff fe91 	bl	8007020 <_Bfree>
 80072fe:	464f      	mov	r7, r9
 8007300:	106d      	asrs	r5, r5, #1
 8007302:	d00b      	beq.n	800731c <__pow5mult+0x90>
 8007304:	6820      	ldr	r0, [r4, #0]
 8007306:	b938      	cbnz	r0, 8007318 <__pow5mult+0x8c>
 8007308:	4622      	mov	r2, r4
 800730a:	4621      	mov	r1, r4
 800730c:	4630      	mov	r0, r6
 800730e:	f7ff ff30 	bl	8007172 <__multiply>
 8007312:	6020      	str	r0, [r4, #0]
 8007314:	f8c0 8000 	str.w	r8, [r0]
 8007318:	4604      	mov	r4, r0
 800731a:	e7e4      	b.n	80072e6 <__pow5mult+0x5a>
 800731c:	4638      	mov	r0, r7
 800731e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007322:	bf00      	nop
 8007324:	08007eb8 	.word	0x08007eb8

08007328 <__lshift>:
 8007328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800732c:	460c      	mov	r4, r1
 800732e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007332:	6923      	ldr	r3, [r4, #16]
 8007334:	6849      	ldr	r1, [r1, #4]
 8007336:	eb0a 0903 	add.w	r9, sl, r3
 800733a:	68a3      	ldr	r3, [r4, #8]
 800733c:	4607      	mov	r7, r0
 800733e:	4616      	mov	r6, r2
 8007340:	f109 0501 	add.w	r5, r9, #1
 8007344:	42ab      	cmp	r3, r5
 8007346:	db31      	blt.n	80073ac <__lshift+0x84>
 8007348:	4638      	mov	r0, r7
 800734a:	f7ff fe35 	bl	8006fb8 <_Balloc>
 800734e:	2200      	movs	r2, #0
 8007350:	4680      	mov	r8, r0
 8007352:	f100 0314 	add.w	r3, r0, #20
 8007356:	4611      	mov	r1, r2
 8007358:	4552      	cmp	r2, sl
 800735a:	db2a      	blt.n	80073b2 <__lshift+0x8a>
 800735c:	6920      	ldr	r0, [r4, #16]
 800735e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007362:	f104 0114 	add.w	r1, r4, #20
 8007366:	f016 021f 	ands.w	r2, r6, #31
 800736a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800736e:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8007372:	d022      	beq.n	80073ba <__lshift+0x92>
 8007374:	f1c2 0c20 	rsb	ip, r2, #32
 8007378:	2000      	movs	r0, #0
 800737a:	680e      	ldr	r6, [r1, #0]
 800737c:	4096      	lsls	r6, r2
 800737e:	4330      	orrs	r0, r6
 8007380:	f843 0b04 	str.w	r0, [r3], #4
 8007384:	f851 0b04 	ldr.w	r0, [r1], #4
 8007388:	458e      	cmp	lr, r1
 800738a:	fa20 f00c 	lsr.w	r0, r0, ip
 800738e:	d8f4      	bhi.n	800737a <__lshift+0x52>
 8007390:	6018      	str	r0, [r3, #0]
 8007392:	b108      	cbz	r0, 8007398 <__lshift+0x70>
 8007394:	f109 0502 	add.w	r5, r9, #2
 8007398:	3d01      	subs	r5, #1
 800739a:	4638      	mov	r0, r7
 800739c:	f8c8 5010 	str.w	r5, [r8, #16]
 80073a0:	4621      	mov	r1, r4
 80073a2:	f7ff fe3d 	bl	8007020 <_Bfree>
 80073a6:	4640      	mov	r0, r8
 80073a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073ac:	3101      	adds	r1, #1
 80073ae:	005b      	lsls	r3, r3, #1
 80073b0:	e7c8      	b.n	8007344 <__lshift+0x1c>
 80073b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80073b6:	3201      	adds	r2, #1
 80073b8:	e7ce      	b.n	8007358 <__lshift+0x30>
 80073ba:	3b04      	subs	r3, #4
 80073bc:	f851 2b04 	ldr.w	r2, [r1], #4
 80073c0:	f843 2f04 	str.w	r2, [r3, #4]!
 80073c4:	458e      	cmp	lr, r1
 80073c6:	d8f9      	bhi.n	80073bc <__lshift+0x94>
 80073c8:	e7e6      	b.n	8007398 <__lshift+0x70>

080073ca <__mcmp>:
 80073ca:	6903      	ldr	r3, [r0, #16]
 80073cc:	690a      	ldr	r2, [r1, #16]
 80073ce:	1a9b      	subs	r3, r3, r2
 80073d0:	b530      	push	{r4, r5, lr}
 80073d2:	d10c      	bne.n	80073ee <__mcmp+0x24>
 80073d4:	0092      	lsls	r2, r2, #2
 80073d6:	3014      	adds	r0, #20
 80073d8:	3114      	adds	r1, #20
 80073da:	1884      	adds	r4, r0, r2
 80073dc:	4411      	add	r1, r2
 80073de:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80073e2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80073e6:	4295      	cmp	r5, r2
 80073e8:	d003      	beq.n	80073f2 <__mcmp+0x28>
 80073ea:	d305      	bcc.n	80073f8 <__mcmp+0x2e>
 80073ec:	2301      	movs	r3, #1
 80073ee:	4618      	mov	r0, r3
 80073f0:	bd30      	pop	{r4, r5, pc}
 80073f2:	42a0      	cmp	r0, r4
 80073f4:	d3f3      	bcc.n	80073de <__mcmp+0x14>
 80073f6:	e7fa      	b.n	80073ee <__mcmp+0x24>
 80073f8:	f04f 33ff 	mov.w	r3, #4294967295
 80073fc:	e7f7      	b.n	80073ee <__mcmp+0x24>

080073fe <__mdiff>:
 80073fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007402:	460d      	mov	r5, r1
 8007404:	4607      	mov	r7, r0
 8007406:	4611      	mov	r1, r2
 8007408:	4628      	mov	r0, r5
 800740a:	4614      	mov	r4, r2
 800740c:	f7ff ffdd 	bl	80073ca <__mcmp>
 8007410:	1e06      	subs	r6, r0, #0
 8007412:	d108      	bne.n	8007426 <__mdiff+0x28>
 8007414:	4631      	mov	r1, r6
 8007416:	4638      	mov	r0, r7
 8007418:	f7ff fdce 	bl	8006fb8 <_Balloc>
 800741c:	2301      	movs	r3, #1
 800741e:	6103      	str	r3, [r0, #16]
 8007420:	6146      	str	r6, [r0, #20]
 8007422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007426:	bfa4      	itt	ge
 8007428:	4623      	movge	r3, r4
 800742a:	462c      	movge	r4, r5
 800742c:	4638      	mov	r0, r7
 800742e:	6861      	ldr	r1, [r4, #4]
 8007430:	bfa6      	itte	ge
 8007432:	461d      	movge	r5, r3
 8007434:	2600      	movge	r6, #0
 8007436:	2601      	movlt	r6, #1
 8007438:	f7ff fdbe 	bl	8006fb8 <_Balloc>
 800743c:	692b      	ldr	r3, [r5, #16]
 800743e:	60c6      	str	r6, [r0, #12]
 8007440:	6926      	ldr	r6, [r4, #16]
 8007442:	f105 0914 	add.w	r9, r5, #20
 8007446:	f104 0214 	add.w	r2, r4, #20
 800744a:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800744e:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007452:	f100 0514 	add.w	r5, r0, #20
 8007456:	f04f 0c00 	mov.w	ip, #0
 800745a:	f852 ab04 	ldr.w	sl, [r2], #4
 800745e:	f859 4b04 	ldr.w	r4, [r9], #4
 8007462:	fa1c f18a 	uxtah	r1, ip, sl
 8007466:	b2a3      	uxth	r3, r4
 8007468:	1ac9      	subs	r1, r1, r3
 800746a:	0c23      	lsrs	r3, r4, #16
 800746c:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007470:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007474:	b289      	uxth	r1, r1
 8007476:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800747a:	45c8      	cmp	r8, r9
 800747c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007480:	4696      	mov	lr, r2
 8007482:	f845 3b04 	str.w	r3, [r5], #4
 8007486:	d8e8      	bhi.n	800745a <__mdiff+0x5c>
 8007488:	45be      	cmp	lr, r7
 800748a:	d305      	bcc.n	8007498 <__mdiff+0x9a>
 800748c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007490:	b18b      	cbz	r3, 80074b6 <__mdiff+0xb8>
 8007492:	6106      	str	r6, [r0, #16]
 8007494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007498:	f85e 1b04 	ldr.w	r1, [lr], #4
 800749c:	fa1c f381 	uxtah	r3, ip, r1
 80074a0:	141a      	asrs	r2, r3, #16
 80074a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074ac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80074b0:	f845 3b04 	str.w	r3, [r5], #4
 80074b4:	e7e8      	b.n	8007488 <__mdiff+0x8a>
 80074b6:	3e01      	subs	r6, #1
 80074b8:	e7e8      	b.n	800748c <__mdiff+0x8e>

080074ba <__d2b>:
 80074ba:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80074be:	460e      	mov	r6, r1
 80074c0:	2101      	movs	r1, #1
 80074c2:	ec59 8b10 	vmov	r8, r9, d0
 80074c6:	4615      	mov	r5, r2
 80074c8:	f7ff fd76 	bl	8006fb8 <_Balloc>
 80074cc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80074d0:	4607      	mov	r7, r0
 80074d2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80074d6:	bb34      	cbnz	r4, 8007526 <__d2b+0x6c>
 80074d8:	9301      	str	r3, [sp, #4]
 80074da:	f1b8 0f00 	cmp.w	r8, #0
 80074de:	d027      	beq.n	8007530 <__d2b+0x76>
 80074e0:	a802      	add	r0, sp, #8
 80074e2:	f840 8d08 	str.w	r8, [r0, #-8]!
 80074e6:	f7ff fe0c 	bl	8007102 <__lo0bits>
 80074ea:	9900      	ldr	r1, [sp, #0]
 80074ec:	b1f0      	cbz	r0, 800752c <__d2b+0x72>
 80074ee:	9a01      	ldr	r2, [sp, #4]
 80074f0:	f1c0 0320 	rsb	r3, r0, #32
 80074f4:	fa02 f303 	lsl.w	r3, r2, r3
 80074f8:	430b      	orrs	r3, r1
 80074fa:	40c2      	lsrs	r2, r0
 80074fc:	617b      	str	r3, [r7, #20]
 80074fe:	9201      	str	r2, [sp, #4]
 8007500:	9b01      	ldr	r3, [sp, #4]
 8007502:	61bb      	str	r3, [r7, #24]
 8007504:	2b00      	cmp	r3, #0
 8007506:	bf14      	ite	ne
 8007508:	2102      	movne	r1, #2
 800750a:	2101      	moveq	r1, #1
 800750c:	6139      	str	r1, [r7, #16]
 800750e:	b1c4      	cbz	r4, 8007542 <__d2b+0x88>
 8007510:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007514:	4404      	add	r4, r0
 8007516:	6034      	str	r4, [r6, #0]
 8007518:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800751c:	6028      	str	r0, [r5, #0]
 800751e:	4638      	mov	r0, r7
 8007520:	b003      	add	sp, #12
 8007522:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007526:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800752a:	e7d5      	b.n	80074d8 <__d2b+0x1e>
 800752c:	6179      	str	r1, [r7, #20]
 800752e:	e7e7      	b.n	8007500 <__d2b+0x46>
 8007530:	a801      	add	r0, sp, #4
 8007532:	f7ff fde6 	bl	8007102 <__lo0bits>
 8007536:	9b01      	ldr	r3, [sp, #4]
 8007538:	617b      	str	r3, [r7, #20]
 800753a:	2101      	movs	r1, #1
 800753c:	6139      	str	r1, [r7, #16]
 800753e:	3020      	adds	r0, #32
 8007540:	e7e5      	b.n	800750e <__d2b+0x54>
 8007542:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007546:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800754a:	6030      	str	r0, [r6, #0]
 800754c:	6918      	ldr	r0, [r3, #16]
 800754e:	f7ff fdb9 	bl	80070c4 <__hi0bits>
 8007552:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007556:	e7e1      	b.n	800751c <__d2b+0x62>

08007558 <_calloc_r>:
 8007558:	b538      	push	{r3, r4, r5, lr}
 800755a:	fb02 f401 	mul.w	r4, r2, r1
 800755e:	4621      	mov	r1, r4
 8007560:	f7fd ff5a 	bl	8005418 <_malloc_r>
 8007564:	4605      	mov	r5, r0
 8007566:	b118      	cbz	r0, 8007570 <_calloc_r+0x18>
 8007568:	4622      	mov	r2, r4
 800756a:	2100      	movs	r1, #0
 800756c:	f7fd fefd 	bl	800536a <memset>
 8007570:	4628      	mov	r0, r5
 8007572:	bd38      	pop	{r3, r4, r5, pc}

08007574 <__ssputs_r>:
 8007574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007578:	688e      	ldr	r6, [r1, #8]
 800757a:	429e      	cmp	r6, r3
 800757c:	4682      	mov	sl, r0
 800757e:	460c      	mov	r4, r1
 8007580:	4691      	mov	r9, r2
 8007582:	4698      	mov	r8, r3
 8007584:	d835      	bhi.n	80075f2 <__ssputs_r+0x7e>
 8007586:	898a      	ldrh	r2, [r1, #12]
 8007588:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800758c:	d031      	beq.n	80075f2 <__ssputs_r+0x7e>
 800758e:	6825      	ldr	r5, [r4, #0]
 8007590:	6909      	ldr	r1, [r1, #16]
 8007592:	1a6f      	subs	r7, r5, r1
 8007594:	6965      	ldr	r5, [r4, #20]
 8007596:	2302      	movs	r3, #2
 8007598:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800759c:	fb95 f5f3 	sdiv	r5, r5, r3
 80075a0:	f108 0301 	add.w	r3, r8, #1
 80075a4:	443b      	add	r3, r7
 80075a6:	429d      	cmp	r5, r3
 80075a8:	bf38      	it	cc
 80075aa:	461d      	movcc	r5, r3
 80075ac:	0553      	lsls	r3, r2, #21
 80075ae:	d531      	bpl.n	8007614 <__ssputs_r+0xa0>
 80075b0:	4629      	mov	r1, r5
 80075b2:	f7fd ff31 	bl	8005418 <_malloc_r>
 80075b6:	4606      	mov	r6, r0
 80075b8:	b950      	cbnz	r0, 80075d0 <__ssputs_r+0x5c>
 80075ba:	230c      	movs	r3, #12
 80075bc:	f8ca 3000 	str.w	r3, [sl]
 80075c0:	89a3      	ldrh	r3, [r4, #12]
 80075c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075c6:	81a3      	strh	r3, [r4, #12]
 80075c8:	f04f 30ff 	mov.w	r0, #4294967295
 80075cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075d0:	463a      	mov	r2, r7
 80075d2:	6921      	ldr	r1, [r4, #16]
 80075d4:	f7fd febe 	bl	8005354 <memcpy>
 80075d8:	89a3      	ldrh	r3, [r4, #12]
 80075da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80075de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075e2:	81a3      	strh	r3, [r4, #12]
 80075e4:	6126      	str	r6, [r4, #16]
 80075e6:	6165      	str	r5, [r4, #20]
 80075e8:	443e      	add	r6, r7
 80075ea:	1bed      	subs	r5, r5, r7
 80075ec:	6026      	str	r6, [r4, #0]
 80075ee:	60a5      	str	r5, [r4, #8]
 80075f0:	4646      	mov	r6, r8
 80075f2:	4546      	cmp	r6, r8
 80075f4:	bf28      	it	cs
 80075f6:	4646      	movcs	r6, r8
 80075f8:	4632      	mov	r2, r6
 80075fa:	4649      	mov	r1, r9
 80075fc:	6820      	ldr	r0, [r4, #0]
 80075fe:	f000 fa8b 	bl	8007b18 <memmove>
 8007602:	68a3      	ldr	r3, [r4, #8]
 8007604:	1b9b      	subs	r3, r3, r6
 8007606:	60a3      	str	r3, [r4, #8]
 8007608:	6823      	ldr	r3, [r4, #0]
 800760a:	441e      	add	r6, r3
 800760c:	6026      	str	r6, [r4, #0]
 800760e:	2000      	movs	r0, #0
 8007610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007614:	462a      	mov	r2, r5
 8007616:	f000 fa99 	bl	8007b4c <_realloc_r>
 800761a:	4606      	mov	r6, r0
 800761c:	2800      	cmp	r0, #0
 800761e:	d1e1      	bne.n	80075e4 <__ssputs_r+0x70>
 8007620:	6921      	ldr	r1, [r4, #16]
 8007622:	4650      	mov	r0, sl
 8007624:	f7fd feaa 	bl	800537c <_free_r>
 8007628:	e7c7      	b.n	80075ba <__ssputs_r+0x46>
	...

0800762c <_svfiprintf_r>:
 800762c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007630:	b09d      	sub	sp, #116	; 0x74
 8007632:	4680      	mov	r8, r0
 8007634:	9303      	str	r3, [sp, #12]
 8007636:	898b      	ldrh	r3, [r1, #12]
 8007638:	061c      	lsls	r4, r3, #24
 800763a:	460d      	mov	r5, r1
 800763c:	4616      	mov	r6, r2
 800763e:	d50f      	bpl.n	8007660 <_svfiprintf_r+0x34>
 8007640:	690b      	ldr	r3, [r1, #16]
 8007642:	b96b      	cbnz	r3, 8007660 <_svfiprintf_r+0x34>
 8007644:	2140      	movs	r1, #64	; 0x40
 8007646:	f7fd fee7 	bl	8005418 <_malloc_r>
 800764a:	6028      	str	r0, [r5, #0]
 800764c:	6128      	str	r0, [r5, #16]
 800764e:	b928      	cbnz	r0, 800765c <_svfiprintf_r+0x30>
 8007650:	230c      	movs	r3, #12
 8007652:	f8c8 3000 	str.w	r3, [r8]
 8007656:	f04f 30ff 	mov.w	r0, #4294967295
 800765a:	e0c5      	b.n	80077e8 <_svfiprintf_r+0x1bc>
 800765c:	2340      	movs	r3, #64	; 0x40
 800765e:	616b      	str	r3, [r5, #20]
 8007660:	2300      	movs	r3, #0
 8007662:	9309      	str	r3, [sp, #36]	; 0x24
 8007664:	2320      	movs	r3, #32
 8007666:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800766a:	2330      	movs	r3, #48	; 0x30
 800766c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007670:	f04f 0b01 	mov.w	fp, #1
 8007674:	4637      	mov	r7, r6
 8007676:	463c      	mov	r4, r7
 8007678:	f814 3b01 	ldrb.w	r3, [r4], #1
 800767c:	2b00      	cmp	r3, #0
 800767e:	d13c      	bne.n	80076fa <_svfiprintf_r+0xce>
 8007680:	ebb7 0a06 	subs.w	sl, r7, r6
 8007684:	d00b      	beq.n	800769e <_svfiprintf_r+0x72>
 8007686:	4653      	mov	r3, sl
 8007688:	4632      	mov	r2, r6
 800768a:	4629      	mov	r1, r5
 800768c:	4640      	mov	r0, r8
 800768e:	f7ff ff71 	bl	8007574 <__ssputs_r>
 8007692:	3001      	adds	r0, #1
 8007694:	f000 80a3 	beq.w	80077de <_svfiprintf_r+0x1b2>
 8007698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800769a:	4453      	add	r3, sl
 800769c:	9309      	str	r3, [sp, #36]	; 0x24
 800769e:	783b      	ldrb	r3, [r7, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f000 809c 	beq.w	80077de <_svfiprintf_r+0x1b2>
 80076a6:	2300      	movs	r3, #0
 80076a8:	f04f 32ff 	mov.w	r2, #4294967295
 80076ac:	9304      	str	r3, [sp, #16]
 80076ae:	9307      	str	r3, [sp, #28]
 80076b0:	9205      	str	r2, [sp, #20]
 80076b2:	9306      	str	r3, [sp, #24]
 80076b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076b8:	931a      	str	r3, [sp, #104]	; 0x68
 80076ba:	2205      	movs	r2, #5
 80076bc:	7821      	ldrb	r1, [r4, #0]
 80076be:	4850      	ldr	r0, [pc, #320]	; (8007800 <_svfiprintf_r+0x1d4>)
 80076c0:	f7f8 fdbe 	bl	8000240 <memchr>
 80076c4:	1c67      	adds	r7, r4, #1
 80076c6:	9b04      	ldr	r3, [sp, #16]
 80076c8:	b9d8      	cbnz	r0, 8007702 <_svfiprintf_r+0xd6>
 80076ca:	06d9      	lsls	r1, r3, #27
 80076cc:	bf44      	itt	mi
 80076ce:	2220      	movmi	r2, #32
 80076d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80076d4:	071a      	lsls	r2, r3, #28
 80076d6:	bf44      	itt	mi
 80076d8:	222b      	movmi	r2, #43	; 0x2b
 80076da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80076de:	7822      	ldrb	r2, [r4, #0]
 80076e0:	2a2a      	cmp	r2, #42	; 0x2a
 80076e2:	d016      	beq.n	8007712 <_svfiprintf_r+0xe6>
 80076e4:	9a07      	ldr	r2, [sp, #28]
 80076e6:	2100      	movs	r1, #0
 80076e8:	200a      	movs	r0, #10
 80076ea:	4627      	mov	r7, r4
 80076ec:	3401      	adds	r4, #1
 80076ee:	783b      	ldrb	r3, [r7, #0]
 80076f0:	3b30      	subs	r3, #48	; 0x30
 80076f2:	2b09      	cmp	r3, #9
 80076f4:	d951      	bls.n	800779a <_svfiprintf_r+0x16e>
 80076f6:	b1c9      	cbz	r1, 800772c <_svfiprintf_r+0x100>
 80076f8:	e011      	b.n	800771e <_svfiprintf_r+0xf2>
 80076fa:	2b25      	cmp	r3, #37	; 0x25
 80076fc:	d0c0      	beq.n	8007680 <_svfiprintf_r+0x54>
 80076fe:	4627      	mov	r7, r4
 8007700:	e7b9      	b.n	8007676 <_svfiprintf_r+0x4a>
 8007702:	4a3f      	ldr	r2, [pc, #252]	; (8007800 <_svfiprintf_r+0x1d4>)
 8007704:	1a80      	subs	r0, r0, r2
 8007706:	fa0b f000 	lsl.w	r0, fp, r0
 800770a:	4318      	orrs	r0, r3
 800770c:	9004      	str	r0, [sp, #16]
 800770e:	463c      	mov	r4, r7
 8007710:	e7d3      	b.n	80076ba <_svfiprintf_r+0x8e>
 8007712:	9a03      	ldr	r2, [sp, #12]
 8007714:	1d11      	adds	r1, r2, #4
 8007716:	6812      	ldr	r2, [r2, #0]
 8007718:	9103      	str	r1, [sp, #12]
 800771a:	2a00      	cmp	r2, #0
 800771c:	db01      	blt.n	8007722 <_svfiprintf_r+0xf6>
 800771e:	9207      	str	r2, [sp, #28]
 8007720:	e004      	b.n	800772c <_svfiprintf_r+0x100>
 8007722:	4252      	negs	r2, r2
 8007724:	f043 0302 	orr.w	r3, r3, #2
 8007728:	9207      	str	r2, [sp, #28]
 800772a:	9304      	str	r3, [sp, #16]
 800772c:	783b      	ldrb	r3, [r7, #0]
 800772e:	2b2e      	cmp	r3, #46	; 0x2e
 8007730:	d10e      	bne.n	8007750 <_svfiprintf_r+0x124>
 8007732:	787b      	ldrb	r3, [r7, #1]
 8007734:	2b2a      	cmp	r3, #42	; 0x2a
 8007736:	f107 0101 	add.w	r1, r7, #1
 800773a:	d132      	bne.n	80077a2 <_svfiprintf_r+0x176>
 800773c:	9b03      	ldr	r3, [sp, #12]
 800773e:	1d1a      	adds	r2, r3, #4
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	9203      	str	r2, [sp, #12]
 8007744:	2b00      	cmp	r3, #0
 8007746:	bfb8      	it	lt
 8007748:	f04f 33ff 	movlt.w	r3, #4294967295
 800774c:	3702      	adds	r7, #2
 800774e:	9305      	str	r3, [sp, #20]
 8007750:	4c2c      	ldr	r4, [pc, #176]	; (8007804 <_svfiprintf_r+0x1d8>)
 8007752:	7839      	ldrb	r1, [r7, #0]
 8007754:	2203      	movs	r2, #3
 8007756:	4620      	mov	r0, r4
 8007758:	f7f8 fd72 	bl	8000240 <memchr>
 800775c:	b138      	cbz	r0, 800776e <_svfiprintf_r+0x142>
 800775e:	2340      	movs	r3, #64	; 0x40
 8007760:	1b00      	subs	r0, r0, r4
 8007762:	fa03 f000 	lsl.w	r0, r3, r0
 8007766:	9b04      	ldr	r3, [sp, #16]
 8007768:	4303      	orrs	r3, r0
 800776a:	9304      	str	r3, [sp, #16]
 800776c:	3701      	adds	r7, #1
 800776e:	7839      	ldrb	r1, [r7, #0]
 8007770:	4825      	ldr	r0, [pc, #148]	; (8007808 <_svfiprintf_r+0x1dc>)
 8007772:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007776:	2206      	movs	r2, #6
 8007778:	1c7e      	adds	r6, r7, #1
 800777a:	f7f8 fd61 	bl	8000240 <memchr>
 800777e:	2800      	cmp	r0, #0
 8007780:	d035      	beq.n	80077ee <_svfiprintf_r+0x1c2>
 8007782:	4b22      	ldr	r3, [pc, #136]	; (800780c <_svfiprintf_r+0x1e0>)
 8007784:	b9fb      	cbnz	r3, 80077c6 <_svfiprintf_r+0x19a>
 8007786:	9b03      	ldr	r3, [sp, #12]
 8007788:	3307      	adds	r3, #7
 800778a:	f023 0307 	bic.w	r3, r3, #7
 800778e:	3308      	adds	r3, #8
 8007790:	9303      	str	r3, [sp, #12]
 8007792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007794:	444b      	add	r3, r9
 8007796:	9309      	str	r3, [sp, #36]	; 0x24
 8007798:	e76c      	b.n	8007674 <_svfiprintf_r+0x48>
 800779a:	fb00 3202 	mla	r2, r0, r2, r3
 800779e:	2101      	movs	r1, #1
 80077a0:	e7a3      	b.n	80076ea <_svfiprintf_r+0xbe>
 80077a2:	2300      	movs	r3, #0
 80077a4:	9305      	str	r3, [sp, #20]
 80077a6:	4618      	mov	r0, r3
 80077a8:	240a      	movs	r4, #10
 80077aa:	460f      	mov	r7, r1
 80077ac:	3101      	adds	r1, #1
 80077ae:	783a      	ldrb	r2, [r7, #0]
 80077b0:	3a30      	subs	r2, #48	; 0x30
 80077b2:	2a09      	cmp	r2, #9
 80077b4:	d903      	bls.n	80077be <_svfiprintf_r+0x192>
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d0ca      	beq.n	8007750 <_svfiprintf_r+0x124>
 80077ba:	9005      	str	r0, [sp, #20]
 80077bc:	e7c8      	b.n	8007750 <_svfiprintf_r+0x124>
 80077be:	fb04 2000 	mla	r0, r4, r0, r2
 80077c2:	2301      	movs	r3, #1
 80077c4:	e7f1      	b.n	80077aa <_svfiprintf_r+0x17e>
 80077c6:	ab03      	add	r3, sp, #12
 80077c8:	9300      	str	r3, [sp, #0]
 80077ca:	462a      	mov	r2, r5
 80077cc:	4b10      	ldr	r3, [pc, #64]	; (8007810 <_svfiprintf_r+0x1e4>)
 80077ce:	a904      	add	r1, sp, #16
 80077d0:	4640      	mov	r0, r8
 80077d2:	f7fd ff09 	bl	80055e8 <_printf_float>
 80077d6:	f1b0 3fff 	cmp.w	r0, #4294967295
 80077da:	4681      	mov	r9, r0
 80077dc:	d1d9      	bne.n	8007792 <_svfiprintf_r+0x166>
 80077de:	89ab      	ldrh	r3, [r5, #12]
 80077e0:	065b      	lsls	r3, r3, #25
 80077e2:	f53f af38 	bmi.w	8007656 <_svfiprintf_r+0x2a>
 80077e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077e8:	b01d      	add	sp, #116	; 0x74
 80077ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ee:	ab03      	add	r3, sp, #12
 80077f0:	9300      	str	r3, [sp, #0]
 80077f2:	462a      	mov	r2, r5
 80077f4:	4b06      	ldr	r3, [pc, #24]	; (8007810 <_svfiprintf_r+0x1e4>)
 80077f6:	a904      	add	r1, sp, #16
 80077f8:	4640      	mov	r0, r8
 80077fa:	f7fe f997 	bl	8005b2c <_printf_i>
 80077fe:	e7ea      	b.n	80077d6 <_svfiprintf_r+0x1aa>
 8007800:	08007ec4 	.word	0x08007ec4
 8007804:	08007eca 	.word	0x08007eca
 8007808:	08007ece 	.word	0x08007ece
 800780c:	080055e9 	.word	0x080055e9
 8007810:	08007575 	.word	0x08007575

08007814 <__sfputc_r>:
 8007814:	6893      	ldr	r3, [r2, #8]
 8007816:	3b01      	subs	r3, #1
 8007818:	2b00      	cmp	r3, #0
 800781a:	b410      	push	{r4}
 800781c:	6093      	str	r3, [r2, #8]
 800781e:	da09      	bge.n	8007834 <__sfputc_r+0x20>
 8007820:	6994      	ldr	r4, [r2, #24]
 8007822:	42a3      	cmp	r3, r4
 8007824:	db02      	blt.n	800782c <__sfputc_r+0x18>
 8007826:	b2cb      	uxtb	r3, r1
 8007828:	2b0a      	cmp	r3, #10
 800782a:	d103      	bne.n	8007834 <__sfputc_r+0x20>
 800782c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007830:	f7fe bc46 	b.w	80060c0 <__swbuf_r>
 8007834:	6813      	ldr	r3, [r2, #0]
 8007836:	1c58      	adds	r0, r3, #1
 8007838:	6010      	str	r0, [r2, #0]
 800783a:	7019      	strb	r1, [r3, #0]
 800783c:	b2c8      	uxtb	r0, r1
 800783e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007842:	4770      	bx	lr

08007844 <__sfputs_r>:
 8007844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007846:	4606      	mov	r6, r0
 8007848:	460f      	mov	r7, r1
 800784a:	4614      	mov	r4, r2
 800784c:	18d5      	adds	r5, r2, r3
 800784e:	42ac      	cmp	r4, r5
 8007850:	d101      	bne.n	8007856 <__sfputs_r+0x12>
 8007852:	2000      	movs	r0, #0
 8007854:	e007      	b.n	8007866 <__sfputs_r+0x22>
 8007856:	463a      	mov	r2, r7
 8007858:	f814 1b01 	ldrb.w	r1, [r4], #1
 800785c:	4630      	mov	r0, r6
 800785e:	f7ff ffd9 	bl	8007814 <__sfputc_r>
 8007862:	1c43      	adds	r3, r0, #1
 8007864:	d1f3      	bne.n	800784e <__sfputs_r+0xa>
 8007866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007868 <_vfiprintf_r>:
 8007868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800786c:	b09d      	sub	sp, #116	; 0x74
 800786e:	460c      	mov	r4, r1
 8007870:	4617      	mov	r7, r2
 8007872:	9303      	str	r3, [sp, #12]
 8007874:	4606      	mov	r6, r0
 8007876:	b118      	cbz	r0, 8007880 <_vfiprintf_r+0x18>
 8007878:	6983      	ldr	r3, [r0, #24]
 800787a:	b90b      	cbnz	r3, 8007880 <_vfiprintf_r+0x18>
 800787c:	f7fd fcbc 	bl	80051f8 <__sinit>
 8007880:	4b7c      	ldr	r3, [pc, #496]	; (8007a74 <_vfiprintf_r+0x20c>)
 8007882:	429c      	cmp	r4, r3
 8007884:	d157      	bne.n	8007936 <_vfiprintf_r+0xce>
 8007886:	6874      	ldr	r4, [r6, #4]
 8007888:	89a3      	ldrh	r3, [r4, #12]
 800788a:	0718      	lsls	r0, r3, #28
 800788c:	d55d      	bpl.n	800794a <_vfiprintf_r+0xe2>
 800788e:	6923      	ldr	r3, [r4, #16]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d05a      	beq.n	800794a <_vfiprintf_r+0xe2>
 8007894:	2300      	movs	r3, #0
 8007896:	9309      	str	r3, [sp, #36]	; 0x24
 8007898:	2320      	movs	r3, #32
 800789a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800789e:	2330      	movs	r3, #48	; 0x30
 80078a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078a4:	f04f 0b01 	mov.w	fp, #1
 80078a8:	46b8      	mov	r8, r7
 80078aa:	4645      	mov	r5, r8
 80078ac:	f815 3b01 	ldrb.w	r3, [r5], #1
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d155      	bne.n	8007960 <_vfiprintf_r+0xf8>
 80078b4:	ebb8 0a07 	subs.w	sl, r8, r7
 80078b8:	d00b      	beq.n	80078d2 <_vfiprintf_r+0x6a>
 80078ba:	4653      	mov	r3, sl
 80078bc:	463a      	mov	r2, r7
 80078be:	4621      	mov	r1, r4
 80078c0:	4630      	mov	r0, r6
 80078c2:	f7ff ffbf 	bl	8007844 <__sfputs_r>
 80078c6:	3001      	adds	r0, #1
 80078c8:	f000 80c4 	beq.w	8007a54 <_vfiprintf_r+0x1ec>
 80078cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078ce:	4453      	add	r3, sl
 80078d0:	9309      	str	r3, [sp, #36]	; 0x24
 80078d2:	f898 3000 	ldrb.w	r3, [r8]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	f000 80bc 	beq.w	8007a54 <_vfiprintf_r+0x1ec>
 80078dc:	2300      	movs	r3, #0
 80078de:	f04f 32ff 	mov.w	r2, #4294967295
 80078e2:	9304      	str	r3, [sp, #16]
 80078e4:	9307      	str	r3, [sp, #28]
 80078e6:	9205      	str	r2, [sp, #20]
 80078e8:	9306      	str	r3, [sp, #24]
 80078ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078ee:	931a      	str	r3, [sp, #104]	; 0x68
 80078f0:	2205      	movs	r2, #5
 80078f2:	7829      	ldrb	r1, [r5, #0]
 80078f4:	4860      	ldr	r0, [pc, #384]	; (8007a78 <_vfiprintf_r+0x210>)
 80078f6:	f7f8 fca3 	bl	8000240 <memchr>
 80078fa:	f105 0801 	add.w	r8, r5, #1
 80078fe:	9b04      	ldr	r3, [sp, #16]
 8007900:	2800      	cmp	r0, #0
 8007902:	d131      	bne.n	8007968 <_vfiprintf_r+0x100>
 8007904:	06d9      	lsls	r1, r3, #27
 8007906:	bf44      	itt	mi
 8007908:	2220      	movmi	r2, #32
 800790a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800790e:	071a      	lsls	r2, r3, #28
 8007910:	bf44      	itt	mi
 8007912:	222b      	movmi	r2, #43	; 0x2b
 8007914:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007918:	782a      	ldrb	r2, [r5, #0]
 800791a:	2a2a      	cmp	r2, #42	; 0x2a
 800791c:	d02c      	beq.n	8007978 <_vfiprintf_r+0x110>
 800791e:	9a07      	ldr	r2, [sp, #28]
 8007920:	2100      	movs	r1, #0
 8007922:	200a      	movs	r0, #10
 8007924:	46a8      	mov	r8, r5
 8007926:	3501      	adds	r5, #1
 8007928:	f898 3000 	ldrb.w	r3, [r8]
 800792c:	3b30      	subs	r3, #48	; 0x30
 800792e:	2b09      	cmp	r3, #9
 8007930:	d96d      	bls.n	8007a0e <_vfiprintf_r+0x1a6>
 8007932:	b371      	cbz	r1, 8007992 <_vfiprintf_r+0x12a>
 8007934:	e026      	b.n	8007984 <_vfiprintf_r+0x11c>
 8007936:	4b51      	ldr	r3, [pc, #324]	; (8007a7c <_vfiprintf_r+0x214>)
 8007938:	429c      	cmp	r4, r3
 800793a:	d101      	bne.n	8007940 <_vfiprintf_r+0xd8>
 800793c:	68b4      	ldr	r4, [r6, #8]
 800793e:	e7a3      	b.n	8007888 <_vfiprintf_r+0x20>
 8007940:	4b4f      	ldr	r3, [pc, #316]	; (8007a80 <_vfiprintf_r+0x218>)
 8007942:	429c      	cmp	r4, r3
 8007944:	bf08      	it	eq
 8007946:	68f4      	ldreq	r4, [r6, #12]
 8007948:	e79e      	b.n	8007888 <_vfiprintf_r+0x20>
 800794a:	4621      	mov	r1, r4
 800794c:	4630      	mov	r0, r6
 800794e:	f7fe fc1b 	bl	8006188 <__swsetup_r>
 8007952:	2800      	cmp	r0, #0
 8007954:	d09e      	beq.n	8007894 <_vfiprintf_r+0x2c>
 8007956:	f04f 30ff 	mov.w	r0, #4294967295
 800795a:	b01d      	add	sp, #116	; 0x74
 800795c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007960:	2b25      	cmp	r3, #37	; 0x25
 8007962:	d0a7      	beq.n	80078b4 <_vfiprintf_r+0x4c>
 8007964:	46a8      	mov	r8, r5
 8007966:	e7a0      	b.n	80078aa <_vfiprintf_r+0x42>
 8007968:	4a43      	ldr	r2, [pc, #268]	; (8007a78 <_vfiprintf_r+0x210>)
 800796a:	1a80      	subs	r0, r0, r2
 800796c:	fa0b f000 	lsl.w	r0, fp, r0
 8007970:	4318      	orrs	r0, r3
 8007972:	9004      	str	r0, [sp, #16]
 8007974:	4645      	mov	r5, r8
 8007976:	e7bb      	b.n	80078f0 <_vfiprintf_r+0x88>
 8007978:	9a03      	ldr	r2, [sp, #12]
 800797a:	1d11      	adds	r1, r2, #4
 800797c:	6812      	ldr	r2, [r2, #0]
 800797e:	9103      	str	r1, [sp, #12]
 8007980:	2a00      	cmp	r2, #0
 8007982:	db01      	blt.n	8007988 <_vfiprintf_r+0x120>
 8007984:	9207      	str	r2, [sp, #28]
 8007986:	e004      	b.n	8007992 <_vfiprintf_r+0x12a>
 8007988:	4252      	negs	r2, r2
 800798a:	f043 0302 	orr.w	r3, r3, #2
 800798e:	9207      	str	r2, [sp, #28]
 8007990:	9304      	str	r3, [sp, #16]
 8007992:	f898 3000 	ldrb.w	r3, [r8]
 8007996:	2b2e      	cmp	r3, #46	; 0x2e
 8007998:	d110      	bne.n	80079bc <_vfiprintf_r+0x154>
 800799a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800799e:	2b2a      	cmp	r3, #42	; 0x2a
 80079a0:	f108 0101 	add.w	r1, r8, #1
 80079a4:	d137      	bne.n	8007a16 <_vfiprintf_r+0x1ae>
 80079a6:	9b03      	ldr	r3, [sp, #12]
 80079a8:	1d1a      	adds	r2, r3, #4
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	9203      	str	r2, [sp, #12]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	bfb8      	it	lt
 80079b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80079b6:	f108 0802 	add.w	r8, r8, #2
 80079ba:	9305      	str	r3, [sp, #20]
 80079bc:	4d31      	ldr	r5, [pc, #196]	; (8007a84 <_vfiprintf_r+0x21c>)
 80079be:	f898 1000 	ldrb.w	r1, [r8]
 80079c2:	2203      	movs	r2, #3
 80079c4:	4628      	mov	r0, r5
 80079c6:	f7f8 fc3b 	bl	8000240 <memchr>
 80079ca:	b140      	cbz	r0, 80079de <_vfiprintf_r+0x176>
 80079cc:	2340      	movs	r3, #64	; 0x40
 80079ce:	1b40      	subs	r0, r0, r5
 80079d0:	fa03 f000 	lsl.w	r0, r3, r0
 80079d4:	9b04      	ldr	r3, [sp, #16]
 80079d6:	4303      	orrs	r3, r0
 80079d8:	9304      	str	r3, [sp, #16]
 80079da:	f108 0801 	add.w	r8, r8, #1
 80079de:	f898 1000 	ldrb.w	r1, [r8]
 80079e2:	4829      	ldr	r0, [pc, #164]	; (8007a88 <_vfiprintf_r+0x220>)
 80079e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079e8:	2206      	movs	r2, #6
 80079ea:	f108 0701 	add.w	r7, r8, #1
 80079ee:	f7f8 fc27 	bl	8000240 <memchr>
 80079f2:	2800      	cmp	r0, #0
 80079f4:	d034      	beq.n	8007a60 <_vfiprintf_r+0x1f8>
 80079f6:	4b25      	ldr	r3, [pc, #148]	; (8007a8c <_vfiprintf_r+0x224>)
 80079f8:	bb03      	cbnz	r3, 8007a3c <_vfiprintf_r+0x1d4>
 80079fa:	9b03      	ldr	r3, [sp, #12]
 80079fc:	3307      	adds	r3, #7
 80079fe:	f023 0307 	bic.w	r3, r3, #7
 8007a02:	3308      	adds	r3, #8
 8007a04:	9303      	str	r3, [sp, #12]
 8007a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a08:	444b      	add	r3, r9
 8007a0a:	9309      	str	r3, [sp, #36]	; 0x24
 8007a0c:	e74c      	b.n	80078a8 <_vfiprintf_r+0x40>
 8007a0e:	fb00 3202 	mla	r2, r0, r2, r3
 8007a12:	2101      	movs	r1, #1
 8007a14:	e786      	b.n	8007924 <_vfiprintf_r+0xbc>
 8007a16:	2300      	movs	r3, #0
 8007a18:	9305      	str	r3, [sp, #20]
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	250a      	movs	r5, #10
 8007a1e:	4688      	mov	r8, r1
 8007a20:	3101      	adds	r1, #1
 8007a22:	f898 2000 	ldrb.w	r2, [r8]
 8007a26:	3a30      	subs	r2, #48	; 0x30
 8007a28:	2a09      	cmp	r2, #9
 8007a2a:	d903      	bls.n	8007a34 <_vfiprintf_r+0x1cc>
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d0c5      	beq.n	80079bc <_vfiprintf_r+0x154>
 8007a30:	9005      	str	r0, [sp, #20]
 8007a32:	e7c3      	b.n	80079bc <_vfiprintf_r+0x154>
 8007a34:	fb05 2000 	mla	r0, r5, r0, r2
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e7f0      	b.n	8007a1e <_vfiprintf_r+0x1b6>
 8007a3c:	ab03      	add	r3, sp, #12
 8007a3e:	9300      	str	r3, [sp, #0]
 8007a40:	4622      	mov	r2, r4
 8007a42:	4b13      	ldr	r3, [pc, #76]	; (8007a90 <_vfiprintf_r+0x228>)
 8007a44:	a904      	add	r1, sp, #16
 8007a46:	4630      	mov	r0, r6
 8007a48:	f7fd fdce 	bl	80055e8 <_printf_float>
 8007a4c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007a50:	4681      	mov	r9, r0
 8007a52:	d1d8      	bne.n	8007a06 <_vfiprintf_r+0x19e>
 8007a54:	89a3      	ldrh	r3, [r4, #12]
 8007a56:	065b      	lsls	r3, r3, #25
 8007a58:	f53f af7d 	bmi.w	8007956 <_vfiprintf_r+0xee>
 8007a5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a5e:	e77c      	b.n	800795a <_vfiprintf_r+0xf2>
 8007a60:	ab03      	add	r3, sp, #12
 8007a62:	9300      	str	r3, [sp, #0]
 8007a64:	4622      	mov	r2, r4
 8007a66:	4b0a      	ldr	r3, [pc, #40]	; (8007a90 <_vfiprintf_r+0x228>)
 8007a68:	a904      	add	r1, sp, #16
 8007a6a:	4630      	mov	r0, r6
 8007a6c:	f7fe f85e 	bl	8005b2c <_printf_i>
 8007a70:	e7ec      	b.n	8007a4c <_vfiprintf_r+0x1e4>
 8007a72:	bf00      	nop
 8007a74:	08007d38 	.word	0x08007d38
 8007a78:	08007ec4 	.word	0x08007ec4
 8007a7c:	08007d58 	.word	0x08007d58
 8007a80:	08007d18 	.word	0x08007d18
 8007a84:	08007eca 	.word	0x08007eca
 8007a88:	08007ece 	.word	0x08007ece
 8007a8c:	080055e9 	.word	0x080055e9
 8007a90:	08007845 	.word	0x08007845

08007a94 <_read_r>:
 8007a94:	b538      	push	{r3, r4, r5, lr}
 8007a96:	4c07      	ldr	r4, [pc, #28]	; (8007ab4 <_read_r+0x20>)
 8007a98:	4605      	mov	r5, r0
 8007a9a:	4608      	mov	r0, r1
 8007a9c:	4611      	mov	r1, r2
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	6022      	str	r2, [r4, #0]
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	f7fc fd28 	bl	80044f8 <_read>
 8007aa8:	1c43      	adds	r3, r0, #1
 8007aaa:	d102      	bne.n	8007ab2 <_read_r+0x1e>
 8007aac:	6823      	ldr	r3, [r4, #0]
 8007aae:	b103      	cbz	r3, 8007ab2 <_read_r+0x1e>
 8007ab0:	602b      	str	r3, [r5, #0]
 8007ab2:	bd38      	pop	{r3, r4, r5, pc}
 8007ab4:	20001bd8 	.word	0x20001bd8

08007ab8 <__ascii_wctomb>:
 8007ab8:	b149      	cbz	r1, 8007ace <__ascii_wctomb+0x16>
 8007aba:	2aff      	cmp	r2, #255	; 0xff
 8007abc:	bf85      	ittet	hi
 8007abe:	238a      	movhi	r3, #138	; 0x8a
 8007ac0:	6003      	strhi	r3, [r0, #0]
 8007ac2:	700a      	strbls	r2, [r1, #0]
 8007ac4:	f04f 30ff 	movhi.w	r0, #4294967295
 8007ac8:	bf98      	it	ls
 8007aca:	2001      	movls	r0, #1
 8007acc:	4770      	bx	lr
 8007ace:	4608      	mov	r0, r1
 8007ad0:	4770      	bx	lr
	...

08007ad4 <_fstat_r>:
 8007ad4:	b538      	push	{r3, r4, r5, lr}
 8007ad6:	4c07      	ldr	r4, [pc, #28]	; (8007af4 <_fstat_r+0x20>)
 8007ad8:	2300      	movs	r3, #0
 8007ada:	4605      	mov	r5, r0
 8007adc:	4608      	mov	r0, r1
 8007ade:	4611      	mov	r1, r2
 8007ae0:	6023      	str	r3, [r4, #0]
 8007ae2:	f7fc fd42 	bl	800456a <_fstat>
 8007ae6:	1c43      	adds	r3, r0, #1
 8007ae8:	d102      	bne.n	8007af0 <_fstat_r+0x1c>
 8007aea:	6823      	ldr	r3, [r4, #0]
 8007aec:	b103      	cbz	r3, 8007af0 <_fstat_r+0x1c>
 8007aee:	602b      	str	r3, [r5, #0]
 8007af0:	bd38      	pop	{r3, r4, r5, pc}
 8007af2:	bf00      	nop
 8007af4:	20001bd8 	.word	0x20001bd8

08007af8 <_isatty_r>:
 8007af8:	b538      	push	{r3, r4, r5, lr}
 8007afa:	4c06      	ldr	r4, [pc, #24]	; (8007b14 <_isatty_r+0x1c>)
 8007afc:	2300      	movs	r3, #0
 8007afe:	4605      	mov	r5, r0
 8007b00:	4608      	mov	r0, r1
 8007b02:	6023      	str	r3, [r4, #0]
 8007b04:	f7fc fd36 	bl	8004574 <_isatty>
 8007b08:	1c43      	adds	r3, r0, #1
 8007b0a:	d102      	bne.n	8007b12 <_isatty_r+0x1a>
 8007b0c:	6823      	ldr	r3, [r4, #0]
 8007b0e:	b103      	cbz	r3, 8007b12 <_isatty_r+0x1a>
 8007b10:	602b      	str	r3, [r5, #0]
 8007b12:	bd38      	pop	{r3, r4, r5, pc}
 8007b14:	20001bd8 	.word	0x20001bd8

08007b18 <memmove>:
 8007b18:	4288      	cmp	r0, r1
 8007b1a:	b510      	push	{r4, lr}
 8007b1c:	eb01 0302 	add.w	r3, r1, r2
 8007b20:	d803      	bhi.n	8007b2a <memmove+0x12>
 8007b22:	1e42      	subs	r2, r0, #1
 8007b24:	4299      	cmp	r1, r3
 8007b26:	d10c      	bne.n	8007b42 <memmove+0x2a>
 8007b28:	bd10      	pop	{r4, pc}
 8007b2a:	4298      	cmp	r0, r3
 8007b2c:	d2f9      	bcs.n	8007b22 <memmove+0xa>
 8007b2e:	1881      	adds	r1, r0, r2
 8007b30:	1ad2      	subs	r2, r2, r3
 8007b32:	42d3      	cmn	r3, r2
 8007b34:	d100      	bne.n	8007b38 <memmove+0x20>
 8007b36:	bd10      	pop	{r4, pc}
 8007b38:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b3c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007b40:	e7f7      	b.n	8007b32 <memmove+0x1a>
 8007b42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b46:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007b4a:	e7eb      	b.n	8007b24 <memmove+0xc>

08007b4c <_realloc_r>:
 8007b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b4e:	4607      	mov	r7, r0
 8007b50:	4614      	mov	r4, r2
 8007b52:	460e      	mov	r6, r1
 8007b54:	b921      	cbnz	r1, 8007b60 <_realloc_r+0x14>
 8007b56:	4611      	mov	r1, r2
 8007b58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007b5c:	f7fd bc5c 	b.w	8005418 <_malloc_r>
 8007b60:	b922      	cbnz	r2, 8007b6c <_realloc_r+0x20>
 8007b62:	f7fd fc0b 	bl	800537c <_free_r>
 8007b66:	4625      	mov	r5, r4
 8007b68:	4628      	mov	r0, r5
 8007b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b6c:	f000 f814 	bl	8007b98 <_malloc_usable_size_r>
 8007b70:	4284      	cmp	r4, r0
 8007b72:	d90f      	bls.n	8007b94 <_realloc_r+0x48>
 8007b74:	4621      	mov	r1, r4
 8007b76:	4638      	mov	r0, r7
 8007b78:	f7fd fc4e 	bl	8005418 <_malloc_r>
 8007b7c:	4605      	mov	r5, r0
 8007b7e:	2800      	cmp	r0, #0
 8007b80:	d0f2      	beq.n	8007b68 <_realloc_r+0x1c>
 8007b82:	4631      	mov	r1, r6
 8007b84:	4622      	mov	r2, r4
 8007b86:	f7fd fbe5 	bl	8005354 <memcpy>
 8007b8a:	4631      	mov	r1, r6
 8007b8c:	4638      	mov	r0, r7
 8007b8e:	f7fd fbf5 	bl	800537c <_free_r>
 8007b92:	e7e9      	b.n	8007b68 <_realloc_r+0x1c>
 8007b94:	4635      	mov	r5, r6
 8007b96:	e7e7      	b.n	8007b68 <_realloc_r+0x1c>

08007b98 <_malloc_usable_size_r>:
 8007b98:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	f1a0 0004 	sub.w	r0, r0, #4
 8007ba2:	bfbc      	itt	lt
 8007ba4:	580b      	ldrlt	r3, [r1, r0]
 8007ba6:	18c0      	addlt	r0, r0, r3
 8007ba8:	4770      	bx	lr
	...

08007bac <_init>:
 8007bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bae:	bf00      	nop
 8007bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bb2:	bc08      	pop	{r3}
 8007bb4:	469e      	mov	lr, r3
 8007bb6:	4770      	bx	lr

08007bb8 <_fini>:
 8007bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bba:	bf00      	nop
 8007bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bbe:	bc08      	pop	{r3}
 8007bc0:	469e      	mov	lr, r3
 8007bc2:	4770      	bx	lr
