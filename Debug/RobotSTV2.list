
RobotSTV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bfc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  08006e00  08006e00  00016e00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080071e0  080071e0  000171e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080071e8  080071e8  000171e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080071ec  080071ec  000171ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000000  080071f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001760  200001dc  080073cc  000201dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000193c  080073cc  0002193c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00052fdf  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000660f  00000000  00000000  000731e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0001079d  00000000  00000000  000797f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001680  00000000  00000000  00089f98  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001be0  00000000  00000000  0008b618  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000e4fa  00000000  00000000  0008d1f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00009d88  00000000  00000000  0009b6f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000a547a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005418  00000000  00000000  000a54f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001dc 	.word	0x200001dc
 800021c:	00000000 	.word	0x00000000
 8000220:	08006de4 	.word	0x08006de4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e0 	.word	0x200001e0
 800023c:	08006de4 	.word	0x08006de4

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b97a 	b.w	80005fc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	468c      	mov	ip, r1
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	9e08      	ldr	r6, [sp, #32]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d151      	bne.n	80003d4 <__udivmoddi4+0xb4>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d96d      	bls.n	8000412 <__udivmoddi4+0xf2>
 8000336:	fab2 fe82 	clz	lr, r2
 800033a:	f1be 0f00 	cmp.w	lr, #0
 800033e:	d00b      	beq.n	8000358 <__udivmoddi4+0x38>
 8000340:	f1ce 0c20 	rsb	ip, lr, #32
 8000344:	fa01 f50e 	lsl.w	r5, r1, lr
 8000348:	fa20 fc0c 	lsr.w	ip, r0, ip
 800034c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000350:	ea4c 0c05 	orr.w	ip, ip, r5
 8000354:	fa00 f40e 	lsl.w	r4, r0, lr
 8000358:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800035c:	0c25      	lsrs	r5, r4, #16
 800035e:	fbbc f8fa 	udiv	r8, ip, sl
 8000362:	fa1f f987 	uxth.w	r9, r7
 8000366:	fb0a cc18 	mls	ip, sl, r8, ip
 800036a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800036e:	fb08 f309 	mul.w	r3, r8, r9
 8000372:	42ab      	cmp	r3, r5
 8000374:	d90a      	bls.n	800038c <__udivmoddi4+0x6c>
 8000376:	19ed      	adds	r5, r5, r7
 8000378:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800037c:	f080 8123 	bcs.w	80005c6 <__udivmoddi4+0x2a6>
 8000380:	42ab      	cmp	r3, r5
 8000382:	f240 8120 	bls.w	80005c6 <__udivmoddi4+0x2a6>
 8000386:	f1a8 0802 	sub.w	r8, r8, #2
 800038a:	443d      	add	r5, r7
 800038c:	1aed      	subs	r5, r5, r3
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb5 f0fa 	udiv	r0, r5, sl
 8000394:	fb0a 5510 	mls	r5, sl, r0, r5
 8000398:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800039c:	fb00 f909 	mul.w	r9, r0, r9
 80003a0:	45a1      	cmp	r9, r4
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x98>
 80003a4:	19e4      	adds	r4, r4, r7
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003aa:	f080 810a 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80003ae:	45a1      	cmp	r9, r4
 80003b0:	f240 8107 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80003b4:	3802      	subs	r0, #2
 80003b6:	443c      	add	r4, r7
 80003b8:	eba4 0409 	sub.w	r4, r4, r9
 80003bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003c0:	2100      	movs	r1, #0
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d061      	beq.n	800048a <__udivmoddi4+0x16a>
 80003c6:	fa24 f40e 	lsr.w	r4, r4, lr
 80003ca:	2300      	movs	r3, #0
 80003cc:	6034      	str	r4, [r6, #0]
 80003ce:	6073      	str	r3, [r6, #4]
 80003d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d907      	bls.n	80003e8 <__udivmoddi4+0xc8>
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d054      	beq.n	8000486 <__udivmoddi4+0x166>
 80003dc:	2100      	movs	r1, #0
 80003de:	e886 0021 	stmia.w	r6, {r0, r5}
 80003e2:	4608      	mov	r0, r1
 80003e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e8:	fab3 f183 	clz	r1, r3
 80003ec:	2900      	cmp	r1, #0
 80003ee:	f040 808e 	bne.w	800050e <__udivmoddi4+0x1ee>
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d302      	bcc.n	80003fc <__udivmoddi4+0xdc>
 80003f6:	4282      	cmp	r2, r0
 80003f8:	f200 80fa 	bhi.w	80005f0 <__udivmoddi4+0x2d0>
 80003fc:	1a84      	subs	r4, r0, r2
 80003fe:	eb65 0503 	sbc.w	r5, r5, r3
 8000402:	2001      	movs	r0, #1
 8000404:	46ac      	mov	ip, r5
 8000406:	2e00      	cmp	r6, #0
 8000408:	d03f      	beq.n	800048a <__udivmoddi4+0x16a>
 800040a:	e886 1010 	stmia.w	r6, {r4, ip}
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	b912      	cbnz	r2, 800041a <__udivmoddi4+0xfa>
 8000414:	2701      	movs	r7, #1
 8000416:	fbb7 f7f2 	udiv	r7, r7, r2
 800041a:	fab7 fe87 	clz	lr, r7
 800041e:	f1be 0f00 	cmp.w	lr, #0
 8000422:	d134      	bne.n	800048e <__udivmoddi4+0x16e>
 8000424:	1beb      	subs	r3, r5, r7
 8000426:	0c3a      	lsrs	r2, r7, #16
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	2101      	movs	r1, #1
 800042e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000432:	0c25      	lsrs	r5, r4, #16
 8000434:	fb02 3318 	mls	r3, r2, r8, r3
 8000438:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800043c:	fb0c f308 	mul.w	r3, ip, r8
 8000440:	42ab      	cmp	r3, r5
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x134>
 8000444:	19ed      	adds	r5, r5, r7
 8000446:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x132>
 800044c:	42ab      	cmp	r3, r5
 800044e:	f200 80d1 	bhi.w	80005f4 <__udivmoddi4+0x2d4>
 8000452:	4680      	mov	r8, r0
 8000454:	1aed      	subs	r5, r5, r3
 8000456:	b2a3      	uxth	r3, r4
 8000458:	fbb5 f0f2 	udiv	r0, r5, r2
 800045c:	fb02 5510 	mls	r5, r2, r0, r5
 8000460:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000464:	fb0c fc00 	mul.w	ip, ip, r0
 8000468:	45a4      	cmp	ip, r4
 800046a:	d907      	bls.n	800047c <__udivmoddi4+0x15c>
 800046c:	19e4      	adds	r4, r4, r7
 800046e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x15a>
 8000474:	45a4      	cmp	ip, r4
 8000476:	f200 80b8 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 800047a:	4618      	mov	r0, r3
 800047c:	eba4 040c 	sub.w	r4, r4, ip
 8000480:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000484:	e79d      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048e:	f1ce 0420 	rsb	r4, lr, #32
 8000492:	fa05 f30e 	lsl.w	r3, r5, lr
 8000496:	fa07 f70e 	lsl.w	r7, r7, lr
 800049a:	fa20 f804 	lsr.w	r8, r0, r4
 800049e:	0c3a      	lsrs	r2, r7, #16
 80004a0:	fa25 f404 	lsr.w	r4, r5, r4
 80004a4:	ea48 0803 	orr.w	r8, r8, r3
 80004a8:	fbb4 f1f2 	udiv	r1, r4, r2
 80004ac:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80004b0:	fb02 4411 	mls	r4, r2, r1, r4
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004bc:	fb01 f30c 	mul.w	r3, r1, ip
 80004c0:	42ab      	cmp	r3, r5
 80004c2:	fa00 f40e 	lsl.w	r4, r0, lr
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x1bc>
 80004c8:	19ed      	adds	r5, r5, r7
 80004ca:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80004ce:	f080 808a 	bcs.w	80005e6 <__udivmoddi4+0x2c6>
 80004d2:	42ab      	cmp	r3, r5
 80004d4:	f240 8087 	bls.w	80005e6 <__udivmoddi4+0x2c6>
 80004d8:	3902      	subs	r1, #2
 80004da:	443d      	add	r5, r7
 80004dc:	1aeb      	subs	r3, r5, r3
 80004de:	fa1f f588 	uxth.w	r5, r8
 80004e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004e6:	fb02 3310 	mls	r3, r2, r0, r3
 80004ea:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004ee:	fb00 f30c 	mul.w	r3, r0, ip
 80004f2:	42ab      	cmp	r3, r5
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x1e6>
 80004f6:	19ed      	adds	r5, r5, r7
 80004f8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fc:	d26f      	bcs.n	80005de <__udivmoddi4+0x2be>
 80004fe:	42ab      	cmp	r3, r5
 8000500:	d96d      	bls.n	80005de <__udivmoddi4+0x2be>
 8000502:	3802      	subs	r0, #2
 8000504:	443d      	add	r5, r7
 8000506:	1aeb      	subs	r3, r5, r3
 8000508:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800050c:	e78f      	b.n	800042e <__udivmoddi4+0x10e>
 800050e:	f1c1 0720 	rsb	r7, r1, #32
 8000512:	fa22 f807 	lsr.w	r8, r2, r7
 8000516:	408b      	lsls	r3, r1
 8000518:	fa05 f401 	lsl.w	r4, r5, r1
 800051c:	ea48 0303 	orr.w	r3, r8, r3
 8000520:	fa20 fe07 	lsr.w	lr, r0, r7
 8000524:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000528:	40fd      	lsrs	r5, r7
 800052a:	ea4e 0e04 	orr.w	lr, lr, r4
 800052e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000532:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000536:	fb0c 5519 	mls	r5, ip, r9, r5
 800053a:	fa1f f883 	uxth.w	r8, r3
 800053e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000542:	fb09 f408 	mul.w	r4, r9, r8
 8000546:	42ac      	cmp	r4, r5
 8000548:	fa02 f201 	lsl.w	r2, r2, r1
 800054c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000550:	d908      	bls.n	8000564 <__udivmoddi4+0x244>
 8000552:	18ed      	adds	r5, r5, r3
 8000554:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000558:	d243      	bcs.n	80005e2 <__udivmoddi4+0x2c2>
 800055a:	42ac      	cmp	r4, r5
 800055c:	d941      	bls.n	80005e2 <__udivmoddi4+0x2c2>
 800055e:	f1a9 0902 	sub.w	r9, r9, #2
 8000562:	441d      	add	r5, r3
 8000564:	1b2d      	subs	r5, r5, r4
 8000566:	fa1f fe8e 	uxth.w	lr, lr
 800056a:	fbb5 f0fc 	udiv	r0, r5, ip
 800056e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000572:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000576:	fb00 f808 	mul.w	r8, r0, r8
 800057a:	45a0      	cmp	r8, r4
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x26e>
 800057e:	18e4      	adds	r4, r4, r3
 8000580:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000584:	d229      	bcs.n	80005da <__udivmoddi4+0x2ba>
 8000586:	45a0      	cmp	r8, r4
 8000588:	d927      	bls.n	80005da <__udivmoddi4+0x2ba>
 800058a:	3802      	subs	r0, #2
 800058c:	441c      	add	r4, r3
 800058e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000592:	eba4 0408 	sub.w	r4, r4, r8
 8000596:	fba0 8902 	umull	r8, r9, r0, r2
 800059a:	454c      	cmp	r4, r9
 800059c:	46c6      	mov	lr, r8
 800059e:	464d      	mov	r5, r9
 80005a0:	d315      	bcc.n	80005ce <__udivmoddi4+0x2ae>
 80005a2:	d012      	beq.n	80005ca <__udivmoddi4+0x2aa>
 80005a4:	b156      	cbz	r6, 80005bc <__udivmoddi4+0x29c>
 80005a6:	ebba 030e 	subs.w	r3, sl, lr
 80005aa:	eb64 0405 	sbc.w	r4, r4, r5
 80005ae:	fa04 f707 	lsl.w	r7, r4, r7
 80005b2:	40cb      	lsrs	r3, r1
 80005b4:	431f      	orrs	r7, r3
 80005b6:	40cc      	lsrs	r4, r1
 80005b8:	6037      	str	r7, [r6, #0]
 80005ba:	6074      	str	r4, [r6, #4]
 80005bc:	2100      	movs	r1, #0
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	4618      	mov	r0, r3
 80005c4:	e6f8      	b.n	80003b8 <__udivmoddi4+0x98>
 80005c6:	4690      	mov	r8, r2
 80005c8:	e6e0      	b.n	800038c <__udivmoddi4+0x6c>
 80005ca:	45c2      	cmp	sl, r8
 80005cc:	d2ea      	bcs.n	80005a4 <__udivmoddi4+0x284>
 80005ce:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d2:	eb69 0503 	sbc.w	r5, r9, r3
 80005d6:	3801      	subs	r0, #1
 80005d8:	e7e4      	b.n	80005a4 <__udivmoddi4+0x284>
 80005da:	4628      	mov	r0, r5
 80005dc:	e7d7      	b.n	800058e <__udivmoddi4+0x26e>
 80005de:	4640      	mov	r0, r8
 80005e0:	e791      	b.n	8000506 <__udivmoddi4+0x1e6>
 80005e2:	4681      	mov	r9, r0
 80005e4:	e7be      	b.n	8000564 <__udivmoddi4+0x244>
 80005e6:	4601      	mov	r1, r0
 80005e8:	e778      	b.n	80004dc <__udivmoddi4+0x1bc>
 80005ea:	3802      	subs	r0, #2
 80005ec:	443c      	add	r4, r7
 80005ee:	e745      	b.n	800047c <__udivmoddi4+0x15c>
 80005f0:	4608      	mov	r0, r1
 80005f2:	e708      	b.n	8000406 <__udivmoddi4+0xe6>
 80005f4:	f1a8 0802 	sub.w	r8, r8, #2
 80005f8:	443d      	add	r5, r7
 80005fa:	e72b      	b.n	8000454 <__udivmoddi4+0x134>

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000600:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <HAL_InitTick+0x3c>)
{
 8000604:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000606:	4a0e      	ldr	r2, [pc, #56]	; (8000640 <HAL_InitTick+0x40>)
 8000608:	7818      	ldrb	r0, [r3, #0]
 800060a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800060e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000612:	6810      	ldr	r0, [r2, #0]
 8000614:	fbb0 f0f3 	udiv	r0, r0, r3
 8000618:	f000 f8aa 	bl	8000770 <HAL_SYSTICK_Config>
 800061c:	4604      	mov	r4, r0
 800061e:	b958      	cbnz	r0, 8000638 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000620:	2d0f      	cmp	r5, #15
 8000622:	d809      	bhi.n	8000638 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000624:	4602      	mov	r2, r0
 8000626:	4629      	mov	r1, r5
 8000628:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800062c:	f000 f84e 	bl	80006cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000630:	4b04      	ldr	r3, [pc, #16]	; (8000644 <HAL_InitTick+0x44>)
 8000632:	4620      	mov	r0, r4
 8000634:	601d      	str	r5, [r3, #0]
 8000636:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000638:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800063a:	bd38      	pop	{r3, r4, r5, pc}
 800063c:	20000000 	.word	0x20000000
 8000640:	20000008 	.word	0x20000008
 8000644:	20000004 	.word	0x20000004

08000648 <HAL_Init>:
{
 8000648:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800064a:	2003      	movs	r0, #3
 800064c:	f000 f82c 	bl	80006a8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000650:	2000      	movs	r0, #0
 8000652:	f7ff ffd5 	bl	8000600 <HAL_InitTick>
  HAL_MspInit();
 8000656:	f002 ffd7 	bl	8003608 <HAL_MspInit>
}
 800065a:	2000      	movs	r0, #0
 800065c:	bd08      	pop	{r3, pc}
	...

08000660 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000660:	4a03      	ldr	r2, [pc, #12]	; (8000670 <HAL_IncTick+0x10>)
 8000662:	4b04      	ldr	r3, [pc, #16]	; (8000674 <HAL_IncTick+0x14>)
 8000664:	6811      	ldr	r1, [r2, #0]
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	440b      	add	r3, r1
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20000274 	.word	0x20000274
 8000674:	20000000 	.word	0x20000000

08000678 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000678:	4b01      	ldr	r3, [pc, #4]	; (8000680 <HAL_GetTick+0x8>)
 800067a:	6818      	ldr	r0, [r3, #0]
}
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	20000274 	.word	0x20000274

08000684 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000684:	b538      	push	{r3, r4, r5, lr}
 8000686:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000688:	f7ff fff6 	bl	8000678 <HAL_GetTick>
 800068c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800068e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000690:	bf1e      	ittt	ne
 8000692:	4b04      	ldrne	r3, [pc, #16]	; (80006a4 <HAL_Delay+0x20>)
 8000694:	781b      	ldrbne	r3, [r3, #0]
 8000696:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000698:	f7ff ffee 	bl	8000678 <HAL_GetTick>
 800069c:	1b40      	subs	r0, r0, r5
 800069e:	4284      	cmp	r4, r0
 80006a0:	d8fa      	bhi.n	8000698 <HAL_Delay+0x14>
  {
  }
}
 80006a2:	bd38      	pop	{r3, r4, r5, pc}
 80006a4:	20000000 	.word	0x20000000

080006a8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a8:	4a07      	ldr	r2, [pc, #28]	; (80006c8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80006aa:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006ac:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80006ae:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006b2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006b6:	041b      	lsls	r3, r3, #16
 80006b8:	0c1b      	lsrs	r3, r3, #16
 80006ba:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80006c2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80006c4:	60d3      	str	r3, [r2, #12]
 80006c6:	4770      	bx	lr
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006cc:	4b19      	ldr	r3, [pc, #100]	; (8000734 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006ce:	b530      	push	{r4, r5, lr}
 80006d0:	68dc      	ldr	r4, [r3, #12]
 80006d2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006da:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006dc:	2b04      	cmp	r3, #4
 80006de:	bf28      	it	cs
 80006e0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e4:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e8:	bf8c      	ite	hi
 80006ea:	3c03      	subhi	r4, #3
 80006ec:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ee:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) < 0)
 80006f2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80006f8:	ea01 0103 	and.w	r1, r1, r3
 80006fc:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000700:	fa05 f404 	lsl.w	r4, r5, r4
 8000704:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8000708:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800070c:	ea42 0201 	orr.w	r2, r2, r1
 8000710:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) < 0)
 8000714:	da05      	bge.n	8000722 <HAL_NVIC_SetPriority+0x56>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000716:	f000 000f 	and.w	r0, r0, #15
 800071a:	b2d2      	uxtb	r2, r2
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <HAL_NVIC_SetPriority+0x6c>)
 800071e:	541a      	strb	r2, [r3, r0]
 8000720:	bd30      	pop	{r4, r5, pc}
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000722:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000726:	b2d2      	uxtb	r2, r2
 8000728:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800072c:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	bf00      	nop
 8000734:	e000ed00 	.word	0xe000ed00
 8000738:	e000ed14 	.word	0xe000ed14

0800073c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800073c:	0942      	lsrs	r2, r0, #5
 800073e:	2301      	movs	r3, #1
 8000740:	f000 001f 	and.w	r0, r0, #31
 8000744:	fa03 f000 	lsl.w	r0, r3, r0
 8000748:	4b01      	ldr	r3, [pc, #4]	; (8000750 <HAL_NVIC_EnableIRQ+0x14>)
 800074a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800074e:	4770      	bx	lr
 8000750:	e000e100 	.word	0xe000e100

08000754 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000754:	0943      	lsrs	r3, r0, #5
 8000756:	2201      	movs	r2, #1
 8000758:	f000 001f 	and.w	r0, r0, #31
 800075c:	3320      	adds	r3, #32
 800075e:	fa02 f000 	lsl.w	r0, r2, r0
 8000762:	4a02      	ldr	r2, [pc, #8]	; (800076c <HAL_NVIC_DisableIRQ+0x18>)
 8000764:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	e000e100 	.word	0xe000e100

08000770 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000770:	3801      	subs	r0, #1
 8000772:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000776:	d20a      	bcs.n	800078e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800077a:	21f0      	movs	r1, #240	; 0xf0
 800077c:	4a06      	ldr	r2, [pc, #24]	; (8000798 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800077e:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000780:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000782:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000786:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000788:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800078e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	e000e010 	.word	0xe000e010
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800079c:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800079e:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	bf0c      	ite	eq
 80007a4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80007a8:	f022 0204 	bicne.w	r2, r2, #4
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	4770      	bx	lr
 80007b0:	e000e010 	.word	0xe000e010

080007b4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80007b4:	4770      	bx	lr

080007b6 <HAL_SYSTICK_IRQHandler>:
{
 80007b6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80007b8:	f7ff fffc 	bl	80007b4 <HAL_SYSTICK_Callback>
 80007bc:	bd08      	pop	{r3, pc}
	...

080007c0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80007c0:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 80007c2:	4604      	mov	r4, r0
 80007c4:	b908      	cbnz	r0, 80007ca <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 80007c6:	2001      	movs	r0, #1
 80007c8:	bd10      	pop	{r4, pc}
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if(hcrc->State == HAL_CRC_STATE_RESET)
 80007ca:	7f43      	ldrb	r3, [r0, #29]
 80007cc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80007d0:	b913      	cbnz	r3, 80007d8 <HAL_CRC_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80007d2:	7702      	strb	r2, [r0, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80007d4:	f002 faf2 	bl	8002dbc <HAL_CRC_MspInit>
  }
  
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80007d8:	2302      	movs	r3, #2
 80007da:	7763      	strb	r3, [r4, #29]
  
  /* check whether or not non-default generating polynomial has been 
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse)); 
  if(hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80007dc:	7923      	ldrb	r3, [r4, #4]
 80007de:	b9e3      	cbnz	r3, 800081a <HAL_CRC_Init+0x5a>
  {
    /* initialize IP with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 80007e0:	6823      	ldr	r3, [r4, #0]
 80007e2:	4a13      	ldr	r2, [pc, #76]	; (8000830 <HAL_CRC_Init+0x70>)
 80007e4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80007e6:	689a      	ldr	r2, [r3, #8]
 80007e8:	f022 0218 	bic.w	r2, r2, #24
 80007ec:	609a      	str	r2, [r3, #8]
  }
  
  /* check whether or not non-default CRC initial value has been 
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if(hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80007ee:	7962      	ldrb	r2, [r4, #5]
 80007f0:	6823      	ldr	r3, [r4, #0]
 80007f2:	b9d2      	cbnz	r2, 800082a <HAL_CRC_Init+0x6a>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 80007f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80007f8:	611a      	str	r2, [r3, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
  
  /* Return function status */
  return HAL_OK;
 80007fa:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 80007fc:	689a      	ldr	r2, [r3, #8]
 80007fe:	6961      	ldr	r1, [r4, #20]
 8000800:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8000804:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 8000806:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 8000808:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 800080a:	689a      	ldr	r2, [r3, #8]
 800080c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000810:	430a      	orrs	r2, r1
 8000812:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8000814:	2301      	movs	r3, #1
 8000816:	7763      	strb	r3, [r4, #29]
}
 8000818:	bd10      	pop	{r4, pc}
    if(HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800081a:	68e2      	ldr	r2, [r4, #12]
 800081c:	4620      	mov	r0, r4
 800081e:	68a1      	ldr	r1, [r4, #8]
 8000820:	f000 f808 	bl	8000834 <HAL_CRCEx_Polynomial_Set>
 8000824:	2800      	cmp	r0, #0
 8000826:	d0e2      	beq.n	80007ee <HAL_CRC_Init+0x2e>
 8000828:	e7cd      	b.n	80007c6 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800082a:	6922      	ldr	r2, [r4, #16]
 800082c:	e7e4      	b.n	80007f8 <HAL_CRC_Init+0x38>
 800082e:	bf00      	nop
 8000830:	04c11db7 	.word	0x04c11db7

08000834 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000834:	231f      	movs	r3, #31
{
 8000836:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & ((uint32_t)(0x1) << msb)) == 0) && (msb-- > 0))
 8000838:	fa21 f403 	lsr.w	r4, r1, r3
 800083c:	07e4      	lsls	r4, r4, #31
 800083e:	d40a      	bmi.n	8000856 <HAL_CRCEx_Polynomial_Set+0x22>
 8000840:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8000844:	d2f8      	bcs.n	8000838 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8000846:	2a10      	cmp	r2, #16
 8000848:	d003      	beq.n	8000852 <HAL_CRCEx_Polynomial_Set+0x1e>
 800084a:	2a18      	cmp	r2, #24
 800084c:	d001      	beq.n	8000852 <HAL_CRCEx_Polynomial_Set+0x1e>
 800084e:	2a08      	cmp	r2, #8
 8000850:	d10b      	bne.n	800086a <HAL_CRCEx_Polynomial_Set+0x36>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
      { 
        return  HAL_ERROR;
 8000852:	2001      	movs	r0, #1
 8000854:	bd10      	pop	{r4, pc}
  switch (PolyLength)
 8000856:	2a10      	cmp	r2, #16
 8000858:	d010      	beq.n	800087c <HAL_CRCEx_Polynomial_Set+0x48>
 800085a:	2a18      	cmp	r2, #24
 800085c:	d003      	beq.n	8000866 <HAL_CRCEx_Polynomial_Set+0x32>
 800085e:	2a08      	cmp	r2, #8
 8000860:	d103      	bne.n	800086a <HAL_CRCEx_Polynomial_Set+0x36>
      {
        return  HAL_ERROR;
      }
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8000862:	2b0f      	cmp	r3, #15
 8000864:	e000      	b.n	8000868 <HAL_CRCEx_Polynomial_Set+0x34>
      if (msb >= HAL_CRC_LENGTH_7B)
 8000866:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8000868:	d8f3      	bhi.n	8000852 <HAL_CRCEx_Polynomial_Set+0x1e>
  default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 800086a:	6800      	ldr	r0, [r0, #0]
 800086c:	6141      	str	r1, [r0, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 800086e:	6883      	ldr	r3, [r0, #8]
 8000870:	f023 0318 	bic.w	r3, r3, #24
 8000874:	431a      	orrs	r2, r3
 8000876:	6082      	str	r2, [r0, #8]
  
  /* Return function status */
  return HAL_OK;
 8000878:	2000      	movs	r0, #0
 800087a:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 800087c:	2b07      	cmp	r3, #7
 800087e:	e7f3      	b.n	8000868 <HAL_CRCEx_Polynomial_Set+0x34>

08000880 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000880:	6803      	ldr	r3, [r0, #0]
 8000882:	2118      	movs	r1, #24
 8000884:	b2da      	uxtb	r2, r3
 8000886:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800088a:	3a10      	subs	r2, #16
 800088c:	f023 0303 	bic.w	r3, r3, #3
 8000890:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000894:	4904      	ldr	r1, [pc, #16]	; (80008a8 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8000896:	2a03      	cmp	r2, #3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000898:	5c89      	ldrb	r1, [r1, r2]
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800089a:	bf88      	it	hi
 800089c:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800089e:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80008a0:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 80008a2:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	08006e00 	.word	0x08006e00

080008ac <HAL_DMA_Init>:
{
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80008b0:	f7ff fee2 	bl	8000678 <HAL_GetTick>
 80008b4:	4605      	mov	r5, r0
  if(hdma == NULL)
 80008b6:	2c00      	cmp	r4, #0
 80008b8:	d071      	beq.n	800099e <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 80008ba:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 80008bc:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 80008be:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80008c2:	2302      	movs	r3, #2
 80008c4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80008c8:	6813      	ldr	r3, [r2, #0]
 80008ca:	f023 0301 	bic.w	r3, r3, #1
 80008ce:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80008d0:	6821      	ldr	r1, [r4, #0]
 80008d2:	680b      	ldr	r3, [r1, #0]
 80008d4:	07d8      	lsls	r0, r3, #31
 80008d6:	d43c      	bmi.n	8000952 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 80008d8:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80008da:	4d32      	ldr	r5, [pc, #200]	; (80009a4 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008dc:	6862      	ldr	r2, [r4, #4]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80008de:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008e0:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008e2:	69a0      	ldr	r0, [r4, #24]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008e4:	4313      	orrs	r3, r2
 80008e6:	68e2      	ldr	r2, [r4, #12]
 80008e8:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008ea:	6922      	ldr	r2, [r4, #16]
 80008ec:	4313      	orrs	r3, r2
 80008ee:	6962      	ldr	r2, [r4, #20]
 80008f0:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008f2:	69e2      	ldr	r2, [r4, #28]
 80008f4:	4303      	orrs	r3, r0
 80008f6:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80008f8:	6a22      	ldr	r2, [r4, #32]
 80008fa:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80008fe:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000900:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000904:	bf01      	itttt	eq
 8000906:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8000908:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 800090a:	4335      	orreq	r5, r6
 800090c:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800090e:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 8000910:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8000912:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000914:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8000918:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800091c:	d10b      	bne.n	8000936 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 800091e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000920:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8000922:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000924:	b13d      	cbz	r5, 8000936 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000926:	b9f8      	cbnz	r0, 8000968 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8000928:	2a01      	cmp	r2, #1
 800092a:	d02d      	beq.n	8000988 <HAL_DMA_Init+0xdc>
 800092c:	d301      	bcc.n	8000932 <HAL_DMA_Init+0x86>
 800092e:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000930:	d101      	bne.n	8000936 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000932:	01ea      	lsls	r2, r5, #7
 8000934:	d42b      	bmi.n	800098e <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8000936:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000938:	4620      	mov	r0, r4
 800093a:	f7ff ffa1 	bl	8000880 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800093e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000940:	233f      	movs	r3, #63	; 0x3f
 8000942:	4093      	lsls	r3, r2
 8000944:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000946:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000948:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800094a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800094c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000950:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000952:	f7ff fe91 	bl	8000678 <HAL_GetTick>
 8000956:	1b40      	subs	r0, r0, r5
 8000958:	2805      	cmp	r0, #5
 800095a:	d9b9      	bls.n	80008d0 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800095c:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800095e:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000960:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000962:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000966:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000968:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800096c:	d113      	bne.n	8000996 <HAL_DMA_Init+0xea>
    switch (tmp)
 800096e:	2a03      	cmp	r2, #3
 8000970:	d8e1      	bhi.n	8000936 <HAL_DMA_Init+0x8a>
 8000972:	a001      	add	r0, pc, #4	; (adr r0, 8000978 <HAL_DMA_Init+0xcc>)
 8000974:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000978:	0800098f 	.word	0x0800098f
 800097c:	08000933 	.word	0x08000933
 8000980:	0800098f 	.word	0x0800098f
 8000984:	08000989 	.word	0x08000989
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000988:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800098c:	d1d3      	bne.n	8000936 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800098e:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8000990:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000992:	6563      	str	r3, [r4, #84]	; 0x54
 8000994:	e7e5      	b.n	8000962 <HAL_DMA_Init+0xb6>
    switch (tmp)
 8000996:	2a02      	cmp	r2, #2
 8000998:	d9f9      	bls.n	800098e <HAL_DMA_Init+0xe2>
 800099a:	2a03      	cmp	r2, #3
 800099c:	e7c8      	b.n	8000930 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 800099e:	2001      	movs	r0, #1
 80009a0:	bd70      	pop	{r4, r5, r6, pc}
 80009a2:	bf00      	nop
 80009a4:	e010803f 	.word	0xe010803f

080009a8 <HAL_DMA_DeInit>:
{
 80009a8:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 80009aa:	4605      	mov	r5, r0
 80009ac:	b320      	cbz	r0, 80009f8 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80009ae:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 80009b2:	b2e4      	uxtb	r4, r4
 80009b4:	2c02      	cmp	r4, #2
 80009b6:	d01d      	beq.n	80009f4 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 80009b8:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
 80009ba:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	f022 0201 	bic.w	r2, r2, #1
 80009c2:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80009c4:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 80009c6:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 80009c8:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 80009ca:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 80009cc:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 80009ce:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80009d0:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80009d2:	f7ff ff55 	bl	8000880 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009d6:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80009d8:	233f      	movs	r3, #63	; 0x3f
 80009da:	4093      	lsls	r3, r2
 80009dc:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009de:	656c      	str	r4, [r5, #84]	; 0x54
  hdma->XferCpltCallback = NULL;
 80009e0:	63ec      	str	r4, [r5, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80009e2:	642c      	str	r4, [r5, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80009e4:	646c      	str	r4, [r5, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80009e6:	64ac      	str	r4, [r5, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80009e8:	64ec      	str	r4, [r5, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80009ea:	652c      	str	r4, [r5, #80]	; 0x50
  hdma->State = HAL_DMA_STATE_RESET;
 80009ec:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 80009f0:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
    return HAL_BUSY;
 80009f4:	4620      	mov	r0, r4
}
 80009f6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80009f8:	2001      	movs	r0, #1
 80009fa:	bd38      	pop	{r3, r4, r5, pc}

080009fc <HAL_DMA_Start_IT>:
{
 80009fc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 80009fe:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8000a02:	2c01      	cmp	r4, #1
 8000a04:	d035      	beq.n	8000a72 <HAL_DMA_Start_IT+0x76>
 8000a06:	2401      	movs	r4, #1
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a08:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8000a0a:	2500      	movs	r5, #0
  __HAL_LOCK(hdma);
 8000a0c:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000a10:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8000a14:	2c01      	cmp	r4, #1
 8000a16:	f04f 0402 	mov.w	r4, #2
 8000a1a:	d128      	bne.n	8000a6e <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a1c:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000a20:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a22:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000a24:	6825      	ldr	r5, [r4, #0]
 8000a26:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8000a2a:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8000a2c:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000a2e:	6883      	ldr	r3, [r0, #8]
 8000a30:	2b40      	cmp	r3, #64	; 0x40
 8000a32:	d119      	bne.n	8000a68 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 8000a34:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8000a36:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a38:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8000a3a:	233f      	movs	r3, #63	; 0x3f
 8000a3c:	4093      	lsls	r3, r2
 8000a3e:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000a40:	6823      	ldr	r3, [r4, #0]
 8000a42:	f043 0316 	orr.w	r3, r3, #22
 8000a46:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000a48:	6963      	ldr	r3, [r4, #20]
 8000a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a4e:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8000a50:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000a52:	b11b      	cbz	r3, 8000a5c <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000a54:	6823      	ldr	r3, [r4, #0]
 8000a56:	f043 0308 	orr.w	r3, r3, #8
 8000a5a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000a5c:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000a5e:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6023      	str	r3, [r4, #0]
 8000a66:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 8000a68:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8000a6a:	60e2      	str	r2, [r4, #12]
 8000a6c:	e7e4      	b.n	8000a38 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8000a6e:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8000a72:	2002      	movs	r0, #2
}
 8000a74:	bd70      	pop	{r4, r5, r6, pc}

08000a76 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a76:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000a7a:	2b02      	cmp	r3, #2
 8000a7c:	d003      	beq.n	8000a86 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a7e:	2380      	movs	r3, #128	; 0x80
 8000a80:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000a82:	2001      	movs	r0, #1
 8000a84:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8000a86:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000a88:	2305      	movs	r3, #5
 8000a8a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  return HAL_OK;
 8000a8e:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8000a90:	6813      	ldr	r3, [r2, #0]
 8000a92:	f023 0301 	bic.w	r3, r3, #1
 8000a96:	6013      	str	r3, [r2, #0]
}
 8000a98:	4770      	bx	lr
	...

08000a9c <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 8000a9c:	2300      	movs	r3, #0
{
 8000a9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8000aa0:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000aa2:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8000aa4:	4b59      	ldr	r3, [pc, #356]	; (8000c0c <HAL_DMA_IRQHandler+0x170>)
{
 8000aa6:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000aa8:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 8000aaa:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000aac:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8000aae:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ab0:	409a      	lsls	r2, r3
 8000ab2:	4216      	tst	r6, r2
 8000ab4:	d00c      	beq.n	8000ad0 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000ab6:	6801      	ldr	r1, [r0, #0]
 8000ab8:	6808      	ldr	r0, [r1, #0]
 8000aba:	0740      	lsls	r0, r0, #29
 8000abc:	d508      	bpl.n	8000ad0 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000abe:	6808      	ldr	r0, [r1, #0]
 8000ac0:	f020 0004 	bic.w	r0, r0, #4
 8000ac4:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000ac6:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000ac8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000aca:	f042 0201 	orr.w	r2, r2, #1
 8000ace:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	409a      	lsls	r2, r3
 8000ad4:	4216      	tst	r6, r2
 8000ad6:	d008      	beq.n	8000aea <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000ad8:	6821      	ldr	r1, [r4, #0]
 8000ada:	6949      	ldr	r1, [r1, #20]
 8000adc:	0609      	lsls	r1, r1, #24
 8000ade:	d504      	bpl.n	8000aea <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000ae0:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000ae2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000ae4:	f042 0202 	orr.w	r2, r2, #2
 8000ae8:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000aea:	2204      	movs	r2, #4
 8000aec:	409a      	lsls	r2, r3
 8000aee:	4216      	tst	r6, r2
 8000af0:	d008      	beq.n	8000b04 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000af2:	6821      	ldr	r1, [r4, #0]
 8000af4:	6809      	ldr	r1, [r1, #0]
 8000af6:	0788      	lsls	r0, r1, #30
 8000af8:	d504      	bpl.n	8000b04 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000afa:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000afc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000afe:	f042 0204 	orr.w	r2, r2, #4
 8000b02:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000b04:	2210      	movs	r2, #16
 8000b06:	409a      	lsls	r2, r3
 8000b08:	4216      	tst	r6, r2
 8000b0a:	d010      	beq.n	8000b2e <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000b0c:	6823      	ldr	r3, [r4, #0]
 8000b0e:	6819      	ldr	r1, [r3, #0]
 8000b10:	0709      	lsls	r1, r1, #28
 8000b12:	d50c      	bpl.n	8000b2e <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000b14:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	0350      	lsls	r0, r2, #13
 8000b1a:	d535      	bpl.n	8000b88 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	0319      	lsls	r1, r3, #12
 8000b20:	d401      	bmi.n	8000b26 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8000b22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b24:	e000      	b.n	8000b28 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000b26:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8000b28:	b10b      	cbz	r3, 8000b2e <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8000b2a:	4620      	mov	r0, r4
 8000b2c:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000b2e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000b30:	2220      	movs	r2, #32
 8000b32:	408a      	lsls	r2, r1
 8000b34:	4216      	tst	r6, r2
 8000b36:	d038      	beq.n	8000baa <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000b38:	6823      	ldr	r3, [r4, #0]
 8000b3a:	6818      	ldr	r0, [r3, #0]
 8000b3c:	06c6      	lsls	r6, r0, #27
 8000b3e:	d534      	bpl.n	8000baa <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000b40:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000b42:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8000b46:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000b48:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000b4a:	d125      	bne.n	8000b98 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000b4c:	f022 0216 	bic.w	r2, r2, #22
 8000b50:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000b52:	695a      	ldr	r2, [r3, #20]
 8000b54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b58:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000b5a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000b5c:	b90a      	cbnz	r2, 8000b62 <HAL_DMA_IRQHandler+0xc6>
 8000b5e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000b60:	b11a      	cbz	r2, 8000b6a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	f022 0208 	bic.w	r2, r2, #8
 8000b68:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000b6a:	233f      	movs	r3, #63	; 0x3f
 8000b6c:	408b      	lsls	r3, r1
 8000b6e:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8000b70:	2300      	movs	r3, #0
 8000b72:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000b76:	2301      	movs	r3, #1
 8000b78:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000b7c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8000b7e:	b10b      	cbz	r3, 8000b84 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8000b80:	4620      	mov	r0, r4
 8000b82:	4798      	blx	r3
}
 8000b84:	b003      	add	sp, #12
 8000b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	05d2      	lsls	r2, r2, #23
 8000b8c:	d4c9      	bmi.n	8000b22 <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	f022 0208 	bic.w	r2, r2, #8
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	e7c4      	b.n	8000b22 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000b98:	0350      	lsls	r0, r2, #13
 8000b9a:	d528      	bpl.n	8000bee <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	0319      	lsls	r1, r3, #12
 8000ba0:	d432      	bmi.n	8000c08 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8000ba2:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8000ba4:	b10b      	cbz	r3, 8000baa <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8000ba6:	4620      	mov	r0, r4
 8000ba8:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000baa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d0e9      	beq.n	8000b84 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000bb0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000bb2:	07da      	lsls	r2, r3, #31
 8000bb4:	d519      	bpl.n	8000bea <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000bb6:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8000bb8:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8000bba:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000bbe:	6813      	ldr	r3, [r2, #0]
 8000bc0:	f023 0301 	bic.w	r3, r3, #1
 8000bc4:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8000bc6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000bca:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8000bce:	9b01      	ldr	r3, [sp, #4]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	429f      	cmp	r7, r3
 8000bd4:	9301      	str	r3, [sp, #4]
 8000bd6:	d302      	bcc.n	8000bde <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000bd8:	6813      	ldr	r3, [r2, #0]
 8000bda:	07db      	lsls	r3, r3, #31
 8000bdc:	d4f7      	bmi.n	8000bce <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 8000bde:	2300      	movs	r3, #0
 8000be0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000be4:	2301      	movs	r3, #1
 8000be6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000bea:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000bec:	e7c7      	b.n	8000b7e <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000bf4:	d108      	bne.n	8000c08 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000bf6:	6819      	ldr	r1, [r3, #0]
 8000bf8:	f021 0110 	bic.w	r1, r1, #16
 8000bfc:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000bfe:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8000c00:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000c04:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000c08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000c0a:	e7cb      	b.n	8000ba4 <HAL_DMA_IRQHandler+0x108>
 8000c0c:	20000008 	.word	0x20000008

08000c10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c14:	680b      	ldr	r3, [r1, #0]
{
 8000c16:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c18:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000ddc <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c1c:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000c1e:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c20:	4a6c      	ldr	r2, [pc, #432]	; (8000dd4 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c22:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8000de0 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8000c26:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c2a:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8000c2c:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c30:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000c34:	45b6      	cmp	lr, r6
 8000c36:	f040 80b3 	bne.w	8000da0 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c3a:	684c      	ldr	r4, [r1, #4]
 8000c3c:	f024 0710 	bic.w	r7, r4, #16
 8000c40:	2f02      	cmp	r7, #2
 8000c42:	d116      	bne.n	8000c72 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8000c44:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000c48:	f003 0b07 	and.w	fp, r3, #7
 8000c4c:	f04f 0c0f 	mov.w	ip, #15
 8000c50:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000c54:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000c58:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000c5c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000c60:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000c64:	690d      	ldr	r5, [r1, #16]
 8000c66:	fa05 f50b 	lsl.w	r5, r5, fp
 8000c6a:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000c6e:	f8ca 5020 	str.w	r5, [sl, #32]
 8000c72:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c76:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000c78:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c7c:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c80:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c84:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c86:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c8a:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c8c:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c8e:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c92:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 8000c96:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c9a:	d811      	bhi.n	8000cc0 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000c9c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000c9e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8000ca2:	68cf      	ldr	r7, [r1, #12]
 8000ca4:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000ca8:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000cac:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000cae:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cb0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000cb4:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000cb8:	409f      	lsls	r7, r3
 8000cba:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000cbe:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000cc0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000cc2:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000cc4:	688f      	ldr	r7, [r1, #8]
 8000cc6:	fa07 f70a 	lsl.w	r7, r7, sl
 8000cca:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000ccc:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cce:	00e5      	lsls	r5, r4, #3
 8000cd0:	d566      	bpl.n	8000da0 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd2:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8000cd6:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000cda:	f003 0e03 	and.w	lr, r3, #3
 8000cde:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce2:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 8000ce6:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000cea:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cee:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 8000cf2:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000cf6:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8000cfa:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8000cfe:	9503      	str	r5, [sp, #12]
 8000d00:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000d02:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 8000d06:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000d0a:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d0e:	4d32      	ldr	r5, [pc, #200]	; (8000dd8 <HAL_GPIO_Init+0x1c8>)
 8000d10:	42a8      	cmp	r0, r5
 8000d12:	d04c      	beq.n	8000dae <HAL_GPIO_Init+0x19e>
 8000d14:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d18:	42a8      	cmp	r0, r5
 8000d1a:	d04a      	beq.n	8000db2 <HAL_GPIO_Init+0x1a2>
 8000d1c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d20:	42a8      	cmp	r0, r5
 8000d22:	d048      	beq.n	8000db6 <HAL_GPIO_Init+0x1a6>
 8000d24:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d28:	42a8      	cmp	r0, r5
 8000d2a:	d046      	beq.n	8000dba <HAL_GPIO_Init+0x1aa>
 8000d2c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d30:	42a8      	cmp	r0, r5
 8000d32:	d044      	beq.n	8000dbe <HAL_GPIO_Init+0x1ae>
 8000d34:	4548      	cmp	r0, r9
 8000d36:	d044      	beq.n	8000dc2 <HAL_GPIO_Init+0x1b2>
 8000d38:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000d3c:	42a8      	cmp	r0, r5
 8000d3e:	d042      	beq.n	8000dc6 <HAL_GPIO_Init+0x1b6>
 8000d40:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d44:	42a8      	cmp	r0, r5
 8000d46:	d040      	beq.n	8000dca <HAL_GPIO_Init+0x1ba>
 8000d48:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d4c:	42a8      	cmp	r0, r5
 8000d4e:	d03e      	beq.n	8000dce <HAL_GPIO_Init+0x1be>
 8000d50:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d54:	42a8      	cmp	r0, r5
 8000d56:	bf14      	ite	ne
 8000d58:	250a      	movne	r5, #10
 8000d5a:	2509      	moveq	r5, #9
 8000d5c:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d60:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d64:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000d68:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8000d6a:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 8000d6e:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000d70:	bf0c      	ite	eq
 8000d72:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000d74:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d76:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8000d7a:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000d7c:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000d7e:	bf0c      	ite	eq
 8000d80:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000d82:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d84:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8000d88:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000d8a:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000d8c:	bf0c      	ite	eq
 8000d8e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000d90:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d92:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8000d94:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000d96:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000d98:	bf54      	ite	pl
 8000d9a:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000d9c:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000d9e:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000da0:	3301      	adds	r3, #1
 8000da2:	2b10      	cmp	r3, #16
 8000da4:	f47f af3f 	bne.w	8000c26 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000da8:	b005      	add	sp, #20
 8000daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000dae:	2500      	movs	r5, #0
 8000db0:	e7d4      	b.n	8000d5c <HAL_GPIO_Init+0x14c>
 8000db2:	2501      	movs	r5, #1
 8000db4:	e7d2      	b.n	8000d5c <HAL_GPIO_Init+0x14c>
 8000db6:	2502      	movs	r5, #2
 8000db8:	e7d0      	b.n	8000d5c <HAL_GPIO_Init+0x14c>
 8000dba:	2503      	movs	r5, #3
 8000dbc:	e7ce      	b.n	8000d5c <HAL_GPIO_Init+0x14c>
 8000dbe:	2504      	movs	r5, #4
 8000dc0:	e7cc      	b.n	8000d5c <HAL_GPIO_Init+0x14c>
 8000dc2:	2505      	movs	r5, #5
 8000dc4:	e7ca      	b.n	8000d5c <HAL_GPIO_Init+0x14c>
 8000dc6:	2506      	movs	r5, #6
 8000dc8:	e7c8      	b.n	8000d5c <HAL_GPIO_Init+0x14c>
 8000dca:	2507      	movs	r5, #7
 8000dcc:	e7c6      	b.n	8000d5c <HAL_GPIO_Init+0x14c>
 8000dce:	2508      	movs	r5, #8
 8000dd0:	e7c4      	b.n	8000d5c <HAL_GPIO_Init+0x14c>
 8000dd2:	bf00      	nop
 8000dd4:	40013c00 	.word	0x40013c00
 8000dd8:	40020000 	.word	0x40020000
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40021400 	.word	0x40021400

08000de4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000de8:	2400      	movs	r4, #0
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8000dea:	4e4c      	ldr	r6, [pc, #304]	; (8000f1c <HAL_GPIO_DeInit+0x138>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8000dec:	f8df a134 	ldr.w	sl, [pc, #308]	; 8000f24 <HAL_GPIO_DeInit+0x140>
 8000df0:	f8df b134 	ldr.w	fp, [pc, #308]	; 8000f28 <HAL_GPIO_DeInit+0x144>
    ioposition = ((uint32_t)0x01) << position;
 8000df4:	f04f 0901 	mov.w	r9, #1
 8000df8:	fa09 f204 	lsl.w	r2, r9, r4
    if(iocurrent == ioposition)
 8000dfc:	ea32 0301 	bics.w	r3, r2, r1
 8000e00:	d174      	bne.n	8000eec <HAL_GPIO_DeInit+0x108>
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000e02:	2303      	movs	r3, #3
 8000e04:	fa04 f509 	lsl.w	r5, r4, r9
 8000e08:	6807      	ldr	r7, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e0a:	f004 0e07 	and.w	lr, r4, #7
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000e0e:	fa03 f505 	lsl.w	r5, r3, r5
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e12:	fa24 fc03 	lsr.w	ip, r4, r3
 8000e16:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e1a:	43d2      	mvns	r2, r2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000e1c:	43ed      	mvns	r5, r5
 8000e1e:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8000e22:	402f      	ands	r7, r5
 8000e24:	6007      	str	r7, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e26:	270f      	movs	r7, #15
 8000e28:	f8dc 8020 	ldr.w	r8, [ip, #32]
 8000e2c:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000e30:	ea28 0e0e 	bic.w	lr, r8, lr
 8000e34:	f8cc e020 	str.w	lr, [ip, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e38:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8000e3c:	ea05 0e0e 	and.w	lr, r5, lr
 8000e40:	f8c0 e008 	str.w	lr, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e44:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8000e48:	ea02 0e0e 	and.w	lr, r2, lr
 8000e4c:	f8c0 e004 	str.w	lr, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e50:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8000e54:	ea05 050e 	and.w	r5, r5, lr
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000e58:	ea04 0e03 	and.w	lr, r4, r3
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8000e5c:	4b30      	ldr	r3, [pc, #192]	; (8000f20 <HAL_GPIO_DeInit+0x13c>)
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e5e:	60c5      	str	r5, [r0, #12]
 8000e60:	f024 0503 	bic.w	r5, r4, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000e64:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8000e68:	4298      	cmp	r0, r3
 8000e6a:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000e6e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e72:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp = SYSCFG->EXTICR[position >> 2];
 8000e76:	f8d5 c008 	ldr.w	ip, [r5, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000e7a:	ea0c 0c07 	and.w	ip, ip, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8000e7e:	d03a      	beq.n	8000ef6 <HAL_GPIO_DeInit+0x112>
 8000e80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e84:	4298      	cmp	r0, r3
 8000e86:	d038      	beq.n	8000efa <HAL_GPIO_DeInit+0x116>
 8000e88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e8c:	4298      	cmp	r0, r3
 8000e8e:	d036      	beq.n	8000efe <HAL_GPIO_DeInit+0x11a>
 8000e90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e94:	4298      	cmp	r0, r3
 8000e96:	d034      	beq.n	8000f02 <HAL_GPIO_DeInit+0x11e>
 8000e98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e9c:	4298      	cmp	r0, r3
 8000e9e:	d032      	beq.n	8000f06 <HAL_GPIO_DeInit+0x122>
 8000ea0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000ea4:	4298      	cmp	r0, r3
 8000ea6:	d030      	beq.n	8000f0a <HAL_GPIO_DeInit+0x126>
 8000ea8:	4550      	cmp	r0, sl
 8000eaa:	d030      	beq.n	8000f0e <HAL_GPIO_DeInit+0x12a>
 8000eac:	4558      	cmp	r0, fp
 8000eae:	d030      	beq.n	8000f12 <HAL_GPIO_DeInit+0x12e>
 8000eb0:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8000eb4:	4298      	cmp	r0, r3
 8000eb6:	d02e      	beq.n	8000f16 <HAL_GPIO_DeInit+0x132>
 8000eb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000ebc:	4298      	cmp	r0, r3
 8000ebe:	bf0c      	ite	eq
 8000ec0:	2309      	moveq	r3, #9
 8000ec2:	230a      	movne	r3, #10
 8000ec4:	fa03 f30e 	lsl.w	r3, r3, lr
 8000ec8:	459c      	cmp	ip, r3
 8000eca:	d10f      	bne.n	8000eec <HAL_GPIO_DeInit+0x108>
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8000ecc:	68ab      	ldr	r3, [r5, #8]
 8000ece:	ea23 0707 	bic.w	r7, r3, r7
 8000ed2:	60af      	str	r7, [r5, #8]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8000ed4:	6833      	ldr	r3, [r6, #0]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	6033      	str	r3, [r6, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8000eda:	6873      	ldr	r3, [r6, #4]
 8000edc:	4013      	ands	r3, r2
 8000ede:	6073      	str	r3, [r6, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8000ee0:	68b3      	ldr	r3, [r6, #8]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	60b3      	str	r3, [r6, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8000ee6:	68f3      	ldr	r3, [r6, #12]
 8000ee8:	401a      	ands	r2, r3
 8000eea:	60f2      	str	r2, [r6, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000eec:	3401      	adds	r4, #1
 8000eee:	2c10      	cmp	r4, #16
 8000ef0:	d180      	bne.n	8000df4 <HAL_GPIO_DeInit+0x10>
	  }
    }
  }
}
 8000ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	e7e4      	b.n	8000ec4 <HAL_GPIO_DeInit+0xe0>
 8000efa:	464b      	mov	r3, r9
 8000efc:	e7e2      	b.n	8000ec4 <HAL_GPIO_DeInit+0xe0>
 8000efe:	2302      	movs	r3, #2
 8000f00:	e7e0      	b.n	8000ec4 <HAL_GPIO_DeInit+0xe0>
 8000f02:	2303      	movs	r3, #3
 8000f04:	e7de      	b.n	8000ec4 <HAL_GPIO_DeInit+0xe0>
 8000f06:	2304      	movs	r3, #4
 8000f08:	e7dc      	b.n	8000ec4 <HAL_GPIO_DeInit+0xe0>
 8000f0a:	2305      	movs	r3, #5
 8000f0c:	e7da      	b.n	8000ec4 <HAL_GPIO_DeInit+0xe0>
 8000f0e:	2306      	movs	r3, #6
 8000f10:	e7d8      	b.n	8000ec4 <HAL_GPIO_DeInit+0xe0>
 8000f12:	2307      	movs	r3, #7
 8000f14:	e7d6      	b.n	8000ec4 <HAL_GPIO_DeInit+0xe0>
 8000f16:	2308      	movs	r3, #8
 8000f18:	e7d4      	b.n	8000ec4 <HAL_GPIO_DeInit+0xe0>
 8000f1a:	bf00      	nop
 8000f1c:	40013c00 	.word	0x40013c00
 8000f20:	40020000 	.word	0x40020000
 8000f24:	40021800 	.word	0x40021800
 8000f28:	40021c00 	.word	0x40021c00

08000f2c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f2c:	b10a      	cbz	r2, 8000f32 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000f2e:	6181      	str	r1, [r0, #24]
 8000f30:	4770      	bx	lr
 8000f32:	0409      	lsls	r1, r1, #16
 8000f34:	e7fb      	b.n	8000f2e <HAL_GPIO_WritePin+0x2>

08000f36 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f36:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f38:	4604      	mov	r4, r0
 8000f3a:	2800      	cmp	r0, #0
 8000f3c:	d04a      	beq.n	8000fd4 <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f3e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000f42:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f46:	b91b      	cbnz	r3, 8000f50 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f48:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f4c:	f002 f8fa 	bl	8003144 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f50:	2324      	movs	r3, #36	; 0x24
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f52:	68e1      	ldr	r1, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f54:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f58:	2901      	cmp	r1, #1
  __HAL_I2C_DISABLE(hi2c);
 8000f5a:	6823      	ldr	r3, [r4, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	f022 0201 	bic.w	r2, r2, #1
 8000f62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f64:	6862      	ldr	r2, [r4, #4]
 8000f66:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f6a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f6c:	689a      	ldr	r2, [r3, #8]
 8000f6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f76:	d124      	bne.n	8000fc2 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f7c:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f7e:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f80:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000f82:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f84:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000f88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f8c:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f8e:	68da      	ldr	r2, [r3, #12]
 8000f90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f94:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000f96:	6922      	ldr	r2, [r4, #16]
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	69a1      	ldr	r1, [r4, #24]
 8000f9c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000fa0:	6a21      	ldr	r1, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000fa2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000fa4:	69e2      	ldr	r2, [r4, #28]
 8000fa6:	430a      	orrs	r2, r1
 8000fa8:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	f042 0201 	orr.w	r2, r2, #1
 8000fb0:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000fb2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fb4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000fb6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000fba:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fbc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 8000fc0:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000fc2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000fc6:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000fc8:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000fca:	d1d8      	bne.n	8000f7e <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000fcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	e7d4      	b.n	8000f7e <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8000fd4:	2001      	movs	r0, #1
}
 8000fd6:	bd10      	pop	{r4, pc}

08000fd8 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fd8:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8000fdc:	b2d2      	uxtb	r2, r2
 8000fde:	2a20      	cmp	r2, #32
{
 8000fe0:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fe2:	d11d      	bne.n	8001020 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fe4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d019      	beq.n	8001020 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000fec:	2324      	movs	r3, #36	; 0x24
 8000fee:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000ff2:	6803      	ldr	r3, [r0, #0]
 8000ff4:	681c      	ldr	r4, [r3, #0]
 8000ff6:	f024 0401 	bic.w	r4, r4, #1
 8000ffa:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000ffc:	681c      	ldr	r4, [r3, #0]
 8000ffe:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8001002:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001004:	681c      	ldr	r4, [r3, #0]
 8001006:	4321      	orrs	r1, r4
 8001008:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800100a:	6819      	ldr	r1, [r3, #0]
 800100c:	f041 0101 	orr.w	r1, r1, #1
 8001010:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001012:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001014:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001018:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800101c:	4618      	mov	r0, r3
 800101e:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001020:	2002      	movs	r0, #2
  }
}
 8001022:	bd10      	pop	{r4, pc}

08001024 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001024:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001026:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 800102a:	b2e4      	uxtb	r4, r4
 800102c:	2c20      	cmp	r4, #32
 800102e:	d11c      	bne.n	800106a <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001030:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001034:	2b01      	cmp	r3, #1
 8001036:	d018      	beq.n	800106a <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001038:	2324      	movs	r3, #36	; 0x24
 800103a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800103e:	6803      	ldr	r3, [r0, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	f022 0201 	bic.w	r2, r2, #1
 8001046:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001048:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800104a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800104e:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001052:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	f042 0201 	orr.w	r2, r2, #1
 800105a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800105c:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800105e:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001062:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001066:	4618      	mov	r0, r3
 8001068:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 800106a:	2002      	movs	r0, #2
  }
}
 800106c:	bd10      	pop	{r4, pc}
	...

08001070 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001070:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8001072:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8001074:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001076:	4c19      	ldr	r4, [pc, #100]	; (80010dc <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001078:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800107c:	641a      	str	r2, [r3, #64]	; 0x40
 800107e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001084:	9301      	str	r3, [sp, #4]
 8001086:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001088:	6823      	ldr	r3, [r4, #0]
 800108a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800108e:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001090:	f7ff faf2 	bl	8000678 <HAL_GetTick>
 8001094:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001096:	6863      	ldr	r3, [r4, #4]
 8001098:	03da      	lsls	r2, r3, #15
 800109a:	d50c      	bpl.n	80010b6 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800109c:	6823      	ldr	r3, [r4, #0]
 800109e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a2:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010a4:	f7ff fae8 	bl	8000678 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80010a8:	4c0c      	ldr	r4, [pc, #48]	; (80010dc <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 80010aa:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80010ac:	6863      	ldr	r3, [r4, #4]
 80010ae:	039b      	lsls	r3, r3, #14
 80010b0:	d50a      	bpl.n	80010c8 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80010b2:	2000      	movs	r0, #0
 80010b4:	e006      	b.n	80010c4 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80010b6:	f7ff fadf 	bl	8000678 <HAL_GetTick>
 80010ba:	1b40      	subs	r0, r0, r5
 80010bc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80010c0:	d9e9      	bls.n	8001096 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 80010c2:	2003      	movs	r0, #3
}
 80010c4:	b003      	add	sp, #12
 80010c6:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80010c8:	f7ff fad6 	bl	8000678 <HAL_GetTick>
 80010cc:	1b40      	subs	r0, r0, r5
 80010ce:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80010d2:	d9eb      	bls.n	80010ac <HAL_PWREx_EnableOverDrive+0x3c>
 80010d4:	e7f5      	b.n	80010c2 <HAL_PWREx_EnableOverDrive+0x52>
 80010d6:	bf00      	nop
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40007000 	.word	0x40007000

080010e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010e4:	4604      	mov	r4, r0
 80010e6:	b918      	cbnz	r0, 80010f0 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80010e8:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80010ea:	b002      	add	sp, #8
 80010ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010f0:	6803      	ldr	r3, [r0, #0]
 80010f2:	07d8      	lsls	r0, r3, #31
 80010f4:	d410      	bmi.n	8001118 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010f6:	6823      	ldr	r3, [r4, #0]
 80010f8:	0799      	lsls	r1, r3, #30
 80010fa:	d45e      	bmi.n	80011ba <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010fc:	6823      	ldr	r3, [r4, #0]
 80010fe:	0719      	lsls	r1, r3, #28
 8001100:	f100 80a3 	bmi.w	800124a <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001104:	6823      	ldr	r3, [r4, #0]
 8001106:	075a      	lsls	r2, r3, #29
 8001108:	f100 80c4 	bmi.w	8001294 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800110c:	69a2      	ldr	r2, [r4, #24]
 800110e:	2a00      	cmp	r2, #0
 8001110:	f040 812e 	bne.w	8001370 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 8001114:	2000      	movs	r0, #0
 8001116:	e7e8      	b.n	80010ea <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001118:	4b93      	ldr	r3, [pc, #588]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 800111a:	689a      	ldr	r2, [r3, #8]
 800111c:	f002 020c 	and.w	r2, r2, #12
 8001120:	2a04      	cmp	r2, #4
 8001122:	d007      	beq.n	8001134 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001124:	689a      	ldr	r2, [r3, #8]
 8001126:	f002 020c 	and.w	r2, r2, #12
 800112a:	2a08      	cmp	r2, #8
 800112c:	d10a      	bne.n	8001144 <HAL_RCC_OscConfig+0x64>
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	025a      	lsls	r2, r3, #9
 8001132:	d507      	bpl.n	8001144 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001134:	4b8c      	ldr	r3, [pc, #560]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	039b      	lsls	r3, r3, #14
 800113a:	d5dc      	bpl.n	80010f6 <HAL_RCC_OscConfig+0x16>
 800113c:	6863      	ldr	r3, [r4, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d1d9      	bne.n	80010f6 <HAL_RCC_OscConfig+0x16>
 8001142:	e7d1      	b.n	80010e8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001144:	6863      	ldr	r3, [r4, #4]
 8001146:	4d88      	ldr	r5, [pc, #544]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 8001148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800114c:	d111      	bne.n	8001172 <HAL_RCC_OscConfig+0x92>
 800114e:	682b      	ldr	r3, [r5, #0]
 8001150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001154:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001156:	f7ff fa8f 	bl	8000678 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800115a:	4d83      	ldr	r5, [pc, #524]	; (8001368 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 800115c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800115e:	682b      	ldr	r3, [r5, #0]
 8001160:	039f      	lsls	r7, r3, #14
 8001162:	d4c8      	bmi.n	80010f6 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001164:	f7ff fa88 	bl	8000678 <HAL_GetTick>
 8001168:	1b80      	subs	r0, r0, r6
 800116a:	2864      	cmp	r0, #100	; 0x64
 800116c:	d9f7      	bls.n	800115e <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 800116e:	2003      	movs	r0, #3
 8001170:	e7bb      	b.n	80010ea <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001172:	b99b      	cbnz	r3, 800119c <HAL_RCC_OscConfig+0xbc>
 8001174:	682b      	ldr	r3, [r5, #0]
 8001176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800117a:	602b      	str	r3, [r5, #0]
 800117c:	682b      	ldr	r3, [r5, #0]
 800117e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001182:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001184:	f7ff fa78 	bl	8000678 <HAL_GetTick>
 8001188:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800118a:	682b      	ldr	r3, [r5, #0]
 800118c:	0398      	lsls	r0, r3, #14
 800118e:	d5b2      	bpl.n	80010f6 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001190:	f7ff fa72 	bl	8000678 <HAL_GetTick>
 8001194:	1b80      	subs	r0, r0, r6
 8001196:	2864      	cmp	r0, #100	; 0x64
 8001198:	d9f7      	bls.n	800118a <HAL_RCC_OscConfig+0xaa>
 800119a:	e7e8      	b.n	800116e <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800119c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011a0:	682b      	ldr	r3, [r5, #0]
 80011a2:	d103      	bne.n	80011ac <HAL_RCC_OscConfig+0xcc>
 80011a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a8:	602b      	str	r3, [r5, #0]
 80011aa:	e7d0      	b.n	800114e <HAL_RCC_OscConfig+0x6e>
 80011ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011b0:	602b      	str	r3, [r5, #0]
 80011b2:	682b      	ldr	r3, [r5, #0]
 80011b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011b8:	e7cc      	b.n	8001154 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011ba:	4b6b      	ldr	r3, [pc, #428]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 80011bc:	689a      	ldr	r2, [r3, #8]
 80011be:	f012 0f0c 	tst.w	r2, #12
 80011c2:	d007      	beq.n	80011d4 <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011c4:	689a      	ldr	r2, [r3, #8]
 80011c6:	f002 020c 	and.w	r2, r2, #12
 80011ca:	2a08      	cmp	r2, #8
 80011cc:	d111      	bne.n	80011f2 <HAL_RCC_OscConfig+0x112>
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	0259      	lsls	r1, r3, #9
 80011d2:	d40e      	bmi.n	80011f2 <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011d4:	4b64      	ldr	r3, [pc, #400]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	0792      	lsls	r2, r2, #30
 80011da:	d502      	bpl.n	80011e2 <HAL_RCC_OscConfig+0x102>
 80011dc:	68e2      	ldr	r2, [r4, #12]
 80011de:	2a01      	cmp	r2, #1
 80011e0:	d182      	bne.n	80010e8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	6921      	ldr	r1, [r4, #16]
 80011e6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80011ea:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80011ee:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011f0:	e784      	b.n	80010fc <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011f2:	68e3      	ldr	r3, [r4, #12]
 80011f4:	4d5c      	ldr	r5, [pc, #368]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 80011f6:	b1bb      	cbz	r3, 8001228 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 80011f8:	682b      	ldr	r3, [r5, #0]
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001200:	f7ff fa3a 	bl	8000678 <HAL_GetTick>
 8001204:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001206:	682b      	ldr	r3, [r5, #0]
 8001208:	079f      	lsls	r7, r3, #30
 800120a:	d507      	bpl.n	800121c <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800120c:	682b      	ldr	r3, [r5, #0]
 800120e:	6922      	ldr	r2, [r4, #16]
 8001210:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001214:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001218:	602b      	str	r3, [r5, #0]
 800121a:	e76f      	b.n	80010fc <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800121c:	f7ff fa2c 	bl	8000678 <HAL_GetTick>
 8001220:	1b80      	subs	r0, r0, r6
 8001222:	2802      	cmp	r0, #2
 8001224:	d9ef      	bls.n	8001206 <HAL_RCC_OscConfig+0x126>
 8001226:	e7a2      	b.n	800116e <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001228:	682b      	ldr	r3, [r5, #0]
 800122a:	f023 0301 	bic.w	r3, r3, #1
 800122e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001230:	f7ff fa22 	bl	8000678 <HAL_GetTick>
 8001234:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001236:	682b      	ldr	r3, [r5, #0]
 8001238:	0798      	lsls	r0, r3, #30
 800123a:	f57f af5f 	bpl.w	80010fc <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800123e:	f7ff fa1b 	bl	8000678 <HAL_GetTick>
 8001242:	1b80      	subs	r0, r0, r6
 8001244:	2802      	cmp	r0, #2
 8001246:	d9f6      	bls.n	8001236 <HAL_RCC_OscConfig+0x156>
 8001248:	e791      	b.n	800116e <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800124a:	6963      	ldr	r3, [r4, #20]
 800124c:	4d46      	ldr	r5, [pc, #280]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 800124e:	b183      	cbz	r3, 8001272 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8001250:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001258:	f7ff fa0e 	bl	8000678 <HAL_GetTick>
 800125c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800125e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001260:	079b      	lsls	r3, r3, #30
 8001262:	f53f af4f 	bmi.w	8001104 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001266:	f7ff fa07 	bl	8000678 <HAL_GetTick>
 800126a:	1b80      	subs	r0, r0, r6
 800126c:	2802      	cmp	r0, #2
 800126e:	d9f6      	bls.n	800125e <HAL_RCC_OscConfig+0x17e>
 8001270:	e77d      	b.n	800116e <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001272:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001274:	f023 0301 	bic.w	r3, r3, #1
 8001278:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800127a:	f7ff f9fd 	bl	8000678 <HAL_GetTick>
 800127e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001280:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001282:	079f      	lsls	r7, r3, #30
 8001284:	f57f af3e 	bpl.w	8001104 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001288:	f7ff f9f6 	bl	8000678 <HAL_GetTick>
 800128c:	1b80      	subs	r0, r0, r6
 800128e:	2802      	cmp	r0, #2
 8001290:	d9f6      	bls.n	8001280 <HAL_RCC_OscConfig+0x1a0>
 8001292:	e76c      	b.n	800116e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001294:	4b34      	ldr	r3, [pc, #208]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 8001296:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001298:	00d0      	lsls	r0, r2, #3
 800129a:	d427      	bmi.n	80012ec <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 800129c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800129e:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80012a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012a4:	641a      	str	r2, [r3, #64]	; 0x40
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ac:	9301      	str	r3, [sp, #4]
 80012ae:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012b0:	4d2e      	ldr	r5, [pc, #184]	; (800136c <HAL_RCC_OscConfig+0x28c>)
 80012b2:	682b      	ldr	r3, [r5, #0]
 80012b4:	05d9      	lsls	r1, r3, #23
 80012b6:	d51b      	bpl.n	80012f0 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012b8:	68a3      	ldr	r3, [r4, #8]
 80012ba:	4d2b      	ldr	r5, [pc, #172]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d127      	bne.n	8001310 <HAL_RCC_OscConfig+0x230>
 80012c0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012c8:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80012cc:	f7ff f9d4 	bl	8000678 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012d0:	4f25      	ldr	r7, [pc, #148]	; (8001368 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 80012d2:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80012d6:	079b      	lsls	r3, r3, #30
 80012d8:	d53f      	bpl.n	800135a <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 80012da:	2e00      	cmp	r6, #0
 80012dc:	f43f af16 	beq.w	800110c <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80012e0:	4a21      	ldr	r2, [pc, #132]	; (8001368 <HAL_RCC_OscConfig+0x288>)
 80012e2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80012e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012e8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ea:	e70f      	b.n	800110c <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 80012ec:	2600      	movs	r6, #0
 80012ee:	e7df      	b.n	80012b0 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 80012f0:	682b      	ldr	r3, [r5, #0]
 80012f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80012f8:	f7ff f9be 	bl	8000678 <HAL_GetTick>
 80012fc:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012fe:	682b      	ldr	r3, [r5, #0]
 8001300:	05da      	lsls	r2, r3, #23
 8001302:	d4d9      	bmi.n	80012b8 <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001304:	f7ff f9b8 	bl	8000678 <HAL_GetTick>
 8001308:	1bc0      	subs	r0, r0, r7
 800130a:	2864      	cmp	r0, #100	; 0x64
 800130c:	d9f7      	bls.n	80012fe <HAL_RCC_OscConfig+0x21e>
 800130e:	e72e      	b.n	800116e <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001310:	b9ab      	cbnz	r3, 800133e <HAL_RCC_OscConfig+0x25e>
 8001312:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001314:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001318:	f023 0301 	bic.w	r3, r3, #1
 800131c:	672b      	str	r3, [r5, #112]	; 0x70
 800131e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001320:	f023 0304 	bic.w	r3, r3, #4
 8001324:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001326:	f7ff f9a7 	bl	8000678 <HAL_GetTick>
 800132a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800132c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800132e:	0798      	lsls	r0, r3, #30
 8001330:	d5d3      	bpl.n	80012da <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001332:	f7ff f9a1 	bl	8000678 <HAL_GetTick>
 8001336:	1bc0      	subs	r0, r0, r7
 8001338:	4540      	cmp	r0, r8
 800133a:	d9f7      	bls.n	800132c <HAL_RCC_OscConfig+0x24c>
 800133c:	e717      	b.n	800116e <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800133e:	2b05      	cmp	r3, #5
 8001340:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001342:	d103      	bne.n	800134c <HAL_RCC_OscConfig+0x26c>
 8001344:	f043 0304 	orr.w	r3, r3, #4
 8001348:	672b      	str	r3, [r5, #112]	; 0x70
 800134a:	e7b9      	b.n	80012c0 <HAL_RCC_OscConfig+0x1e0>
 800134c:	f023 0301 	bic.w	r3, r3, #1
 8001350:	672b      	str	r3, [r5, #112]	; 0x70
 8001352:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001354:	f023 0304 	bic.w	r3, r3, #4
 8001358:	e7b5      	b.n	80012c6 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800135a:	f7ff f98d 	bl	8000678 <HAL_GetTick>
 800135e:	eba0 0008 	sub.w	r0, r0, r8
 8001362:	42a8      	cmp	r0, r5
 8001364:	d9b6      	bls.n	80012d4 <HAL_RCC_OscConfig+0x1f4>
 8001366:	e702      	b.n	800116e <HAL_RCC_OscConfig+0x8e>
 8001368:	40023800 	.word	0x40023800
 800136c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001370:	4d24      	ldr	r5, [pc, #144]	; (8001404 <HAL_RCC_OscConfig+0x324>)
 8001372:	68ab      	ldr	r3, [r5, #8]
 8001374:	f003 030c 	and.w	r3, r3, #12
 8001378:	2b08      	cmp	r3, #8
 800137a:	f43f aeb5 	beq.w	80010e8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 800137e:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001380:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001382:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001386:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001388:	d12f      	bne.n	80013ea <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 800138a:	f7ff f975 	bl	8000678 <HAL_GetTick>
 800138e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001390:	682b      	ldr	r3, [r5, #0]
 8001392:	0199      	lsls	r1, r3, #6
 8001394:	d423      	bmi.n	80013de <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001396:	6a22      	ldr	r2, [r4, #32]
 8001398:	69e3      	ldr	r3, [r4, #28]
 800139a:	4313      	orrs	r3, r2
 800139c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800139e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80013a2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80013a4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80013a8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80013aa:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80013ae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013b0:	4c14      	ldr	r4, [pc, #80]	; (8001404 <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013b2:	0852      	lsrs	r2, r2, #1
 80013b4:	3a01      	subs	r2, #1
 80013b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80013ba:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80013bc:	682b      	ldr	r3, [r5, #0]
 80013be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013c2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80013c4:	f7ff f958 	bl	8000678 <HAL_GetTick>
 80013c8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ca:	6823      	ldr	r3, [r4, #0]
 80013cc:	019a      	lsls	r2, r3, #6
 80013ce:	f53f aea1 	bmi.w	8001114 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013d2:	f7ff f951 	bl	8000678 <HAL_GetTick>
 80013d6:	1b40      	subs	r0, r0, r5
 80013d8:	2802      	cmp	r0, #2
 80013da:	d9f6      	bls.n	80013ca <HAL_RCC_OscConfig+0x2ea>
 80013dc:	e6c7      	b.n	800116e <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013de:	f7ff f94b 	bl	8000678 <HAL_GetTick>
 80013e2:	1b80      	subs	r0, r0, r6
 80013e4:	2802      	cmp	r0, #2
 80013e6:	d9d3      	bls.n	8001390 <HAL_RCC_OscConfig+0x2b0>
 80013e8:	e6c1      	b.n	800116e <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 80013ea:	f7ff f945 	bl	8000678 <HAL_GetTick>
 80013ee:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013f0:	682b      	ldr	r3, [r5, #0]
 80013f2:	019b      	lsls	r3, r3, #6
 80013f4:	f57f ae8e 	bpl.w	8001114 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013f8:	f7ff f93e 	bl	8000678 <HAL_GetTick>
 80013fc:	1b00      	subs	r0, r0, r4
 80013fe:	2802      	cmp	r0, #2
 8001400:	d9f6      	bls.n	80013f0 <HAL_RCC_OscConfig+0x310>
 8001402:	e6b4      	b.n	800116e <HAL_RCC_OscConfig+0x8e>
 8001404:	40023800 	.word	0x40023800

08001408 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001408:	4913      	ldr	r1, [pc, #76]	; (8001458 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800140a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800140c:	688b      	ldr	r3, [r1, #8]
 800140e:	f003 030c 	and.w	r3, r3, #12
 8001412:	2b04      	cmp	r3, #4
 8001414:	d003      	beq.n	800141e <HAL_RCC_GetSysClockFreq+0x16>
 8001416:	2b08      	cmp	r3, #8
 8001418:	d003      	beq.n	8001422 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800141a:	4810      	ldr	r0, [pc, #64]	; (800145c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800141c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800141e:	4810      	ldr	r0, [pc, #64]	; (8001460 <HAL_RCC_GetSysClockFreq+0x58>)
 8001420:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001422:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001424:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001426:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001428:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800142c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001430:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001434:	bf1a      	itte	ne
 8001436:	480a      	ldrne	r0, [pc, #40]	; (8001460 <HAL_RCC_GetSysClockFreq+0x58>)
 8001438:	2300      	movne	r3, #0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800143a:	4808      	ldreq	r0, [pc, #32]	; (800145c <HAL_RCC_GetSysClockFreq+0x54>)
 800143c:	fba1 0100 	umull	r0, r1, r1, r0
 8001440:	f7fe ff56 	bl	80002f0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <HAL_RCC_GetSysClockFreq+0x50>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800144c:	3301      	adds	r3, #1
 800144e:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001450:	fbb0 f0f3 	udiv	r0, r0, r3
 8001454:	bd08      	pop	{r3, pc}
 8001456:	bf00      	nop
 8001458:	40023800 	.word	0x40023800
 800145c:	00f42400 	.word	0x00f42400
 8001460:	007a1200 	.word	0x007a1200

08001464 <HAL_RCC_ClockConfig>:
{
 8001464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001468:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800146a:	4604      	mov	r4, r0
 800146c:	b910      	cbnz	r0, 8001474 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800146e:	2001      	movs	r0, #1
 8001470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001474:	4a46      	ldr	r2, [pc, #280]	; (8001590 <HAL_RCC_ClockConfig+0x12c>)
 8001476:	6813      	ldr	r3, [r2, #0]
 8001478:	f003 030f 	and.w	r3, r3, #15
 800147c:	428b      	cmp	r3, r1
 800147e:	d328      	bcc.n	80014d2 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001480:	6821      	ldr	r1, [r4, #0]
 8001482:	078f      	lsls	r7, r1, #30
 8001484:	d430      	bmi.n	80014e8 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001486:	07c8      	lsls	r0, r1, #31
 8001488:	d443      	bmi.n	8001512 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800148a:	4a41      	ldr	r2, [pc, #260]	; (8001590 <HAL_RCC_ClockConfig+0x12c>)
 800148c:	6813      	ldr	r3, [r2, #0]
 800148e:	f003 030f 	and.w	r3, r3, #15
 8001492:	429d      	cmp	r5, r3
 8001494:	d367      	bcc.n	8001566 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001496:	6822      	ldr	r2, [r4, #0]
 8001498:	0751      	lsls	r1, r2, #29
 800149a:	d470      	bmi.n	800157e <HAL_RCC_ClockConfig+0x11a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800149c:	0713      	lsls	r3, r2, #28
 800149e:	d507      	bpl.n	80014b0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014a0:	4a3c      	ldr	r2, [pc, #240]	; (8001594 <HAL_RCC_ClockConfig+0x130>)
 80014a2:	6921      	ldr	r1, [r4, #16]
 80014a4:	6893      	ldr	r3, [r2, #8]
 80014a6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80014aa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80014ae:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014b0:	f7ff ffaa 	bl	8001408 <HAL_RCC_GetSysClockFreq>
 80014b4:	4b37      	ldr	r3, [pc, #220]	; (8001594 <HAL_RCC_ClockConfig+0x130>)
 80014b6:	4a38      	ldr	r2, [pc, #224]	; (8001598 <HAL_RCC_ClockConfig+0x134>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80014be:	5cd3      	ldrb	r3, [r2, r3]
 80014c0:	40d8      	lsrs	r0, r3
 80014c2:	4b36      	ldr	r3, [pc, #216]	; (800159c <HAL_RCC_ClockConfig+0x138>)
 80014c4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80014c6:	2000      	movs	r0, #0
 80014c8:	f7ff f89a 	bl	8000600 <HAL_InitTick>
  return HAL_OK;
 80014cc:	2000      	movs	r0, #0
 80014ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014d2:	6813      	ldr	r3, [r2, #0]
 80014d4:	f023 030f 	bic.w	r3, r3, #15
 80014d8:	430b      	orrs	r3, r1
 80014da:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014dc:	6813      	ldr	r3, [r2, #0]
 80014de:	f003 030f 	and.w	r3, r3, #15
 80014e2:	4299      	cmp	r1, r3
 80014e4:	d1c3      	bne.n	800146e <HAL_RCC_ClockConfig+0xa>
 80014e6:	e7cb      	b.n	8001480 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e8:	f011 0f04 	tst.w	r1, #4
 80014ec:	4b29      	ldr	r3, [pc, #164]	; (8001594 <HAL_RCC_ClockConfig+0x130>)
 80014ee:	d003      	beq.n	80014f8 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80014f6:	609a      	str	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014f8:	070e      	lsls	r6, r1, #28
 80014fa:	d503      	bpl.n	8001504 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014fc:	689a      	ldr	r2, [r3, #8]
 80014fe:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001502:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	68a0      	ldr	r0, [r4, #8]
 8001508:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800150c:	4302      	orrs	r2, r0
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	e7b9      	b.n	8001486 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001512:	6861      	ldr	r1, [r4, #4]
 8001514:	4b1f      	ldr	r3, [pc, #124]	; (8001594 <HAL_RCC_ClockConfig+0x130>)
 8001516:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001518:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800151a:	d11c      	bne.n	8001556 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001520:	d0a5      	beq.n	800146e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001522:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001524:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001528:	4e1a      	ldr	r6, [pc, #104]	; (8001594 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800152a:	f022 0203 	bic.w	r2, r2, #3
 800152e:	430a      	orrs	r2, r1
 8001530:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001532:	f7ff f8a1 	bl	8000678 <HAL_GetTick>
 8001536:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001538:	68b3      	ldr	r3, [r6, #8]
 800153a:	6862      	ldr	r2, [r4, #4]
 800153c:	f003 030c 	and.w	r3, r3, #12
 8001540:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001544:	d0a1      	beq.n	800148a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001546:	f7ff f897 	bl	8000678 <HAL_GetTick>
 800154a:	1bc0      	subs	r0, r0, r7
 800154c:	4540      	cmp	r0, r8
 800154e:	d9f3      	bls.n	8001538 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8001550:	2003      	movs	r0, #3
}
 8001552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001556:	2902      	cmp	r1, #2
 8001558:	d102      	bne.n	8001560 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800155a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800155e:	e7df      	b.n	8001520 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001560:	f012 0f02 	tst.w	r2, #2
 8001564:	e7dc      	b.n	8001520 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001566:	6813      	ldr	r3, [r2, #0]
 8001568:	f023 030f 	bic.w	r3, r3, #15
 800156c:	432b      	orrs	r3, r5
 800156e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001570:	6813      	ldr	r3, [r2, #0]
 8001572:	f003 030f 	and.w	r3, r3, #15
 8001576:	429d      	cmp	r5, r3
 8001578:	f47f af79 	bne.w	800146e <HAL_RCC_ClockConfig+0xa>
 800157c:	e78b      	b.n	8001496 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800157e:	4905      	ldr	r1, [pc, #20]	; (8001594 <HAL_RCC_ClockConfig+0x130>)
 8001580:	68e0      	ldr	r0, [r4, #12]
 8001582:	688b      	ldr	r3, [r1, #8]
 8001584:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001588:	4303      	orrs	r3, r0
 800158a:	608b      	str	r3, [r1, #8]
 800158c:	e786      	b.n	800149c <HAL_RCC_ClockConfig+0x38>
 800158e:	bf00      	nop
 8001590:	40023c00 	.word	0x40023c00
 8001594:	40023800 	.word	0x40023800
 8001598:	08006ea1 	.word	0x08006ea1
 800159c:	20000008 	.word	0x20000008

080015a0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80015a0:	4b01      	ldr	r3, [pc, #4]	; (80015a8 <HAL_RCC_GetHCLKFreq+0x8>)
 80015a2:	6818      	ldr	r0, [r3, #0]
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	20000008 	.word	0x20000008

080015ac <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80015ac:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80015ae:	4a05      	ldr	r2, [pc, #20]	; (80015c4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80015b6:	5cd3      	ldrb	r3, [r2, r3]
 80015b8:	4a03      	ldr	r2, [pc, #12]	; (80015c8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80015ba:	6810      	ldr	r0, [r2, #0]
}
 80015bc:	40d8      	lsrs	r0, r3
 80015be:	4770      	bx	lr
 80015c0:	40023800 	.word	0x40023800
 80015c4:	08006eb1 	.word	0x08006eb1
 80015c8:	20000008 	.word	0x20000008

080015cc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80015cc:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80015ce:	4a05      	ldr	r2, [pc, #20]	; (80015e4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80015d6:	5cd3      	ldrb	r3, [r2, r3]
 80015d8:	4a03      	ldr	r2, [pc, #12]	; (80015e8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80015da:	6810      	ldr	r0, [r2, #0]
}
 80015dc:	40d8      	lsrs	r0, r3
 80015de:	4770      	bx	lr
 80015e0:	40023800 	.word	0x40023800
 80015e4:	08006eb1 	.word	0x08006eb1
 80015e8:	20000008 	.word	0x20000008

080015ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80015ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80015f0:	6802      	ldr	r2, [r0, #0]
{
 80015f2:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80015f4:	f012 0601 	ands.w	r6, r2, #1
 80015f8:	d00b      	beq.n	8001612 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80015fa:	4bba      	ldr	r3, [pc, #744]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80015fc:	6899      	ldr	r1, [r3, #8]
 80015fe:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8001602:	6099      	str	r1, [r3, #8]
 8001604:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8001606:	6899      	ldr	r1, [r3, #8]
 8001608:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800160a:	fab6 f686 	clz	r6, r6
 800160e:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001610:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001612:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 8001616:	d012      	beq.n	800163e <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001618:	49b2      	ldr	r1, [pc, #712]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800161a:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800161c:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001620:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001624:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 8001628:	bf08      	it	eq
 800162a:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800162c:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001630:	bf16      	itet	ne
 8001632:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8001636:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001638:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800163a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800163e:	02d7      	lsls	r7, r2, #11
 8001640:	d510      	bpl.n	8001664 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001642:	48a8      	ldr	r0, [pc, #672]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001644:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001646:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800164a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800164e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001652:	ea43 0301 	orr.w	r3, r3, r1
 8001656:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800165a:	f000 81a9 	beq.w	80019b0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800165e:	2900      	cmp	r1, #0
 8001660:	bf08      	it	eq
 8001662:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8001664:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8001668:	bf18      	it	ne
 800166a:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800166c:	0690      	lsls	r0, r2, #26
 800166e:	d531      	bpl.n	80016d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001670:	4b9c      	ldr	r3, [pc, #624]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001672:	4f9d      	ldr	r7, [pc, #628]	; (80018e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001674:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001676:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800167a:	641a      	str	r2, [r3, #64]	; 0x40
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001682:	9301      	str	r3, [sp, #4]
 8001684:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800168c:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800168e:	f7fe fff3 	bl	8000678 <HAL_GetTick>
 8001692:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	05d9      	lsls	r1, r3, #23
 8001698:	f140 818c 	bpl.w	80019b4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800169c:	4f91      	ldr	r7, [pc, #580]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800169e:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80016a0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80016a4:	f040 8191 	bne.w	80019ca <HAL_RCCEx_PeriphCLKConfig+0x3de>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80016a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80016aa:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80016ae:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80016b2:	4a8c      	ldr	r2, [pc, #560]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80016b4:	f040 81af 	bne.w	8001a16 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 80016b8:	6891      	ldr	r1, [r2, #8]
 80016ba:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80016be:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80016c2:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80016c6:	4301      	orrs	r1, r0
 80016c8:	6091      	str	r1, [r2, #8]
 80016ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ce:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80016d0:	430b      	orrs	r3, r1
 80016d2:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80016d4:	6823      	ldr	r3, [r4, #0]
 80016d6:	06df      	lsls	r7, r3, #27
 80016d8:	d50c      	bpl.n	80016f4 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80016da:	4a82      	ldr	r2, [pc, #520]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80016dc:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80016e0:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80016e4:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 80016e8:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80016ec:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80016ee:	4301      	orrs	r1, r0
 80016f0:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80016f4:	0458      	lsls	r0, r3, #17
 80016f6:	d508      	bpl.n	800170a <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80016f8:	497a      	ldr	r1, [pc, #488]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80016fa:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80016fc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001700:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001704:	4302      	orrs	r2, r0
 8001706:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800170a:	0419      	lsls	r1, r3, #16
 800170c:	d508      	bpl.n	8001720 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800170e:	4975      	ldr	r1, [pc, #468]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001710:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001712:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001716:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800171a:	4302      	orrs	r2, r0
 800171c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001720:	03da      	lsls	r2, r3, #15
 8001722:	d508      	bpl.n	8001736 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001724:	496f      	ldr	r1, [pc, #444]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001726:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001728:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800172c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001730:	4302      	orrs	r2, r0
 8001732:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001736:	039f      	lsls	r7, r3, #14
 8001738:	d508      	bpl.n	800174c <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800173a:	496a      	ldr	r1, [pc, #424]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800173c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800173e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001742:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001746:	4302      	orrs	r2, r0
 8001748:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800174c:	0658      	lsls	r0, r3, #25
 800174e:	d508      	bpl.n	8001762 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001750:	4964      	ldr	r1, [pc, #400]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001752:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001754:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001758:	f022 0203 	bic.w	r2, r2, #3
 800175c:	4302      	orrs	r2, r0
 800175e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001762:	0619      	lsls	r1, r3, #24
 8001764:	d508      	bpl.n	8001778 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001766:	495f      	ldr	r1, [pc, #380]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001768:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800176a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800176e:	f022 020c 	bic.w	r2, r2, #12
 8001772:	4302      	orrs	r2, r0
 8001774:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001778:	05da      	lsls	r2, r3, #23
 800177a:	d508      	bpl.n	800178e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800177c:	4959      	ldr	r1, [pc, #356]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800177e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001780:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001784:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001788:	4302      	orrs	r2, r0
 800178a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800178e:	059f      	lsls	r7, r3, #22
 8001790:	d508      	bpl.n	80017a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001792:	4954      	ldr	r1, [pc, #336]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001794:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001796:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800179a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800179e:	4302      	orrs	r2, r0
 80017a0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80017a4:	0558      	lsls	r0, r3, #21
 80017a6:	d508      	bpl.n	80017ba <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80017a8:	494e      	ldr	r1, [pc, #312]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80017aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80017ac:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80017b0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80017b4:	4302      	orrs	r2, r0
 80017b6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80017ba:	0519      	lsls	r1, r3, #20
 80017bc:	d508      	bpl.n	80017d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80017be:	4949      	ldr	r1, [pc, #292]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80017c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80017c2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80017c6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80017ca:	4302      	orrs	r2, r0
 80017cc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80017d0:	04da      	lsls	r2, r3, #19
 80017d2:	d508      	bpl.n	80017e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80017d4:	4943      	ldr	r1, [pc, #268]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80017d6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80017d8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80017dc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80017e0:	4302      	orrs	r2, r0
 80017e2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80017e6:	049f      	lsls	r7, r3, #18
 80017e8:	d508      	bpl.n	80017fc <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80017ea:	493e      	ldr	r1, [pc, #248]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80017ec:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80017ee:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80017f2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80017f6:	4302      	orrs	r2, r0
 80017f8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80017fc:	0258      	lsls	r0, r3, #9
 80017fe:	d508      	bpl.n	8001812 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001800:	4938      	ldr	r1, [pc, #224]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001802:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8001804:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001808:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800180c:	4302      	orrs	r2, r0
 800180e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001812:	0299      	lsls	r1, r3, #10
 8001814:	d50c      	bpl.n	8001830 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001816:	4833      	ldr	r0, [pc, #204]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001818:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800181a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800181e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001822:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8001826:	bf08      	it	eq
 8001828:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800182a:	430a      	orrs	r2, r1
 800182c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8001830:	f013 0f08 	tst.w	r3, #8
 8001834:	bf18      	it	ne
 8001836:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001838:	035a      	lsls	r2, r3, #13
 800183a:	d508      	bpl.n	800184e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800183c:	4929      	ldr	r1, [pc, #164]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800183e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8001840:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001844:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001848:	4302      	orrs	r2, r0
 800184a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800184e:	021f      	lsls	r7, r3, #8
 8001850:	d509      	bpl.n	8001866 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001852:	4924      	ldr	r1, [pc, #144]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001854:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8001858:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800185c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001860:	4302      	orrs	r2, r0
 8001862:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001866:	0158      	lsls	r0, r3, #5
 8001868:	d509      	bpl.n	800187e <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800186a:	491e      	ldr	r1, [pc, #120]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800186c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8001870:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001874:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001878:	4302      	orrs	r2, r0
 800187a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800187e:	0119      	lsls	r1, r3, #4
 8001880:	d509      	bpl.n	8001896 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001882:	4918      	ldr	r1, [pc, #96]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001884:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8001888:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800188c:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8001890:	4302      	orrs	r2, r0
 8001892:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001896:	00da      	lsls	r2, r3, #3
 8001898:	d509      	bpl.n	80018ae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800189a:	4912      	ldr	r1, [pc, #72]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800189c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80018a0:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 80018a4:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80018a8:	4302      	orrs	r2, r0
 80018aa:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80018ae:	2e01      	cmp	r6, #1
 80018b0:	f000 80b5 	beq.w	8001a1e <HAL_RCCEx_PeriphCLKConfig+0x432>
 80018b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80018b8:	f000 80b1 	beq.w	8001a1e <HAL_RCCEx_PeriphCLKConfig+0x432>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80018bc:	2d01      	cmp	r5, #1
 80018be:	d175      	bne.n	80019ac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80018c0:	4d08      	ldr	r5, [pc, #32]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80018c2:	682b      	ldr	r3, [r5, #0]
 80018c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018c8:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018ca:	f7fe fed5 	bl	8000678 <HAL_GetTick>
 80018ce:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80018d0:	682b      	ldr	r3, [r5, #0]
 80018d2:	009f      	lsls	r7, r3, #2
 80018d4:	f100 8127 	bmi.w	8001b26 <HAL_RCCEx_PeriphCLKConfig+0x53a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80018d8:	6821      	ldr	r1, [r4, #0]
 80018da:	030e      	lsls	r6, r1, #12
 80018dc:	d506      	bpl.n	80018ec <HAL_RCCEx_PeriphCLKConfig+0x300>
 80018de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80018e0:	b143      	cbz	r3, 80018f4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80018e2:	e003      	b.n	80018ec <HAL_RCCEx_PeriphCLKConfig+0x300>
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40007000 	.word	0x40007000
 80018ec:	02cd      	lsls	r5, r1, #11
 80018ee:	d51d      	bpl.n	800192c <HAL_RCCEx_PeriphCLKConfig+0x340>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80018f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018f2:	b9db      	cbnz	r3, 800192c <HAL_RCCEx_PeriphCLKConfig+0x340>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80018f4:	4a93      	ldr	r2, [pc, #588]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80018f6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80018fa:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80018fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001902:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001906:	4303      	orrs	r3, r0
 8001908:	6960      	ldr	r0, [r4, #20]
 800190a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800190e:	69a0      	ldr	r0, [r4, #24]
 8001910:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001914:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001918:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800191c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800191e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001922:	3801      	subs	r0, #1
 8001924:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001928:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800192c:	0288      	lsls	r0, r1, #10
 800192e:	d515      	bpl.n	800195c <HAL_RCCEx_PeriphCLKConfig+0x370>
 8001930:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001932:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001936:	d111      	bne.n	800195c <HAL_RCCEx_PeriphCLKConfig+0x370>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001938:	4a82      	ldr	r2, [pc, #520]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800193a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800193e:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001942:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001946:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800194a:	4303      	orrs	r3, r0
 800194c:	6960      	ldr	r0, [r4, #20]
 800194e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001952:	6a20      	ldr	r0, [r4, #32]
 8001954:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001958:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800195c:	070a      	lsls	r2, r1, #28
 800195e:	d519      	bpl.n	8001994 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001960:	4978      	ldr	r1, [pc, #480]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001962:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001966:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800196a:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800196e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001972:	4313      	orrs	r3, r2
 8001974:	6962      	ldr	r2, [r4, #20]
 8001976:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800197a:	69e2      	ldr	r2, [r4, #28]
 800197c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001980:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001984:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8001988:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800198a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800198e:	4313      	orrs	r3, r2
 8001990:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001994:	4c6b      	ldr	r4, [pc, #428]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001996:	6823      	ldr	r3, [r4, #0]
 8001998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800199c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800199e:	f7fe fe6b 	bl	8000678 <HAL_GetTick>
 80019a2:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80019a4:	6823      	ldr	r3, [r4, #0]
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	f140 80c4 	bpl.w	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x548>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80019ac:	2000      	movs	r0, #0
 80019ae:	e009      	b.n	80019c4 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      plli2sused = 1;
 80019b0:	2601      	movs	r6, #1
 80019b2:	e657      	b.n	8001664 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019b4:	f7fe fe60 	bl	8000678 <HAL_GetTick>
 80019b8:	eba0 0008 	sub.w	r0, r0, r8
 80019bc:	2864      	cmp	r0, #100	; 0x64
 80019be:	f67f ae69 	bls.w	8001694 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 80019c2:	2003      	movs	r0, #3
}
 80019c4:	b003      	add	sp, #12
 80019c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80019ca:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80019cc:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80019d0:	4293      	cmp	r3, r2
 80019d2:	f43f ae69 	beq.w	80016a8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80019d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80019d8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80019da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80019de:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80019e2:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80019e4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80019e6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80019ea:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 80019ec:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80019ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019f0:	07da      	lsls	r2, r3, #31
 80019f2:	f57f ae59 	bpl.w	80016a8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 80019f6:	f7fe fe3f 	bl	8000678 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019fa:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80019fe:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a02:	079b      	lsls	r3, r3, #30
 8001a04:	f53f ae50 	bmi.w	80016a8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a08:	f7fe fe36 	bl	8000678 <HAL_GetTick>
 8001a0c:	eba0 0008 	sub.w	r0, r0, r8
 8001a10:	4548      	cmp	r0, r9
 8001a12:	d9f5      	bls.n	8001a00 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8001a14:	e7d5      	b.n	80019c2 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a16:	6891      	ldr	r1, [r2, #8]
 8001a18:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001a1c:	e654      	b.n	80016c8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8001a1e:	4e49      	ldr	r6, [pc, #292]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001a20:	6833      	ldr	r3, [r6, #0]
 8001a22:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001a26:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001a28:	f7fe fe26 	bl	8000678 <HAL_GetTick>
 8001a2c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001a2e:	6833      	ldr	r3, [r6, #0]
 8001a30:	011b      	lsls	r3, r3, #4
 8001a32:	d472      	bmi.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001a34:	6822      	ldr	r2, [r4, #0]
 8001a36:	07d7      	lsls	r7, r2, #31
 8001a38:	d512      	bpl.n	8001a60 <HAL_RCCEx_PeriphCLKConfig+0x474>
 8001a3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001a3c:	b983      	cbnz	r3, 8001a60 <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001a3e:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001a42:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001a46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a4a:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001a4e:	430b      	orrs	r3, r1
 8001a50:	6861      	ldr	r1, [r4, #4]
 8001a52:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001a56:	68a1      	ldr	r1, [r4, #8]
 8001a58:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001a5c:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001a60:	0316      	lsls	r6, r2, #12
 8001a62:	d503      	bpl.n	8001a6c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8001a64:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a6a:	d005      	beq.n	8001a78 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8001a6c:	02d0      	lsls	r0, r2, #11
 8001a6e:	d51e      	bpl.n	8001aae <HAL_RCCEx_PeriphCLKConfig+0x4c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001a70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a76:	d11a      	bne.n	8001aae <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001a78:	4932      	ldr	r1, [pc, #200]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001a7a:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001a7e:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001a82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a86:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001a8a:	4303      	orrs	r3, r0
 8001a8c:	6860      	ldr	r0, [r4, #4]
 8001a8e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001a92:	68e0      	ldr	r0, [r4, #12]
 8001a94:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001a98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001a9c:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8001aa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001aa2:	f020 001f 	bic.w	r0, r0, #31
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	4303      	orrs	r3, r0
 8001aaa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001aae:	01d1      	lsls	r1, r2, #7
 8001ab0:	d511      	bpl.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001ab2:	4924      	ldr	r1, [pc, #144]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001ab4:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001ab8:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001abc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001ac0:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001ac4:	4303      	orrs	r3, r0
 8001ac6:	6860      	ldr	r0, [r4, #4]
 8001ac8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001acc:	6920      	ldr	r0, [r4, #16]
 8001ace:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001ad2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001ad6:	0192      	lsls	r2, r2, #6
 8001ad8:	d50d      	bpl.n	8001af6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001ada:	6923      	ldr	r3, [r4, #16]
 8001adc:	6862      	ldr	r2, [r4, #4]
 8001ade:	041b      	lsls	r3, r3, #16
 8001ae0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001ae4:	68e2      	ldr	r2, [r4, #12]
 8001ae6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001aea:	68a2      	ldr	r2, [r4, #8]
 8001aec:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001af0:	4a14      	ldr	r2, [pc, #80]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001af2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001af6:	4e13      	ldr	r6, [pc, #76]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001af8:	6833      	ldr	r3, [r6, #0]
 8001afa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001afe:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001b00:	f7fe fdba 	bl	8000678 <HAL_GetTick>
 8001b04:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001b06:	6833      	ldr	r3, [r6, #0]
 8001b08:	011b      	lsls	r3, r3, #4
 8001b0a:	f53f aed7 	bmi.w	80018bc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001b0e:	f7fe fdb3 	bl	8000678 <HAL_GetTick>
 8001b12:	1bc0      	subs	r0, r0, r7
 8001b14:	2864      	cmp	r0, #100	; 0x64
 8001b16:	d9f6      	bls.n	8001b06 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8001b18:	e753      	b.n	80019c2 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001b1a:	f7fe fdad 	bl	8000678 <HAL_GetTick>
 8001b1e:	1bc0      	subs	r0, r0, r7
 8001b20:	2864      	cmp	r0, #100	; 0x64
 8001b22:	d984      	bls.n	8001a2e <HAL_RCCEx_PeriphCLKConfig+0x442>
 8001b24:	e74d      	b.n	80019c2 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001b26:	f7fe fda7 	bl	8000678 <HAL_GetTick>
 8001b2a:	1b80      	subs	r0, r0, r6
 8001b2c:	2864      	cmp	r0, #100	; 0x64
 8001b2e:	f67f aecf 	bls.w	80018d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8001b32:	e746      	b.n	80019c2 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001b34:	f7fe fda0 	bl	8000678 <HAL_GetTick>
 8001b38:	1b40      	subs	r0, r0, r5
 8001b3a:	2864      	cmp	r0, #100	; 0x64
 8001b3c:	f67f af32 	bls.w	80019a4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8001b40:	e73f      	b.n	80019c2 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
 8001b42:	bf00      	nop
 8001b44:	40023800 	.word	0x40023800

08001b48 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8001b48:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0; 
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001b4a:	6803      	ldr	r3, [r0, #0]
{
 8001b4c:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001b4e:	68da      	ldr	r2, [r3, #12]
 8001b50:	0652      	lsls	r2, r2, #25
 8001b52:	d501      	bpl.n	8001b58 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8001b54:	2000      	movs	r0, #0
 8001b56:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001b58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b5c:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001b5e:	f7fe fd8b 	bl	8000678 <HAL_GetTick>
 8001b62:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001b64:	6823      	ldr	r3, [r4, #0]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	065b      	lsls	r3, r3, #25
 8001b6a:	d4f3      	bmi.n	8001b54 <RTC_EnterInitMode+0xc>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001b6c:	f7fe fd84 	bl	8000678 <HAL_GetTick>
 8001b70:	1b40      	subs	r0, r0, r5
 8001b72:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001b76:	d9f5      	bls.n	8001b64 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8001b78:	2003      	movs	r0, #3
}
 8001b7a:	bd38      	pop	{r3, r4, r5, pc}

08001b7c <HAL_RTC_Init>:
{
 8001b7c:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8001b7e:	4604      	mov	r4, r0
 8001b80:	b1b0      	cbz	r0, 8001bb0 <HAL_RTC_Init+0x34>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001b82:	7f43      	ldrb	r3, [r0, #29]
 8001b84:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001b88:	b913      	cbnz	r3, 8001b90 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8001b8a:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8001b8c:	f001 fcd2 	bl	8003534 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001b90:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001b92:	22ca      	movs	r2, #202	; 0xca
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001b94:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001b96:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001b98:	6823      	ldr	r3, [r4, #0]
 8001b9a:	625a      	str	r2, [r3, #36]	; 0x24
 8001b9c:	2253      	movs	r2, #83	; 0x53
 8001b9e:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001ba0:	f7ff ffd2 	bl	8001b48 <RTC_EnterInitMode>
 8001ba4:	6823      	ldr	r3, [r4, #0]
 8001ba6:	b128      	cbz	r0, 8001bb4 <HAL_RTC_Init+0x38>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001ba8:	22ff      	movs	r2, #255	; 0xff
 8001baa:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001bac:	2304      	movs	r3, #4
 8001bae:	7763      	strb	r3, [r4, #29]
     return HAL_ERROR;
 8001bb0:	2001      	movs	r0, #1
}
 8001bb2:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001bb4:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001bb6:	6925      	ldr	r5, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001bb8:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8001bbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bc0:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001bc2:	6862      	ldr	r2, [r4, #4]
 8001bc4:	6899      	ldr	r1, [r3, #8]
 8001bc6:	432a      	orrs	r2, r5
 8001bc8:	6965      	ldr	r5, [r4, #20]
 8001bca:	432a      	orrs	r2, r5
 8001bcc:	430a      	orrs	r2, r1
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8001bce:	68a1      	ldr	r1, [r4, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001bd0:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001bd2:	68e2      	ldr	r2, [r4, #12]
 8001bd4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8001bd6:	691a      	ldr	r2, [r3, #16]
 8001bd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType); 
 8001bdc:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8001bde:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8001be0:	68da      	ldr	r2, [r3, #12]
 8001be2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001be6:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8001be8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bea:	f022 0208 	bic.w	r2, r2, #8
 8001bee:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType); 
 8001bf0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001bf6:	22ff      	movs	r2, #255	; 0xff
 8001bf8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 8001bfe:	bd38      	pop	{r3, r4, r5, pc}

08001c00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c00:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c02:	4604      	mov	r4, r0
 8001c04:	2800      	cmp	r0, #0
 8001c06:	d04e      	beq.n	8001ca6 <HAL_SPI_Init+0xa6>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c0c:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8001c10:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c14:	b91b      	cbnz	r3, 8001c1e <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c16:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c1a:	f001 fcc3 	bl	80035a4 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c1e:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c20:	6821      	ldr	r1, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c22:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001c24:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8001c28:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c2a:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8001c2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c32:	600b      	str	r3, [r1, #0]
 8001c34:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c38:	d932      	bls.n	8001ca0 <HAL_SPI_Init+0xa0>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001c3a:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001c3c:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c40:	bf18      	it	ne
 8001c42:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001c44:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c46:	b92b      	cbnz	r3, 8001c54 <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c48:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001c4c:	bf8c      	ite	hi
 8001c4e:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001c50:	2301      	movls	r3, #1
 8001c52:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001c54:	68a6      	ldr	r6, [r4, #8]
 8001c56:	6863      	ldr	r3, [r4, #4]
 8001c58:	69a5      	ldr	r5, [r4, #24]
 8001c5a:	4333      	orrs	r3, r6
 8001c5c:	6926      	ldr	r6, [r4, #16]
 8001c5e:	4333      	orrs	r3, r6
 8001c60:	6966      	ldr	r6, [r4, #20]
 8001c62:	4333      	orrs	r3, r6
 8001c64:	69e6      	ldr	r6, [r4, #28]
 8001c66:	4333      	orrs	r3, r6
 8001c68:	6a26      	ldr	r6, [r4, #32]
 8001c6a:	4333      	orrs	r3, r6
 8001c6c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001c6e:	4333      	orrs	r3, r6
 8001c70:	f405 7600 	and.w	r6, r5, #512	; 0x200
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001c74:	0c2d      	lsrs	r5, r5, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001c76:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001c78:	f005 0504 	and.w	r5, r5, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001c7c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001c7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c80:	431a      	orrs	r2, r3
 8001c82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001c84:	431a      	orrs	r2, r3
 8001c86:	432a      	orrs	r2, r5
 8001c88:	4302      	orrs	r2, r0
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c8a:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001c8c:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c8e:	69cb      	ldr	r3, [r1, #28]
 8001c90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001c94:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8001c96:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c98:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001c9a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 8001c9e:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001ca0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001ca4:	e7cc      	b.n	8001c40 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8001ca6:	2001      	movs	r0, #1
}
 8001ca8:	bd70      	pop	{r4, r5, r6, pc}

08001caa <TIM_TI1_ConfigInputStage>:
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001caa:	6a03      	ldr	r3, [r0, #32]
{
 8001cac:	b510      	push	{r4, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cae:	6a04      	ldr	r4, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001cb0:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cb4:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 8001cb8:	430b      	orrs	r3, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cba:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001cbc:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001cbe:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8001cc2:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001cc6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001cc8:	6203      	str	r3, [r0, #32]
 8001cca:	bd10      	pop	{r4, pc}

08001ccc <TIM_TI2_ConfigInputStage>:
{
uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ccc:	6a03      	ldr	r3, [r0, #32]
 8001cce:	f023 0310 	bic.w	r3, r3, #16
{
 8001cd2:	b510      	push	{r4, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001cd4:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001cd6:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001cd8:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001cda:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001cde:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12);
 8001ce2:	ea44 3202 	orr.w	r2, r4, r2, lsl #12
  tmpccer |= (TIM_ICPolarity << 4);
 8001ce6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001cea:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001cec:	6203      	str	r3, [r0, #32]
 8001cee:	bd10      	pop	{r4, pc}

08001cf0 <HAL_TIM_PWM_MspInit>:
 8001cf0:	4770      	bx	lr
	...

08001cf4 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001cf4:	4a30      	ldr	r2, [pc, #192]	; (8001db8 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8001cf6:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001cf8:	4290      	cmp	r0, r2
 8001cfa:	d012      	beq.n	8001d22 <TIM_Base_SetConfig+0x2e>
 8001cfc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001d00:	d00f      	beq.n	8001d22 <TIM_Base_SetConfig+0x2e>
 8001d02:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001d06:	4290      	cmp	r0, r2
 8001d08:	d00b      	beq.n	8001d22 <TIM_Base_SetConfig+0x2e>
 8001d0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d0e:	4290      	cmp	r0, r2
 8001d10:	d007      	beq.n	8001d22 <TIM_Base_SetConfig+0x2e>
 8001d12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d16:	4290      	cmp	r0, r2
 8001d18:	d003      	beq.n	8001d22 <TIM_Base_SetConfig+0x2e>
 8001d1a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001d1e:	4290      	cmp	r0, r2
 8001d20:	d11d      	bne.n	8001d5e <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8001d22:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001d28:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001d2a:	4a23      	ldr	r2, [pc, #140]	; (8001db8 <TIM_Base_SetConfig+0xc4>)
 8001d2c:	4290      	cmp	r0, r2
 8001d2e:	d104      	bne.n	8001d3a <TIM_Base_SetConfig+0x46>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d34:	68ca      	ldr	r2, [r1, #12]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	e028      	b.n	8001d8c <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001d3a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001d3e:	d0f7      	beq.n	8001d30 <TIM_Base_SetConfig+0x3c>
 8001d40:	4a1e      	ldr	r2, [pc, #120]	; (8001dbc <TIM_Base_SetConfig+0xc8>)
 8001d42:	4290      	cmp	r0, r2
 8001d44:	d0f4      	beq.n	8001d30 <TIM_Base_SetConfig+0x3c>
 8001d46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d4a:	4290      	cmp	r0, r2
 8001d4c:	d0f0      	beq.n	8001d30 <TIM_Base_SetConfig+0x3c>
 8001d4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d52:	4290      	cmp	r0, r2
 8001d54:	d0ec      	beq.n	8001d30 <TIM_Base_SetConfig+0x3c>
 8001d56:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001d5a:	4290      	cmp	r0, r2
 8001d5c:	d0e8      	beq.n	8001d30 <TIM_Base_SetConfig+0x3c>
 8001d5e:	4a18      	ldr	r2, [pc, #96]	; (8001dc0 <TIM_Base_SetConfig+0xcc>)
 8001d60:	4290      	cmp	r0, r2
 8001d62:	d0e5      	beq.n	8001d30 <TIM_Base_SetConfig+0x3c>
 8001d64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d68:	4290      	cmp	r0, r2
 8001d6a:	d0e1      	beq.n	8001d30 <TIM_Base_SetConfig+0x3c>
 8001d6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d70:	4290      	cmp	r0, r2
 8001d72:	d0dd      	beq.n	8001d30 <TIM_Base_SetConfig+0x3c>
 8001d74:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001d78:	4290      	cmp	r0, r2
 8001d7a:	d0d9      	beq.n	8001d30 <TIM_Base_SetConfig+0x3c>
 8001d7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d80:	4290      	cmp	r0, r2
 8001d82:	d0d5      	beq.n	8001d30 <TIM_Base_SetConfig+0x3c>
 8001d84:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d88:	4290      	cmp	r0, r2
 8001d8a:	d0d1      	beq.n	8001d30 <TIM_Base_SetConfig+0x3c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d8c:	694a      	ldr	r2, [r1, #20]
 8001d8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d92:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001d94:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d96:	688b      	ldr	r3, [r1, #8]
 8001d98:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001d9a:	680b      	ldr	r3, [r1, #0]
 8001d9c:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001d9e:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <TIM_Base_SetConfig+0xc4>)
 8001da0:	4298      	cmp	r0, r3
 8001da2:	d006      	beq.n	8001db2 <TIM_Base_SetConfig+0xbe>
 8001da4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001da8:	4298      	cmp	r0, r3
 8001daa:	d002      	beq.n	8001db2 <TIM_Base_SetConfig+0xbe>
  TIMx->EGR = TIM_EGR_UG;
 8001dac:	2301      	movs	r3, #1
 8001dae:	6143      	str	r3, [r0, #20]
}
 8001db0:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001db2:	690b      	ldr	r3, [r1, #16]
 8001db4:	6303      	str	r3, [r0, #48]	; 0x30
 8001db6:	e7f9      	b.n	8001dac <TIM_Base_SetConfig+0xb8>
 8001db8:	40010000 	.word	0x40010000
 8001dbc:	40000400 	.word	0x40000400
 8001dc0:	40014000 	.word	0x40014000

08001dc4 <HAL_TIM_Base_Init>:
{ 
 8001dc4:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001dc6:	4604      	mov	r4, r0
 8001dc8:	b1a0      	cbz	r0, 8001df4 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001dca:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001dce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001dd2:	b91b      	cbnz	r3, 8001ddc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001dd4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001dd8:	f001 fd7e 	bl	80038d8 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001ddc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001dde:	6820      	ldr	r0, [r4, #0]
 8001de0:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;
 8001de2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001de6:	f7ff ff85 	bl	8001cf4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001dea:	2301      	movs	r3, #1
  return HAL_OK;
 8001dec:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001dee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001df2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001df4:	2001      	movs	r0, #1
}
 8001df6:	bd10      	pop	{r4, pc}

08001df8 <HAL_TIM_PWM_Init>:
{
 8001df8:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001dfa:	4604      	mov	r4, r0
 8001dfc:	b1a0      	cbz	r0, 8001e28 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001dfe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e02:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e06:	b91b      	cbnz	r3, 8001e10 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001e08:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001e0c:	f7ff ff70 	bl	8001cf0 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 8001e10:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001e12:	6820      	ldr	r0, [r4, #0]
 8001e14:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;  
 8001e16:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001e1a:	f7ff ff6b 	bl	8001cf4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001e1e:	2301      	movs	r3, #1
  return HAL_OK;
 8001e20:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001e22:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001e26:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001e28:	2001      	movs	r0, #1
}  
 8001e2a:	bd10      	pop	{r4, pc}

08001e2c <TIM_OC1_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e2c:	6a03      	ldr	r3, [r0, #32]
 8001e2e:	f023 0301 	bic.w	r3, r3, #1
{
 8001e32:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e34:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001e36:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8001e38:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001e3a:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8001e3c:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 8001e40:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001e42:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8001e46:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001e4a:	432c      	orrs	r4, r5
  tmpccer |= OC_Config->OCPolarity;
 8001e4c:	688d      	ldr	r5, [r1, #8]
 8001e4e:	432b      	orrs	r3, r5
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001e50:	4d0c      	ldr	r5, [pc, #48]	; (8001e84 <TIM_OC1_SetConfig+0x58>)
 8001e52:	42a8      	cmp	r0, r5
 8001e54:	d009      	beq.n	8001e6a <TIM_OC1_SetConfig+0x3e>
 8001e56:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001e5a:	42a8      	cmp	r0, r5
 8001e5c:	d005      	beq.n	8001e6a <TIM_OC1_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 8001e5e:	6042      	str	r2, [r0, #4]
  TIMx->CCR1 = OC_Config->Pulse;
 8001e60:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001e62:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001e64:	6342      	str	r2, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;  
 8001e66:	6203      	str	r3, [r0, #32]
} 
 8001e68:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8001e6a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001e6c:	f023 0308 	bic.w	r3, r3, #8
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e70:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001e72:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
 8001e76:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e78:	694d      	ldr	r5, [r1, #20]
 8001e7a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001e7c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e80:	432a      	orrs	r2, r5
 8001e82:	e7ec      	b.n	8001e5e <TIM_OC1_SetConfig+0x32>
 8001e84:	40010000 	.word	0x40010000

08001e88 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e88:	6a03      	ldr	r3, [r0, #32]
 8001e8a:	f023 0310 	bic.w	r3, r3, #16
{
 8001e8e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e90:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001e92:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8001e94:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001e96:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8001e98:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001e9c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001e9e:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8001ea2:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001ea6:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4);
 8001eaa:	688d      	ldr	r5, [r1, #8]
 8001eac:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001eb0:	4d0d      	ldr	r5, [pc, #52]	; (8001ee8 <TIM_OC2_SetConfig+0x60>)
 8001eb2:	42a8      	cmp	r0, r5
 8001eb4:	d009      	beq.n	8001eca <TIM_OC2_SetConfig+0x42>
 8001eb6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001eba:	42a8      	cmp	r0, r5
 8001ebc:	d005      	beq.n	8001eca <TIM_OC2_SetConfig+0x42>
  TIMx->CR2 = tmpcr2;
 8001ebe:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8001ec0:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001ec2:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001ec4:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001ec6:	6203      	str	r3, [r0, #32]
}
 8001ec8:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8001eca:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001ecc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001ed0:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001ed2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8001ed6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8001eda:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001edc:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001ede:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001ee2:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 8001ee6:	e7ea      	b.n	8001ebe <TIM_OC2_SetConfig+0x36>
 8001ee8:	40010000 	.word	0x40010000

08001eec <TIM_OC3_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001eec:	6a03      	ldr	r3, [r0, #32]
 8001eee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 8001ef2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001ef4:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001ef6:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8001ef8:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8001efa:	69c4      	ldr	r4, [r0, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8001efc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 8001f00:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8001f02:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8001f06:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001f0a:	432c      	orrs	r4, r5
  tmpccer |= (OC_Config->OCPolarity << 8);
 8001f0c:	688d      	ldr	r5, [r1, #8]
 8001f0e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001f12:	4d0e      	ldr	r5, [pc, #56]	; (8001f4c <TIM_OC3_SetConfig+0x60>)
 8001f14:	42a8      	cmp	r0, r5
 8001f16:	d009      	beq.n	8001f2c <TIM_OC3_SetConfig+0x40>
 8001f18:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001f1c:	42a8      	cmp	r0, r5
 8001f1e:	d005      	beq.n	8001f2c <TIM_OC3_SetConfig+0x40>
  TIMx->CR2 = tmpcr2;
 8001f20:	6042      	str	r2, [r0, #4]
  TIMx->CCR3 = OC_Config->Pulse;
 8001f22:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001f24:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001f26:	63c2      	str	r2, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8001f28:	6203      	str	r3, [r0, #32]
}
 8001f2a:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8001f2c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001f2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8001f32:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001f34:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8001f38:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8001f3c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8001f3e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001f40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8001f44:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8001f48:	e7ea      	b.n	8001f20 <TIM_OC3_SetConfig+0x34>
 8001f4a:	bf00      	nop
 8001f4c:	40010000 	.word	0x40010000

08001f50 <TIM_OC4_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001f50:	6a03      	ldr	r3, [r0, #32]
 8001f52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 8001f56:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001f58:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001f5a:	6a04      	ldr	r4, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8001f5c:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8001f5e:	69c3      	ldr	r3, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8001f60:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001f64:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001f66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f6a:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001f6e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12);
 8001f72:	688d      	ldr	r5, [r1, #8]
 8001f74:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001f78:	4d09      	ldr	r5, [pc, #36]	; (8001fa0 <TIM_OC4_SetConfig+0x50>)
 8001f7a:	42a8      	cmp	r0, r5
 8001f7c:	d009      	beq.n	8001f92 <TIM_OC4_SetConfig+0x42>
 8001f7e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001f82:	42a8      	cmp	r0, r5
 8001f84:	d005      	beq.n	8001f92 <TIM_OC4_SetConfig+0x42>
  TIMx->CR2 = tmpcr2;
 8001f86:	6042      	str	r2, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001f88:	61c3      	str	r3, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8001f8a:	684b      	ldr	r3, [r1, #4]
 8001f8c:	6403      	str	r3, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8001f8e:	6204      	str	r4, [r0, #32]
}
 8001f90:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001f92:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001f96:	694d      	ldr	r5, [r1, #20]
 8001f98:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 8001f9c:	e7f3      	b.n	8001f86 <TIM_OC4_SetConfig+0x36>
 8001f9e:	bf00      	nop
 8001fa0:	40010000 	.word	0x40010000

08001fa4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001fa4:	b510      	push	{r4, lr}

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001fa6:	430a      	orrs	r2, r1
  tmpsmcr = TIMx->SMCR;
 8001fa8:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001faa:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fae:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001fb2:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001fb4:	6083      	str	r3, [r0, #8]
 8001fb6:	bd10      	pop	{r4, pc}

08001fb8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001fb8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001fbc:	2b01      	cmp	r3, #1
{
 8001fbe:	b510      	push	{r4, lr}
 8001fc0:	4604      	mov	r4, r0
 8001fc2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001fc6:	d018      	beq.n	8001ffa <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 8001fc8:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8001fcc:	2301      	movs	r3, #1
  tmpsmcr = htim->Instance->SMCR;
 8001fce:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8001fd0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001fd4:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fd6:	4b3e      	ldr	r3, [pc, #248]	; (80020d0 <HAL_TIM_ConfigClockSource+0x118>)
 8001fd8:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8001fda:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001fdc:	680b      	ldr	r3, [r1, #0]
 8001fde:	2b40      	cmp	r3, #64	; 0x40
 8001fe0:	d059      	beq.n	8002096 <HAL_TIM_ConfigClockSource+0xde>
 8001fe2:	d815      	bhi.n	8002010 <HAL_TIM_ConfigClockSource+0x58>
 8001fe4:	2b10      	cmp	r3, #16
 8001fe6:	d067      	beq.n	80020b8 <HAL_TIM_ConfigClockSource+0x100>
 8001fe8:	d808      	bhi.n	8001ffc <HAL_TIM_ConfigClockSource+0x44>
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d05e      	beq.n	80020ac <HAL_TIM_ConfigClockSource+0xf4>
  htim->State = HAL_TIM_STATE_READY;
 8001fee:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001ff0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001ff2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001ff6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001ffa:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8001ffc:	2b20      	cmp	r3, #32
 8001ffe:	d061      	beq.n	80020c4 <HAL_TIM_ConfigClockSource+0x10c>
 8002000:	2b30      	cmp	r3, #48	; 0x30
 8002002:	d1f4      	bne.n	8001fee <HAL_TIM_ConfigClockSource+0x36>
   tmpsmcr = TIMx->SMCR;
 8002004:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800200a:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 800200e:	e026      	b.n	800205e <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8002010:	2b70      	cmp	r3, #112	; 0x70
 8002012:	d026      	beq.n	8002062 <HAL_TIM_ConfigClockSource+0xaa>
 8002014:	d80e      	bhi.n	8002034 <HAL_TIM_ConfigClockSource+0x7c>
 8002016:	2b50      	cmp	r3, #80	; 0x50
 8002018:	d032      	beq.n	8002080 <HAL_TIM_ConfigClockSource+0xc8>
 800201a:	2b60      	cmp	r3, #96	; 0x60
 800201c:	d1e7      	bne.n	8001fee <HAL_TIM_ConfigClockSource+0x36>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 800201e:	68ca      	ldr	r2, [r1, #12]
 8002020:	6849      	ldr	r1, [r1, #4]
 8002022:	f7ff fe53 	bl	8001ccc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002026:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 8002028:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800202a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800202e:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8002032:	e023      	b.n	800207c <HAL_TIM_ConfigClockSource+0xc4>
  switch (sClockSourceConfig->ClockSource)
 8002034:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002038:	d00c      	beq.n	8002054 <HAL_TIM_ConfigClockSource+0x9c>
 800203a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800203e:	d1d6      	bne.n	8001fee <HAL_TIM_ConfigClockSource+0x36>
      TIM_ETR_SetConfig(htim->Instance, 
 8002040:	68cb      	ldr	r3, [r1, #12]
 8002042:	684a      	ldr	r2, [r1, #4]
 8002044:	6889      	ldr	r1, [r1, #8]
 8002046:	f7ff ffad 	bl	8001fa4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800204a:	6822      	ldr	r2, [r4, #0]
 800204c:	6893      	ldr	r3, [r2, #8]
 800204e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002052:	e013      	b.n	800207c <HAL_TIM_ConfigClockSource+0xc4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002054:	6883      	ldr	r3, [r0, #8]
 8002056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800205a:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 800205e:	6083      	str	r3, [r0, #8]
 8002060:	e7c5      	b.n	8001fee <HAL_TIM_ConfigClockSource+0x36>
      TIM_ETR_SetConfig(htim->Instance, 
 8002062:	68cb      	ldr	r3, [r1, #12]
 8002064:	684a      	ldr	r2, [r1, #4]
 8002066:	6889      	ldr	r1, [r1, #8]
 8002068:	f7ff ff9c 	bl	8001fa4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800206c:	6822      	ldr	r2, [r4, #0]
 800206e:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002070:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002074:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002078:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800207c:	6093      	str	r3, [r2, #8]
    break;
 800207e:	e7b6      	b.n	8001fee <HAL_TIM_ConfigClockSource+0x36>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002080:	68ca      	ldr	r2, [r1, #12]
 8002082:	6849      	ldr	r1, [r1, #4]
 8002084:	f7ff fe11 	bl	8001caa <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002088:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 800208a:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800208c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002090:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8002094:	e7f2      	b.n	800207c <HAL_TIM_ConfigClockSource+0xc4>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002096:	68ca      	ldr	r2, [r1, #12]
 8002098:	6849      	ldr	r1, [r1, #4]
 800209a:	f7ff fe06 	bl	8001caa <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800209e:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 80020a0:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80020a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80020a6:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80020aa:	e7e7      	b.n	800207c <HAL_TIM_ConfigClockSource+0xc4>
   tmpsmcr = TIMx->SMCR;
 80020ac:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80020ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80020b2:	f043 0307 	orr.w	r3, r3, #7
 80020b6:	e7d2      	b.n	800205e <HAL_TIM_ConfigClockSource+0xa6>
   tmpsmcr = TIMx->SMCR;
 80020b8:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80020ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80020be:	f043 0317 	orr.w	r3, r3, #23
 80020c2:	e7cc      	b.n	800205e <HAL_TIM_ConfigClockSource+0xa6>
   tmpsmcr = TIMx->SMCR;
 80020c4:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80020c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80020ca:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 80020ce:	e7c6      	b.n	800205e <HAL_TIM_ConfigClockSource+0xa6>
 80020d0:	fffe0088 	.word	0xfffe0088

080020d4 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80020d4:	6a03      	ldr	r3, [r0, #32]
 80020d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 80020da:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80020dc:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020de:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80020e0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80020e2:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80020e4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 80020e8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80020ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 80020f2:	432b      	orrs	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 80020f4:	688d      	ldr	r5, [r1, #8]
 80020f6:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80020fa:	4d09      	ldr	r5, [pc, #36]	; (8002120 <TIM_OC5_SetConfig+0x4c>)
 80020fc:	42a8      	cmp	r0, r5
 80020fe:	d003      	beq.n	8002108 <TIM_OC5_SetConfig+0x34>
 8002100:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002104:	42a8      	cmp	r0, r5
 8002106:	d104      	bne.n	8002112 <TIM_OC5_SetConfig+0x3e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002108:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 800210c:	694d      	ldr	r5, [r1, #20]
 800210e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002112:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002114:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002116:	684b      	ldr	r3, [r1, #4]
 8002118:	6583      	str	r3, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800211a:	6202      	str	r2, [r0, #32]
 800211c:	bd30      	pop	{r4, r5, pc}
 800211e:	bf00      	nop
 8002120:	40010000 	.word	0x40010000

08002124 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002124:	6a03      	ldr	r3, [r0, #32]
 8002126:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 800212a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800212c:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800212e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002130:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002132:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002134:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002138:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800213a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800213e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002142:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 8002146:	688d      	ldr	r5, [r1, #8]
 8002148:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800214c:	4d08      	ldr	r5, [pc, #32]	; (8002170 <TIM_OC6_SetConfig+0x4c>)
 800214e:	42a8      	cmp	r0, r5
 8002150:	d003      	beq.n	800215a <TIM_OC6_SetConfig+0x36>
 8002152:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002156:	42a8      	cmp	r0, r5
 8002158:	d104      	bne.n	8002164 <TIM_OC6_SetConfig+0x40>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800215a:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 800215e:	694d      	ldr	r5, [r1, #20]
 8002160:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002164:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002166:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002168:	684b      	ldr	r3, [r1, #4]
 800216a:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800216c:	6202      	str	r2, [r0, #32]
 800216e:	bd30      	pop	{r4, r5, pc}
 8002170:	40010000 	.word	0x40010000

08002174 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8002174:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002178:	2b01      	cmp	r3, #1
{
 800217a:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 800217c:	d01c      	beq.n	80021b8 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  tmpcr2 = htim->Instance->CR2;
 800217e:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002180:	4d0e      	ldr	r5, [pc, #56]	; (80021bc <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  tmpcr2 = htim->Instance->CR2;
 8002182:	6853      	ldr	r3, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002184:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 8002186:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002188:	d003      	beq.n	8002192 <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 800218a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800218e:	42aa      	cmp	r2, r5
 8002190:	d103      	bne.n	800219a <HAL_TIMEx_MasterConfigSynchronization+0x26>
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002192:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002196:	684d      	ldr	r5, [r1, #4]
 8002198:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800219a:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800219c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80021a0:	6889      	ldr	r1, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 80021a2:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80021a6:	432b      	orrs	r3, r5
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80021a8:	4321      	orrs	r1, r4
  htim->Instance->CR2 = tmpcr2;
 80021aa:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(htim);
 80021ac:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 80021ae:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 80021b0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80021b4:	4618      	mov	r0, r3
 80021b6:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 80021b8:	2002      	movs	r0, #2
} 
 80021ba:	bd30      	pop	{r4, r5, pc}
 80021bc:	40010000 	.word	0x40010000

080021c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 80021c0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80021c4:	2b01      	cmp	r3, #1
{
 80021c6:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80021c8:	d038      	beq.n	800223c <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80021ca:	68cb      	ldr	r3, [r1, #12]
 80021cc:	688a      	ldr	r2, [r1, #8]
 80021ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80021d2:	4c1b      	ldr	r4, [pc, #108]	; (8002240 <HAL_TIMEx_ConfigBreakDeadTime+0x80>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80021d4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80021d6:	684a      	ldr	r2, [r1, #4]
 80021d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021dc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80021de:	680a      	ldr	r2, [r1, #0]
 80021e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80021e4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80021e6:	690a      	ldr	r2, [r1, #16]
 80021e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021ec:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80021ee:	694a      	ldr	r2, [r1, #20]
 80021f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80021f4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80021f6:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80021f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80021fc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 80021fe:	698a      	ldr	r2, [r1, #24]
 8002200:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002204:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002208:	6802      	ldr	r2, [r0, #0]
 800220a:	42a2      	cmp	r2, r4
 800220c:	d003      	beq.n	8002216 <HAL_TIMEx_ConfigBreakDeadTime+0x56>
 800220e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002212:	42a2      	cmp	r2, r4
 8002214:	d10c      	bne.n	8002230 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 8002216:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8002218:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800221c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002220:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002222:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002224:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002228:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800222a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800222e:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8002230:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8002232:	2300      	movs	r3, #0
 8002234:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8002238:	4618      	mov	r0, r3
 800223a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 800223c:	2002      	movs	r0, #2
}
 800223e:	bd10      	pop	{r4, pc}
 8002240:	40010000 	.word	0x40010000

08002244 <HAL_TIM_PWM_ConfigChannel>:
{
 8002244:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002246:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800224a:	4604      	mov	r4, r0
 800224c:	460d      	mov	r5, r1
 800224e:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8002250:	2b01      	cmp	r3, #1
 8002252:	d010      	beq.n	8002276 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002254:	2301      	movs	r3, #1
  switch (Channel)
 8002256:	2a08      	cmp	r2, #8
  htim->State = HAL_TIM_STATE_BUSY;
 8002258:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 800225c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8002260:	d043      	beq.n	80022ea <HAL_TIM_PWM_ConfigChannel+0xa6>
 8002262:	d809      	bhi.n	8002278 <HAL_TIM_PWM_ConfigChannel+0x34>
 8002264:	b1fa      	cbz	r2, 80022a6 <HAL_TIM_PWM_ConfigChannel+0x62>
 8002266:	2a04      	cmp	r2, #4
 8002268:	d02e      	beq.n	80022c8 <HAL_TIM_PWM_ConfigChannel+0x84>
  htim->State = HAL_TIM_STATE_READY;
 800226a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800226c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800226e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002272:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002276:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8002278:	2a10      	cmp	r2, #16
 800227a:	d047      	beq.n	800230c <HAL_TIM_PWM_ConfigChannel+0xc8>
 800227c:	2a14      	cmp	r2, #20
 800227e:	d056      	beq.n	800232e <HAL_TIM_PWM_ConfigChannel+0xea>
 8002280:	2a0c      	cmp	r2, #12
 8002282:	d1f2      	bne.n	800226a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002284:	6820      	ldr	r0, [r4, #0]
 8002286:	f7ff fe63 	bl	8001f50 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800228a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 800228c:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800228e:	69da      	ldr	r2, [r3, #28]
 8002290:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002294:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002296:	69da      	ldr	r2, [r3, #28]
 8002298:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800229c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 800229e:	69da      	ldr	r2, [r3, #28]
 80022a0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80022a4:	e030      	b.n	8002308 <HAL_TIM_PWM_ConfigChannel+0xc4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80022a6:	6820      	ldr	r0, [r4, #0]
 80022a8:	f7ff fdc0 	bl	8001e2c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022ac:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022ae:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022b0:	699a      	ldr	r2, [r3, #24]
 80022b2:	f042 0208 	orr.w	r2, r2, #8
 80022b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022b8:	699a      	ldr	r2, [r3, #24]
 80022ba:	f022 0204 	bic.w	r2, r2, #4
 80022be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022c0:	699a      	ldr	r2, [r3, #24]
 80022c2:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80022c4:	619a      	str	r2, [r3, #24]
    break;
 80022c6:	e7d0      	b.n	800226a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80022c8:	6820      	ldr	r0, [r4, #0]
 80022ca:	f7ff fddd 	bl	8001e88 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80022ce:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80022d0:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80022d2:	699a      	ldr	r2, [r3, #24]
 80022d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022d8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80022da:	699a      	ldr	r2, [r3, #24]
 80022dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022e0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80022e2:	699a      	ldr	r2, [r3, #24]
 80022e4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80022e8:	e7ec      	b.n	80022c4 <HAL_TIM_PWM_ConfigChannel+0x80>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80022ea:	6820      	ldr	r0, [r4, #0]
 80022ec:	f7ff fdfe 	bl	8001eec <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80022f0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80022f2:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80022f4:	69da      	ldr	r2, [r3, #28]
 80022f6:	f042 0208 	orr.w	r2, r2, #8
 80022fa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80022fc:	69da      	ldr	r2, [r3, #28]
 80022fe:	f022 0204 	bic.w	r2, r2, #4
 8002302:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002304:	69da      	ldr	r2, [r3, #28]
 8002306:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8002308:	61da      	str	r2, [r3, #28]
    break;
 800230a:	e7ae      	b.n	800226a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800230c:	6820      	ldr	r0, [r4, #0]
 800230e:	f7ff fee1 	bl	80020d4 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002312:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8002314:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002316:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002318:	f042 0208 	orr.w	r2, r2, #8
 800231c:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800231e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002320:	f022 0204 	bic.w	r2, r2, #4
 8002324:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8002326:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002328:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 800232a:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 800232c:	e79d      	b.n	800226a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800232e:	6820      	ldr	r0, [r4, #0]
 8002330:	f7ff fef8 	bl	8002124 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002334:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8002336:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002338:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800233a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800233e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002340:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002342:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002346:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8002348:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800234a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800234e:	e7ec      	b.n	800232a <HAL_TIM_PWM_ConfigChannel+0xe6>

08002350 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002350:	6803      	ldr	r3, [r0, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002358:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	f022 0201 	bic.w	r2, r2, #1
 8002360:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002362:	2320      	movs	r3, #32
 8002364:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 8002368:	4770      	bx	lr

0800236a <HAL_UART_DeInit>:
{
 800236a:	b538      	push	{r3, r4, r5, lr}
  if(huart == NULL)
 800236c:	4605      	mov	r5, r0
 800236e:	b1b0      	cbz	r0, 800239e <HAL_UART_DeInit+0x34>
  huart->gState = HAL_UART_STATE_BUSY;
 8002370:	2324      	movs	r3, #36	; 0x24
  huart->Instance->CR1 = 0x0U;
 8002372:	2400      	movs	r4, #0
  huart->gState = HAL_UART_STATE_BUSY;
 8002374:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8002378:	6803      	ldr	r3, [r0, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	f022 0201 	bic.w	r2, r2, #1
 8002380:	601a      	str	r2, [r3, #0]
  huart->Instance->CR1 = 0x0U;
 8002382:	601c      	str	r4, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8002384:	605c      	str	r4, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8002386:	609c      	str	r4, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8002388:	f001 fe20 	bl	8003fcc <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800238c:	66ec      	str	r4, [r5, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 800238e:	f885 4068 	strb.w	r4, [r5, #104]	; 0x68
  return HAL_OK;
 8002392:	4620      	mov	r0, r4
  huart->gState    = HAL_UART_STATE_RESET;
 8002394:	f885 4069 	strb.w	r4, [r5, #105]	; 0x69
  huart->RxState   = HAL_UART_STATE_RESET;
 8002398:	f885 406a 	strb.w	r4, [r5, #106]	; 0x6a
  return HAL_OK;
 800239c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800239e:	2001      	movs	r0, #1
}
 80023a0:	bd38      	pop	{r3, r4, r5, pc}
	...

080023a4 <HAL_UART_Transmit_DMA>:
{
 80023a4:	b538      	push	{r3, r4, r5, lr}
 80023a6:	4604      	mov	r4, r0
 80023a8:	4613      	mov	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80023aa:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 80023ae:	2a20      	cmp	r2, #32
 80023b0:	d12b      	bne.n	800240a <HAL_UART_Transmit_DMA+0x66>
    if((pData == NULL ) || (Size == 0U))
 80023b2:	b341      	cbz	r1, 8002406 <HAL_UART_Transmit_DMA+0x62>
 80023b4:	b33b      	cbz	r3, 8002406 <HAL_UART_Transmit_DMA+0x62>
    __HAL_LOCK(huart);
 80023b6:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 80023ba:	2a01      	cmp	r2, #1
 80023bc:	d025      	beq.n	800240a <HAL_UART_Transmit_DMA+0x66>
 80023be:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023c0:	2500      	movs	r5, #0
    huart->TxXferCount = Size;
 80023c2:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    __HAL_LOCK(huart);
 80023c6:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023ca:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023cc:	66e5      	str	r5, [r4, #108]	; 0x6c
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80023ce:	6e20      	ldr	r0, [r4, #96]	; 0x60
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023d0:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80023d4:	4a0e      	ldr	r2, [pc, #56]	; (8002410 <HAL_UART_Transmit_DMA+0x6c>)
    huart->TxXferSize = Size;
 80023d6:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
    huart->pTxBuffPtr = pData;
 80023da:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80023dc:	63c2      	str	r2, [r0, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80023de:	4a0d      	ldr	r2, [pc, #52]	; (8002414 <HAL_UART_Transmit_DMA+0x70>)
    huart->hdmatx->XferAbortCallback = NULL;
 80023e0:	6505      	str	r5, [r0, #80]	; 0x50
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80023e2:	6402      	str	r2, [r0, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80023e4:	4a0c      	ldr	r2, [pc, #48]	; (8002418 <HAL_UART_Transmit_DMA+0x74>)
 80023e6:	64c2      	str	r2, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 80023e8:	6822      	ldr	r2, [r4, #0]
 80023ea:	3228      	adds	r2, #40	; 0x28
 80023ec:	f7fe fb06 	bl	80009fc <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_IT(huart, UART_FLAG_TC);
 80023f0:	6823      	ldr	r3, [r4, #0]
 80023f2:	2240      	movs	r2, #64	; 0x40
    return HAL_OK;
 80023f4:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_IT(huart, UART_FLAG_TC);
 80023f6:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80023f8:	689a      	ldr	r2, [r3, #8]
    __HAL_UNLOCK(huart);
 80023fa:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80023fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002402:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8002404:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8002406:	2001      	movs	r0, #1
 8002408:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 800240a:	2002      	movs	r0, #2
}
 800240c:	bd38      	pop	{r3, r4, r5, pc}
 800240e:	bf00      	nop
 8002410:	08002611 	.word	0x08002611
 8002414:	08002641 	.word	0x08002641
 8002418:	080026b9 	.word	0x080026b9

0800241c <UART_WaitOnFlagUntilTimeout>:
{
 800241c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002420:	9d06      	ldr	r5, [sp, #24]
 8002422:	4604      	mov	r4, r0
 8002424:	460f      	mov	r7, r1
 8002426:	4616      	mov	r6, r2
 8002428:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800242a:	6821      	ldr	r1, [r4, #0]
 800242c:	69ca      	ldr	r2, [r1, #28]
 800242e:	ea37 0302 	bics.w	r3, r7, r2
 8002432:	bf0c      	ite	eq
 8002434:	2201      	moveq	r2, #1
 8002436:	2200      	movne	r2, #0
 8002438:	42b2      	cmp	r2, r6
 800243a:	d002      	beq.n	8002442 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 800243c:	2000      	movs	r0, #0
}
 800243e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002442:	1c6b      	adds	r3, r5, #1
 8002444:	d0f2      	beq.n	800242c <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8002446:	b99d      	cbnz	r5, 8002470 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002448:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 800244a:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002452:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	f022 0201 	bic.w	r2, r2, #1
 800245a:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800245c:	2320      	movs	r3, #32
 800245e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002462:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8002466:	2300      	movs	r3, #0
 8002468:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800246c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8002470:	f7fe f902 	bl	8000678 <HAL_GetTick>
 8002474:	eba0 0008 	sub.w	r0, r0, r8
 8002478:	4285      	cmp	r5, r0
 800247a:	d8d6      	bhi.n	800242a <UART_WaitOnFlagUntilTimeout+0xe>
 800247c:	e7e4      	b.n	8002448 <UART_WaitOnFlagUntilTimeout+0x2c>

0800247e <HAL_UART_Transmit>:
{
 800247e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002482:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8002484:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
{
 8002488:	4604      	mov	r4, r0
 800248a:	460d      	mov	r5, r1
  if(huart->gState == HAL_UART_STATE_READY)
 800248c:	2b20      	cmp	r3, #32
{
 800248e:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8002490:	d14c      	bne.n	800252c <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 8002492:	2900      	cmp	r1, #0
 8002494:	d048      	beq.n	8002528 <HAL_UART_Transmit+0xaa>
 8002496:	2a00      	cmp	r2, #0
 8002498:	d046      	beq.n	8002528 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 800249a:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d044      	beq.n	800252c <HAL_UART_Transmit+0xae>
 80024a2:	2301      	movs	r3, #1
 80024a4:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024a8:	2300      	movs	r3, #0
 80024aa:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024ac:	2321      	movs	r3, #33	; 0x21
 80024ae:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 80024b2:	f7fe f8e1 	bl	8000678 <HAL_GetTick>
 80024b6:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 80024b8:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 80024bc:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80024c0:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80024c4:	b292      	uxth	r2, r2
 80024c6:	b962      	cbnz	r2, 80024e2 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024c8:	9700      	str	r7, [sp, #0]
 80024ca:	4633      	mov	r3, r6
 80024cc:	2140      	movs	r1, #64	; 0x40
 80024ce:	4620      	mov	r0, r4
 80024d0:	f7ff ffa4 	bl	800241c <UART_WaitOnFlagUntilTimeout>
 80024d4:	b998      	cbnz	r0, 80024fe <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 80024d6:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80024d8:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 80024dc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    return HAL_OK;
 80024e0:	e00e      	b.n	8002500 <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 80024e2:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024e6:	2200      	movs	r2, #0
 80024e8:	9700      	str	r7, [sp, #0]
 80024ea:	2180      	movs	r1, #128	; 0x80
      huart->TxXferCount--;
 80024ec:	3b01      	subs	r3, #1
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024ee:	4620      	mov	r0, r4
      huart->TxXferCount--;
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024f6:	4633      	mov	r3, r6
 80024f8:	f7ff ff90 	bl	800241c <UART_WaitOnFlagUntilTimeout>
 80024fc:	b118      	cbz	r0, 8002506 <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 80024fe:	2003      	movs	r0, #3
}
 8002500:	b002      	add	sp, #8
 8002502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002506:	68a3      	ldr	r3, [r4, #8]
 8002508:	6822      	ldr	r2, [r4, #0]
 800250a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800250e:	d107      	bne.n	8002520 <HAL_UART_Transmit+0xa2>
 8002510:	6923      	ldr	r3, [r4, #16]
 8002512:	b92b      	cbnz	r3, 8002520 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002514:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800251c:	6293      	str	r3, [r2, #40]	; 0x28
        pData += 2;
 800251e:	e7cf      	b.n	80024c0 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002520:	782b      	ldrb	r3, [r5, #0]
 8002522:	3501      	adds	r5, #1
 8002524:	6293      	str	r3, [r2, #40]	; 0x28
 8002526:	e7cb      	b.n	80024c0 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8002528:	2001      	movs	r0, #1
 800252a:	e7e9      	b.n	8002500 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 800252c:	2002      	movs	r0, #2
 800252e:	e7e7      	b.n	8002500 <HAL_UART_Transmit+0x82>

08002530 <HAL_UART_Receive>:
{
 8002530:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002534:	4698      	mov	r8, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 8002536:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
{
 800253a:	4604      	mov	r4, r0
 800253c:	460d      	mov	r5, r1
  if(huart->RxState == HAL_UART_STATE_READY)
 800253e:	2b20      	cmp	r3, #32
{
 8002540:	4616      	mov	r6, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 8002542:	d161      	bne.n	8002608 <HAL_UART_Receive+0xd8>
    if((pData == NULL ) || (Size == 0U))
 8002544:	2900      	cmp	r1, #0
 8002546:	d05d      	beq.n	8002604 <HAL_UART_Receive+0xd4>
 8002548:	2a00      	cmp	r2, #0
 800254a:	d05b      	beq.n	8002604 <HAL_UART_Receive+0xd4>
    __HAL_LOCK(huart);
 800254c:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8002550:	2b01      	cmp	r3, #1
 8002552:	d059      	beq.n	8002608 <HAL_UART_Receive+0xd8>
 8002554:	2301      	movs	r3, #1
 8002556:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800255a:	2300      	movs	r3, #0
 800255c:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800255e:	2322      	movs	r3, #34	; 0x22
 8002560:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
    tickstart = HAL_GetTick();
 8002564:	f7fe f888 	bl	8000678 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 8002568:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800256a:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 800256c:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8002570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferCount = Size;
 8002574:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8002578:	d115      	bne.n	80025a6 <HAL_UART_Receive+0x76>
 800257a:	6923      	ldr	r3, [r4, #16]
 800257c:	b98b      	cbnz	r3, 80025a2 <HAL_UART_Receive+0x72>
 800257e:	f240 13ff 	movw	r3, #511	; 0x1ff
 8002582:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8002586:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
    while(huart->RxXferCount > 0U)
 800258a:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 800258e:	b280      	uxth	r0, r0
 8002590:	b9b8      	cbnz	r0, 80025c2 <HAL_UART_Receive+0x92>
    huart->RxState = HAL_UART_STATE_READY;
 8002592:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8002594:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    huart->RxState = HAL_UART_STATE_READY;
 8002598:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
 800259c:	b002      	add	sp, #8
 800259e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 80025a2:	23ff      	movs	r3, #255	; 0xff
 80025a4:	e7ed      	b.n	8002582 <HAL_UART_Receive+0x52>
 80025a6:	b923      	cbnz	r3, 80025b2 <HAL_UART_Receive+0x82>
 80025a8:	6923      	ldr	r3, [r4, #16]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0f9      	beq.n	80025a2 <HAL_UART_Receive+0x72>
 80025ae:	237f      	movs	r3, #127	; 0x7f
 80025b0:	e7e7      	b.n	8002582 <HAL_UART_Receive+0x52>
 80025b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025b6:	d1e6      	bne.n	8002586 <HAL_UART_Receive+0x56>
 80025b8:	6923      	ldr	r3, [r4, #16]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d0f7      	beq.n	80025ae <HAL_UART_Receive+0x7e>
 80025be:	233f      	movs	r3, #63	; 0x3f
 80025c0:	e7df      	b.n	8002582 <HAL_UART_Receive+0x52>
      huart->RxXferCount--;
 80025c2:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80025c6:	2200      	movs	r2, #0
 80025c8:	f8cd 8000 	str.w	r8, [sp]
 80025cc:	2120      	movs	r1, #32
      huart->RxXferCount--;
 80025ce:	3b01      	subs	r3, #1
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80025d0:	4620      	mov	r0, r4
      huart->RxXferCount--;
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80025d8:	463b      	mov	r3, r7
 80025da:	f7ff ff1f 	bl	800241c <UART_WaitOnFlagUntilTimeout>
 80025de:	b9a8      	cbnz	r0, 800260c <HAL_UART_Receive+0xdc>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025e0:	68a3      	ldr	r3, [r4, #8]
 80025e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025e6:	6823      	ldr	r3, [r4, #0]
 80025e8:	d106      	bne.n	80025f8 <HAL_UART_Receive+0xc8>
 80025ea:	6922      	ldr	r2, [r4, #16]
 80025ec:	b922      	cbnz	r2, 80025f8 <HAL_UART_Receive+0xc8>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80025ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f0:	4033      	ands	r3, r6
 80025f2:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 80025f6:	e7c8      	b.n	800258a <HAL_UART_Receive+0x5a>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	3501      	adds	r5, #1
 80025fc:	4033      	ands	r3, r6
 80025fe:	f805 3c01 	strb.w	r3, [r5, #-1]
 8002602:	e7c2      	b.n	800258a <HAL_UART_Receive+0x5a>
      return  HAL_ERROR;
 8002604:	2001      	movs	r0, #1
 8002606:	e7c9      	b.n	800259c <HAL_UART_Receive+0x6c>
    return HAL_BUSY;
 8002608:	2002      	movs	r0, #2
 800260a:	e7c7      	b.n	800259c <HAL_UART_Receive+0x6c>
        return HAL_TIMEOUT;
 800260c:	2003      	movs	r0, #3
 800260e:	e7c5      	b.n	800259c <HAL_UART_Receive+0x6c>

08002610 <UART_DMATransmitCplt>:
{
 8002610:	b508      	push	{r3, lr}
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002612:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002614:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800261c:	d10b      	bne.n	8002636 <UART_DMATransmitCplt+0x26>
    huart->TxXferCount = 0U;
 800261e:	f8a2 3052 	strh.w	r3, [r2, #82]	; 0x52
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002622:	6813      	ldr	r3, [r2, #0]
 8002624:	689a      	ldr	r2, [r3, #8]
 8002626:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800262a:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8002636:	4610      	mov	r0, r2
 8002638:	f001 f855 	bl	80036e6 <HAL_UART_TxCpltCallback>
 800263c:	bd08      	pop	{r3, pc}

0800263e <HAL_UART_TxHalfCpltCallback>:
 800263e:	4770      	bx	lr

08002640 <UART_DMATxHalfCplt>:
{
 8002640:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8002642:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002644:	f7ff fffb 	bl	800263e <HAL_UART_TxHalfCpltCallback>
 8002648:	bd08      	pop	{r3, pc}

0800264a <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 800264a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800264e:	6802      	ldr	r2, [r0, #0]
 8002650:	2b22      	cmp	r3, #34	; 0x22
{
 8002652:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002654:	d12a      	bne.n	80026ac <UART_Receive_IT+0x62>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002656:	6883      	ldr	r3, [r0, #8]
  uint16_t uhMask = huart->Mask;
 8002658:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800265c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002660:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002662:	d11d      	bne.n	80026a0 <UART_Receive_IT+0x56>
 8002664:	6904      	ldr	r4, [r0, #16]
 8002666:	b9dc      	cbnz	r4, 80026a0 <UART_Receive_IT+0x56>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8002668:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800266a:	4011      	ands	r1, r2
 800266c:	f823 1b02 	strh.w	r1, [r3], #2
      huart->pRxBuffPtr +=2;
 8002670:	6543      	str	r3, [r0, #84]	; 0x54
    if(--huart->RxXferCount == 0)
 8002672:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 8002676:	3c01      	subs	r4, #1
 8002678:	b2a4      	uxth	r4, r4
 800267a:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 800267e:	b96c      	cbnz	r4, 800269c <UART_Receive_IT+0x52>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002680:	6803      	ldr	r3, [r0, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002688:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	f022 0201 	bic.w	r2, r2, #1
 8002690:	609a      	str	r2, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8002692:	2320      	movs	r3, #32
 8002694:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 8002698:	f001 f824 	bl	80036e4 <HAL_UART_RxCpltCallback>
    return HAL_OK;
 800269c:	2000      	movs	r0, #0
}
 800269e:	bd10      	pop	{r4, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80026a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026a2:	1c5c      	adds	r4, r3, #1
 80026a4:	4011      	ands	r1, r2
 80026a6:	6544      	str	r4, [r0, #84]	; 0x54
 80026a8:	7019      	strb	r1, [r3, #0]
 80026aa:	e7e2      	b.n	8002672 <UART_Receive_IT+0x28>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80026ac:	6993      	ldr	r3, [r2, #24]
    return HAL_BUSY;
 80026ae:	2002      	movs	r0, #2
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80026b0:	f043 0308 	orr.w	r3, r3, #8
 80026b4:	6193      	str	r3, [r2, #24]
    return HAL_BUSY;
 80026b6:	bd10      	pop	{r4, pc}

080026b8 <UART_DMAError>:
{
 80026b8:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026ba:	6b81      	ldr	r1, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 80026bc:	2300      	movs	r3, #0
 80026be:	f8a1 305a 	strh.w	r3, [r1, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80026c2:	f8a1 3052 	strh.w	r3, [r1, #82]	; 0x52
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 80026c6:	f891 3069 	ldrb.w	r3, [r1, #105]	; 0x69
 80026ca:	2b21      	cmp	r3, #33	; 0x21
 80026cc:	d10a      	bne.n	80026e4 <UART_DMAError+0x2c>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 80026ce:	680b      	ldr	r3, [r1, #0]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	0612      	lsls	r2, r2, #24
 80026d4:	d506      	bpl.n	80026e4 <UART_DMAError+0x2c>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80026dc:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80026de:	2320      	movs	r3, #32
 80026e0:	f881 3069 	strb.w	r3, [r1, #105]	; 0x69
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80026e4:	f891 306a 	ldrb.w	r3, [r1, #106]	; 0x6a
 80026e8:	2b22      	cmp	r3, #34	; 0x22
 80026ea:	d106      	bne.n	80026fa <UART_DMAError+0x42>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 80026ec:	680b      	ldr	r3, [r1, #0]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	065b      	lsls	r3, r3, #25
 80026f2:	d502      	bpl.n	80026fa <UART_DMAError+0x42>
    UART_EndRxTransfer(huart);
 80026f4:	4608      	mov	r0, r1
 80026f6:	f7ff fe2b 	bl	8002350 <UART_EndRxTransfer>
  SET_BIT(huart->ErrorCode, HAL_UART_ERROR_DMA);
 80026fa:	6ecb      	ldr	r3, [r1, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 80026fc:	4608      	mov	r0, r1
  SET_BIT(huart->ErrorCode, HAL_UART_ERROR_DMA);
 80026fe:	f043 0310 	orr.w	r3, r3, #16
 8002702:	66cb      	str	r3, [r1, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8002704:	f000 fff0 	bl	80036e8 <HAL_UART_ErrorCallback>
 8002708:	bd08      	pop	{r3, pc}
	...

0800270c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800270c:	6803      	ldr	r3, [r0, #0]
 800270e:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002710:	6819      	ldr	r1, [r3, #0]
{
 8002712:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8002714:	0716      	lsls	r6, r2, #28
{
 8002716:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002718:	689d      	ldr	r5, [r3, #8]
  if (errorflags == RESET)
 800271a:	d107      	bne.n	800272c <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800271c:	0695      	lsls	r5, r2, #26
 800271e:	d563      	bpl.n	80027e8 <HAL_UART_IRQHandler+0xdc>
 8002720:	068e      	lsls	r6, r1, #26
 8002722:	d561      	bpl.n	80027e8 <HAL_UART_IRQHandler+0xdc>
}
 8002724:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002728:	f7ff bf8f 	b.w	800264a <UART_Receive_IT>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 800272c:	f015 0001 	ands.w	r0, r5, #1
 8002730:	d102      	bne.n	8002738 <HAL_UART_IRQHandler+0x2c>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8002732:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002736:	d057      	beq.n	80027e8 <HAL_UART_IRQHandler+0xdc>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002738:	07d5      	lsls	r5, r2, #31
 800273a:	d507      	bpl.n	800274c <HAL_UART_IRQHandler+0x40>
 800273c:	05ce      	lsls	r6, r1, #23
 800273e:	d505      	bpl.n	800274c <HAL_UART_IRQHandler+0x40>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8002740:	2501      	movs	r5, #1
 8002742:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002744:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8002746:	f045 0501 	orr.w	r5, r5, #1
 800274a:	66e5      	str	r5, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800274c:	0795      	lsls	r5, r2, #30
 800274e:	d506      	bpl.n	800275e <HAL_UART_IRQHandler+0x52>
 8002750:	b128      	cbz	r0, 800275e <HAL_UART_IRQHandler+0x52>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8002752:	2502      	movs	r5, #2
 8002754:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002756:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8002758:	f045 0504 	orr.w	r5, r5, #4
 800275c:	66e5      	str	r5, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800275e:	0756      	lsls	r6, r2, #29
 8002760:	d506      	bpl.n	8002770 <HAL_UART_IRQHandler+0x64>
 8002762:	b128      	cbz	r0, 8002770 <HAL_UART_IRQHandler+0x64>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8002764:	2504      	movs	r5, #4
 8002766:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002768:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800276a:	f045 0502 	orr.w	r5, r5, #2
 800276e:	66e5      	str	r5, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8002770:	0715      	lsls	r5, r2, #28
 8002772:	d507      	bpl.n	8002784 <HAL_UART_IRQHandler+0x78>
 8002774:	068e      	lsls	r6, r1, #26
 8002776:	d400      	bmi.n	800277a <HAL_UART_IRQHandler+0x6e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002778:	b120      	cbz	r0, 8002784 <HAL_UART_IRQHandler+0x78>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 800277a:	2008      	movs	r0, #8
 800277c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800277e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002780:	4303      	orrs	r3, r0
 8002782:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002784:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002786:	2b00      	cmp	r3, #0
 8002788:	d06a      	beq.n	8002860 <HAL_UART_IRQHandler+0x154>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800278a:	0695      	lsls	r5, r2, #26
 800278c:	d504      	bpl.n	8002798 <HAL_UART_IRQHandler+0x8c>
 800278e:	0688      	lsls	r0, r1, #26
 8002790:	d502      	bpl.n	8002798 <HAL_UART_IRQHandler+0x8c>
        UART_Receive_IT(huart);
 8002792:	4620      	mov	r0, r4
 8002794:	f7ff ff59 	bl	800264a <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002798:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        UART_EndRxTransfer(huart);
 800279a:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800279c:	0719      	lsls	r1, r3, #28
 800279e:	d404      	bmi.n	80027aa <HAL_UART_IRQHandler+0x9e>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 80027a0:	6823      	ldr	r3, [r4, #0]
 80027a2:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80027a4:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80027a8:	d01a      	beq.n	80027e0 <HAL_UART_IRQHandler+0xd4>
        UART_EndRxTransfer(huart);
 80027aa:	f7ff fdd1 	bl	8002350 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027ae:	6823      	ldr	r3, [r4, #0]
 80027b0:	689a      	ldr	r2, [r3, #8]
 80027b2:	0652      	lsls	r2, r2, #25
 80027b4:	d510      	bpl.n	80027d8 <HAL_UART_IRQHandler+0xcc>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027b6:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80027b8:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027be:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80027c0:	b150      	cbz	r0, 80027d8 <HAL_UART_IRQHandler+0xcc>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80027c2:	4b28      	ldr	r3, [pc, #160]	; (8002864 <HAL_UART_IRQHandler+0x158>)
 80027c4:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80027c6:	f7fe f956 	bl	8000a76 <HAL_DMA_Abort_IT>
 80027ca:	2800      	cmp	r0, #0
 80027cc:	d048      	beq.n	8002860 <HAL_UART_IRQHandler+0x154>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027ce:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 80027d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027d4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80027d6:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80027d8:	4620      	mov	r0, r4
 80027da:	f000 ff85 	bl	80036e8 <HAL_UART_ErrorCallback>
 80027de:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80027e0:	f000 ff82 	bl	80036e8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027e4:	66e5      	str	r5, [r4, #108]	; 0x6c
 80027e6:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80027e8:	0616      	lsls	r6, r2, #24
 80027ea:	d52b      	bpl.n	8002844 <HAL_UART_IRQHandler+0x138>
 80027ec:	060d      	lsls	r5, r1, #24
 80027ee:	d529      	bpl.n	8002844 <HAL_UART_IRQHandler+0x138>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80027f0:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 80027f4:	2a21      	cmp	r2, #33	; 0x21
 80027f6:	d133      	bne.n	8002860 <HAL_UART_IRQHandler+0x154>
    if(huart->TxXferCount == 0U)
 80027f8:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80027fc:	b292      	uxth	r2, r2
 80027fe:	b942      	cbnz	r2, 8002812 <HAL_UART_IRQHandler+0x106>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002806:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	bd70      	pop	{r4, r5, r6, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002812:	68a2      	ldr	r2, [r4, #8]
 8002814:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002818:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800281a:	d10e      	bne.n	800283a <HAL_UART_IRQHandler+0x12e>
 800281c:	6921      	ldr	r1, [r4, #16]
 800281e:	b961      	cbnz	r1, 800283a <HAL_UART_IRQHandler+0x12e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002820:	f832 1b02 	ldrh.w	r1, [r2], #2
 8002824:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002828:	6299      	str	r1, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800282a:	64e2      	str	r2, [r4, #76]	; 0x4c
      huart->TxXferCount--;
 800282c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8002830:	3b01      	subs	r3, #1
 8002832:	b29b      	uxth	r3, r3
 8002834:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8002838:	bd70      	pop	{r4, r5, r6, pc}
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 800283a:	1c51      	adds	r1, r2, #1
 800283c:	64e1      	str	r1, [r4, #76]	; 0x4c
 800283e:	7812      	ldrb	r2, [r2, #0]
 8002840:	629a      	str	r2, [r3, #40]	; 0x28
 8002842:	e7f3      	b.n	800282c <HAL_UART_IRQHandler+0x120>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002844:	0650      	lsls	r0, r2, #25
 8002846:	d50b      	bpl.n	8002860 <HAL_UART_IRQHandler+0x154>
 8002848:	064a      	lsls	r2, r1, #25
 800284a:	d509      	bpl.n	8002860 <HAL_UART_IRQHandler+0x154>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800284c:	681a      	ldr	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 800284e:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002850:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002854:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002856:	2320      	movs	r3, #32
 8002858:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  HAL_UART_TxCpltCallback(huart);
 800285c:	f000 ff43 	bl	80036e6 <HAL_UART_TxCpltCallback>
 8002860:	bd70      	pop	{r4, r5, r6, pc}
 8002862:	bf00      	nop
 8002864:	08002869 	.word	0x08002869

08002868 <UART_DMAAbortOnError>:
{
 8002868:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800286a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8002872:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8002876:	f000 ff37 	bl	80036e8 <HAL_UART_ErrorCallback>
 800287a:	bd08      	pop	{r3, pc}

0800287c <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800287c:	b538      	push	{r3, r4, r5, lr}
 800287e:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002880:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002882:	69c3      	ldr	r3, [r0, #28]
 8002884:	6921      	ldr	r1, [r4, #16]
 8002886:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002888:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800288a:	430a      	orrs	r2, r1
 800288c:	6961      	ldr	r1, [r4, #20]
 800288e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002890:	4993      	ldr	r1, [pc, #588]	; (8002ae0 <UART_SetConfig+0x264>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002892:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002894:	4001      	ands	r1, r0
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002896:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002898:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800289a:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800289c:	602a      	str	r2, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800289e:	686a      	ldr	r2, [r5, #4]
 80028a0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80028a4:	430a      	orrs	r2, r1
 80028a6:	606a      	str	r2, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80028a8:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80028aa:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80028ac:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80028ae:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80028b2:	430a      	orrs	r2, r1
 80028b4:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028b6:	4a8b      	ldr	r2, [pc, #556]	; (8002ae4 <UART_SetConfig+0x268>)
 80028b8:	4295      	cmp	r5, r2
 80028ba:	d119      	bne.n	80028f0 <UART_SetConfig+0x74>
 80028bc:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80028c0:	4989      	ldr	r1, [pc, #548]	; (8002ae8 <UART_SetConfig+0x26c>)
 80028c2:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80028c6:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028ce:	5c8a      	ldrb	r2, [r1, r2]
 80028d0:	f040 80b3 	bne.w	8002a3a <UART_SetConfig+0x1be>
  {
    switch (clocksource)
 80028d4:	2a08      	cmp	r2, #8
 80028d6:	f200 80ad 	bhi.w	8002a34 <UART_SetConfig+0x1b8>
 80028da:	e8df f012 	tbh	[pc, r2, lsl #1]
 80028de:	0026      	.short	0x0026
 80028e0:	00e9007b 	.word	0x00e9007b
 80028e4:	00f500ab 	.word	0x00f500ab
 80028e8:	00ab00ab 	.word	0x00ab00ab
 80028ec:	00fb00ab 	.word	0x00fb00ab
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028f0:	4a7e      	ldr	r2, [pc, #504]	; (8002aec <UART_SetConfig+0x270>)
 80028f2:	4295      	cmp	r5, r2
 80028f4:	d107      	bne.n	8002906 <UART_SetConfig+0x8a>
 80028f6:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 80028fa:	497d      	ldr	r1, [pc, #500]	; (8002af0 <UART_SetConfig+0x274>)
 80028fc:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002900:	f002 020c 	and.w	r2, r2, #12
 8002904:	e7e1      	b.n	80028ca <UART_SetConfig+0x4e>
 8002906:	4a7b      	ldr	r2, [pc, #492]	; (8002af4 <UART_SetConfig+0x278>)
 8002908:	4295      	cmp	r5, r2
 800290a:	d12b      	bne.n	8002964 <UART_SetConfig+0xe8>
 800290c:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 8002910:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002914:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8002918:	2a10      	cmp	r2, #16
 800291a:	f000 80d2 	beq.w	8002ac2 <UART_SetConfig+0x246>
 800291e:	d816      	bhi.n	800294e <UART_SetConfig+0xd2>
 8002920:	b9da      	cbnz	r2, 800295a <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002922:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002926:	f040 809f 	bne.w	8002a68 <UART_SetConfig+0x1ec>
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800292a:	f7fe fe3f 	bl	80015ac <HAL_RCC_GetPCLK1Freq>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800292e:	6861      	ldr	r1, [r4, #4]
 8002930:	084a      	lsrs	r2, r1, #1
 8002932:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8002936:	fbb3 f3f1 	udiv	r3, r3, r1
 800293a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800293c:	2000      	movs	r0, #0
    default:
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 800293e:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002942:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8002946:	6821      	ldr	r1, [r4, #0]
 8002948:	4313      	orrs	r3, r2
 800294a:	60cb      	str	r3, [r1, #12]
 800294c:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800294e:	2a20      	cmp	r2, #32
 8002950:	f000 80ab 	beq.w	8002aaa <UART_SetConfig+0x22e>
 8002954:	2a30      	cmp	r2, #48	; 0x30
 8002956:	f000 80ba 	beq.w	8002ace <UART_SetConfig+0x252>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800295a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800295e:	d069      	beq.n	8002a34 <UART_SetConfig+0x1b8>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8002960:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 8002962:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002964:	4a64      	ldr	r2, [pc, #400]	; (8002af8 <UART_SetConfig+0x27c>)
 8002966:	4295      	cmp	r5, r2
 8002968:	d10e      	bne.n	8002988 <UART_SetConfig+0x10c>
 800296a:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 800296e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002972:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8002976:	2a40      	cmp	r2, #64	; 0x40
 8002978:	f000 80a3 	beq.w	8002ac2 <UART_SetConfig+0x246>
 800297c:	d9d0      	bls.n	8002920 <UART_SetConfig+0xa4>
 800297e:	2a80      	cmp	r2, #128	; 0x80
 8002980:	f000 8093 	beq.w	8002aaa <UART_SetConfig+0x22e>
 8002984:	2ac0      	cmp	r2, #192	; 0xc0
 8002986:	e7e6      	b.n	8002956 <UART_SetConfig+0xda>
 8002988:	4a5c      	ldr	r2, [pc, #368]	; (8002afc <UART_SetConfig+0x280>)
 800298a:	4295      	cmp	r5, r2
 800298c:	d110      	bne.n	80029b0 <UART_SetConfig+0x134>
 800298e:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 8002992:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002996:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800299a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800299e:	f000 8090 	beq.w	8002ac2 <UART_SetConfig+0x246>
 80029a2:	d9bd      	bls.n	8002920 <UART_SetConfig+0xa4>
 80029a4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80029a8:	d07f      	beq.n	8002aaa <UART_SetConfig+0x22e>
 80029aa:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80029ae:	e7d2      	b.n	8002956 <UART_SetConfig+0xda>
 80029b0:	4a53      	ldr	r2, [pc, #332]	; (8002b00 <UART_SetConfig+0x284>)
 80029b2:	4295      	cmp	r5, r2
 80029b4:	d117      	bne.n	80029e6 <UART_SetConfig+0x16a>
 80029b6:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 80029ba:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80029be:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 80029c2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80029c6:	d07c      	beq.n	8002ac2 <UART_SetConfig+0x246>
 80029c8:	d807      	bhi.n	80029da <UART_SetConfig+0x15e>
 80029ca:	2a00      	cmp	r2, #0
 80029cc:	d1c5      	bne.n	800295a <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029d2:	d154      	bne.n	8002a7e <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80029d4:	f7fe fdfa 	bl	80015cc <HAL_RCC_GetPCLK2Freq>
 80029d8:	e7a9      	b.n	800292e <UART_SetConfig+0xb2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029da:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80029de:	d064      	beq.n	8002aaa <UART_SetConfig+0x22e>
 80029e0:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80029e4:	e7b7      	b.n	8002956 <UART_SetConfig+0xda>
 80029e6:	4a47      	ldr	r2, [pc, #284]	; (8002b04 <UART_SetConfig+0x288>)
 80029e8:	4295      	cmp	r5, r2
 80029ea:	d10f      	bne.n	8002a0c <UART_SetConfig+0x190>
 80029ec:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 80029f0:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80029f4:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 80029f8:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80029fc:	d061      	beq.n	8002ac2 <UART_SetConfig+0x246>
 80029fe:	d98f      	bls.n	8002920 <UART_SetConfig+0xa4>
 8002a00:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002a04:	d051      	beq.n	8002aaa <UART_SetConfig+0x22e>
 8002a06:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8002a0a:	e7a4      	b.n	8002956 <UART_SetConfig+0xda>
 8002a0c:	4a3e      	ldr	r2, [pc, #248]	; (8002b08 <UART_SetConfig+0x28c>)
 8002a0e:	4295      	cmp	r5, r2
 8002a10:	d1a3      	bne.n	800295a <UART_SetConfig+0xde>
 8002a12:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 8002a16:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002a1a:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8002a1e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8002a22:	d04e      	beq.n	8002ac2 <UART_SetConfig+0x246>
 8002a24:	f67f af7c 	bls.w	8002920 <UART_SetConfig+0xa4>
 8002a28:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002a2c:	d03d      	beq.n	8002aaa <UART_SetConfig+0x22e>
 8002a2e:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 8002a32:	e790      	b.n	8002956 <UART_SetConfig+0xda>
        ret = HAL_ERROR;
 8002a34:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8002a36:	2300      	movs	r3, #0
 8002a38:	e781      	b.n	800293e <UART_SetConfig+0xc2>
    switch (clocksource)
 8002a3a:	2a08      	cmp	r2, #8
 8002a3c:	d890      	bhi.n	8002960 <UART_SetConfig+0xe4>
 8002a3e:	a301      	add	r3, pc, #4	; (adr r3, 8002a44 <UART_SetConfig+0x1c8>)
 8002a40:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8002a44:	08002a69 	.word	0x08002a69
 8002a48:	08002a7f 	.word	0x08002a7f
 8002a4c:	08002a85 	.word	0x08002a85
 8002a50:	08002961 	.word	0x08002961
 8002a54:	08002a9b 	.word	0x08002a9b
 8002a58:	08002961 	.word	0x08002961
 8002a5c:	08002961 	.word	0x08002961
 8002a60:	08002961 	.word	0x08002961
 8002a64:	08002aa1 	.word	0x08002aa1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002a68:	f7fe fda0 	bl	80015ac <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002a6c:	6863      	ldr	r3, [r4, #4]
 8002a6e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002a72:	fbb0 f0f3 	udiv	r0, r0, r3
 8002a76:	b280      	uxth	r0, r0
 8002a78:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a7a:	2000      	movs	r0, #0
      break;
 8002a7c:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002a7e:	f7fe fda5 	bl	80015cc <HAL_RCC_GetPCLK2Freq>
 8002a82:	e7f3      	b.n	8002a6c <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002a84:	6862      	ldr	r2, [r4, #4]
 8002a86:	0853      	lsrs	r3, r2, #1
 8002a88:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002a8c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002a90:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	60eb      	str	r3, [r5, #12]
 8002a98:	e7ef      	b.n	8002a7a <UART_SetConfig+0x1fe>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002a9a:	f7fe fcb5 	bl	8001408 <HAL_RCC_GetSysClockFreq>
 8002a9e:	e7e5      	b.n	8002a6c <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002aa0:	6862      	ldr	r2, [r4, #4]
 8002aa2:	0853      	lsrs	r3, r2, #1
 8002aa4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002aa8:	e7f2      	b.n	8002a90 <UART_SetConfig+0x214>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002aaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aae:	d1e9      	bne.n	8002a84 <UART_SetConfig+0x208>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002ab0:	6860      	ldr	r0, [r4, #4]
 8002ab2:	0843      	lsrs	r3, r0, #1
 8002ab4:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002ab8:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002abc:	fbb3 f3f0 	udiv	r3, r3, r0
 8002ac0:	e73b      	b.n	800293a <UART_SetConfig+0xbe>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ac2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ac6:	d1e8      	bne.n	8002a9a <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002ac8:	f7fe fc9e 	bl	8001408 <HAL_RCC_GetSysClockFreq>
 8002acc:	e72f      	b.n	800292e <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ace:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ad2:	d1e5      	bne.n	8002aa0 <UART_SetConfig+0x224>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002ad4:	6860      	ldr	r0, [r4, #4]
 8002ad6:	0843      	lsrs	r3, r0, #1
 8002ad8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002adc:	e7ee      	b.n	8002abc <UART_SetConfig+0x240>
 8002ade:	bf00      	nop
 8002ae0:	efff69f3 	.word	0xefff69f3
 8002ae4:	40011000 	.word	0x40011000
 8002ae8:	08006e08 	.word	0x08006e08
 8002aec:	40004400 	.word	0x40004400
 8002af0:	08006e0c 	.word	0x08006e0c
 8002af4:	40004800 	.word	0x40004800
 8002af8:	40004c00 	.word	0x40004c00
 8002afc:	40005000 	.word	0x40005000
 8002b00:	40011400 	.word	0x40011400
 8002b04:	40007800 	.word	0x40007800
 8002b08:	40007c00 	.word	0x40007c00

08002b0c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002b0e:	07da      	lsls	r2, r3, #31
{
 8002b10:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b12:	d506      	bpl.n	8002b22 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b14:	6801      	ldr	r1, [r0, #0]
 8002b16:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002b18:	684a      	ldr	r2, [r1, #4]
 8002b1a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002b1e:	4322      	orrs	r2, r4
 8002b20:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b22:	079c      	lsls	r4, r3, #30
 8002b24:	d506      	bpl.n	8002b34 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b26:	6801      	ldr	r1, [r0, #0]
 8002b28:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002b2a:	684a      	ldr	r2, [r1, #4]
 8002b2c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b30:	4322      	orrs	r2, r4
 8002b32:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b34:	0759      	lsls	r1, r3, #29
 8002b36:	d506      	bpl.n	8002b46 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b38:	6801      	ldr	r1, [r0, #0]
 8002b3a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002b3c:	684a      	ldr	r2, [r1, #4]
 8002b3e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b42:	4322      	orrs	r2, r4
 8002b44:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b46:	071a      	lsls	r2, r3, #28
 8002b48:	d506      	bpl.n	8002b58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b4a:	6801      	ldr	r1, [r0, #0]
 8002b4c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002b4e:	684a      	ldr	r2, [r1, #4]
 8002b50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b54:	4322      	orrs	r2, r4
 8002b56:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b58:	06dc      	lsls	r4, r3, #27
 8002b5a:	d506      	bpl.n	8002b6a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b5c:	6801      	ldr	r1, [r0, #0]
 8002b5e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002b60:	688a      	ldr	r2, [r1, #8]
 8002b62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b66:	4322      	orrs	r2, r4
 8002b68:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b6a:	0699      	lsls	r1, r3, #26
 8002b6c:	d506      	bpl.n	8002b7c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b6e:	6801      	ldr	r1, [r0, #0]
 8002b70:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002b72:	688a      	ldr	r2, [r1, #8]
 8002b74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b78:	4322      	orrs	r2, r4
 8002b7a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b7c:	065a      	lsls	r2, r3, #25
 8002b7e:	d510      	bpl.n	8002ba2 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b80:	6801      	ldr	r1, [r0, #0]
 8002b82:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002b84:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b86:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b8a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002b8e:	ea42 0204 	orr.w	r2, r2, r4
 8002b92:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b94:	d105      	bne.n	8002ba2 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b96:	684a      	ldr	r2, [r1, #4]
 8002b98:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002b9a:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002b9e:	4322      	orrs	r2, r4
 8002ba0:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ba2:	061b      	lsls	r3, r3, #24
 8002ba4:	d506      	bpl.n	8002bb4 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ba6:	6802      	ldr	r2, [r0, #0]
 8002ba8:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002baa:	6853      	ldr	r3, [r2, #4]
 8002bac:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002bb0:	430b      	orrs	r3, r1
 8002bb2:	6053      	str	r3, [r2, #4]
 8002bb4:	bd10      	pop	{r4, pc}

08002bb6 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002bb6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bb8:	2500      	movs	r5, #0
{
 8002bba:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bbc:	66c5      	str	r5, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002bbe:	f7fd fd5b 	bl	8000678 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002bc2:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8002bc4:	4603      	mov	r3, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002bc6:	6812      	ldr	r2, [r2, #0]
 8002bc8:	0712      	lsls	r2, r2, #28
 8002bca:	d409      	bmi.n	8002be0 <UART_CheckIdleState+0x2a>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8002bcc:	2320      	movs	r3, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002bce:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8002bd0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8002bd4:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState= HAL_UART_STATE_READY;
 8002bd8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  return HAL_OK;
}
 8002bdc:	b003      	add	sp, #12
 8002bde:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002be0:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8002be4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002be8:	4620      	mov	r0, r4
 8002bea:	9200      	str	r2, [sp, #0]
 8002bec:	462a      	mov	r2, r5
 8002bee:	f7ff fc15 	bl	800241c <UART_WaitOnFlagUntilTimeout>
 8002bf2:	2800      	cmp	r0, #0
 8002bf4:	d0ea      	beq.n	8002bcc <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002bf6:	2003      	movs	r0, #3
 8002bf8:	e7f0      	b.n	8002bdc <UART_CheckIdleState+0x26>

08002bfa <HAL_UART_Init>:
{
 8002bfa:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002bfc:	4604      	mov	r4, r0
 8002bfe:	b360      	cbz	r0, 8002c5a <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002c00:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002c04:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c08:	b91b      	cbnz	r3, 8002c12 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002c0a:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8002c0e:	f001 f851 	bl	8003cb4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002c12:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002c14:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c16:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8002c18:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8002c1c:	6813      	ldr	r3, [r2, #0]
 8002c1e:	f023 0301 	bic.w	r3, r3, #1
 8002c22:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c24:	f7ff fe2a 	bl	800287c <UART_SetConfig>
 8002c28:	2801      	cmp	r0, #1
 8002c2a:	d016      	beq.n	8002c5a <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c2e:	b113      	cbz	r3, 8002c36 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8002c30:	4620      	mov	r0, r4
 8002c32:	f7ff ff6b 	bl	8002b0c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c36:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8002c38:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c3a:	685a      	ldr	r2, [r3, #4]
 8002c3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c40:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c48:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	f042 0201 	orr.w	r2, r2, #1
}
 8002c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8002c54:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002c56:	f7ff bfae 	b.w	8002bb6 <UART_CheckIdleState>
}
 8002c5a:	2001      	movs	r0, #1
 8002c5c:	bd10      	pop	{r4, pc}
	...

08002c60 <Set_UartMsgHandle>:
/* Private Function ------------------------------------------------------------------*/

void Set_UartMsgHandle(UART_HandleTypeDef *UART_MsgHandle)
{

	UartMsgHandle = UART_MsgHandle;
 8002c60:	4b01      	ldr	r3, [pc, #4]	; (8002c68 <Set_UartMsgHandle+0x8>)
 8002c62:	6018      	str	r0, [r3, #0]
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	200002a0 	.word	0x200002a0

08002c6c <DMA1_TransferComplete>:
void DMA1_TransferComplete()
{
  /* Process Locked */
	huart6.Lock = HAL_LOCKED;

	huart6.ErrorCode = HAL_UART_ERROR_NONE;
 8002c6c:	4b10      	ldr	r3, [pc, #64]	; (8002cb0 <DMA1_TransferComplete+0x44>)
 8002c6e:	2000      	movs	r0, #0
#if defined (USE_STM32F7XX_NUCLEO) || defined (USE_STM32L4XX_NUCLEO)
	huart6.gState = HAL_UART_STATE_BUSY_TX;
 8002c70:	2221      	movs	r2, #33	; 0x21
	huart6.ErrorCode = HAL_UART_ERROR_NONE;
 8002c72:	66d8      	str	r0, [r3, #108]	; 0x6c
	huart6.gState = HAL_UART_STATE_BUSY_TX;
 8002c74:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
#endif
	huart6.pTxBuffPtr = (uint8_t*) console_send_char;
 8002c78:	4a0e      	ldr	r2, [pc, #56]	; (8002cb4 <DMA1_TransferComplete+0x48>)
#endif
  // Process Unlocked
	huart6.Lock = HAL_UNLOCKED;

  // Enable the UART Transmit data register empty Interrupt
	__HAL_UART_ENABLE_IT(&huart6, UART_IT_TXE);
 8002c7a:	6819      	ldr	r1, [r3, #0]
	huart6.pTxBuffPtr = (uint8_t*) console_send_char;
 8002c7c:	64da      	str	r2, [r3, #76]	; 0x4c
	huart6.TxXferSize = 1;
 8002c7e:	2201      	movs	r2, #1
	huart6.TxXferCount = 1;
 8002c80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	huart6.TxXferSize = 1;
 8002c84:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	__HAL_UART_ENABLE_IT(&huart6, UART_IT_TXE);
 8002c88:	680a      	ldr	r2, [r1, #0]
 8002c8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c8e:	600a      	str	r2, [r1, #0]
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8002c90:	4a09      	ldr	r2, [pc, #36]	; (8002cb8 <DMA1_TransferComplete+0x4c>)
 8002c92:	6811      	ldr	r1, [r2, #0]
 8002c94:	f041 0110 	orr.w	r1, r1, #16
 8002c98:	6011      	str	r1, [r2, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8002c9a:	6811      	ldr	r1, [r2, #0]
 8002c9c:	f041 0101 	orr.w	r1, r1, #1
 8002ca0:	6011      	str	r1, [r2, #0]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF1);
 8002ca2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ca6:	f842 1c20 	str.w	r1, [r2, #-32]
  //LL_DMA_EnableChannel(WIFI_CONSOLE_DMA, WIFI_CONSOLE_LL_DMA);
#endif

#endif
  /* Process Unlocked */
	huart6.Lock = HAL_UNLOCKED;
 8002caa:	f883 0068 	strb.w	r0, [r3, #104]	; 0x68
 8002cae:	4770      	bx	lr
 8002cb0:	20000204 	.word	0x20000204
 8002cb4:	200014a0 	.word	0x200014a0
 8002cb8:	40026028 	.word	0x40026028

08002cbc <DMA2_TransferComplete>:
void DMA2_TransferComplete()
{
    /* Process Locked */
	huart3.Lock = HAL_LOCKED;

	huart3.ErrorCode = HAL_UART_ERROR_NONE;
 8002cbc:	4b10      	ldr	r3, [pc, #64]	; (8002d00 <DMA2_TransferComplete+0x44>)
 8002cbe:	2200      	movs	r2, #0
#if defined (USE_STM32F7XX_NUCLEO) || defined (USE_STM32L4XX_NUCLEO)
	huart3.gState = HAL_UART_STATE_BUSY_TX;
 8002cc0:	2121      	movs	r1, #33	; 0x21
	huart3.ErrorCode = HAL_UART_ERROR_NONE;
 8002cc2:	66da      	str	r2, [r3, #108]	; 0x6c
	huart3.gState = HAL_UART_STATE_BUSY_TX;
 8002cc4:	f883 1069 	strb.w	r1, [r3, #105]	; 0x69
#endif
	huart3.pTxBuffPtr = (uint8_t*) WiFi_Counter_Variables.uart_byte;
 8002cc8:	490e      	ldr	r1, [pc, #56]	; (8002d04 <DMA2_TransferComplete+0x48>)
    {
		huart3->State = HAL_UART_STATE_BUSY_TX;
    }
#endif
  // Process Unlocked
	huart3.Lock = HAL_UNLOCKED;
 8002cca:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	huart3.pTxBuffPtr = (uint8_t*) WiFi_Counter_Variables.uart_byte;
 8002cce:	64d9      	str	r1, [r3, #76]	; 0x4c
	huart3.TxXferSize = 1;
 8002cd0:	2101      	movs	r1, #1

  // Enable the UART Transmit data register empty Interrupt
	__HAL_UART_ENABLE_IT(&huart3, UART_IT_TXE);
 8002cd2:	681a      	ldr	r2, [r3, #0]
	huart3.TxXferCount = 1;
 8002cd4:	f8a3 1052 	strh.w	r1, [r3, #82]	; 0x52
	huart3.TxXferSize = 1;
 8002cd8:	f8a3 1050 	strh.w	r1, [r3, #80]	; 0x50
	__HAL_UART_ENABLE_IT(&huart3, UART_IT_TXE);
 8002cdc:	6813      	ldr	r3, [r2, #0]
 8002cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ce2:	6013      	str	r3, [r2, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8002ce4:	4b08      	ldr	r3, [pc, #32]	; (8002d08 <DMA2_TransferComplete+0x4c>)
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	f042 0210 	orr.w	r2, r2, #16
 8002cec:	601a      	str	r2, [r3, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	601a      	str	r2, [r3, #0]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF1);
 8002cf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cf8:	f843 2c20 	str.w	r2, [r3, #-32]
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	200011dc 	.word	0x200011dc
 8002d04:	20000572 	.word	0x20000572
 8002d08:	40026428 	.word	0x40026428

08002d0c <uartSendChar>:
/** @brief Sends a character to serial port
 * @param ch Character to send
 * @retval Character sent
 */
int uartSendChar(int ch)
{
 8002d0c:	b507      	push	{r0, r1, r2, lr}
 8002d0e:	a902      	add	r1, sp, #8
	// HAL_UART_Transmit(UartHandle, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart3, (uint8_t *) &ch, 1, HAL_MAX_DELAY);
 8002d10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d14:	2201      	movs	r2, #1
{
 8002d16:	f841 0d04 	str.w	r0, [r1, #-4]!
	HAL_UART_Transmit(&huart3, (uint8_t *) &ch, 1, HAL_MAX_DELAY);
 8002d1a:	4803      	ldr	r0, [pc, #12]	; (8002d28 <uartSendChar+0x1c>)
 8002d1c:	f7ff fbaf 	bl	800247e <HAL_UART_Transmit>
  return ch;
}
 8002d20:	9801      	ldr	r0, [sp, #4]
 8002d22:	b003      	add	sp, #12
 8002d24:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d28:	200011dc 	.word	0x200011dc

08002d2c <uartReceiveChar>:
/** @brief Receives a character from serial port
 * @param None
 * @retval Character received
 */
int uartReceiveChar(void)
{
 8002d2c:	b513      	push	{r0, r1, r4, lr}
  uint8_t ch;
	// HAL_UART_Receive(UartHandle, &ch, 1, HAL_MAX_DELAY);
	HAL_UART_Receive(&huart3, &ch, 1, HAL_MAX_DELAY);

  /* Echo character back to console */
  HAL_UART_Transmit(UartHandle, &ch, 1, HAL_MAX_DELAY);
 8002d2e:	4c11      	ldr	r4, [pc, #68]	; (8002d74 <uartReceiveChar+0x48>)
	HAL_UART_Receive(&huart3, &ch, 1, HAL_MAX_DELAY);
 8002d30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d34:	2201      	movs	r2, #1
 8002d36:	f10d 0106 	add.w	r1, sp, #6
 8002d3a:	480f      	ldr	r0, [pc, #60]	; (8002d78 <uartReceiveChar+0x4c>)
 8002d3c:	f7ff fbf8 	bl	8002530 <HAL_UART_Receive>
  HAL_UART_Transmit(UartHandle, &ch, 1, HAL_MAX_DELAY);
 8002d40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d44:	2201      	movs	r2, #1
 8002d46:	f10d 0106 	add.w	r1, sp, #6
 8002d4a:	6820      	ldr	r0, [r4, #0]
 8002d4c:	f7ff fb97 	bl	800247e <HAL_UART_Transmit>

  /* And cope with Windows */
  if(ch == '\r'){
 8002d50:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002d54:	2b0d      	cmp	r3, #13
 8002d56:	d109      	bne.n	8002d6c <uartReceiveChar+0x40>
    uint8_t ret = '\n';
 8002d58:	230a      	movs	r3, #10
 8002d5a:	a902      	add	r1, sp, #8
    HAL_UART_Transmit(UartHandle, &ret, 1, HAL_MAX_DELAY);
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	6820      	ldr	r0, [r4, #0]
    uint8_t ret = '\n';
 8002d60:	f801 3d01 	strb.w	r3, [r1, #-1]!
    HAL_UART_Transmit(UartHandle, &ret, 1, HAL_MAX_DELAY);
 8002d64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d68:	f7ff fb89 	bl	800247e <HAL_UART_Transmit>
  }

  return ch;
}
 8002d6c:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8002d70:	b002      	add	sp, #8
 8002d72:	bd10      	pop	{r4, pc}
 8002d74:	200002a0 	.word	0x200002a0
 8002d78:	200011dc 	.word	0x200011dc

08002d7c <__io_putchar>:
 * @param ch Character to print
 * @retval Character printed
 */
int __io_putchar(int ch)
{
  return uartSendChar(ch);
 8002d7c:	f7ff bfc6 	b.w	8002d0c <uartSendChar>

08002d80 <__io_getchar>:
 * @param None
 * @retval Character acquired from standard input
 */
int __io_getchar(void)
{
  return uartReceiveChar();
 8002d80:	f7ff bfd4 	b.w	8002d2c <uartReceiveChar>

08002d84 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8002d84:	b508      	push	{r3, lr}

  hcrc.Instance = CRC;
 8002d86:	480a      	ldr	r0, [pc, #40]	; (8002db0 <MX_CRC_Init+0x2c>)
 8002d88:	4b0a      	ldr	r3, [pc, #40]	; (8002db4 <MX_CRC_Init+0x30>)
 8002d8a:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8002d90:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8002d92:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8002d94:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002d96:	2301      	movs	r3, #1
 8002d98:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002d9a:	f7fd fd11 	bl	80007c0 <HAL_CRC_Init>
 8002d9e:	b128      	cbz	r0, 8002dac <MX_CRC_Init+0x28>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002da0:	213d      	movs	r1, #61	; 0x3d
 8002da2:	4805      	ldr	r0, [pc, #20]	; (8002db8 <MX_CRC_Init+0x34>)
  }

}
 8002da4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8002da8:	f000 bba4 	b.w	80034f4 <_Error_Handler>
 8002dac:	bd08      	pop	{r3, pc}
 8002dae:	bf00      	nop
 8002db0:	200014e8 	.word	0x200014e8
 8002db4:	40023000 	.word	0x40023000
 8002db8:	08006e19 	.word	0x08006e19

08002dbc <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8002dbc:	6802      	ldr	r2, [r0, #0]
{
 8002dbe:	b082      	sub	sp, #8
  if(crcHandle->Instance==CRC)
 8002dc0:	4b08      	ldr	r3, [pc, #32]	; (8002de4 <HAL_CRC_MspInit+0x28>)
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d10b      	bne.n	8002dde <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002dc6:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 8002dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002dd2:	631a      	str	r2, [r3, #48]	; 0x30
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dda:	9301      	str	r3, [sp, #4]
 8002ddc:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8002dde:	b002      	add	sp, #8
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	40023000 	.word	0x40023000

08002de8 <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002de8:	4b23      	ldr	r3, [pc, #140]	; (8002e78 <MX_DMA_Init+0x90>)
{
 8002dea:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002dec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002dee:	200c      	movs	r0, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002df0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002df4:	631a      	str	r2, [r3, #48]	; 0x30
 8002df6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002df8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002dfc:	9200      	str	r2, [sp, #0]
 8002dfe:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002e00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e02:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002e06:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002e08:	2200      	movs	r2, #0
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002e0c:	4611      	mov	r1, r2
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e12:	9301      	str	r3, [sp, #4]
 8002e14:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002e16:	f7fd fc59 	bl	80006cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002e1a:	200c      	movs	r0, #12
 8002e1c:	f7fd fc8e 	bl	800073c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002e20:	2200      	movs	r2, #0
 8002e22:	200e      	movs	r0, #14
 8002e24:	4611      	mov	r1, r2
 8002e26:	f7fd fc51 	bl	80006cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002e2a:	200e      	movs	r0, #14
 8002e2c:	f7fd fc86 	bl	800073c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002e30:	2200      	movs	r2, #0
 8002e32:	2010      	movs	r0, #16
 8002e34:	4611      	mov	r1, r2
 8002e36:	f7fd fc49 	bl	80006cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002e3a:	2010      	movs	r0, #16
 8002e3c:	f7fd fc7e 	bl	800073c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002e40:	2200      	movs	r2, #0
 8002e42:	2011      	movs	r0, #17
 8002e44:	4611      	mov	r1, r2
 8002e46:	f7fd fc41 	bl	80006cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002e4a:	2011      	movs	r0, #17
 8002e4c:	f7fd fc76 	bl	800073c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8002e50:	2200      	movs	r2, #0
 8002e52:	2039      	movs	r0, #57	; 0x39
 8002e54:	4611      	mov	r1, r2
 8002e56:	f7fd fc39 	bl	80006cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002e5a:	2039      	movs	r0, #57	; 0x39
 8002e5c:	f7fd fc6e 	bl	800073c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8002e60:	2200      	movs	r2, #0
 8002e62:	2045      	movs	r0, #69	; 0x45
 8002e64:	4611      	mov	r1, r2
 8002e66:	f7fd fc31 	bl	80006cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002e6a:	2045      	movs	r0, #69	; 0x45
 8002e6c:	f7fd fc66 	bl	800073c <HAL_NVIC_EnableIRQ>

}
 8002e70:	b003      	add	sp, #12
 8002e72:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e76:	bf00      	nop
 8002e78:	40023800 	.word	0x40023800

08002e7c <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e7c:	4b76      	ldr	r3, [pc, #472]	; (8003058 <MX_GPIO_Init+0x1dc>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, MOTOR_ENB_Pin|MOTOR_ENA_Pin, GPIO_PIN_RESET);
 8002e7e:	f44f 4104 	mov.w	r1, #33792	; 0x8400
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e84:	f042 0204 	orr.w	r2, r2, #4
{
 8002e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e8c:	631a      	str	r2, [r3, #48]	; 0x30
{
 8002e8e:	b091      	sub	sp, #68	; 0x44
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e92:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOF, MOTOR_ENB_Pin|MOTOR_ENA_Pin, GPIO_PIN_RESET);
 8002e94:	4d71      	ldr	r5, [pc, #452]	; (800305c <MX_GPIO_Init+0x1e0>)
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = MOTOR_ENB_Pin|MOTOR_ENA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e96:	f04f 0a01 	mov.w	sl, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e9a:	f002 0204 	and.w	r2, r2, #4
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002e9e:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 800306c <MX_GPIO_Init+0x1f0>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002ea2:	4f6f      	ldr	r7, [pc, #444]	; (8003060 <MX_GPIO_Init+0x1e4>)
  HAL_GPIO_WritePin(GPIOF, MOTOR_ENB_Pin|MOTOR_ENA_Pin, GPIO_PIN_RESET);
 8002ea4:	4628      	mov	r0, r5
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ea6:	9203      	str	r2, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea8:	2602      	movs	r6, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eaa:	9a03      	ldr	r2, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002eac:	f04f 080b 	mov.w	r8, #11
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002eb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002eb2:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8003070 <MX_GPIO_Init+0x1f4>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002eb6:	f042 0220 	orr.w	r2, r2, #32
 8002eba:	631a      	str	r2, [r3, #48]	; 0x30
 8002ebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ebe:	f002 0220 	and.w	r2, r2, #32
 8002ec2:	9204      	str	r2, [sp, #16]
 8002ec4:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ec6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ec8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ecc:	631a      	str	r2, [r3, #48]	; 0x30
 8002ece:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ed0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002ed4:	9205      	str	r2, [sp, #20]
 8002ed6:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ed8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eda:	f042 0201 	orr.w	r2, r2, #1
 8002ede:	631a      	str	r2, [r3, #48]	; 0x30
 8002ee0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ee2:	f002 0201 	and.w	r2, r2, #1
 8002ee6:	9206      	str	r2, [sp, #24]
 8002ee8:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002eea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eec:	f042 0210 	orr.w	r2, r2, #16
 8002ef0:	631a      	str	r2, [r3, #48]	; 0x30
 8002ef2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ef4:	f002 0210 	and.w	r2, r2, #16
 8002ef8:	9207      	str	r2, [sp, #28]
 8002efa:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002efc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002efe:	f042 0202 	orr.w	r2, r2, #2
 8002f02:	631a      	str	r2, [r3, #48]	; 0x30
 8002f04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f06:	f002 0202 	and.w	r2, r2, #2
 8002f0a:	9208      	str	r2, [sp, #32]
 8002f0c:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f10:	f042 0208 	orr.w	r2, r2, #8
 8002f14:	631a      	str	r2, [r3, #48]	; 0x30
 8002f16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f18:	f002 0208 	and.w	r2, r2, #8
 8002f1c:	9209      	str	r2, [sp, #36]	; 0x24
 8002f1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f26:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOF, MOTOR_ENB_Pin|MOTOR_ENA_Pin, GPIO_PIN_RESET);
 8002f28:	2200      	movs	r2, #0
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f30:	930a      	str	r3, [sp, #40]	; 0x28
 8002f32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(GPIOF, MOTOR_ENB_Pin|MOTOR_ENA_Pin, GPIO_PIN_RESET);
 8002f34:	f7fd fffa 	bl	8000f2c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002f38:	4658      	mov	r0, fp
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8002f40:	f7fd fff4 	bl	8000f2c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002f44:	4638      	mov	r0, r7
 8002f46:	2200      	movs	r2, #0
 8002f48:	2140      	movs	r1, #64	; 0x40
 8002f4a:	f7fd ffef 	bl	8000f2c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002f4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f52:	4a44      	ldr	r2, [pc, #272]	; (8003064 <MX_GPIO_Init+0x1e8>)
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002f54:	a90b      	add	r1, sp, #44	; 0x2c
 8002f56:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002f58:	930b      	str	r3, [sp, #44]	; 0x2c
 8002f5a:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f5c:	920c      	str	r2, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5e:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002f60:	f7fd fe56 	bl	8000c10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MOTOR_ENB_Pin|MOTOR_ENA_Pin;
 8002f64:	f44f 4204 	mov.w	r2, #33792	; 0x8400
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f68:	a90b      	add	r1, sp, #44	; 0x2c
 8002f6a:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f6c:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f70:	2503      	movs	r5, #3
  GPIO_InitStruct.Pin = MOTOR_ENB_Pin|MOTOR_ENA_Pin;
 8002f72:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f74:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f76:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f78:	f7fd fe4a 	bl	8000c10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002f7c:	2232      	movs	r2, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f7e:	a90b      	add	r1, sp, #44	; 0x2c
 8002f80:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f82:	f5a9 6900 	sub.w	r9, r9, #2048	; 0x800
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002f86:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f88:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f8c:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002f8e:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f92:	f7fd fe3d 	bl	8000c10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002f96:	2286      	movs	r2, #134	; 0x86
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f98:	a90b      	add	r1, sp, #44	; 0x2c
 8002f9a:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f9c:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002f9e:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fa2:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002fa4:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fa8:	f7fd fe32 	bl	8000c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002fac:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002fae:	a90b      	add	r1, sp, #44	; 0x2c
 8002fb0:	4658      	mov	r0, fp
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb2:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002fb4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fb8:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002fba:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002fbe:	f7fd fe27 	bl	8000c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8002fc2:	f44f 4381 	mov.w	r3, #16512	; 0x4080
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fc6:	a90b      	add	r1, sp, #44	; 0x2c
 8002fc8:	4658      	mov	r0, fp
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fca:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8002fce:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fd2:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fd4:	f7fd fe1c 	bl	8000c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002fd8:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002fda:	a90b      	add	r1, sp, #44	; 0x2c
 8002fdc:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fde:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002fe2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe4:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fe6:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002fe8:	f7fd fe12 	bl	8000c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002fec:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002fee:	a90b      	add	r1, sp, #44	; 0x2c
 8002ff0:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ff2:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002ff4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff6:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002ff8:	f7fd fe0a 	bl	8000c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002ffc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003000:	a90b      	add	r1, sp, #44	; 0x2c
 8003002:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003004:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003006:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003008:	230a      	movs	r3, #10
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800300c:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800300e:	950e      	str	r5, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003010:	f7fd fdfe 	bl	8000c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003014:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003018:	a90b      	add	r1, sp, #44	; 0x2c
 800301a:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800301c:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800301e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003020:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003022:	f7fd fdf5 	bl	8000c10 <HAL_GPIO_Init>
  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003026:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003028:	a90b      	add	r1, sp, #44	; 0x2c
 800302a:	480f      	ldr	r0, [pc, #60]	; (8003068 <MX_GPIO_Init+0x1ec>)
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800302c:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800302e:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003030:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003032:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003034:	950e      	str	r5, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003036:	f7fd fdeb 	bl	8000c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800303a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800303e:	a90b      	add	r1, sp, #44	; 0x2c
 8003040:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003042:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003044:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003046:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003048:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800304a:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800304e:	f7fd fddf 	bl	8000c10 <HAL_GPIO_Init>

}
 8003052:	b011      	add	sp, #68	; 0x44
 8003054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003058:	40023800 	.word	0x40023800
 800305c:	40021400 	.word	0x40021400
 8003060:	40021800 	.word	0x40021800
 8003064:	10110000 	.word	0x10110000
 8003068:	40020c00 	.word	0x40020c00
 800306c:	40020400 	.word	0x40020400
 8003070:	40020800 	.word	0x40020800

08003074 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003074:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8003076:	4815      	ldr	r0, [pc, #84]	; (80030cc <MX_I2C1_Init+0x58>)
  hi2c1.Init.Timing = 0x00C0EAFF;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003078:	2201      	movs	r2, #1
  hi2c1.Init.Timing = 0x00C0EAFF;
 800307a:	4b15      	ldr	r3, [pc, #84]	; (80030d0 <MX_I2C1_Init+0x5c>)
 800307c:	4915      	ldr	r1, [pc, #84]	; (80030d4 <MX_I2C1_Init+0x60>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800307e:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8003080:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c1.Init.OwnAddress1 = 0;
 8003084:	2300      	movs	r3, #0
 8003086:	6083      	str	r3, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003088:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800308a:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800308c:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800308e:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003090:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003092:	f7fd ff50 	bl	8000f36 <HAL_I2C_Init>
 8003096:	b118      	cbz	r0, 80030a0 <MX_I2C1_Init+0x2c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003098:	2143      	movs	r1, #67	; 0x43
 800309a:	480f      	ldr	r0, [pc, #60]	; (80030d8 <MX_I2C1_Init+0x64>)
 800309c:	f000 fa2a 	bl	80034f4 <_Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80030a0:	2100      	movs	r1, #0
 80030a2:	480a      	ldr	r0, [pc, #40]	; (80030cc <MX_I2C1_Init+0x58>)
 80030a4:	f7fd ff98 	bl	8000fd8 <HAL_I2CEx_ConfigAnalogFilter>
 80030a8:	b118      	cbz	r0, 80030b2 <MX_I2C1_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 80030aa:	214a      	movs	r1, #74	; 0x4a
 80030ac:	480a      	ldr	r0, [pc, #40]	; (80030d8 <MX_I2C1_Init+0x64>)
 80030ae:	f000 fa21 	bl	80034f4 <_Error_Handler>
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80030b2:	2100      	movs	r1, #0
 80030b4:	4805      	ldr	r0, [pc, #20]	; (80030cc <MX_I2C1_Init+0x58>)
 80030b6:	f7fd ffb5 	bl	8001024 <HAL_I2CEx_ConfigDigitalFilter>
 80030ba:	b128      	cbz	r0, 80030c8 <MX_I2C1_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
 80030bc:	2151      	movs	r1, #81	; 0x51
 80030be:	4806      	ldr	r0, [pc, #24]	; (80030d8 <MX_I2C1_Init+0x64>)
  }

}
 80030c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80030c4:	f000 ba16 	b.w	80034f4 <_Error_Handler>
 80030c8:	bd08      	pop	{r3, pc}
 80030ca:	bf00      	nop
 80030cc:	2000150c 	.word	0x2000150c
 80030d0:	00c0eaff 	.word	0x00c0eaff
 80030d4:	40005400 	.word	0x40005400
 80030d8:	08006e26 	.word	0x08006e26

080030dc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80030dc:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 80030de:	4815      	ldr	r0, [pc, #84]	; (8003134 <MX_I2C2_Init+0x58>)
  hi2c2.Init.Timing = 0x00C0EAFF;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80030e0:	2201      	movs	r2, #1
  hi2c2.Init.Timing = 0x00C0EAFF;
 80030e2:	4b15      	ldr	r3, [pc, #84]	; (8003138 <MX_I2C2_Init+0x5c>)
 80030e4:	4915      	ldr	r1, [pc, #84]	; (800313c <MX_I2C2_Init+0x60>)
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80030e6:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.Timing = 0x00C0EAFF;
 80030e8:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c2.Init.OwnAddress1 = 0;
 80030ec:	2300      	movs	r3, #0
 80030ee:	6083      	str	r3, [r0, #8]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80030f0:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80030f2:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80030f4:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80030f6:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80030f8:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80030fa:	f7fd ff1c 	bl	8000f36 <HAL_I2C_Init>
 80030fe:	b118      	cbz	r0, 8003108 <MX_I2C2_Init+0x2c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003100:	2164      	movs	r1, #100	; 0x64
 8003102:	480f      	ldr	r0, [pc, #60]	; (8003140 <MX_I2C2_Init+0x64>)
 8003104:	f000 f9f6 	bl	80034f4 <_Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003108:	2100      	movs	r1, #0
 800310a:	480a      	ldr	r0, [pc, #40]	; (8003134 <MX_I2C2_Init+0x58>)
 800310c:	f7fd ff64 	bl	8000fd8 <HAL_I2CEx_ConfigAnalogFilter>
 8003110:	b118      	cbz	r0, 800311a <MX_I2C2_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003112:	216b      	movs	r1, #107	; 0x6b
 8003114:	480a      	ldr	r0, [pc, #40]	; (8003140 <MX_I2C2_Init+0x64>)
 8003116:	f000 f9ed 	bl	80034f4 <_Error_Handler>
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800311a:	2100      	movs	r1, #0
 800311c:	4805      	ldr	r0, [pc, #20]	; (8003134 <MX_I2C2_Init+0x58>)
 800311e:	f7fd ff81 	bl	8001024 <HAL_I2CEx_ConfigDigitalFilter>
 8003122:	b128      	cbz	r0, 8003130 <MX_I2C2_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003124:	2172      	movs	r1, #114	; 0x72
 8003126:	4806      	ldr	r0, [pc, #24]	; (8003140 <MX_I2C2_Init+0x64>)
  }

}
 8003128:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 800312c:	f000 b9e2 	b.w	80034f4 <_Error_Handler>
 8003130:	bd08      	pop	{r3, pc}
 8003132:	bf00      	nop
 8003134:	20001558 	.word	0x20001558
 8003138:	00c0eaff 	.word	0x00c0eaff
 800313c:	40005800 	.word	0x40005800
 8003140:	08006e26 	.word	0x08006e26

08003144 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 8003144:	6803      	ldr	r3, [r0, #0]
 8003146:	4a1e      	ldr	r2, [pc, #120]	; (80031c0 <HAL_I2C_MspInit+0x7c>)
 8003148:	4293      	cmp	r3, r2
{
 800314a:	b500      	push	{lr}
 800314c:	b089      	sub	sp, #36	; 0x24
  if(i2cHandle->Instance==I2C1)
 800314e:	d11b      	bne.n	8003188 <HAL_I2C_MspInit+0x44>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_X_SCL_Pin|I2C1_X_SDA_Pin;
 8003150:	f44f 7340 	mov.w	r3, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003154:	a903      	add	r1, sp, #12
 8003156:	481b      	ldr	r0, [pc, #108]	; (80031c4 <HAL_I2C_MspInit+0x80>)
    GPIO_InitStruct.Pin = I2C1_X_SCL_Pin|I2C1_X_SDA_Pin;
 8003158:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800315a:	2312      	movs	r3, #18
 800315c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800315e:	2301      	movs	r3, #1
 8003160:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003162:	2303      	movs	r3, #3
 8003164:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003166:	2304      	movs	r3, #4
 8003168:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800316a:	f7fd fd51 	bl	8000c10 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800316e:	4b16      	ldr	r3, [pc, #88]	; (80031c8 <HAL_I2C_MspInit+0x84>)
 8003170:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003172:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003176:	641a      	str	r2, [r3, #64]	; 0x40
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800317e:	9301      	str	r3, [sp, #4]
 8003180:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8003182:	b009      	add	sp, #36	; 0x24
 8003184:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(i2cHandle->Instance==I2C2)
 8003188:	4a10      	ldr	r2, [pc, #64]	; (80031cc <HAL_I2C_MspInit+0x88>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d1f9      	bne.n	8003182 <HAL_I2C_MspInit+0x3e>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800318e:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003190:	2212      	movs	r2, #18
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003192:	a903      	add	r1, sp, #12
 8003194:	480e      	ldr	r0, [pc, #56]	; (80031d0 <HAL_I2C_MspInit+0x8c>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003196:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003198:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800319a:	2201      	movs	r2, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800319c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800319e:	2304      	movs	r3, #4
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031a0:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80031a2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80031a4:	f7fd fd34 	bl	8000c10 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80031a8:	4b07      	ldr	r3, [pc, #28]	; (80031c8 <HAL_I2C_MspInit+0x84>)
 80031aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031ac:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80031b0:	641a      	str	r2, [r3, #64]	; 0x40
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031b8:	9302      	str	r3, [sp, #8]
 80031ba:	9b02      	ldr	r3, [sp, #8]
}
 80031bc:	e7e1      	b.n	8003182 <HAL_I2C_MspInit+0x3e>
 80031be:	bf00      	nop
 80031c0:	40005400 	.word	0x40005400
 80031c4:	40020400 	.word	0x40020400
 80031c8:	40023800 	.word	0x40023800
 80031cc:	40005800 	.word	0x40005800
 80031d0:	40021400 	.word	0x40021400

080031d4 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80031d4:	4b33      	ldr	r3, [pc, #204]	; (80032a4 <SystemClock_Config+0xd0>)
 80031d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 80031dc:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80031de:	641a      	str	r2, [r3, #64]	; 0x40
{
 80031e0:	b0b9      	sub	sp, #228	; 0xe4
  __HAL_RCC_PWR_CLK_ENABLE();
 80031e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031e4:	2502      	movs	r5, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80031e6:	4a30      	ldr	r2, [pc, #192]	; (80032a8 <SystemClock_Config+0xd4>)
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
 80031e8:	2404      	movs	r4, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 80031ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
  RCC_OscInitStruct.PLL.PLLN = 100;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031ee:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80031f4:	6813      	ldr	r3, [r2, #0]
 80031f6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80031fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031fe:	6013      	str	r3, [r2, #0]
 8003200:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003202:	950d      	str	r5, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003204:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003208:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800320a:	9511      	str	r5, [sp, #68]	; 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800320c:	9301      	str	r3, [sp, #4]
 800320e:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003210:	2309      	movs	r3, #9
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003212:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003214:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003216:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800321a:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800321c:	2301      	movs	r3, #1
 800321e:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003220:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003224:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 100;
 8003226:	2364      	movs	r3, #100	; 0x64
 8003228:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800322a:	f7fd ff59 	bl	80010e0 <HAL_RCC_OscConfig>
 800322e:	b100      	cbz	r0, 8003232 <SystemClock_Config+0x5e>
 8003230:	e7fe      	b.n	8003230 <SystemClock_Config+0x5c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003232:	f7fd ff1d 	bl	8001070 <HAL_PWREx_EnableOverDrive>
 8003236:	b100      	cbz	r0, 800323a <SystemClock_Config+0x66>
 8003238:	e7fe      	b.n	8003238 <SystemClock_Config+0x64>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800323a:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800323c:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800323e:	9006      	str	r0, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003240:	2103      	movs	r1, #3
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003242:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003244:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003248:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800324a:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800324c:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800324e:	f7fe f909 	bl	8001464 <HAL_RCC_ClockConfig>
 8003252:	b100      	cbz	r0, 8003256 <SystemClock_Config+0x82>
 8003254:	e7fe      	b.n	8003254 <SystemClock_Config+0x80>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8003256:	f64d 53a0 	movw	r3, #56736	; 0xdda0
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART6
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_UART7
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800325a:	9026      	str	r0, [sp, #152]	; 0x98
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800325c:	9027      	str	r0, [sp, #156]	; 0x9c
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 800325e:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003260:	f44f 7300 	mov.w	r3, #512	; 0x200
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8003264:	9029      	str	r0, [sp, #164]	; 0xa4
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8003266:	902a      	str	r0, [sp, #168]	; 0xa8
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8003268:	902b      	str	r0, [sp, #172]	; 0xac
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800326a:	902d      	str	r0, [sp, #180]	; 0xb4
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800326c:	902e      	str	r0, [sp, #184]	; 0xb8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800326e:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003270:	9320      	str	r3, [sp, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003272:	f7fe f9bb 	bl	80015ec <HAL_RCCEx_PeriphCLKConfig>
 8003276:	4605      	mov	r5, r0
 8003278:	b100      	cbz	r0, 800327c <SystemClock_Config+0xa8>
 800327a:	e7fe      	b.n	800327a <SystemClock_Config+0xa6>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800327c:	f7fe f990 	bl	80015a0 <HAL_RCC_GetHCLKFreq>
 8003280:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003284:	fbb0 f0f3 	udiv	r0, r0, r3
 8003288:	f7fd fa72 	bl	8000770 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800328c:	4620      	mov	r0, r4
 800328e:	f7fd fa85 	bl	800079c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003292:	462a      	mov	r2, r5
 8003294:	4629      	mov	r1, r5
 8003296:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800329a:	f7fd fa17 	bl	80006cc <HAL_NVIC_SetPriority>
}
 800329e:	b039      	add	sp, #228	; 0xe4
 80032a0:	bd30      	pop	{r4, r5, pc}
 80032a2:	bf00      	nop
 80032a4:	40023800 	.word	0x40023800
 80032a8:	40007000 	.word	0x40007000

080032ac <USART_PRINT_MSG_Configuration>:
/* USER CODE BEGIN 4 */

#ifdef USART_PRINT_MSG
void USART_PRINT_MSG_Configuration(UART_HandleTypeDef *UART_MsgHandle,
		uint32_t baud_rate) {
	UART_MsgHandle->Instance = WIFI_UART_MSG;
 80032ac:	4b0d      	ldr	r3, [pc, #52]	; (80032e4 <USART_PRINT_MSG_Configuration+0x38>)
		uint32_t baud_rate) {
 80032ae:	b510      	push	{r4, lr}
	UART_MsgHandle->Instance = WIFI_UART_MSG;
 80032b0:	6003      	str	r3, [r0, #0]
	UART_MsgHandle->Init.BaudRate = baud_rate;
	UART_MsgHandle->Init.WordLength = UART_WORDLENGTH_8B;
 80032b2:	2300      	movs	r3, #0
	UART_MsgHandle->Init.BaudRate = baud_rate;
 80032b4:	6041      	str	r1, [r0, #4]
		uint32_t baud_rate) {
 80032b6:	4604      	mov	r4, r0
	UART_MsgHandle->Init.WordLength = UART_WORDLENGTH_8B;
 80032b8:	6083      	str	r3, [r0, #8]
	UART_MsgHandle->Init.StopBits = UART_STOPBITS_1;
 80032ba:	60c3      	str	r3, [r0, #12]
	UART_MsgHandle->Init.Parity = UART_PARITY_NONE;
 80032bc:	6103      	str	r3, [r0, #16]
	UART_MsgHandle->Init.HwFlowCtl = UART_HWCONTROL_NONE; // USART_HardwareFlowControl_RTS_CTS;
 80032be:	6183      	str	r3, [r0, #24]
	UART_MsgHandle->Init.Mode = UART_MODE_TX_RX;
 80032c0:	230c      	movs	r3, #12
 80032c2:	6143      	str	r3, [r0, #20]

	if (HAL_UART_DeInit(UART_MsgHandle) != HAL_OK) {
 80032c4:	f7ff f851 	bl	800236a <HAL_UART_DeInit>
 80032c8:	b100      	cbz	r0, 80032cc <USART_PRINT_MSG_Configuration+0x20>
 80032ca:	e7fe      	b.n	80032ca <USART_PRINT_MSG_Configuration+0x1e>
		Error_Handler();
	}
	if (HAL_UART_Init(UART_MsgHandle) != HAL_OK) {
 80032cc:	4620      	mov	r0, r4
 80032ce:	f7ff fc94 	bl	8002bfa <HAL_UART_Init>
 80032d2:	b100      	cbz	r0, 80032d6 <USART_PRINT_MSG_Configuration+0x2a>
 80032d4:	e7fe      	b.n	80032d4 <USART_PRINT_MSG_Configuration+0x28>
		Error_Handler();
	}
#ifdef WIFI_USE_VCOM
	/*## -1- Enable USART2 DMAT & DMAR #################################################*/
	UART_MsgHandle->Instance->CR3 |= 0x00000040;
 80032d6:	6822      	ldr	r2, [r4, #0]
 80032d8:	6893      	ldr	r3, [r2, #8]
 80032da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032de:	6093      	str	r3, [r2, #8]
 80032e0:	bd10      	pop	{r4, pc}
 80032e2:	bf00      	nop
 80032e4:	40004800 	.word	0x40004800

080032e8 <main>:
{
 80032e8:	e92d 4fd0 	stmdb	sp!, {r4, r6, r7, r8, r9, sl, fp, lr}
	setvbuf(stdin, NULL, _IONBF, 0);
 80032ec:	4c78      	ldr	r4, [pc, #480]	; (80034d0 <main+0x1e8>)
 80032ee:	2300      	movs	r3, #0
 80032f0:	2202      	movs	r2, #2
 80032f2:	6820      	ldr	r0, [r4, #0]
 80032f4:	4619      	mov	r1, r3
{
 80032f6:	ed2d 8b10 	vpush	{d8-d15}
	setvbuf(stdin, NULL, _IONBF, 0);
 80032fa:	6840      	ldr	r0, [r0, #4]
{
 80032fc:	b090      	sub	sp, #64	; 0x40
	setvbuf(stdin, NULL, _IONBF, 0);
 80032fe:	f001 fedd 	bl	80050bc <setvbuf>
	setvbuf(stdout, NULL, _IONBF, 0);
 8003302:	2300      	movs	r3, #0
 8003304:	6820      	ldr	r0, [r4, #0]
 8003306:	2202      	movs	r2, #2
 8003308:	4619      	mov	r1, r3
 800330a:	6880      	ldr	r0, [r0, #8]
 800330c:	f001 fed6 	bl	80050bc <setvbuf>
	setvbuf(stderr, NULL, _IONBF, 0);
 8003310:	2300      	movs	r3, #0
 8003312:	6820      	ldr	r0, [r4, #0]
 8003314:	2202      	movs	r2, #2
 8003316:	4619      	mov	r1, r3
 8003318:	68c0      	ldr	r0, [r0, #12]
 800331a:	f001 fecf 	bl	80050bc <setvbuf>
  HAL_Init();
 800331e:	f7fd f993 	bl	8000648 <HAL_Init>
  SystemClock_Config();
 8003322:	f7ff ff57 	bl	80031d4 <SystemClock_Config>
  MX_GPIO_Init();
 8003326:	f7ff fda9 	bl	8002e7c <MX_GPIO_Init>
  MX_DMA_Init();
 800332a:	f7ff fd5d 	bl	8002de8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800332e:	f000 fc7d 	bl	8003c2c <MX_USART3_UART_Init>
  MX_CRC_Init();
 8003332:	f7ff fd27 	bl	8002d84 <MX_CRC_Init>
  MX_I2C1_Init();
 8003336:	f7ff fe9d 	bl	8003074 <MX_I2C1_Init>
  MX_I2C2_Init();
 800333a:	f7ff fecf 	bl	80030dc <MX_I2C2_Init>
  MX_RTC_Init();
 800333e:	f000 f8db 	bl	80034f8 <MX_RTC_Init>
  MX_TIM1_Init();
 8003342:	f000 fb3b 	bl	80039bc <MX_TIM1_Init>
  MX_TIM2_Init();
 8003346:	f000 fa5b 	bl	8003800 <MX_TIM2_Init>
  MX_TIM3_Init();
 800334a:	f000 fa8d 	bl	8003868 <MX_TIM3_Init>
  MX_TIM4_Init();
 800334e:	f000 fbad 	bl	8003aac <MX_TIM4_Init>
  MX_UART5_Init();
 8003352:	f000 fc05 	bl	8003b60 <MX_UART5_Init>
  MX_UART7_Init();
 8003356:	f000 fc25 	bl	8003ba4 <MX_UART7_Init>
  MX_USART2_UART_Init();
 800335a:	f000 fc45 	bl	8003be8 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800335e:	f000 fc87 	bl	8003c70 <MX_USART6_UART_Init>
  MX_SPI1_Init();
 8003362:	f000 f8f5 	bl	8003550 <MX_SPI1_Init>
	USART_PRINT_MSG_Configuration(&huart3, 115200);
 8003366:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800336a:	485a      	ldr	r0, [pc, #360]	; (80034d4 <main+0x1ec>)
 800336c:	f7ff ff9e 	bl	80032ac <USART_PRINT_MSG_Configuration>
	Set_UartMsgHandle(&huart3); //this is required for the console handler initialization
 8003370:	4858      	ldr	r0, [pc, #352]	; (80034d4 <main+0x1ec>)
 8003372:	f7ff fc75 	bl	8002c60 <Set_UartMsgHandle>
	printf("\r\n Please wait... \r\n");
 8003376:	4858      	ldr	r0, [pc, #352]	; (80034d8 <main+0x1f0>)
 8003378:	f001 fe88 	bl	800508c <puts>
	USART6->CR3 |= 0x00000040;
 800337c:	4a57      	ldr	r2, [pc, #348]	; (80034dc <main+0x1f4>)
	HAL_Delay(2000);
 800337e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
	USART6->CR3 |= 0x00000040;
 8003382:	6893      	ldr	r3, [r2, #8]
 8003384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	 	 ssi_update(locx,locy,locz,accelx,accely,accelz,gyrox,gyroy,gyroz,dist,spd,move,temp,pssr,humd,sts);
 8003388:	ed9f cb3d 	vldr	d12, [pc, #244]	; 8003480 <main+0x198>
 800338c:	ed9f bb3e 	vldr	d11, [pc, #248]	; 8003488 <main+0x1a0>
 8003390:	ed9f ab3f 	vldr	d10, [pc, #252]	; 8003490 <main+0x1a8>
 8003394:	ed9f 9b40 	vldr	d9, [pc, #256]	; 8003498 <main+0x1b0>
 8003398:	ed9f 8b41 	vldr	d8, [pc, #260]	; 80034a0 <main+0x1b8>
	USART6->CR3 |= 0x00000040;
 800339c:	6093      	str	r3, [r2, #8]
	HAL_Delay(2000);
 800339e:	f7fd f971 	bl	8000684 <HAL_Delay>
	printf("\r\n Ready... Updating ... \r\n");
 80033a2:	484f      	ldr	r0, [pc, #316]	; (80034e0 <main+0x1f8>)
 80033a4:	f001 fe72 	bl	800508c <puts>
	 	 ssi_update(locx,locy,locz,accelx,accely,accelz,gyrox,gyroy,gyroz,dist,spd,move,temp,pssr,humd,sts);
 80033a8:	f20f 09fc 	addw	r9, pc, #252	; 0xfc
 80033ac:	e9d9 8900 	ldrd	r8, r9, [r9]
 		 strcpy(sts, "Status GOOD");
 80033b0:	2400      	movs	r4, #0
 80033b2:	494c      	ldr	r1, [pc, #304]	; (80034e4 <main+0x1fc>)
	 	 ssi_update(locx,locy,locz,accelx,accely,accelz,gyrox,gyroy,gyroz,dist,spd,move,temp,pssr,humd,sts);
 80033b4:	f04f 0a00 	mov.w	sl, #0
 80033b8:	f8df b134 	ldr.w	fp, [pc, #308]	; 80034f0 <main+0x208>
 		 strcpy(sts, "Status GOOD");
 80033bc:	4620      	mov	r0, r4
	 	 ssi_update(locx,locy,locz,accelx,accely,accelz,gyrox,gyroy,gyroz,dist,spd,move,temp,pssr,humd,sts);
 80033be:	2600      	movs	r6, #0
 		 strcpy(sts, "Status GOOD");
 80033c0:	f001 ff91 	bl	80052e6 <strcpy>
	 	 ssi_update(locx,locy,locz,accelx,accely,accelz,gyrox,gyroy,gyroz,dist,spd,move,temp,pssr,humd,sts);
 80033c4:	4f48      	ldr	r7, [pc, #288]	; (80034e8 <main+0x200>)
 80033c6:	eeb0 7b4c 	vmov.f64	d7, d12
 80033ca:	4620      	mov	r0, r4
 80033cc:	eeb0 6b4b 	vmov.f64	d6, d11
 80033d0:	eeb0 5b4a 	vmov.f64	d5, d10
 80033d4:	eeb0 3b49 	vmov.f64	d3, d9
 80033d8:	eeb0 2b48 	vmov.f64	d2, d8
 80033dc:	eeb0 4b0c 	vmov.f64	d4, #12	; 0x40600000  3.5
 80033e0:	eeb3 1b04 	vmov.f64	d1, #52	; 0x41a00000  20.0
 80033e4:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 80033e8:	ed9f db31 	vldr	d13, [pc, #196]	; 80034b0 <main+0x1c8>
 80033ec:	ed9f eb32 	vldr	d14, [pc, #200]	; 80034b8 <main+0x1d0>
 80033f0:	ed9f fb33 	vldr	d15, [pc, #204]	; 80034c0 <main+0x1d8>
 80033f4:	a334      	add	r3, pc, #208	; (adr r3, 80034c8 <main+0x1e0>)
 80033f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fa:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80033fe:	e9cd 2300 	strd	r2, r3, [sp]
 8003402:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8003406:	e9cd 6708 	strd	r6, r7, [sp, #32]
 800340a:	ed8d db06 	vstr	d13, [sp, #24]
 800340e:	ed8d eb04 	vstr	d14, [sp, #16]
 8003412:	ed8d fb02 	vstr	d15, [sp, #8]
 8003416:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800341a:	f000 fe55 	bl	80040c8 <ssi_update>
	 	 HAL_Delay(5000);
 800341e:	f241 3088 	movw	r0, #5000	; 0x1388
 8003422:	f7fd f92f 	bl	8000684 <HAL_Delay>
 		 strcpy(sts, "Status BAD");
 8003426:	4931      	ldr	r1, [pc, #196]	; (80034ec <main+0x204>)
 8003428:	4620      	mov	r0, r4
 800342a:	f001 ff5c 	bl	80052e6 <strcpy>
	 	 ssi_update(locx,locy,locz,accelx,accely,accelz,gyrox,gyroy,gyroz,dist,spd,move,temp,pssr,humd,sts);
 800342e:	4620      	mov	r0, r4
 8003430:	eeb0 7b4c 	vmov.f64	d7, d12
 8003434:	eeb0 6b4b 	vmov.f64	d6, d11
 8003438:	eeb0 5b4a 	vmov.f64	d5, d10
 800343c:	eeb0 4b0c 	vmov.f64	d4, #12	; 0x40600000  3.5
 8003440:	eeb0 3b49 	vmov.f64	d3, d9
 8003444:	eeb0 2b48 	vmov.f64	d2, d8
 8003448:	eeb3 1b04 	vmov.f64	d1, #52	; 0x41a00000  20.0
 800344c:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8003450:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8003454:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8003458:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800345c:	e9cd 6708 	strd	r6, r7, [sp, #32]
 8003460:	ed8d db06 	vstr	d13, [sp, #24]
 8003464:	ed8d eb04 	vstr	d14, [sp, #16]
 8003468:	ed8d fb02 	vstr	d15, [sp, #8]
 800346c:	e9cd 2300 	strd	r2, r3, [sp]
 8003470:	f000 fe2a 	bl	80040c8 <ssi_update>
	 	HAL_Delay(5000);
 8003474:	f241 3088 	movw	r0, #5000	; 0x1388
 8003478:	f7fd f904 	bl	8000684 <HAL_Delay>
 800347c:	e798      	b.n	80033b0 <main+0xc8>
 800347e:	bf00      	nop
 8003480:	40000000 	.word	0x40000000
 8003484:	40113333 	.word	0x40113333
 8003488:	c0000000 	.word	0xc0000000
 800348c:	4010cccc 	.word	0x4010cccc
	...
 8003498:	60000000 	.word	0x60000000
 800349c:	400a6666 	.word	0x400a6666
 80034a0:	c0000000 	.word	0xc0000000
 80034a4:	403e4ccc 	.word	0x403e4ccc
 80034a8:	20000000 	.word	0x20000000
 80034ac:	4010eb85 	.word	0x4010eb85
 80034b0:	00000000 	.word	0x00000000
 80034b4:	406bc000 	.word	0x406bc000
 80034b8:	00000000 	.word	0x00000000
 80034bc:	40450000 	.word	0x40450000
 80034c0:	00000000 	.word	0x00000000
 80034c4:	40444000 	.word	0x40444000
 80034c8:	a0000000 	.word	0xa0000000
 80034cc:	40119999 	.word	0x40119999
 80034d0:	2000000c 	.word	0x2000000c
 80034d4:	200011dc 	.word	0x200011dc
 80034d8:	08006e33 	.word	0x08006e33
 80034dc:	40011400 	.word	0x40011400
 80034e0:	08006e47 	.word	0x08006e47
 80034e4:	08006e62 	.word	0x08006e62
 80034e8:	40400000 	.word	0x40400000
 80034ec:	08006e6e 	.word	0x08006e6e
 80034f0:	408f4000 	.word	0x408f4000

080034f4 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80034f4:	e7fe      	b.n	80034f4 <_Error_Handler>
	...

080034f8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80034f8:	b508      	push	{r3, lr}

    /**Initialize RTC Only 
    */
  hrtc.Instance = RTC;
 80034fa:	480b      	ldr	r0, [pc, #44]	; (8003528 <MX_RTC_Init+0x30>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
 80034fc:	227f      	movs	r2, #127	; 0x7f
  hrtc.Instance = RTC;
 80034fe:	4b0b      	ldr	r3, [pc, #44]	; (800352c <MX_RTC_Init+0x34>)
  hrtc.Init.AsynchPrediv = 127;
 8003500:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8003502:	22ff      	movs	r2, #255	; 0xff
  hrtc.Instance = RTC;
 8003504:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003506:	2300      	movs	r3, #0
  hrtc.Init.SynchPrediv = 255;
 8003508:	60c2      	str	r2, [r0, #12]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800350a:	6043      	str	r3, [r0, #4]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800350c:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800350e:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003510:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003512:	f7fe fb33 	bl	8001b7c <HAL_RTC_Init>
 8003516:	b128      	cbz	r0, 8003524 <MX_RTC_Init+0x2c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003518:	2140      	movs	r1, #64	; 0x40
 800351a:	4805      	ldr	r0, [pc, #20]	; (8003530 <MX_RTC_Init+0x38>)
  }

}
 800351c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8003520:	f7ff bfe8 	b.w	80034f4 <_Error_Handler>
 8003524:	bd08      	pop	{r3, pc}
 8003526:	bf00      	nop
 8003528:	200015a4 	.word	0x200015a4
 800352c:	40002800 	.word	0x40002800
 8003530:	08006e79 	.word	0x08006e79

08003534 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 8003534:	6802      	ldr	r2, [r0, #0]
 8003536:	4b04      	ldr	r3, [pc, #16]	; (8003548 <HAL_RTC_MspInit+0x14>)
 8003538:	429a      	cmp	r2, r3
 800353a:	d104      	bne.n	8003546 <HAL_RTC_MspInit+0x12>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800353c:	4a03      	ldr	r2, [pc, #12]	; (800354c <HAL_RTC_MspInit+0x18>)
 800353e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003540:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003544:	6713      	str	r3, [r2, #112]	; 0x70
 8003546:	4770      	bx	lr
 8003548:	40002800 	.word	0x40002800
 800354c:	40023800 	.word	0x40023800

08003550 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003550:	b508      	push	{r3, lr}

  hspi1.Instance = SPI1;
 8003552:	4811      	ldr	r0, [pc, #68]	; (8003598 <MX_SPI1_Init+0x48>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003554:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8003558:	f44f 7240 	mov.w	r2, #768	; 0x300
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800355c:	490f      	ldr	r1, [pc, #60]	; (800359c <MX_SPI1_Init+0x4c>)
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800355e:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003560:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003564:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003568:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800356a:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 800356c:	2207      	movs	r2, #7
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800356e:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003570:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003572:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003574:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003576:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003578:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800357a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800357c:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800357e:	2308      	movs	r3, #8
  hspi1.Init.CRCPolynomial = 7;
 8003580:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003582:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003584:	f7fe fb3c 	bl	8001c00 <HAL_SPI_Init>
 8003588:	b128      	cbz	r0, 8003596 <MX_SPI1_Init+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
 800358a:	2147      	movs	r1, #71	; 0x47
 800358c:	4804      	ldr	r0, [pc, #16]	; (80035a0 <MX_SPI1_Init+0x50>)
  }

}
 800358e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8003592:	f7ff bfaf 	b.w	80034f4 <_Error_Handler>
 8003596:	bd08      	pop	{r3, pc}
 8003598:	200015c4 	.word	0x200015c4
 800359c:	40013000 	.word	0x40013000
 80035a0:	08006e86 	.word	0x08006e86

080035a4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 80035a4:	6802      	ldr	r2, [r0, #0]
 80035a6:	4b15      	ldr	r3, [pc, #84]	; (80035fc <HAL_SPI_MspInit+0x58>)
 80035a8:	429a      	cmp	r2, r3
{
 80035aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035ac:	b087      	sub	sp, #28
  if(spiHandle->Instance==SPI1)
 80035ae:	d122      	bne.n	80035f6 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80035b0:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b4:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b6:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035b8:	2503      	movs	r5, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 80035ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80035bc:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035be:	a901      	add	r1, sp, #4
 80035c0:	480f      	ldr	r0, [pc, #60]	; (8003600 <HAL_SPI_MspInit+0x5c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80035c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80035c6:	645a      	str	r2, [r3, #68]	; 0x44
 80035c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ca:	9702      	str	r7, [sp, #8]
    __HAL_RCC_SPI1_CLK_ENABLE();
 80035cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d0:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035d2:	9504      	str	r5, [sp, #16]
    __HAL_RCC_SPI1_CLK_ENABLE();
 80035d4:	9300      	str	r3, [sp, #0]
 80035d6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80035d8:	2360      	movs	r3, #96	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80035da:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80035dc:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035de:	f7fd fb17 	bl	8000c10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80035e2:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035e4:	a901      	add	r1, sp, #4
 80035e6:	4807      	ldr	r0, [pc, #28]	; (8003604 <HAL_SPI_MspInit+0x60>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80035e8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ea:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ec:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ee:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80035f0:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035f2:	f7fd fb0d 	bl	8000c10 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80035f6:	b007      	add	sp, #28
 80035f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035fa:	bf00      	nop
 80035fc:	40013000 	.word	0x40013000
 8003600:	40020000 	.word	0x40020000
 8003604:	40020c00 	.word	0x40020c00

08003608 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003608:	4b21      	ldr	r3, [pc, #132]	; (8003690 <HAL_MspInit+0x88>)
{
 800360a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800360c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800360e:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8003610:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003614:	641a      	str	r2, [r3, #64]	; 0x40
 8003616:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003618:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800361c:	9200      	str	r2, [sp, #0]
 800361e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003620:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003622:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003626:	645a      	str	r2, [r3, #68]	; 0x44
 8003628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800362e:	9301      	str	r3, [sp, #4]
 8003630:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003632:	f7fd f839 	bl	80006a8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003636:	2200      	movs	r2, #0
 8003638:	f06f 000b 	mvn.w	r0, #11
 800363c:	4611      	mov	r1, r2
 800363e:	f7fd f845 	bl	80006cc <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003642:	2200      	movs	r2, #0
 8003644:	f06f 000a 	mvn.w	r0, #10
 8003648:	4611      	mov	r1, r2
 800364a:	f7fd f83f 	bl	80006cc <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800364e:	2200      	movs	r2, #0
 8003650:	f06f 0009 	mvn.w	r0, #9
 8003654:	4611      	mov	r1, r2
 8003656:	f7fd f839 	bl	80006cc <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800365a:	2200      	movs	r2, #0
 800365c:	f06f 0004 	mvn.w	r0, #4
 8003660:	4611      	mov	r1, r2
 8003662:	f7fd f833 	bl	80006cc <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003666:	2200      	movs	r2, #0
 8003668:	f06f 0003 	mvn.w	r0, #3
 800366c:	4611      	mov	r1, r2
 800366e:	f7fd f82d 	bl	80006cc <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003672:	2200      	movs	r2, #0
 8003674:	f06f 0001 	mvn.w	r0, #1
 8003678:	4611      	mov	r1, r2
 800367a:	f7fd f827 	bl	80006cc <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800367e:	2200      	movs	r2, #0
 8003680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003684:	4611      	mov	r1, r2
 8003686:	f7fd f821 	bl	80006cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800368a:	b003      	add	sp, #12
 800368c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003690:	40023800 	.word	0x40023800

08003694 <NMI_Handler>:
 8003694:	4770      	bx	lr

08003696 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003696:	e7fe      	b.n	8003696 <HardFault_Handler>

08003698 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003698:	e7fe      	b.n	8003698 <MemManage_Handler>

0800369a <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800369a:	e7fe      	b.n	800369a <BusFault_Handler>

0800369c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800369c:	e7fe      	b.n	800369c <UsageFault_Handler>

0800369e <SVC_Handler>:
 800369e:	4770      	bx	lr

080036a0 <DebugMon_Handler>:
 80036a0:	4770      	bx	lr

080036a2 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80036a2:	4770      	bx	lr

080036a4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80036a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036a6:	f7fc ffdb 	bl	8000660 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80036ae:	f7fd b882 	b.w	80007b6 <HAL_SYSTICK_IRQHandler>
	...

080036b4 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80036b4:	4801      	ldr	r0, [pc, #4]	; (80036bc <DMA1_Stream3_IRQHandler+0x8>)
 80036b6:	f7fd b9f1 	b.w	8000a9c <HAL_DMA_IRQHandler>
 80036ba:	bf00      	nop
 80036bc:	20001380 	.word	0x20001380

080036c0 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80036c0:	4801      	ldr	r0, [pc, #4]	; (80036c8 <DMA1_Stream6_IRQHandler+0x8>)
 80036c2:	f7fd b9eb 	b.w	8000a9c <HAL_DMA_IRQHandler>
 80036c6:	bf00      	nop
 80036c8:	20001868 	.word	0x20001868

080036cc <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80036cc:	4801      	ldr	r0, [pc, #4]	; (80036d4 <DMA2_Stream6_IRQHandler+0x8>)
 80036ce:	f7fd b9e5 	b.w	8000a9c <HAL_DMA_IRQHandler>
 80036d2:	bf00      	nop
 80036d4:	20001440 	.word	0x20001440

080036d8 <USART6_IRQHandler>:
void USART6_IRQHandler(void)
{
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80036d8:	4801      	ldr	r0, [pc, #4]	; (80036e0 <USART6_IRQHandler+0x8>)
 80036da:	f7ff b817 	b.w	800270c <HAL_UART_IRQHandler>
 80036de:	bf00      	nop
 80036e0:	20000204 	.word	0x20000204

080036e4 <HAL_UART_RxCpltCallback>:
 80036e4:	4770      	bx	lr

080036e6 <HAL_UART_TxCpltCallback>:
 * @brief  HAL_UART_TxCpltCallback
 *         Tx Transfer completed callback
 * @param  UsartHandle: UART handle
 * @retval None
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandleArg) {
 80036e6:	4770      	bx	lr

080036e8 <HAL_UART_ErrorCallback>:
 *         add your own implementation.
 * @retval None
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle) {
	// WiFi_HAL_UART_ErrorCallback(UartHandle);
	printf("UART ERROR!!!");
 80036e8:	4801      	ldr	r0, [pc, #4]	; (80036f0 <HAL_UART_ErrorCallback+0x8>)
 80036ea:	f001 bc5b 	b.w	8004fa4 <iprintf>
 80036ee:	bf00      	nop
 80036f0:	08006e93 	.word	0x08006e93

080036f4 <USART3_IRQHandler>:
 * @retval None
 */
#ifdef USART_PRINT_MSG
void USARTx_PRINT_IRQHandler(void) {
	// printf("CONSOLE UART IRQ");
	HAL_UART_IRQHandler(&huart3);
 80036f4:	4801      	ldr	r0, [pc, #4]	; (80036fc <USART3_IRQHandler+0x8>)
 80036f6:	f7ff b809 	b.w	800270c <HAL_UART_IRQHandler>
 80036fa:	bf00      	nop
 80036fc:	200011dc 	.word	0x200011dc

08003700 <DMA1_Stream1_IRQHandler>:
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF1)==(DMA_LISR_TCIF1));
 8003700:	4b04      	ldr	r3, [pc, #16]	; (8003714 <DMA1_Stream1_IRQHandler+0x14>)
 8003702:	681a      	ldr	r2, [r3, #0]

#ifdef USE_STM32F7XX_NUCLEO
// CONSOLE - UART - RX
void DMA1_Stream1_IRQHandler(void) {
	//printf("Reading from console\r\n");
	if (LL_DMA_IsActiveFlag_TC1(DMA1) == 1) {
 8003704:	0512      	lsls	r2, r2, #20
 8003706:	d504      	bpl.n	8003712 <DMA1_Stream1_IRQHandler+0x12>
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF1);
 8003708:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800370c:	609a      	str	r2, [r3, #8]
		LL_DMA_ClearFlag_TC1(DMA1);
		DMA1_TransferComplete();
 800370e:	f7ff baad 	b.w	8002c6c <DMA1_TransferComplete>
 8003712:	4770      	bx	lr
 8003714:	40026000 	.word	0x40026000

08003718 <DMA2_Stream1_IRQHandler>:
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF1)==(DMA_LISR_TCIF1));
 8003718:	4b04      	ldr	r3, [pc, #16]	; (800372c <DMA2_Stream1_IRQHandler+0x14>)
 800371a:	681a      	ldr	r2, [r3, #0]
}

// WIFI - UART - RX
void DMA2_Stream1_IRQHandler(void) {
	// printf("Reading from WIFI UART\r\n");
	if (LL_DMA_IsActiveFlag_TC1(DMA2) == 1) {
 800371c:	0512      	lsls	r2, r2, #20
 800371e:	d504      	bpl.n	800372a <DMA2_Stream1_IRQHandler+0x12>
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF1);
 8003720:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003724:	609a      	str	r2, [r3, #8]
		LL_DMA_ClearFlag_TC1(DMA2);
		DMA2_TransferComplete();
 8003726:	f7ff bac9 	b.w	8002cbc <DMA2_TransferComplete>
 800372a:	4770      	bx	lr
 800372c:	40026400 	.word	0x40026400

08003730 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8003730:	b570      	push	{r4, r5, r6, lr}
 8003732:	460e      	mov	r6, r1
 8003734:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003736:	460c      	mov	r4, r1
 8003738:	1ba3      	subs	r3, r4, r6
 800373a:	429d      	cmp	r5, r3
 800373c:	dc01      	bgt.n	8003742 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800373e:	4628      	mov	r0, r5
 8003740:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8003742:	f7ff fb1d 	bl	8002d80 <__io_getchar>
 8003746:	f804 0b01 	strb.w	r0, [r4], #1
 800374a:	e7f5      	b.n	8003738 <_read+0x8>

0800374c <_write>:

int _write(int file, char *ptr, int len)
{
 800374c:	b570      	push	{r4, r5, r6, lr}
 800374e:	460e      	mov	r6, r1
 8003750:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003752:	460c      	mov	r4, r1
 8003754:	1ba3      	subs	r3, r4, r6
 8003756:	429d      	cmp	r5, r3
 8003758:	dc01      	bgt.n	800375e <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800375a:	4628      	mov	r0, r5
 800375c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800375e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8003762:	f7ff fb0b 	bl	8002d7c <__io_putchar>
 8003766:	e7f5      	b.n	8003754 <_write+0x8>

08003768 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8003768:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800376a:	4b0a      	ldr	r3, [pc, #40]	; (8003794 <_sbrk+0x2c>)
{
 800376c:	4602      	mov	r2, r0
	if (heap_end == 0)
 800376e:	6819      	ldr	r1, [r3, #0]
 8003770:	b909      	cbnz	r1, 8003776 <_sbrk+0xe>
		heap_end = &end;
 8003772:	4909      	ldr	r1, [pc, #36]	; (8003798 <_sbrk+0x30>)
 8003774:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8003776:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8003778:	4669      	mov	r1, sp
 800377a:	4402      	add	r2, r0
 800377c:	428a      	cmp	r2, r1
 800377e:	d906      	bls.n	800378e <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003780:	f000 fd5e 	bl	8004240 <__errno>
 8003784:	230c      	movs	r3, #12
 8003786:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003788:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800378c:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800378e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8003790:	bd08      	pop	{r3, pc}
 8003792:	bf00      	nop
 8003794:	200001f8 	.word	0x200001f8
 8003798:	2000193c 	.word	0x2000193c

0800379c <_close>:

int _close(int file)
{
	return -1;
}
 800379c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037a0:	4770      	bx	lr

080037a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80037a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80037a6:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80037a8:	604b      	str	r3, [r1, #4]
}
 80037aa:	4770      	bx	lr

080037ac <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80037ac:	2001      	movs	r0, #1
 80037ae:	4770      	bx	lr

080037b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80037b0:	2000      	movs	r0, #0
 80037b2:	4770      	bx	lr

080037b4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80037b4:	490f      	ldr	r1, [pc, #60]	; (80037f4 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80037b6:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80037b8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80037bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 80037c4:	4b0c      	ldr	r3, [pc, #48]	; (80037f8 <SystemInit+0x44>)
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	f042 0201 	orr.w	r2, r2, #1
 80037cc:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80037ce:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80037d6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80037da:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80037dc:	4a07      	ldr	r2, [pc, #28]	; (80037fc <SystemInit+0x48>)
 80037de:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037e6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80037e8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80037ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80037ee:	608b      	str	r3, [r1, #8]
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	e000ed00 	.word	0xe000ed00
 80037f8:	40023800 	.word	0x40023800
 80037fc:	24003010 	.word	0x24003010

08003800 <MX_TIM2_Init>:
void MX_TIM2_Init(void)
{
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 8003800:	4817      	ldr	r0, [pc, #92]	; (8003860 <MX_TIM2_Init+0x60>)
 8003802:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
 8003806:	b500      	push	{lr}
  htim2.Instance = TIM2;
 8003808:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 0;
 800380a:	2300      	movs	r3, #0
{
 800380c:	b089      	sub	sp, #36	; 0x24
  htim2.Init.Prescaler = 0;
 800380e:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003810:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 0;
 8003812:	60c3      	str	r3, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003814:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003816:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003818:	f7fe fad4 	bl	8001dc4 <HAL_TIM_Base_Init>
 800381c:	b118      	cbz	r0, 8003826 <MX_TIM2_Init+0x26>
  {
    _Error_Handler(__FILE__, __LINE__);
 800381e:	218d      	movs	r1, #141	; 0x8d
 8003820:	4810      	ldr	r0, [pc, #64]	; (8003864 <MX_TIM2_Init+0x64>)
 8003822:	f7ff fe67 	bl	80034f4 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003826:	a908      	add	r1, sp, #32
 8003828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800382c:	480c      	ldr	r0, [pc, #48]	; (8003860 <MX_TIM2_Init+0x60>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800382e:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003832:	f7fe fbc1 	bl	8001fb8 <HAL_TIM_ConfigClockSource>
 8003836:	b118      	cbz	r0, 8003840 <MX_TIM2_Init+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003838:	2193      	movs	r1, #147	; 0x93
 800383a:	480a      	ldr	r0, [pc, #40]	; (8003864 <MX_TIM2_Init+0x64>)
 800383c:	f7ff fe5a 	bl	80034f4 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003840:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003842:	a901      	add	r1, sp, #4
 8003844:	4806      	ldr	r0, [pc, #24]	; (8003860 <MX_TIM2_Init+0x60>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003846:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003848:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800384a:	f7fe fc93 	bl	8002174 <HAL_TIMEx_MasterConfigSynchronization>
 800384e:	b118      	cbz	r0, 8003858 <MX_TIM2_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003850:	219a      	movs	r1, #154	; 0x9a
 8003852:	4804      	ldr	r0, [pc, #16]	; (8003864 <MX_TIM2_Init+0x64>)
 8003854:	f7ff fe4e 	bl	80034f4 <_Error_Handler>
  }

}
 8003858:	b009      	add	sp, #36	; 0x24
 800385a:	f85d fb04 	ldr.w	pc, [sp], #4
 800385e:	bf00      	nop
 8003860:	200016e8 	.word	0x200016e8
 8003864:	08006eb9 	.word	0x08006eb9

08003868 <MX_TIM3_Init>:
void MX_TIM3_Init(void)
{
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
 8003868:	4818      	ldr	r0, [pc, #96]	; (80038cc <MX_TIM3_Init+0x64>)
  htim3.Init.Prescaler = 9999;
 800386a:	f242 730f 	movw	r3, #9999	; 0x270f
 800386e:	4918      	ldr	r1, [pc, #96]	; (80038d0 <MX_TIM3_Init+0x68>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 99;
 8003870:	2263      	movs	r2, #99	; 0x63
{
 8003872:	b500      	push	{lr}
  htim3.Init.Prescaler = 9999;
 8003874:	e880 000a 	stmia.w	r0, {r1, r3}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003878:	2300      	movs	r3, #0
{
 800387a:	b089      	sub	sp, #36	; 0x24
  htim3.Init.Period = 99;
 800387c:	60c2      	str	r2, [r0, #12]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800387e:	6083      	str	r3, [r0, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003880:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003882:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003884:	f7fe fa9e 	bl	8001dc4 <HAL_TIM_Base_Init>
 8003888:	b118      	cbz	r0, 8003892 <MX_TIM3_Init+0x2a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800388a:	21ac      	movs	r1, #172	; 0xac
 800388c:	4811      	ldr	r0, [pc, #68]	; (80038d4 <MX_TIM3_Init+0x6c>)
 800388e:	f7ff fe31 	bl	80034f4 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003892:	a908      	add	r1, sp, #32
 8003894:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003898:	480c      	ldr	r0, [pc, #48]	; (80038cc <MX_TIM3_Init+0x64>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800389a:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800389e:	f7fe fb8b 	bl	8001fb8 <HAL_TIM_ConfigClockSource>
 80038a2:	b118      	cbz	r0, 80038ac <MX_TIM3_Init+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
 80038a4:	21b2      	movs	r1, #178	; 0xb2
 80038a6:	480b      	ldr	r0, [pc, #44]	; (80038d4 <MX_TIM3_Init+0x6c>)
 80038a8:	f7ff fe24 	bl	80034f4 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038ac:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80038ae:	a901      	add	r1, sp, #4
 80038b0:	4806      	ldr	r0, [pc, #24]	; (80038cc <MX_TIM3_Init+0x64>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038b2:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038b4:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80038b6:	f7fe fc5d 	bl	8002174 <HAL_TIMEx_MasterConfigSynchronization>
 80038ba:	b118      	cbz	r0, 80038c4 <MX_TIM3_Init+0x5c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80038bc:	21b9      	movs	r1, #185	; 0xb9
 80038be:	4805      	ldr	r0, [pc, #20]	; (80038d4 <MX_TIM3_Init+0x6c>)
 80038c0:	f7ff fe18 	bl	80034f4 <_Error_Handler>
  }

}
 80038c4:	b009      	add	sp, #36	; 0x24
 80038c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80038ca:	bf00      	nop
 80038cc:	20001668 	.word	0x20001668
 80038d0:	40000400 	.word	0x40000400
 80038d4:	08006eb9 	.word	0x08006eb9

080038d8 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 80038d8:	6803      	ldr	r3, [r0, #0]
{
 80038da:	b084      	sub	sp, #16
  if(tim_baseHandle->Instance==TIM1)
 80038dc:	4a1c      	ldr	r2, [pc, #112]	; (8003950 <HAL_TIM_Base_MspInit+0x78>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d10b      	bne.n	80038fa <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80038e2:	4b1c      	ldr	r3, [pc, #112]	; (8003954 <HAL_TIM_Base_MspInit+0x7c>)
 80038e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038e6:	f042 0201 	orr.w	r2, r2, #1
 80038ea:	645a      	str	r2, [r3, #68]	; 0x44
 80038ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80038f6:	b004      	add	sp, #16
 80038f8:	4770      	bx	lr
  else if(tim_baseHandle->Instance==TIM2)
 80038fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038fe:	d10b      	bne.n	8003918 <HAL_TIM_Base_MspInit+0x40>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003900:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8003904:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003906:	f042 0201 	orr.w	r2, r2, #1
 800390a:	641a      	str	r2, [r3, #64]	; 0x40
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	9301      	str	r3, [sp, #4]
 8003914:	9b01      	ldr	r3, [sp, #4]
 8003916:	e7ee      	b.n	80038f6 <HAL_TIM_Base_MspInit+0x1e>
  else if(tim_baseHandle->Instance==TIM3)
 8003918:	4a0f      	ldr	r2, [pc, #60]	; (8003958 <HAL_TIM_Base_MspInit+0x80>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d10a      	bne.n	8003934 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800391e:	4b0d      	ldr	r3, [pc, #52]	; (8003954 <HAL_TIM_Base_MspInit+0x7c>)
 8003920:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003922:	f042 0202 	orr.w	r2, r2, #2
 8003926:	641a      	str	r2, [r3, #64]	; 0x40
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	9302      	str	r3, [sp, #8]
 8003930:	9b02      	ldr	r3, [sp, #8]
 8003932:	e7e0      	b.n	80038f6 <HAL_TIM_Base_MspInit+0x1e>
  else if(tim_baseHandle->Instance==TIM4)
 8003934:	4a09      	ldr	r2, [pc, #36]	; (800395c <HAL_TIM_Base_MspInit+0x84>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d1dd      	bne.n	80038f6 <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800393a:	4b06      	ldr	r3, [pc, #24]	; (8003954 <HAL_TIM_Base_MspInit+0x7c>)
 800393c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800393e:	f042 0204 	orr.w	r2, r2, #4
 8003942:	641a      	str	r2, [r3, #64]	; 0x40
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	f003 0304 	and.w	r3, r3, #4
 800394a:	9303      	str	r3, [sp, #12]
 800394c:	9b03      	ldr	r3, [sp, #12]
}
 800394e:	e7d2      	b.n	80038f6 <HAL_TIM_Base_MspInit+0x1e>
 8003950:	40010000 	.word	0x40010000
 8003954:	40023800 	.word	0x40023800
 8003958:	40000400 	.word	0x40000400
 800395c:	40000800 	.word	0x40000800

08003960 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003960:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM1)
 8003962:	6803      	ldr	r3, [r0, #0]
 8003964:	4a11      	ldr	r2, [pc, #68]	; (80039ac <HAL_TIM_MspPostInit+0x4c>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d110      	bne.n	800398c <HAL_TIM_MspPostInit+0x2c>
  /* USER CODE END TIM1_MspPostInit 0 */
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = MOTOR_IN2A_Pin|MOTOR_IN1A_Pin;
 800396a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800396e:	a901      	add	r1, sp, #4
 8003970:	480f      	ldr	r0, [pc, #60]	; (80039b0 <HAL_TIM_MspPostInit+0x50>)
    GPIO_InitStruct.Pin = MOTOR_IN2A_Pin|MOTOR_IN1A_Pin;
 8003972:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003974:	2302      	movs	r3, #2
 8003976:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003978:	2300      	movs	r3, #0
 800397a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800397c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800397e:	2301      	movs	r3, #1
 8003980:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = MOTOR_IN1B_Pin|MOTOR_IN2B_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003982:	f7fd f945 	bl	8000c10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003986:	b007      	add	sp, #28
 8003988:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(timHandle->Instance==TIM4)
 800398c:	4a09      	ldr	r2, [pc, #36]	; (80039b4 <HAL_TIM_MspPostInit+0x54>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d1f9      	bne.n	8003986 <HAL_TIM_MspPostInit+0x26>
    GPIO_InitStruct.Pin = MOTOR_IN1B_Pin|MOTOR_IN2B_Pin;
 8003992:	f44f 5340 	mov.w	r3, #12288	; 0x3000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003996:	2200      	movs	r2, #0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003998:	a901      	add	r1, sp, #4
 800399a:	4807      	ldr	r0, [pc, #28]	; (80039b8 <HAL_TIM_MspPostInit+0x58>)
    GPIO_InitStruct.Pin = MOTOR_IN1B_Pin|MOTOR_IN2B_Pin;
 800399c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800399e:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a0:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039a2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039a4:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80039a6:	9305      	str	r3, [sp, #20]
 80039a8:	e7eb      	b.n	8003982 <HAL_TIM_MspPostInit+0x22>
 80039aa:	bf00      	nop
 80039ac:	40010000 	.word	0x40010000
 80039b0:	40021000 	.word	0x40021000
 80039b4:	40000800 	.word	0x40000800
 80039b8:	40020c00 	.word	0x40020c00

080039bc <MX_TIM1_Init>:
{
 80039bc:	b500      	push	{lr}
  htim1.Instance = TIM1;
 80039be:	4838      	ldr	r0, [pc, #224]	; (8003aa0 <MX_TIM1_Init+0xe4>)
  htim1.Init.Prescaler = 1000;
 80039c0:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
 80039c4:	4b37      	ldr	r3, [pc, #220]	; (8003aa4 <MX_TIM1_Init+0xe8>)
{
 80039c6:	b09b      	sub	sp, #108	; 0x6c
  htim1.Init.Prescaler = 1000;
 80039c8:	e880 4008 	stmia.w	r0, {r3, lr}
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039cc:	2300      	movs	r3, #0
 80039ce:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 0;
 80039d0:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039d2:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80039d4:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039d6:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80039d8:	f7fe f9f4 	bl	8001dc4 <HAL_TIM_Base_Init>
 80039dc:	b118      	cbz	r0, 80039e6 <MX_TIM1_Init+0x2a>
    _Error_Handler(__FILE__, __LINE__);
 80039de:	2145      	movs	r1, #69	; 0x45
 80039e0:	4831      	ldr	r0, [pc, #196]	; (8003aa8 <MX_TIM1_Init+0xec>)
 80039e2:	f7ff fd87 	bl	80034f4 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039e6:	a91a      	add	r1, sp, #104	; 0x68
 80039e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80039ec:	482c      	ldr	r0, [pc, #176]	; (8003aa0 <MX_TIM1_Init+0xe4>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039ee:	f841 3d58 	str.w	r3, [r1, #-88]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80039f2:	f7fe fae1 	bl	8001fb8 <HAL_TIM_ConfigClockSource>
 80039f6:	b118      	cbz	r0, 8003a00 <MX_TIM1_Init+0x44>
    _Error_Handler(__FILE__, __LINE__);
 80039f8:	214b      	movs	r1, #75	; 0x4b
 80039fa:	482b      	ldr	r0, [pc, #172]	; (8003aa8 <MX_TIM1_Init+0xec>)
 80039fc:	f7ff fd7a 	bl	80034f4 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003a00:	4827      	ldr	r0, [pc, #156]	; (8003aa0 <MX_TIM1_Init+0xe4>)
 8003a02:	f7fe f9f9 	bl	8001df8 <HAL_TIM_PWM_Init>
 8003a06:	b118      	cbz	r0, 8003a10 <MX_TIM1_Init+0x54>
    _Error_Handler(__FILE__, __LINE__);
 8003a08:	2150      	movs	r1, #80	; 0x50
 8003a0a:	4827      	ldr	r0, [pc, #156]	; (8003aa8 <MX_TIM1_Init+0xec>)
 8003a0c:	f7ff fd72 	bl	80034f4 <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a10:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003a12:	a901      	add	r1, sp, #4
 8003a14:	4822      	ldr	r0, [pc, #136]	; (8003aa0 <MX_TIM1_Init+0xe4>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a16:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003a18:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a1a:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003a1c:	f7fe fbaa 	bl	8002174 <HAL_TIMEx_MasterConfigSynchronization>
 8003a20:	b118      	cbz	r0, 8003a2a <MX_TIM1_Init+0x6e>
    _Error_Handler(__FILE__, __LINE__);
 8003a22:	2158      	movs	r1, #88	; 0x58
 8003a24:	4820      	ldr	r0, [pc, #128]	; (8003aa8 <MX_TIM1_Init+0xec>)
 8003a26:	f7ff fd65 	bl	80034f4 <_Error_Handler>
  sConfigOC.Pulse = 0;
 8003a2a:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a2c:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a2e:	a908      	add	r1, sp, #32
 8003a30:	481b      	ldr	r0, [pc, #108]	; (8003aa0 <MX_TIM1_Init+0xe4>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a32:	9308      	str	r3, [sp, #32]
  sConfigOC.Pulse = 0;
 8003a34:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a36:	920a      	str	r2, [sp, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003a38:	920b      	str	r2, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a3a:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003a3c:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003a3e:	920e      	str	r2, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a40:	f7fe fc00 	bl	8002244 <HAL_TIM_PWM_ConfigChannel>
 8003a44:	b118      	cbz	r0, 8003a4e <MX_TIM1_Init+0x92>
    _Error_Handler(__FILE__, __LINE__);
 8003a46:	2164      	movs	r1, #100	; 0x64
 8003a48:	4817      	ldr	r0, [pc, #92]	; (8003aa8 <MX_TIM1_Init+0xec>)
 8003a4a:	f7ff fd53 	bl	80034f4 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003a4e:	2204      	movs	r2, #4
 8003a50:	a908      	add	r1, sp, #32
 8003a52:	4813      	ldr	r0, [pc, #76]	; (8003aa0 <MX_TIM1_Init+0xe4>)
 8003a54:	f7fe fbf6 	bl	8002244 <HAL_TIM_PWM_ConfigChannel>
 8003a58:	b118      	cbz	r0, 8003a62 <MX_TIM1_Init+0xa6>
    _Error_Handler(__FILE__, __LINE__);
 8003a5a:	2169      	movs	r1, #105	; 0x69
 8003a5c:	4812      	ldr	r0, [pc, #72]	; (8003aa8 <MX_TIM1_Init+0xec>)
 8003a5e:	f7ff fd49 	bl	80034f4 <_Error_Handler>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003a62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003a66:	2300      	movs	r3, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003a68:	a90f      	add	r1, sp, #60	; 0x3c
 8003a6a:	480d      	ldr	r0, [pc, #52]	; (8003aa0 <MX_TIM1_Init+0xe4>)
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003a6c:	9214      	str	r2, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003a6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003a72:	930f      	str	r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003a74:	9310      	str	r3, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003a76:	9311      	str	r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.DeadTime = 0;
 8003a78:	9312      	str	r3, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003a7a:	9313      	str	r3, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003a7c:	9315      	str	r3, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003a7e:	9316      	str	r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003a80:	9217      	str	r2, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003a82:	9318      	str	r3, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003a84:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003a86:	f7fe fb9b 	bl	80021c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003a8a:	b118      	cbz	r0, 8003a94 <MX_TIM1_Init+0xd8>
    _Error_Handler(__FILE__, __LINE__);
 8003a8c:	2179      	movs	r1, #121	; 0x79
 8003a8e:	4806      	ldr	r0, [pc, #24]	; (8003aa8 <MX_TIM1_Init+0xec>)
 8003a90:	f7ff fd30 	bl	80034f4 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8003a94:	4802      	ldr	r0, [pc, #8]	; (8003aa0 <MX_TIM1_Init+0xe4>)
 8003a96:	f7ff ff63 	bl	8003960 <HAL_TIM_MspPostInit>
}
 8003a9a:	b01b      	add	sp, #108	; 0x6c
 8003a9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003aa0:	200016a8 	.word	0x200016a8
 8003aa4:	40010000 	.word	0x40010000
 8003aa8:	08006eb9 	.word	0x08006eb9

08003aac <MX_TIM4_Init>:
{
 8003aac:	b500      	push	{lr}
  htim4.Instance = TIM4;
 8003aae:	4829      	ldr	r0, [pc, #164]	; (8003b54 <MX_TIM4_Init+0xa8>)
  htim4.Init.Prescaler = 1000;
 8003ab0:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
 8003ab4:	4b28      	ldr	r3, [pc, #160]	; (8003b58 <MX_TIM4_Init+0xac>)
{
 8003ab6:	b08f      	sub	sp, #60	; 0x3c
  htim4.Init.Prescaler = 1000;
 8003ab8:	e880 4008 	stmia.w	r0, {r3, lr}
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003abc:	2300      	movs	r3, #0
 8003abe:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 0;
 8003ac0:	60c3      	str	r3, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ac2:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ac4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003ac6:	f7fe f97d 	bl	8001dc4 <HAL_TIM_Base_Init>
 8003aca:	b118      	cbz	r0, 8003ad4 <MX_TIM4_Init+0x28>
    _Error_Handler(__FILE__, __LINE__);
 8003acc:	21cc      	movs	r1, #204	; 0xcc
 8003ace:	4823      	ldr	r0, [pc, #140]	; (8003b5c <MX_TIM4_Init+0xb0>)
 8003ad0:	f7ff fd10 	bl	80034f4 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ad4:	a90e      	add	r1, sp, #56	; 0x38
 8003ad6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003ada:	481e      	ldr	r0, [pc, #120]	; (8003b54 <MX_TIM4_Init+0xa8>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003adc:	f841 3d2c 	str.w	r3, [r1, #-44]!
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003ae0:	f7fe fa6a 	bl	8001fb8 <HAL_TIM_ConfigClockSource>
 8003ae4:	b118      	cbz	r0, 8003aee <MX_TIM4_Init+0x42>
    _Error_Handler(__FILE__, __LINE__);
 8003ae6:	21d2      	movs	r1, #210	; 0xd2
 8003ae8:	481c      	ldr	r0, [pc, #112]	; (8003b5c <MX_TIM4_Init+0xb0>)
 8003aea:	f7ff fd03 	bl	80034f4 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003aee:	4819      	ldr	r0, [pc, #100]	; (8003b54 <MX_TIM4_Init+0xa8>)
 8003af0:	f7fe f982 	bl	8001df8 <HAL_TIM_PWM_Init>
 8003af4:	b118      	cbz	r0, 8003afe <MX_TIM4_Init+0x52>
    _Error_Handler(__FILE__, __LINE__);
 8003af6:	21d7      	movs	r1, #215	; 0xd7
 8003af8:	4818      	ldr	r0, [pc, #96]	; (8003b5c <MX_TIM4_Init+0xb0>)
 8003afa:	f7ff fcfb 	bl	80034f4 <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003afe:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003b00:	4669      	mov	r1, sp
 8003b02:	4814      	ldr	r0, [pc, #80]	; (8003b54 <MX_TIM4_Init+0xa8>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b04:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b06:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003b08:	f7fe fb34 	bl	8002174 <HAL_TIMEx_MasterConfigSynchronization>
 8003b0c:	b118      	cbz	r0, 8003b16 <MX_TIM4_Init+0x6a>
    _Error_Handler(__FILE__, __LINE__);
 8003b0e:	21de      	movs	r1, #222	; 0xde
 8003b10:	4812      	ldr	r0, [pc, #72]	; (8003b5c <MX_TIM4_Init+0xb0>)
 8003b12:	f7ff fcef 	bl	80034f4 <_Error_Handler>
  sConfigOC.Pulse = 0;
 8003b16:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b18:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b1a:	a907      	add	r1, sp, #28
 8003b1c:	480d      	ldr	r0, [pc, #52]	; (8003b54 <MX_TIM4_Init+0xa8>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b1e:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 8003b20:	9208      	str	r2, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b22:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b24:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b26:	f7fe fb8d 	bl	8002244 <HAL_TIM_PWM_ConfigChannel>
 8003b2a:	b118      	cbz	r0, 8003b34 <MX_TIM4_Init+0x88>
    _Error_Handler(__FILE__, __LINE__);
 8003b2c:	21e7      	movs	r1, #231	; 0xe7
 8003b2e:	480b      	ldr	r0, [pc, #44]	; (8003b5c <MX_TIM4_Init+0xb0>)
 8003b30:	f7ff fce0 	bl	80034f4 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003b34:	2204      	movs	r2, #4
 8003b36:	a907      	add	r1, sp, #28
 8003b38:	4806      	ldr	r0, [pc, #24]	; (8003b54 <MX_TIM4_Init+0xa8>)
 8003b3a:	f7fe fb83 	bl	8002244 <HAL_TIM_PWM_ConfigChannel>
 8003b3e:	b118      	cbz	r0, 8003b48 <MX_TIM4_Init+0x9c>
    _Error_Handler(__FILE__, __LINE__);
 8003b40:	21ec      	movs	r1, #236	; 0xec
 8003b42:	4806      	ldr	r0, [pc, #24]	; (8003b5c <MX_TIM4_Init+0xb0>)
 8003b44:	f7ff fcd6 	bl	80034f4 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim4);
 8003b48:	4802      	ldr	r0, [pc, #8]	; (8003b54 <MX_TIM4_Init+0xa8>)
 8003b4a:	f7ff ff09 	bl	8003960 <HAL_TIM_MspPostInit>
}
 8003b4e:	b00f      	add	sp, #60	; 0x3c
 8003b50:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b54:	20001628 	.word	0x20001628
 8003b58:	40000800 	.word	0x40000800
 8003b5c:	08006eb9 	.word	0x08006eb9

08003b60 <MX_UART5_Init>:
DMA_HandleTypeDef hdma_usart6_rx;
DMA_HandleTypeDef hdma_usart6_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8003b60:	b508      	push	{r3, lr}

  huart5.Instance = UART5;
 8003b62:	480d      	ldr	r0, [pc, #52]	; (8003b98 <MX_UART5_Init+0x38>)
  huart5.Init.BaudRate = 115200;
 8003b64:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8003b68:	4b0c      	ldr	r3, [pc, #48]	; (8003b9c <MX_UART5_Init+0x3c>)
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
  huart5.Init.StopBits = UART_STOPBITS_1;
  huart5.Init.Parity = UART_PARITY_NONE;
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003b6a:	220c      	movs	r2, #12
  huart5.Init.BaudRate = 115200;
 8003b6c:	e880 4008 	stmia.w	r0, {r3, lr}
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003b70:	2300      	movs	r3, #0
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003b72:	6142      	str	r2, [r0, #20]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003b74:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003b76:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003b78:	6103      	str	r3, [r0, #16]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b7a:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b7c:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b7e:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b80:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003b82:	f7ff f83a 	bl	8002bfa <HAL_UART_Init>
 8003b86:	b128      	cbz	r0, 8003b94 <MX_UART5_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003b88:	214e      	movs	r1, #78	; 0x4e
 8003b8a:	4805      	ldr	r0, [pc, #20]	; (8003ba0 <MX_UART5_Init+0x40>)
  }

}
 8003b8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8003b90:	f7ff bcb0 	b.w	80034f4 <_Error_Handler>
 8003b94:	bd08      	pop	{r3, pc}
 8003b96:	bf00      	nop
 8003b98:	200017f8 	.word	0x200017f8
 8003b9c:	40005000 	.word	0x40005000
 8003ba0:	08006ec6 	.word	0x08006ec6

08003ba4 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8003ba4:	b508      	push	{r3, lr}

  huart7.Instance = UART7;
 8003ba6:	480d      	ldr	r0, [pc, #52]	; (8003bdc <MX_UART7_Init+0x38>)
  huart7.Init.BaudRate = 115200;
 8003ba8:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8003bac:	4b0c      	ldr	r3, [pc, #48]	; (8003be0 <MX_UART7_Init+0x3c>)
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
  huart7.Init.StopBits = UART_STOPBITS_1;
  huart7.Init.Parity = UART_PARITY_NONE;
  huart7.Init.Mode = UART_MODE_TX_RX;
 8003bae:	220c      	movs	r2, #12
  huart7.Init.BaudRate = 115200;
 8003bb0:	e880 4008 	stmia.w	r0, {r3, lr}
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8003bb4:	2300      	movs	r3, #0
  huart7.Init.Mode = UART_MODE_TX_RX;
 8003bb6:	6142      	str	r2, [r0, #20]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8003bb8:	6083      	str	r3, [r0, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8003bba:	60c3      	str	r3, [r0, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8003bbc:	6103      	str	r3, [r0, #16]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bbe:	6183      	str	r3, [r0, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bc0:	61c3      	str	r3, [r0, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003bc2:	6203      	str	r3, [r0, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003bc4:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8003bc6:	f7ff f818 	bl	8002bfa <HAL_UART_Init>
 8003bca:	b128      	cbz	r0, 8003bd8 <MX_UART7_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003bcc:	2162      	movs	r1, #98	; 0x62
 8003bce:	4805      	ldr	r0, [pc, #20]	; (8003be4 <MX_UART7_Init+0x40>)
  }

}
 8003bd0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8003bd4:	f7ff bc8e 	b.w	80034f4 <_Error_Handler>
 8003bd8:	bd08      	pop	{r3, pc}
 8003bda:	bf00      	nop
 8003bdc:	20001788 	.word	0x20001788
 8003be0:	40007800 	.word	0x40007800
 8003be4:	08006ec6 	.word	0x08006ec6

08003be8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003be8:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8003bea:	480d      	ldr	r0, [pc, #52]	; (8003c20 <MX_USART2_UART_Init+0x38>)
  huart2.Init.BaudRate = 115200;
 8003bec:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8003bf0:	4b0c      	ldr	r3, [pc, #48]	; (8003c24 <MX_USART2_UART_Init+0x3c>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003bf2:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 115200;
 8003bf4:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003bf8:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003bfa:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003bfc:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003bfe:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003c00:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c02:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c04:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c06:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c08:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003c0a:	f7fe fff6 	bl	8002bfa <HAL_UART_Init>
 8003c0e:	b128      	cbz	r0, 8003c1c <MX_USART2_UART_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003c10:	2177      	movs	r1, #119	; 0x77
 8003c12:	4805      	ldr	r0, [pc, #20]	; (8003c28 <MX_USART2_UART_Init+0x40>)
  }

}
 8003c14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8003c18:	f7ff bc6c 	b.w	80034f4 <_Error_Handler>
 8003c1c:	bd08      	pop	{r3, pc}
 8003c1e:	bf00      	nop
 8003c20:	200018c8 	.word	0x200018c8
 8003c24:	40004400 	.word	0x40004400
 8003c28:	08006ec6 	.word	0x08006ec6

08003c2c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003c2c:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 8003c2e:	480d      	ldr	r0, [pc, #52]	; (8003c64 <MX_USART3_UART_Init+0x38>)
  huart3.Init.BaudRate = 115200;
 8003c30:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8003c34:	4b0c      	ldr	r3, [pc, #48]	; (8003c68 <MX_USART3_UART_Init+0x3c>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003c36:	220c      	movs	r2, #12
  huart3.Init.BaudRate = 115200;
 8003c38:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003c3c:	2300      	movs	r3, #0
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003c3e:	6142      	str	r2, [r0, #20]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003c40:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003c42:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003c44:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c46:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c48:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c4a:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c4c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003c4e:	f7fe ffd4 	bl	8002bfa <HAL_UART_Init>
 8003c52:	b128      	cbz	r0, 8003c60 <MX_USART3_UART_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003c54:	218c      	movs	r1, #140	; 0x8c
 8003c56:	4805      	ldr	r0, [pc, #20]	; (8003c6c <MX_USART3_UART_Init+0x40>)
  }

}
 8003c58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8003c5c:	f7ff bc4a 	b.w	80034f4 <_Error_Handler>
 8003c60:	bd08      	pop	{r3, pc}
 8003c62:	bf00      	nop
 8003c64:	200011dc 	.word	0x200011dc
 8003c68:	40004800 	.word	0x40004800
 8003c6c:	08006ec6 	.word	0x08006ec6

08003c70 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003c70:	b508      	push	{r3, lr}

  huart6.Instance = USART6;
 8003c72:	480d      	ldr	r0, [pc, #52]	; (8003ca8 <MX_USART6_UART_Init+0x38>)
  huart6.Init.BaudRate = 115200;
 8003c74:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8003c78:	4b0c      	ldr	r3, [pc, #48]	; (8003cac <MX_USART6_UART_Init+0x3c>)
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
  huart6.Init.StopBits = UART_STOPBITS_1;
  huart6.Init.Parity = UART_PARITY_NONE;
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003c7a:	220c      	movs	r2, #12
  huart6.Init.BaudRate = 115200;
 8003c7c:	e880 4008 	stmia.w	r0, {r3, lr}
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003c80:	2300      	movs	r3, #0
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003c82:	6142      	str	r2, [r0, #20]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003c84:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003c86:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003c88:	6103      	str	r3, [r0, #16]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c8a:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c8c:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c8e:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c90:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003c92:	f7fe ffb2 	bl	8002bfa <HAL_UART_Init>
 8003c96:	b128      	cbz	r0, 8003ca4 <MX_USART6_UART_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003c98:	21a1      	movs	r1, #161	; 0xa1
 8003c9a:	4805      	ldr	r0, [pc, #20]	; (8003cb0 <MX_USART6_UART_Init+0x40>)
  }

}
 8003c9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8003ca0:	f7ff bc28 	b.w	80034f4 <_Error_Handler>
 8003ca4:	bd08      	pop	{r3, pc}
 8003ca6:	bf00      	nop
 8003ca8:	20000204 	.word	0x20000204
 8003cac:	40011400 	.word	0x40011400
 8003cb0:	08006ec6 	.word	0x08006ec6

08003cb4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==UART5)
 8003cb4:	6803      	ldr	r3, [r0, #0]
 8003cb6:	4a7e      	ldr	r2, [pc, #504]	; (8003eb0 <HAL_UART_MspInit+0x1fc>)
 8003cb8:	4293      	cmp	r3, r2
{
 8003cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cbe:	4605      	mov	r5, r0
 8003cc0:	b08a      	sub	sp, #40	; 0x28
  if(uartHandle->Instance==UART5)
 8003cc2:	d126      	bne.n	8003d12 <HAL_UART_MspInit+0x5e>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003cc4:	4b7b      	ldr	r3, [pc, #492]	; (8003eb4 <HAL_UART_MspInit+0x200>)
  
    /**UART5 GPIO Configuration    
    PB12     ------> UART5_RX
    PC12     ------> UART5_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003cc6:	f44f 5880 	mov.w	r8, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cca:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ccc:	2600      	movs	r6, #0
    __HAL_RCC_UART5_CLK_ENABLE();
 8003cce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cd0:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003cd2:	2408      	movs	r4, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cd4:	a905      	add	r1, sp, #20
    __HAL_RCC_UART5_CLK_ENABLE();
 8003cd6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cda:	4877      	ldr	r0, [pc, #476]	; (8003eb8 <HAL_UART_MspInit+0x204>)
    __HAL_RCC_UART5_CLK_ENABLE();
 8003cdc:	641a      	str	r2, [r3, #64]	; 0x40
 8003cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003ce0:	f8cd 8014 	str.w	r8, [sp, #20]
    __HAL_RCC_UART5_CLK_ENABLE();
 8003ce4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ce8:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cea:	9607      	str	r6, [sp, #28]
    __HAL_RCC_UART5_CLK_ENABLE();
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cf0:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003cf2:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cf4:	f7fc ff8c 	bl	8000c10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cf8:	a905      	add	r1, sp, #20
 8003cfa:	4870      	ldr	r0, [pc, #448]	; (8003ebc <HAL_UART_MspInit+0x208>)
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003cfc:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d00:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d02:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d04:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003d06:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003d08:	f7fc ff82 	bl	8000c10 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003d0c:	b00a      	add	sp, #40	; 0x28
 8003d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(uartHandle->Instance==UART7)
 8003d12:	4a6b      	ldr	r2, [pc, #428]	; (8003ec0 <HAL_UART_MspInit+0x20c>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d116      	bne.n	8003d46 <HAL_UART_MspInit+0x92>
    __HAL_RCC_UART7_CLK_ENABLE();
 8003d18:	4b66      	ldr	r3, [pc, #408]	; (8003eb4 <HAL_UART_MspInit+0x200>)
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003d1a:	a905      	add	r1, sp, #20
 8003d1c:	4869      	ldr	r0, [pc, #420]	; (8003ec4 <HAL_UART_MspInit+0x210>)
    __HAL_RCC_UART7_CLK_ENABLE();
 8003d1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d20:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003d24:	641a      	str	r2, [r3, #64]	; 0x40
 8003d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d28:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003d2c:	9301      	str	r3, [sp, #4]
 8003d2e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d30:	23c0      	movs	r3, #192	; 0xc0
 8003d32:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d34:	2302      	movs	r3, #2
 8003d36:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8003d40:	2308      	movs	r3, #8
 8003d42:	9309      	str	r3, [sp, #36]	; 0x24
 8003d44:	e7e0      	b.n	8003d08 <HAL_UART_MspInit+0x54>
  else if(uartHandle->Instance==USART2)
 8003d46:	4a60      	ldr	r2, [pc, #384]	; (8003ec8 <HAL_UART_MspInit+0x214>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d157      	bne.n	8003dfc <HAL_UART_MspInit+0x148>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003d4c:	4b59      	ldr	r3, [pc, #356]	; (8003eb4 <HAL_UART_MspInit+0x200>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d4e:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d50:	485e      	ldr	r0, [pc, #376]	; (8003ecc <HAL_UART_MspInit+0x218>)
 8003d52:	a905      	add	r1, sp, #20
    __HAL_RCC_USART2_CLK_ENABLE();
 8003d54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003d56:	4c5e      	ldr	r4, [pc, #376]	; (8003ed0 <HAL_UART_MspInit+0x21c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003d58:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003d5c:	641a      	str	r2, [r3, #64]	; 0x40
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d60:	9607      	str	r6, [sp, #28]
    __HAL_RCC_USART2_CLK_ENABLE();
 8003d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d66:	9302      	str	r3, [sp, #8]
 8003d68:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003d6a:	2360      	movs	r3, #96	; 0x60
 8003d6c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d6e:	2302      	movs	r3, #2
 8003d70:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d72:	2303      	movs	r3, #3
 8003d74:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003d76:	2307      	movs	r3, #7
 8003d78:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d7a:	f7fc ff49 	bl	8000c10 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003d7e:	4855      	ldr	r0, [pc, #340]	; (8003ed4 <HAL_UART_MspInit+0x220>)
 8003d80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d84:	60a6      	str	r6, [r4, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d86:	60e6      	str	r6, [r4, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d88:	6166      	str	r6, [r4, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d8a:	61a6      	str	r6, [r4, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003d8c:	61e6      	str	r6, [r4, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003d8e:	6226      	str	r6, [r4, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d90:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003d92:	e884 0009 	stmia.w	r4, {r0, r3}
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d96:	f44f 6380 	mov.w	r3, #1024	; 0x400
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003d9a:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d9c:	6123      	str	r3, [r4, #16]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003d9e:	f7fc fd85 	bl	80008ac <HAL_DMA_Init>
 8003da2:	b120      	cbz	r0, 8003dae <HAL_UART_MspInit+0xfa>
      _Error_Handler(__FILE__, __LINE__);
 8003da4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003da8:	484b      	ldr	r0, [pc, #300]	; (8003ed8 <HAL_UART_MspInit+0x224>)
 8003daa:	f7ff fba3 	bl	80034f4 <_Error_Handler>
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003dae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003db2:	2340      	movs	r3, #64	; 0x40
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003db4:	666c      	str	r4, [r5, #100]	; 0x64
 8003db6:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003db8:	4948      	ldr	r1, [pc, #288]	; (8003edc <HAL_UART_MspInit+0x228>)
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003dba:	4c49      	ldr	r4, [pc, #292]	; (8003ee0 <HAL_UART_MspInit+0x22c>)
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003dbc:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003dc0:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003dc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003dc6:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003dc8:	60e3      	str	r3, [r4, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003dca:	6122      	str	r2, [r4, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003dcc:	6163      	str	r3, [r4, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003dce:	61a3      	str	r3, [r4, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003dd0:	61e3      	str	r3, [r4, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003dd2:	6223      	str	r3, [r4, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003dd4:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003dd6:	f7fc fd69 	bl	80008ac <HAL_DMA_Init>
 8003dda:	b120      	cbz	r0, 8003de6 <HAL_UART_MspInit+0x132>
      _Error_Handler(__FILE__, __LINE__);
 8003ddc:	f44f 7189 	mov.w	r1, #274	; 0x112
 8003de0:	483d      	ldr	r0, [pc, #244]	; (8003ed8 <HAL_UART_MspInit+0x224>)
 8003de2:	f7ff fb87 	bl	80034f4 <_Error_Handler>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003de6:	2200      	movs	r2, #0
 8003de8:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8003dea:	662c      	str	r4, [r5, #96]	; 0x60
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003dec:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8003dee:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003df0:	f7fc fc6c 	bl	80006cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003df4:	2026      	movs	r0, #38	; 0x26
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003df6:	f7fc fca1 	bl	800073c <HAL_NVIC_EnableIRQ>
}
 8003dfa:	e787      	b.n	8003d0c <HAL_UART_MspInit+0x58>
  else if(uartHandle->Instance==USART3)
 8003dfc:	4a39      	ldr	r2, [pc, #228]	; (8003ee4 <HAL_UART_MspInit+0x230>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d17a      	bne.n	8003ef8 <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003e02:	4b2c      	ldr	r3, [pc, #176]	; (8003eb4 <HAL_UART_MspInit+0x200>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e04:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e06:	4831      	ldr	r0, [pc, #196]	; (8003ecc <HAL_UART_MspInit+0x218>)
 8003e08:	a905      	add	r1, sp, #20
    __HAL_RCC_USART3_CLK_ENABLE();
 8003e0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003e0c:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003e10:	4c35      	ldr	r4, [pc, #212]	; (8003ee8 <HAL_UART_MspInit+0x234>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8003e12:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003e16:	641a      	str	r2, [r3, #64]	; 0x40
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e1a:	9607      	str	r6, [sp, #28]
    __HAL_RCC_USART3_CLK_ENABLE();
 8003e1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e20:	9303      	str	r3, [sp, #12]
 8003e22:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003e24:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003e28:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003e32:	2307      	movs	r3, #7
 8003e34:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e36:	f7fc feeb 	bl	8000c10 <HAL_GPIO_Init>
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003e3a:	4b2c      	ldr	r3, [pc, #176]	; (8003eec <HAL_UART_MspInit+0x238>)
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003e3c:	4620      	mov	r0, r4
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e3e:	60a6      	str	r6, [r4, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e40:	60e6      	str	r6, [r4, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e42:	6166      	str	r6, [r4, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e44:	61a6      	str	r6, [r4, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003e46:	61e6      	str	r6, [r4, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003e48:	6226      	str	r6, [r4, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e4a:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003e4c:	e884 0088 	stmia.w	r4, {r3, r7}
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e54:	6123      	str	r3, [r4, #16]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003e56:	f7fc fd29 	bl	80008ac <HAL_DMA_Init>
 8003e5a:	b120      	cbz	r0, 8003e66 <HAL_UART_MspInit+0x1b2>
      _Error_Handler(__FILE__, __LINE__);
 8003e5c:	f240 113f 	movw	r1, #319	; 0x13f
 8003e60:	481d      	ldr	r0, [pc, #116]	; (8003ed8 <HAL_UART_MspInit+0x224>)
 8003e62:	f7ff fb47 	bl	80034f4 <_Error_Handler>
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e66:	4822      	ldr	r0, [pc, #136]	; (8003ef0 <HAL_UART_MspInit+0x23c>)
 8003e68:	2340      	movs	r3, #64	; 0x40
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003e6a:	666c      	str	r4, [r5, #100]	; 0x64
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e6c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003e70:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003e72:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8003e76:	4c1f      	ldr	r4, [pc, #124]	; (8003ef4 <HAL_UART_MspInit+0x240>)
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e78:	e884 000b 	stmia.w	r4, {r0, r1, r3}
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e7c:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003e7e:	4620      	mov	r0, r4
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003e80:	6122      	str	r2, [r4, #16]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e82:	60e3      	str	r3, [r4, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e84:	6163      	str	r3, [r4, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e86:	61a3      	str	r3, [r4, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003e88:	61e3      	str	r3, [r4, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003e8a:	6223      	str	r3, [r4, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e8c:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003e8e:	f7fc fd0d 	bl	80008ac <HAL_DMA_Init>
 8003e92:	b120      	cbz	r0, 8003e9e <HAL_UART_MspInit+0x1ea>
      _Error_Handler(__FILE__, __LINE__);
 8003e94:	f240 1151 	movw	r1, #337	; 0x151
 8003e98:	480f      	ldr	r0, [pc, #60]	; (8003ed8 <HAL_UART_MspInit+0x224>)
 8003e9a:	f7ff fb2b 	bl	80034f4 <_Error_Handler>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	2027      	movs	r0, #39	; 0x27
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8003ea2:	662c      	str	r4, [r5, #96]	; 0x60
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003ea4:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8003ea6:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003ea8:	f7fc fc10 	bl	80006cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003eac:	2027      	movs	r0, #39	; 0x27
 8003eae:	e7a2      	b.n	8003df6 <HAL_UART_MspInit+0x142>
 8003eb0:	40005000 	.word	0x40005000
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	40020400 	.word	0x40020400
 8003ebc:	40020800 	.word	0x40020800
 8003ec0:	40007800 	.word	0x40007800
 8003ec4:	40021400 	.word	0x40021400
 8003ec8:	40004400 	.word	0x40004400
 8003ecc:	40020c00 	.word	0x40020c00
 8003ed0:	20001728 	.word	0x20001728
 8003ed4:	40026088 	.word	0x40026088
 8003ed8:	08006ec6 	.word	0x08006ec6
 8003edc:	400260a0 	.word	0x400260a0
 8003ee0:	20001868 	.word	0x20001868
 8003ee4:	40004800 	.word	0x40004800
 8003ee8:	20001320 	.word	0x20001320
 8003eec:	40026028 	.word	0x40026028
 8003ef0:	40026058 	.word	0x40026058
 8003ef4:	20001380 	.word	0x20001380
  else if(uartHandle->Instance==USART6)
 8003ef8:	4a2c      	ldr	r2, [pc, #176]	; (8003fac <HAL_UART_MspInit+0x2f8>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	f47f af06 	bne.w	8003d0c <HAL_UART_MspInit+0x58>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003f00:	4b2b      	ldr	r3, [pc, #172]	; (8003fb0 <HAL_UART_MspInit+0x2fc>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f02:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003f04:	482b      	ldr	r0, [pc, #172]	; (8003fb4 <HAL_UART_MspInit+0x300>)
 8003f06:	a905      	add	r1, sp, #20
    __HAL_RCC_USART6_CLK_ENABLE();
 8003f08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8003f0a:	4c2b      	ldr	r4, [pc, #172]	; (8003fb8 <HAL_UART_MspInit+0x304>)
    __HAL_RCC_USART6_CLK_ENABLE();
 8003f0c:	f042 0220 	orr.w	r2, r2, #32
 8003f10:	645a      	str	r2, [r3, #68]	; 0x44
 8003f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f14:	9607      	str	r6, [sp, #28]
    __HAL_RCC_USART6_CLK_ENABLE();
 8003f16:	f003 0320 	and.w	r3, r3, #32
 8003f1a:	9304      	str	r3, [sp, #16]
 8003f1c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = UART6_WIFI_RX_Pin|UART6_WIFI_TX_Pin;
 8003f1e:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8003f22:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f24:	2302      	movs	r3, #2
 8003f26:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003f2c:	2308      	movs	r3, #8
 8003f2e:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003f30:	f7fc fe6e 	bl	8000c10 <HAL_GPIO_Init>
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003f34:	4b21      	ldr	r3, [pc, #132]	; (8003fbc <HAL_UART_MspInit+0x308>)
 8003f36:	f04f 6e20 	mov.w	lr, #167772160	; 0xa000000
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003f3a:	4620      	mov	r0, r4
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f3c:	60a6      	str	r6, [r4, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f3e:	60e6      	str	r6, [r4, #12]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f40:	6166      	str	r6, [r4, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f42:	61a6      	str	r6, [r4, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8003f44:	61e6      	str	r6, [r4, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003f46:	6226      	str	r6, [r4, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f48:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003f4a:	e884 4008 	stmia.w	r4, {r3, lr}
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f52:	6123      	str	r3, [r4, #16]
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003f54:	f7fc fcaa 	bl	80008ac <HAL_DMA_Init>
 8003f58:	b120      	cbz	r0, 8003f64 <HAL_UART_MspInit+0x2b0>
      _Error_Handler(__FILE__, __LINE__);
 8003f5a:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 8003f5e:	4818      	ldr	r0, [pc, #96]	; (8003fc0 <HAL_UART_MspInit+0x30c>)
 8003f60:	f7ff fac8 	bl	80034f4 <_Error_Handler>
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f64:	4b17      	ldr	r3, [pc, #92]	; (8003fc4 <HAL_UART_MspInit+0x310>)
 8003f66:	f04f 6620 	mov.w	r6, #167772160	; 0xa000000
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8003f6a:	666c      	str	r4, [r5, #100]	; 0x64
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f6c:	2740      	movs	r7, #64	; 0x40
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8003f6e:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8003f70:	4c15      	ldr	r4, [pc, #84]	; (8003fc8 <HAL_UART_MspInit+0x314>)
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f72:	e884 00c8 	stmia.w	r4, {r3, r6, r7}
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f76:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8003f78:	4620      	mov	r0, r4
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f7a:	60e3      	str	r3, [r4, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_DISABLE;
 8003f7c:	6123      	str	r3, [r4, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f7e:	6163      	str	r3, [r4, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f80:	61a3      	str	r3, [r4, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8003f82:	61e3      	str	r3, [r4, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003f84:	6223      	str	r3, [r4, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f86:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8003f88:	f7fc fc90 	bl	80008ac <HAL_DMA_Init>
 8003f8c:	b120      	cbz	r0, 8003f98 <HAL_UART_MspInit+0x2e4>
      _Error_Handler(__FILE__, __LINE__);
 8003f8e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003f92:	480b      	ldr	r0, [pc, #44]	; (8003fc0 <HAL_UART_MspInit+0x30c>)
 8003f94:	f7ff faae 	bl	80034f4 <_Error_Handler>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003f98:	2200      	movs	r2, #0
 8003f9a:	2047      	movs	r0, #71	; 0x47
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8003f9c:	662c      	str	r4, [r5, #96]	; 0x60
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003f9e:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8003fa0:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003fa2:	f7fc fb93 	bl	80006cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003fa6:	2047      	movs	r0, #71	; 0x47
 8003fa8:	e725      	b.n	8003df6 <HAL_UART_MspInit+0x142>
 8003faa:	bf00      	nop
 8003fac:	40011400 	.word	0x40011400
 8003fb0:	40023800 	.word	0x40023800
 8003fb4:	40021800 	.word	0x40021800
 8003fb8:	20001260 	.word	0x20001260
 8003fbc:	40026428 	.word	0x40026428
 8003fc0:	08006ec6 	.word	0x08006ec6
 8003fc4:	400264a0 	.word	0x400264a0
 8003fc8:	20001440 	.word	0x20001440

08003fcc <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==UART5)
 8003fcc:	6803      	ldr	r3, [r0, #0]
 8003fce:	4a34      	ldr	r2, [pc, #208]	; (80040a0 <HAL_UART_MspDeInit+0xd4>)
 8003fd0:	4293      	cmp	r3, r2
{
 8003fd2:	b510      	push	{r4, lr}
 8003fd4:	4604      	mov	r4, r0
  if(uartHandle->Instance==UART5)
 8003fd6:	d111      	bne.n	8003ffc <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN UART5_MspDeInit 0 */

  /* USER CODE END UART5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART5_CLK_DISABLE();
 8003fd8:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
  
    /**UART5 GPIO Configuration    
    PB12     ------> UART5_RX
    PC12     ------> UART5_TX 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 8003fdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003fe0:	4830      	ldr	r0, [pc, #192]	; (80040a4 <HAL_UART_MspDeInit+0xd8>)
    __HAL_RCC_UART5_CLK_DISABLE();
 8003fe2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003fe4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003fe8:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 8003fea:	f7fc fefb 	bl	8000de4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 8003fee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ff2:	482d      	ldr	r0, [pc, #180]	; (80040a8 <HAL_UART_MspDeInit+0xdc>)
    HAL_NVIC_DisableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }
} 
 8003ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7);
 8003ff8:	f7fc bef4 	b.w	8000de4 <HAL_GPIO_DeInit>
  else if(uartHandle->Instance==UART7)
 8003ffc:	4a2b      	ldr	r2, [pc, #172]	; (80040ac <HAL_UART_MspDeInit+0xe0>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d108      	bne.n	8004014 <HAL_UART_MspDeInit+0x48>
    __HAL_RCC_UART7_CLK_DISABLE();
 8004002:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7);
 8004006:	21c0      	movs	r1, #192	; 0xc0
 8004008:	4829      	ldr	r0, [pc, #164]	; (80040b0 <HAL_UART_MspDeInit+0xe4>)
    __HAL_RCC_UART7_CLK_DISABLE();
 800400a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800400c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004010:	6413      	str	r3, [r2, #64]	; 0x40
 8004012:	e7ef      	b.n	8003ff4 <HAL_UART_MspDeInit+0x28>
  else if(uartHandle->Instance==USART2)
 8004014:	4a27      	ldr	r2, [pc, #156]	; (80040b4 <HAL_UART_MspDeInit+0xe8>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d114      	bne.n	8004044 <HAL_UART_MspDeInit+0x78>
    __HAL_RCC_USART2_CLK_DISABLE();
 800401a:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_5|GPIO_PIN_6);
 800401e:	2160      	movs	r1, #96	; 0x60
 8004020:	4825      	ldr	r0, [pc, #148]	; (80040b8 <HAL_UART_MspDeInit+0xec>)
    __HAL_RCC_USART2_CLK_DISABLE();
 8004022:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004024:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004028:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_5|GPIO_PIN_6);
 800402a:	f7fc fedb 	bl	8000de4 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 800402e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8004030:	f7fc fcba 	bl	80009a8 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8004034:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004036:	f7fc fcb7 	bl	80009a8 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800403a:	2026      	movs	r0, #38	; 0x26
} 
 800403c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8004040:	f7fc bb88 	b.w	8000754 <HAL_NVIC_DisableIRQ>
  else if(uartHandle->Instance==USART3)
 8004044:	4a1d      	ldr	r2, [pc, #116]	; (80040bc <HAL_UART_MspDeInit+0xf0>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d112      	bne.n	8004070 <HAL_UART_MspDeInit+0xa4>
    __HAL_RCC_USART3_CLK_DISABLE();
 800404a:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 800404e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004052:	4819      	ldr	r0, [pc, #100]	; (80040b8 <HAL_UART_MspDeInit+0xec>)
    __HAL_RCC_USART3_CLK_DISABLE();
 8004054:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800405a:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 800405c:	f7fc fec2 	bl	8000de4 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8004060:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8004062:	f7fc fca1 	bl	80009a8 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8004066:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004068:	f7fc fc9e 	bl	80009a8 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 800406c:	2027      	movs	r0, #39	; 0x27
 800406e:	e7e5      	b.n	800403c <HAL_UART_MspDeInit+0x70>
  else if(uartHandle->Instance==USART6)
 8004070:	4a13      	ldr	r2, [pc, #76]	; (80040c0 <HAL_UART_MspDeInit+0xf4>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d112      	bne.n	800409c <HAL_UART_MspDeInit+0xd0>
    __HAL_RCC_USART6_CLK_DISABLE();
 8004076:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
    HAL_GPIO_DeInit(GPIOG, UART6_WIFI_RX_Pin|UART6_WIFI_TX_Pin);
 800407a:	f44f 4184 	mov.w	r1, #16896	; 0x4200
 800407e:	4811      	ldr	r0, [pc, #68]	; (80040c4 <HAL_UART_MspDeInit+0xf8>)
    __HAL_RCC_USART6_CLK_DISABLE();
 8004080:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8004082:	f023 0320 	bic.w	r3, r3, #32
 8004086:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOG, UART6_WIFI_RX_Pin|UART6_WIFI_TX_Pin);
 8004088:	f7fc feac 	bl	8000de4 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 800408c:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800408e:	f7fc fc8b 	bl	80009a8 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8004092:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004094:	f7fc fc88 	bl	80009a8 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8004098:	2047      	movs	r0, #71	; 0x47
 800409a:	e7cf      	b.n	800403c <HAL_UART_MspDeInit+0x70>
 800409c:	bd10      	pop	{r4, pc}
 800409e:	bf00      	nop
 80040a0:	40005000 	.word	0x40005000
 80040a4:	40020400 	.word	0x40020400
 80040a8:	40020800 	.word	0x40020800
 80040ac:	40007800 	.word	0x40007800
 80040b0:	40021400 	.word	0x40021400
 80040b4:	40004400 	.word	0x40004400
 80040b8:	40020c00 	.word	0x40020c00
 80040bc:	40004800 	.word	0x40004800
 80040c0:	40011400 	.word	0x40011400
 80040c4:	40021800 	.word	0x40021800

080040c8 <ssi_update>:

void ssi_update(float locx, float locy, float locz, float accelx,
						float accely, float accelz, float gyrox,
						float gyroy, float gyroz, float dist,
						float spd, float move, float temp, float pssr,
						float humd, char *sts) {
 80040c8:	b530      	push	{r4, r5, lr}
	char Value_Str[400];
	char AT_Rpl[400];

	uint8_t len_at, len_value;

	memset(AT_Str,'\0',400);
 80040ca:	f44f 74c8 	mov.w	r4, #400	; 0x190
						float humd, char *sts) {
 80040ce:	4605      	mov	r5, r0
	memset(AT_Str,'\0',400);
 80040d0:	2100      	movs	r1, #0
 80040d2:	4622      	mov	r2, r4
						float humd, char *sts) {
 80040d4:	ed2d 8b10 	vpush	{d8-d15}
 80040d8:	f5ad 7d67 	sub.w	sp, sp, #924	; 0x39c
 80040dc:	eef0 ea66 	vmov.f32	s29, s13
 80040e0:	eef0 ba63 	vmov.f32	s23, s7
	memset(AT_Str,'\0',400);
 80040e4:	a81e      	add	r0, sp, #120	; 0x78
						float humd, char *sts) {
 80040e6:	eef0 ca64 	vmov.f32	s25, s9
 80040ea:	eef0 da65 	vmov.f32	s27, s11
 80040ee:	eef0 aa40 	vmov.f32	s21, s0
 80040f2:	eeb0 8a60 	vmov.f32	s16, s1
 80040f6:	eeb0 ba43 	vmov.f32	s22, s6
 80040fa:	eeb0 ca44 	vmov.f32	s24, s8
 80040fe:	eeb0 da45 	vmov.f32	s26, s10
 8004102:	eeb0 ea46 	vmov.f32	s28, s12
 8004106:	eeb0 aa62 	vmov.f32	s20, s5
 800410a:	eef0 8a41 	vmov.f32	s17, s2
 800410e:	eeb0 9a61 	vmov.f32	s18, s3
 8004112:	eef0 9a42 	vmov.f32	s19, s4
 8004116:	eeb0 fa47 	vmov.f32	s30, s14
	memset(AT_Str,'\0',400);
 800411a:	f000 fa42 	bl	80045a2 <memset>
	memset(Value_Str,'\0',400);
 800411e:	4622      	mov	r2, r4
 8004120:	2100      	movs	r1, #0
 8004122:	a882      	add	r0, sp, #520	; 0x208
				locx,locy,locz,accelx,accely,accelz,gyrox,gyroy,gyroz,
				dist,spd,move,temp,pssr,humd,sts);

	len_at = sprintf(AT_Str,"AT+S.INPUTSSI=%d\r",len_value);

	HAL_UART_Transmit_DMA(&huart6, (uint8_t *) AT_Str, len_at);
 8004124:	4c2e      	ldr	r4, [pc, #184]	; (80041e0 <ssi_update+0x118>)
	memset(Value_Str,'\0',400);
 8004126:	f000 fa3c 	bl	80045a2 <memset>
	len_value = sprintf(Value_Str,
 800412a:	eeb7 7aee 	vcvt.f64.f32	d7, s29
 800412e:	eeb7 2ae9 	vcvt.f64.f32	d2, s19
 8004132:	951c      	str	r5, [sp, #112]	; 0x70
 8004134:	eeb7 1ae8 	vcvt.f64.f32	d1, s17
 8004138:	492a      	ldr	r1, [pc, #168]	; (80041e4 <ssi_update+0x11c>)
 800413a:	eeb7 facf 	vcvt.f64.f32	d15, s30
 800413e:	a882      	add	r0, sp, #520	; 0x208
 8004140:	eeb7 eace 	vcvt.f64.f32	d14, s28
 8004144:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
 8004148:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 800414c:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 8004150:	eeb7 7aed 	vcvt.f64.f32	d7, s27
 8004154:	eeb7 dacd 	vcvt.f64.f32	d13, s26
 8004158:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800415c:	eeb7 7aec 	vcvt.f64.f32	d7, s25
 8004160:	eeb7 cacc 	vcvt.f64.f32	d12, s24
 8004164:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004168:	eeb7 7aeb 	vcvt.f64.f32	d7, s23
 800416c:	eeb7 bacb 	vcvt.f64.f32	d11, s22
 8004170:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8004174:	eeb7 7aca 	vcvt.f64.f32	d7, s20
 8004178:	ed8d 2b06 	vstr	d2, [sp, #24]
 800417c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004180:	eeb7 7aea 	vcvt.f64.f32	d7, s21
 8004184:	ed8d 1b02 	vstr	d1, [sp, #8]
 8004188:	ec53 2b17 	vmov	r2, r3, d7
 800418c:	ed8d fb1a 	vstr	d15, [sp, #104]	; 0x68
 8004190:	ed8d eb16 	vstr	d14, [sp, #88]	; 0x58
 8004194:	ed8d db12 	vstr	d13, [sp, #72]	; 0x48
 8004198:	ed8d cb0e 	vstr	d12, [sp, #56]	; 0x38
 800419c:	ed8d bb0a 	vstr	d11, [sp, #40]	; 0x28
 80041a0:	ed8d 9b04 	vstr	d9, [sp, #16]
 80041a4:	ed8d 8b00 	vstr	d8, [sp]
 80041a8:	f001 f836 	bl	8005218 <siprintf>
	len_at = sprintf(AT_Str,"AT+S.INPUTSSI=%d\r",len_value);
 80041ac:	490e      	ldr	r1, [pc, #56]	; (80041e8 <ssi_update+0x120>)
 80041ae:	b2c5      	uxtb	r5, r0
 80041b0:	a81e      	add	r0, sp, #120	; 0x78
 80041b2:	462a      	mov	r2, r5
 80041b4:	f001 f830 	bl	8005218 <siprintf>
	HAL_UART_Transmit_DMA(&huart6, (uint8_t *) AT_Str, len_at);
 80041b8:	a91e      	add	r1, sp, #120	; 0x78
 80041ba:	b2c2      	uxtb	r2, r0
 80041bc:	4620      	mov	r0, r4
 80041be:	f7fe f8f1 	bl	80023a4 <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 80041c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80041c6:	f7fc fa5d 	bl	8000684 <HAL_Delay>
	HAL_UART_Transmit_DMA(&huart6, (uint8_t *) Value_Str, len_value);
 80041ca:	462a      	mov	r2, r5
 80041cc:	a982      	add	r1, sp, #520	; 0x208
 80041ce:	4620      	mov	r0, r4
 80041d0:	f7fe f8e8 	bl	80023a4 <HAL_UART_Transmit_DMA>

}
 80041d4:	f50d 7d67 	add.w	sp, sp, #924	; 0x39c
 80041d8:	ecbd 8b10 	vpop	{d8-d15}
 80041dc:	bd30      	pop	{r4, r5, pc}
 80041de:	bf00      	nop
 80041e0:	20000204 	.word	0x20000204
 80041e4:	08006ed5 	.word	0x08006ed5
 80041e8:	08006f08 	.word	0x08006f08

080041ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80041ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004224 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80041f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80041f2:	e003      	b.n	80041fc <LoopCopyDataInit>

080041f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80041f4:	4b0c      	ldr	r3, [pc, #48]	; (8004228 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80041f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80041f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80041fa:	3104      	adds	r1, #4

080041fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80041fc:	480b      	ldr	r0, [pc, #44]	; (800422c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80041fe:	4b0c      	ldr	r3, [pc, #48]	; (8004230 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004200:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004202:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004204:	d3f6      	bcc.n	80041f4 <CopyDataInit>
  ldr  r2, =_sbss
 8004206:	4a0b      	ldr	r2, [pc, #44]	; (8004234 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004208:	e002      	b.n	8004210 <LoopFillZerobss>

0800420a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800420a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800420c:	f842 3b04 	str.w	r3, [r2], #4

08004210 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004210:	4b09      	ldr	r3, [pc, #36]	; (8004238 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004212:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004214:	d3f9      	bcc.n	800420a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004216:	f7ff facd 	bl	80037b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800421a:	f000 f993 	bl	8004544 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800421e:	f7ff f863 	bl	80032e8 <main>
  bx  lr    
 8004222:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004224:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8004228:	080071f0 	.word	0x080071f0
  ldr  r0, =_sdata
 800422c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004230:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8004234:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8004238:	2000193c 	.word	0x2000193c

0800423c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800423c:	e7fe      	b.n	800423c <ADC_IRQHandler>
	...

08004240 <__errno>:
 8004240:	4b01      	ldr	r3, [pc, #4]	; (8004248 <__errno+0x8>)
 8004242:	6818      	ldr	r0, [r3, #0]
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	2000000c 	.word	0x2000000c

0800424c <__sflush_r>:
 800424c:	898a      	ldrh	r2, [r1, #12]
 800424e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004252:	4605      	mov	r5, r0
 8004254:	0710      	lsls	r0, r2, #28
 8004256:	460c      	mov	r4, r1
 8004258:	d45a      	bmi.n	8004310 <__sflush_r+0xc4>
 800425a:	684b      	ldr	r3, [r1, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	dc05      	bgt.n	800426c <__sflush_r+0x20>
 8004260:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004262:	2b00      	cmp	r3, #0
 8004264:	dc02      	bgt.n	800426c <__sflush_r+0x20>
 8004266:	2000      	movs	r0, #0
 8004268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800426c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800426e:	2e00      	cmp	r6, #0
 8004270:	d0f9      	beq.n	8004266 <__sflush_r+0x1a>
 8004272:	2300      	movs	r3, #0
 8004274:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004278:	682f      	ldr	r7, [r5, #0]
 800427a:	602b      	str	r3, [r5, #0]
 800427c:	d033      	beq.n	80042e6 <__sflush_r+0x9a>
 800427e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004280:	89a3      	ldrh	r3, [r4, #12]
 8004282:	075a      	lsls	r2, r3, #29
 8004284:	d505      	bpl.n	8004292 <__sflush_r+0x46>
 8004286:	6863      	ldr	r3, [r4, #4]
 8004288:	1ac0      	subs	r0, r0, r3
 800428a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800428c:	b10b      	cbz	r3, 8004292 <__sflush_r+0x46>
 800428e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004290:	1ac0      	subs	r0, r0, r3
 8004292:	2300      	movs	r3, #0
 8004294:	4602      	mov	r2, r0
 8004296:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004298:	6a21      	ldr	r1, [r4, #32]
 800429a:	4628      	mov	r0, r5
 800429c:	47b0      	blx	r6
 800429e:	1c43      	adds	r3, r0, #1
 80042a0:	89a3      	ldrh	r3, [r4, #12]
 80042a2:	d106      	bne.n	80042b2 <__sflush_r+0x66>
 80042a4:	6829      	ldr	r1, [r5, #0]
 80042a6:	291d      	cmp	r1, #29
 80042a8:	d84b      	bhi.n	8004342 <__sflush_r+0xf6>
 80042aa:	4a2b      	ldr	r2, [pc, #172]	; (8004358 <__sflush_r+0x10c>)
 80042ac:	40ca      	lsrs	r2, r1
 80042ae:	07d6      	lsls	r6, r2, #31
 80042b0:	d547      	bpl.n	8004342 <__sflush_r+0xf6>
 80042b2:	2200      	movs	r2, #0
 80042b4:	6062      	str	r2, [r4, #4]
 80042b6:	04d9      	lsls	r1, r3, #19
 80042b8:	6922      	ldr	r2, [r4, #16]
 80042ba:	6022      	str	r2, [r4, #0]
 80042bc:	d504      	bpl.n	80042c8 <__sflush_r+0x7c>
 80042be:	1c42      	adds	r2, r0, #1
 80042c0:	d101      	bne.n	80042c6 <__sflush_r+0x7a>
 80042c2:	682b      	ldr	r3, [r5, #0]
 80042c4:	b903      	cbnz	r3, 80042c8 <__sflush_r+0x7c>
 80042c6:	6560      	str	r0, [r4, #84]	; 0x54
 80042c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042ca:	602f      	str	r7, [r5, #0]
 80042cc:	2900      	cmp	r1, #0
 80042ce:	d0ca      	beq.n	8004266 <__sflush_r+0x1a>
 80042d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042d4:	4299      	cmp	r1, r3
 80042d6:	d002      	beq.n	80042de <__sflush_r+0x92>
 80042d8:	4628      	mov	r0, r5
 80042da:	f000 f96b 	bl	80045b4 <_free_r>
 80042de:	2000      	movs	r0, #0
 80042e0:	6360      	str	r0, [r4, #52]	; 0x34
 80042e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042e6:	6a21      	ldr	r1, [r4, #32]
 80042e8:	2301      	movs	r3, #1
 80042ea:	4628      	mov	r0, r5
 80042ec:	47b0      	blx	r6
 80042ee:	1c41      	adds	r1, r0, #1
 80042f0:	d1c6      	bne.n	8004280 <__sflush_r+0x34>
 80042f2:	682b      	ldr	r3, [r5, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d0c3      	beq.n	8004280 <__sflush_r+0x34>
 80042f8:	2b1d      	cmp	r3, #29
 80042fa:	d001      	beq.n	8004300 <__sflush_r+0xb4>
 80042fc:	2b16      	cmp	r3, #22
 80042fe:	d101      	bne.n	8004304 <__sflush_r+0xb8>
 8004300:	602f      	str	r7, [r5, #0]
 8004302:	e7b0      	b.n	8004266 <__sflush_r+0x1a>
 8004304:	89a3      	ldrh	r3, [r4, #12]
 8004306:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800430a:	81a3      	strh	r3, [r4, #12]
 800430c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004310:	690f      	ldr	r7, [r1, #16]
 8004312:	2f00      	cmp	r7, #0
 8004314:	d0a7      	beq.n	8004266 <__sflush_r+0x1a>
 8004316:	0793      	lsls	r3, r2, #30
 8004318:	680e      	ldr	r6, [r1, #0]
 800431a:	bf08      	it	eq
 800431c:	694b      	ldreq	r3, [r1, #20]
 800431e:	600f      	str	r7, [r1, #0]
 8004320:	bf18      	it	ne
 8004322:	2300      	movne	r3, #0
 8004324:	eba6 0807 	sub.w	r8, r6, r7
 8004328:	608b      	str	r3, [r1, #8]
 800432a:	f1b8 0f00 	cmp.w	r8, #0
 800432e:	dd9a      	ble.n	8004266 <__sflush_r+0x1a>
 8004330:	4643      	mov	r3, r8
 8004332:	463a      	mov	r2, r7
 8004334:	6a21      	ldr	r1, [r4, #32]
 8004336:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004338:	4628      	mov	r0, r5
 800433a:	47b0      	blx	r6
 800433c:	2800      	cmp	r0, #0
 800433e:	dc07      	bgt.n	8004350 <__sflush_r+0x104>
 8004340:	89a3      	ldrh	r3, [r4, #12]
 8004342:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004346:	81a3      	strh	r3, [r4, #12]
 8004348:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800434c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004350:	4407      	add	r7, r0
 8004352:	eba8 0800 	sub.w	r8, r8, r0
 8004356:	e7e8      	b.n	800432a <__sflush_r+0xde>
 8004358:	20400001 	.word	0x20400001

0800435c <_fflush_r>:
 800435c:	b538      	push	{r3, r4, r5, lr}
 800435e:	690b      	ldr	r3, [r1, #16]
 8004360:	4605      	mov	r5, r0
 8004362:	460c      	mov	r4, r1
 8004364:	b1db      	cbz	r3, 800439e <_fflush_r+0x42>
 8004366:	b118      	cbz	r0, 8004370 <_fflush_r+0x14>
 8004368:	6983      	ldr	r3, [r0, #24]
 800436a:	b90b      	cbnz	r3, 8004370 <_fflush_r+0x14>
 800436c:	f000 f860 	bl	8004430 <__sinit>
 8004370:	4b0c      	ldr	r3, [pc, #48]	; (80043a4 <_fflush_r+0x48>)
 8004372:	429c      	cmp	r4, r3
 8004374:	d109      	bne.n	800438a <_fflush_r+0x2e>
 8004376:	686c      	ldr	r4, [r5, #4]
 8004378:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800437c:	b17b      	cbz	r3, 800439e <_fflush_r+0x42>
 800437e:	4621      	mov	r1, r4
 8004380:	4628      	mov	r0, r5
 8004382:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004386:	f7ff bf61 	b.w	800424c <__sflush_r>
 800438a:	4b07      	ldr	r3, [pc, #28]	; (80043a8 <_fflush_r+0x4c>)
 800438c:	429c      	cmp	r4, r3
 800438e:	d101      	bne.n	8004394 <_fflush_r+0x38>
 8004390:	68ac      	ldr	r4, [r5, #8]
 8004392:	e7f1      	b.n	8004378 <_fflush_r+0x1c>
 8004394:	4b05      	ldr	r3, [pc, #20]	; (80043ac <_fflush_r+0x50>)
 8004396:	429c      	cmp	r4, r3
 8004398:	bf08      	it	eq
 800439a:	68ec      	ldreq	r4, [r5, #12]
 800439c:	e7ec      	b.n	8004378 <_fflush_r+0x1c>
 800439e:	2000      	movs	r0, #0
 80043a0:	bd38      	pop	{r3, r4, r5, pc}
 80043a2:	bf00      	nop
 80043a4:	08006f3c 	.word	0x08006f3c
 80043a8:	08006f5c 	.word	0x08006f5c
 80043ac:	08006f1c 	.word	0x08006f1c

080043b0 <_cleanup_r>:
 80043b0:	4901      	ldr	r1, [pc, #4]	; (80043b8 <_cleanup_r+0x8>)
 80043b2:	f000 b8a9 	b.w	8004508 <_fwalk_reent>
 80043b6:	bf00      	nop
 80043b8:	0800435d 	.word	0x0800435d

080043bc <std.isra.0>:
 80043bc:	2300      	movs	r3, #0
 80043be:	b510      	push	{r4, lr}
 80043c0:	4604      	mov	r4, r0
 80043c2:	6003      	str	r3, [r0, #0]
 80043c4:	6043      	str	r3, [r0, #4]
 80043c6:	6083      	str	r3, [r0, #8]
 80043c8:	8181      	strh	r1, [r0, #12]
 80043ca:	6643      	str	r3, [r0, #100]	; 0x64
 80043cc:	81c2      	strh	r2, [r0, #14]
 80043ce:	6103      	str	r3, [r0, #16]
 80043d0:	6143      	str	r3, [r0, #20]
 80043d2:	6183      	str	r3, [r0, #24]
 80043d4:	4619      	mov	r1, r3
 80043d6:	2208      	movs	r2, #8
 80043d8:	305c      	adds	r0, #92	; 0x5c
 80043da:	f000 f8e2 	bl	80045a2 <memset>
 80043de:	4b05      	ldr	r3, [pc, #20]	; (80043f4 <std.isra.0+0x38>)
 80043e0:	6263      	str	r3, [r4, #36]	; 0x24
 80043e2:	4b05      	ldr	r3, [pc, #20]	; (80043f8 <std.isra.0+0x3c>)
 80043e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80043e6:	4b05      	ldr	r3, [pc, #20]	; (80043fc <std.isra.0+0x40>)
 80043e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80043ea:	4b05      	ldr	r3, [pc, #20]	; (8004400 <std.isra.0+0x44>)
 80043ec:	6224      	str	r4, [r4, #32]
 80043ee:	6323      	str	r3, [r4, #48]	; 0x30
 80043f0:	bd10      	pop	{r4, pc}
 80043f2:	bf00      	nop
 80043f4:	08005261 	.word	0x08005261
 80043f8:	08005283 	.word	0x08005283
 80043fc:	080052bb 	.word	0x080052bb
 8004400:	080052df 	.word	0x080052df

08004404 <__sfmoreglue>:
 8004404:	b570      	push	{r4, r5, r6, lr}
 8004406:	1e4a      	subs	r2, r1, #1
 8004408:	2568      	movs	r5, #104	; 0x68
 800440a:	4355      	muls	r5, r2
 800440c:	460e      	mov	r6, r1
 800440e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004412:	f000 f91d 	bl	8004650 <_malloc_r>
 8004416:	4604      	mov	r4, r0
 8004418:	b140      	cbz	r0, 800442c <__sfmoreglue+0x28>
 800441a:	2100      	movs	r1, #0
 800441c:	e880 0042 	stmia.w	r0, {r1, r6}
 8004420:	300c      	adds	r0, #12
 8004422:	60a0      	str	r0, [r4, #8]
 8004424:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004428:	f000 f8bb 	bl	80045a2 <memset>
 800442c:	4620      	mov	r0, r4
 800442e:	bd70      	pop	{r4, r5, r6, pc}

08004430 <__sinit>:
 8004430:	6983      	ldr	r3, [r0, #24]
 8004432:	b510      	push	{r4, lr}
 8004434:	4604      	mov	r4, r0
 8004436:	bb33      	cbnz	r3, 8004486 <__sinit+0x56>
 8004438:	6483      	str	r3, [r0, #72]	; 0x48
 800443a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800443c:	6503      	str	r3, [r0, #80]	; 0x50
 800443e:	4b12      	ldr	r3, [pc, #72]	; (8004488 <__sinit+0x58>)
 8004440:	4a12      	ldr	r2, [pc, #72]	; (800448c <__sinit+0x5c>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6282      	str	r2, [r0, #40]	; 0x28
 8004446:	4298      	cmp	r0, r3
 8004448:	bf04      	itt	eq
 800444a:	2301      	moveq	r3, #1
 800444c:	6183      	streq	r3, [r0, #24]
 800444e:	f000 f81f 	bl	8004490 <__sfp>
 8004452:	6060      	str	r0, [r4, #4]
 8004454:	4620      	mov	r0, r4
 8004456:	f000 f81b 	bl	8004490 <__sfp>
 800445a:	60a0      	str	r0, [r4, #8]
 800445c:	4620      	mov	r0, r4
 800445e:	f000 f817 	bl	8004490 <__sfp>
 8004462:	2200      	movs	r2, #0
 8004464:	60e0      	str	r0, [r4, #12]
 8004466:	2104      	movs	r1, #4
 8004468:	6860      	ldr	r0, [r4, #4]
 800446a:	f7ff ffa7 	bl	80043bc <std.isra.0>
 800446e:	2201      	movs	r2, #1
 8004470:	2109      	movs	r1, #9
 8004472:	68a0      	ldr	r0, [r4, #8]
 8004474:	f7ff ffa2 	bl	80043bc <std.isra.0>
 8004478:	2202      	movs	r2, #2
 800447a:	2112      	movs	r1, #18
 800447c:	68e0      	ldr	r0, [r4, #12]
 800447e:	f7ff ff9d 	bl	80043bc <std.isra.0>
 8004482:	2301      	movs	r3, #1
 8004484:	61a3      	str	r3, [r4, #24]
 8004486:	bd10      	pop	{r4, pc}
 8004488:	08006f7c 	.word	0x08006f7c
 800448c:	080043b1 	.word	0x080043b1

08004490 <__sfp>:
 8004490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004492:	4b1c      	ldr	r3, [pc, #112]	; (8004504 <__sfp+0x74>)
 8004494:	681e      	ldr	r6, [r3, #0]
 8004496:	69b3      	ldr	r3, [r6, #24]
 8004498:	4607      	mov	r7, r0
 800449a:	b913      	cbnz	r3, 80044a2 <__sfp+0x12>
 800449c:	4630      	mov	r0, r6
 800449e:	f7ff ffc7 	bl	8004430 <__sinit>
 80044a2:	3648      	adds	r6, #72	; 0x48
 80044a4:	68b4      	ldr	r4, [r6, #8]
 80044a6:	6873      	ldr	r3, [r6, #4]
 80044a8:	3b01      	subs	r3, #1
 80044aa:	d503      	bpl.n	80044b4 <__sfp+0x24>
 80044ac:	6833      	ldr	r3, [r6, #0]
 80044ae:	b133      	cbz	r3, 80044be <__sfp+0x2e>
 80044b0:	6836      	ldr	r6, [r6, #0]
 80044b2:	e7f7      	b.n	80044a4 <__sfp+0x14>
 80044b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80044b8:	b16d      	cbz	r5, 80044d6 <__sfp+0x46>
 80044ba:	3468      	adds	r4, #104	; 0x68
 80044bc:	e7f4      	b.n	80044a8 <__sfp+0x18>
 80044be:	2104      	movs	r1, #4
 80044c0:	4638      	mov	r0, r7
 80044c2:	f7ff ff9f 	bl	8004404 <__sfmoreglue>
 80044c6:	6030      	str	r0, [r6, #0]
 80044c8:	2800      	cmp	r0, #0
 80044ca:	d1f1      	bne.n	80044b0 <__sfp+0x20>
 80044cc:	230c      	movs	r3, #12
 80044ce:	603b      	str	r3, [r7, #0]
 80044d0:	4604      	mov	r4, r0
 80044d2:	4620      	mov	r0, r4
 80044d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044da:	81e3      	strh	r3, [r4, #14]
 80044dc:	2301      	movs	r3, #1
 80044de:	81a3      	strh	r3, [r4, #12]
 80044e0:	6665      	str	r5, [r4, #100]	; 0x64
 80044e2:	6025      	str	r5, [r4, #0]
 80044e4:	60a5      	str	r5, [r4, #8]
 80044e6:	6065      	str	r5, [r4, #4]
 80044e8:	6125      	str	r5, [r4, #16]
 80044ea:	6165      	str	r5, [r4, #20]
 80044ec:	61a5      	str	r5, [r4, #24]
 80044ee:	2208      	movs	r2, #8
 80044f0:	4629      	mov	r1, r5
 80044f2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80044f6:	f000 f854 	bl	80045a2 <memset>
 80044fa:	6365      	str	r5, [r4, #52]	; 0x34
 80044fc:	63a5      	str	r5, [r4, #56]	; 0x38
 80044fe:	64a5      	str	r5, [r4, #72]	; 0x48
 8004500:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004502:	e7e6      	b.n	80044d2 <__sfp+0x42>
 8004504:	08006f7c 	.word	0x08006f7c

08004508 <_fwalk_reent>:
 8004508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800450c:	4680      	mov	r8, r0
 800450e:	4689      	mov	r9, r1
 8004510:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004514:	2600      	movs	r6, #0
 8004516:	b914      	cbnz	r4, 800451e <_fwalk_reent+0x16>
 8004518:	4630      	mov	r0, r6
 800451a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800451e:	68a5      	ldr	r5, [r4, #8]
 8004520:	6867      	ldr	r7, [r4, #4]
 8004522:	3f01      	subs	r7, #1
 8004524:	d501      	bpl.n	800452a <_fwalk_reent+0x22>
 8004526:	6824      	ldr	r4, [r4, #0]
 8004528:	e7f5      	b.n	8004516 <_fwalk_reent+0xe>
 800452a:	89ab      	ldrh	r3, [r5, #12]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d907      	bls.n	8004540 <_fwalk_reent+0x38>
 8004530:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004534:	3301      	adds	r3, #1
 8004536:	d003      	beq.n	8004540 <_fwalk_reent+0x38>
 8004538:	4629      	mov	r1, r5
 800453a:	4640      	mov	r0, r8
 800453c:	47c8      	blx	r9
 800453e:	4306      	orrs	r6, r0
 8004540:	3568      	adds	r5, #104	; 0x68
 8004542:	e7ee      	b.n	8004522 <_fwalk_reent+0x1a>

08004544 <__libc_init_array>:
 8004544:	b570      	push	{r4, r5, r6, lr}
 8004546:	4e0d      	ldr	r6, [pc, #52]	; (800457c <__libc_init_array+0x38>)
 8004548:	4c0d      	ldr	r4, [pc, #52]	; (8004580 <__libc_init_array+0x3c>)
 800454a:	1ba4      	subs	r4, r4, r6
 800454c:	10a4      	asrs	r4, r4, #2
 800454e:	2500      	movs	r5, #0
 8004550:	42a5      	cmp	r5, r4
 8004552:	d109      	bne.n	8004568 <__libc_init_array+0x24>
 8004554:	4e0b      	ldr	r6, [pc, #44]	; (8004584 <__libc_init_array+0x40>)
 8004556:	4c0c      	ldr	r4, [pc, #48]	; (8004588 <__libc_init_array+0x44>)
 8004558:	f002 fc44 	bl	8006de4 <_init>
 800455c:	1ba4      	subs	r4, r4, r6
 800455e:	10a4      	asrs	r4, r4, #2
 8004560:	2500      	movs	r5, #0
 8004562:	42a5      	cmp	r5, r4
 8004564:	d105      	bne.n	8004572 <__libc_init_array+0x2e>
 8004566:	bd70      	pop	{r4, r5, r6, pc}
 8004568:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800456c:	4798      	blx	r3
 800456e:	3501      	adds	r5, #1
 8004570:	e7ee      	b.n	8004550 <__libc_init_array+0xc>
 8004572:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004576:	4798      	blx	r3
 8004578:	3501      	adds	r5, #1
 800457a:	e7f2      	b.n	8004562 <__libc_init_array+0x1e>
 800457c:	080071e8 	.word	0x080071e8
 8004580:	080071e8 	.word	0x080071e8
 8004584:	080071e8 	.word	0x080071e8
 8004588:	080071ec 	.word	0x080071ec

0800458c <memcpy>:
 800458c:	b510      	push	{r4, lr}
 800458e:	1e43      	subs	r3, r0, #1
 8004590:	440a      	add	r2, r1
 8004592:	4291      	cmp	r1, r2
 8004594:	d100      	bne.n	8004598 <memcpy+0xc>
 8004596:	bd10      	pop	{r4, pc}
 8004598:	f811 4b01 	ldrb.w	r4, [r1], #1
 800459c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045a0:	e7f7      	b.n	8004592 <memcpy+0x6>

080045a2 <memset>:
 80045a2:	4402      	add	r2, r0
 80045a4:	4603      	mov	r3, r0
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d100      	bne.n	80045ac <memset+0xa>
 80045aa:	4770      	bx	lr
 80045ac:	f803 1b01 	strb.w	r1, [r3], #1
 80045b0:	e7f9      	b.n	80045a6 <memset+0x4>
	...

080045b4 <_free_r>:
 80045b4:	b538      	push	{r3, r4, r5, lr}
 80045b6:	4605      	mov	r5, r0
 80045b8:	2900      	cmp	r1, #0
 80045ba:	d045      	beq.n	8004648 <_free_r+0x94>
 80045bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045c0:	1f0c      	subs	r4, r1, #4
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	bfb8      	it	lt
 80045c6:	18e4      	addlt	r4, r4, r3
 80045c8:	f001 fe10 	bl	80061ec <__malloc_lock>
 80045cc:	4a1f      	ldr	r2, [pc, #124]	; (800464c <_free_r+0x98>)
 80045ce:	6813      	ldr	r3, [r2, #0]
 80045d0:	4610      	mov	r0, r2
 80045d2:	b933      	cbnz	r3, 80045e2 <_free_r+0x2e>
 80045d4:	6063      	str	r3, [r4, #4]
 80045d6:	6014      	str	r4, [r2, #0]
 80045d8:	4628      	mov	r0, r5
 80045da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045de:	f001 be06 	b.w	80061ee <__malloc_unlock>
 80045e2:	42a3      	cmp	r3, r4
 80045e4:	d90c      	bls.n	8004600 <_free_r+0x4c>
 80045e6:	6821      	ldr	r1, [r4, #0]
 80045e8:	1862      	adds	r2, r4, r1
 80045ea:	4293      	cmp	r3, r2
 80045ec:	bf04      	itt	eq
 80045ee:	681a      	ldreq	r2, [r3, #0]
 80045f0:	685b      	ldreq	r3, [r3, #4]
 80045f2:	6063      	str	r3, [r4, #4]
 80045f4:	bf04      	itt	eq
 80045f6:	1852      	addeq	r2, r2, r1
 80045f8:	6022      	streq	r2, [r4, #0]
 80045fa:	6004      	str	r4, [r0, #0]
 80045fc:	e7ec      	b.n	80045d8 <_free_r+0x24>
 80045fe:	4613      	mov	r3, r2
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	b10a      	cbz	r2, 8004608 <_free_r+0x54>
 8004604:	42a2      	cmp	r2, r4
 8004606:	d9fa      	bls.n	80045fe <_free_r+0x4a>
 8004608:	6819      	ldr	r1, [r3, #0]
 800460a:	1858      	adds	r0, r3, r1
 800460c:	42a0      	cmp	r0, r4
 800460e:	d10b      	bne.n	8004628 <_free_r+0x74>
 8004610:	6820      	ldr	r0, [r4, #0]
 8004612:	4401      	add	r1, r0
 8004614:	1858      	adds	r0, r3, r1
 8004616:	4282      	cmp	r2, r0
 8004618:	6019      	str	r1, [r3, #0]
 800461a:	d1dd      	bne.n	80045d8 <_free_r+0x24>
 800461c:	6810      	ldr	r0, [r2, #0]
 800461e:	6852      	ldr	r2, [r2, #4]
 8004620:	605a      	str	r2, [r3, #4]
 8004622:	4401      	add	r1, r0
 8004624:	6019      	str	r1, [r3, #0]
 8004626:	e7d7      	b.n	80045d8 <_free_r+0x24>
 8004628:	d902      	bls.n	8004630 <_free_r+0x7c>
 800462a:	230c      	movs	r3, #12
 800462c:	602b      	str	r3, [r5, #0]
 800462e:	e7d3      	b.n	80045d8 <_free_r+0x24>
 8004630:	6820      	ldr	r0, [r4, #0]
 8004632:	1821      	adds	r1, r4, r0
 8004634:	428a      	cmp	r2, r1
 8004636:	bf04      	itt	eq
 8004638:	6811      	ldreq	r1, [r2, #0]
 800463a:	6852      	ldreq	r2, [r2, #4]
 800463c:	6062      	str	r2, [r4, #4]
 800463e:	bf04      	itt	eq
 8004640:	1809      	addeq	r1, r1, r0
 8004642:	6021      	streq	r1, [r4, #0]
 8004644:	605c      	str	r4, [r3, #4]
 8004646:	e7c7      	b.n	80045d8 <_free_r+0x24>
 8004648:	bd38      	pop	{r3, r4, r5, pc}
 800464a:	bf00      	nop
 800464c:	200001fc 	.word	0x200001fc

08004650 <_malloc_r>:
 8004650:	b570      	push	{r4, r5, r6, lr}
 8004652:	1ccd      	adds	r5, r1, #3
 8004654:	f025 0503 	bic.w	r5, r5, #3
 8004658:	3508      	adds	r5, #8
 800465a:	2d0c      	cmp	r5, #12
 800465c:	bf38      	it	cc
 800465e:	250c      	movcc	r5, #12
 8004660:	2d00      	cmp	r5, #0
 8004662:	4606      	mov	r6, r0
 8004664:	db01      	blt.n	800466a <_malloc_r+0x1a>
 8004666:	42a9      	cmp	r1, r5
 8004668:	d903      	bls.n	8004672 <_malloc_r+0x22>
 800466a:	230c      	movs	r3, #12
 800466c:	6033      	str	r3, [r6, #0]
 800466e:	2000      	movs	r0, #0
 8004670:	bd70      	pop	{r4, r5, r6, pc}
 8004672:	f001 fdbb 	bl	80061ec <__malloc_lock>
 8004676:	4a23      	ldr	r2, [pc, #140]	; (8004704 <_malloc_r+0xb4>)
 8004678:	6814      	ldr	r4, [r2, #0]
 800467a:	4621      	mov	r1, r4
 800467c:	b991      	cbnz	r1, 80046a4 <_malloc_r+0x54>
 800467e:	4c22      	ldr	r4, [pc, #136]	; (8004708 <_malloc_r+0xb8>)
 8004680:	6823      	ldr	r3, [r4, #0]
 8004682:	b91b      	cbnz	r3, 800468c <_malloc_r+0x3c>
 8004684:	4630      	mov	r0, r6
 8004686:	f000 fd09 	bl	800509c <_sbrk_r>
 800468a:	6020      	str	r0, [r4, #0]
 800468c:	4629      	mov	r1, r5
 800468e:	4630      	mov	r0, r6
 8004690:	f000 fd04 	bl	800509c <_sbrk_r>
 8004694:	1c43      	adds	r3, r0, #1
 8004696:	d126      	bne.n	80046e6 <_malloc_r+0x96>
 8004698:	230c      	movs	r3, #12
 800469a:	6033      	str	r3, [r6, #0]
 800469c:	4630      	mov	r0, r6
 800469e:	f001 fda6 	bl	80061ee <__malloc_unlock>
 80046a2:	e7e4      	b.n	800466e <_malloc_r+0x1e>
 80046a4:	680b      	ldr	r3, [r1, #0]
 80046a6:	1b5b      	subs	r3, r3, r5
 80046a8:	d41a      	bmi.n	80046e0 <_malloc_r+0x90>
 80046aa:	2b0b      	cmp	r3, #11
 80046ac:	d90f      	bls.n	80046ce <_malloc_r+0x7e>
 80046ae:	600b      	str	r3, [r1, #0]
 80046b0:	50cd      	str	r5, [r1, r3]
 80046b2:	18cc      	adds	r4, r1, r3
 80046b4:	4630      	mov	r0, r6
 80046b6:	f001 fd9a 	bl	80061ee <__malloc_unlock>
 80046ba:	f104 000b 	add.w	r0, r4, #11
 80046be:	1d23      	adds	r3, r4, #4
 80046c0:	f020 0007 	bic.w	r0, r0, #7
 80046c4:	1ac3      	subs	r3, r0, r3
 80046c6:	d01b      	beq.n	8004700 <_malloc_r+0xb0>
 80046c8:	425a      	negs	r2, r3
 80046ca:	50e2      	str	r2, [r4, r3]
 80046cc:	bd70      	pop	{r4, r5, r6, pc}
 80046ce:	428c      	cmp	r4, r1
 80046d0:	bf0d      	iteet	eq
 80046d2:	6863      	ldreq	r3, [r4, #4]
 80046d4:	684b      	ldrne	r3, [r1, #4]
 80046d6:	6063      	strne	r3, [r4, #4]
 80046d8:	6013      	streq	r3, [r2, #0]
 80046da:	bf18      	it	ne
 80046dc:	460c      	movne	r4, r1
 80046de:	e7e9      	b.n	80046b4 <_malloc_r+0x64>
 80046e0:	460c      	mov	r4, r1
 80046e2:	6849      	ldr	r1, [r1, #4]
 80046e4:	e7ca      	b.n	800467c <_malloc_r+0x2c>
 80046e6:	1cc4      	adds	r4, r0, #3
 80046e8:	f024 0403 	bic.w	r4, r4, #3
 80046ec:	42a0      	cmp	r0, r4
 80046ee:	d005      	beq.n	80046fc <_malloc_r+0xac>
 80046f0:	1a21      	subs	r1, r4, r0
 80046f2:	4630      	mov	r0, r6
 80046f4:	f000 fcd2 	bl	800509c <_sbrk_r>
 80046f8:	3001      	adds	r0, #1
 80046fa:	d0cd      	beq.n	8004698 <_malloc_r+0x48>
 80046fc:	6025      	str	r5, [r4, #0]
 80046fe:	e7d9      	b.n	80046b4 <_malloc_r+0x64>
 8004700:	bd70      	pop	{r4, r5, r6, pc}
 8004702:	bf00      	nop
 8004704:	200001fc 	.word	0x200001fc
 8004708:	20000200 	.word	0x20000200

0800470c <__cvt>:
 800470c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800470e:	ed2d 8b02 	vpush	{d8}
 8004712:	eeb0 8b40 	vmov.f64	d8, d0
 8004716:	b085      	sub	sp, #20
 8004718:	4617      	mov	r7, r2
 800471a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800471c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800471e:	ee18 2a90 	vmov	r2, s17
 8004722:	f025 0520 	bic.w	r5, r5, #32
 8004726:	2a00      	cmp	r2, #0
 8004728:	bfb6      	itet	lt
 800472a:	222d      	movlt	r2, #45	; 0x2d
 800472c:	2200      	movge	r2, #0
 800472e:	eeb1 8b40 	vneglt.f64	d8, d0
 8004732:	2d46      	cmp	r5, #70	; 0x46
 8004734:	460c      	mov	r4, r1
 8004736:	701a      	strb	r2, [r3, #0]
 8004738:	d004      	beq.n	8004744 <__cvt+0x38>
 800473a:	2d45      	cmp	r5, #69	; 0x45
 800473c:	d100      	bne.n	8004740 <__cvt+0x34>
 800473e:	3401      	adds	r4, #1
 8004740:	2102      	movs	r1, #2
 8004742:	e000      	b.n	8004746 <__cvt+0x3a>
 8004744:	2103      	movs	r1, #3
 8004746:	ab03      	add	r3, sp, #12
 8004748:	9301      	str	r3, [sp, #4]
 800474a:	ab02      	add	r3, sp, #8
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	4622      	mov	r2, r4
 8004750:	4633      	mov	r3, r6
 8004752:	eeb0 0b48 	vmov.f64	d0, d8
 8004756:	f000 ff3f 	bl	80055d8 <_dtoa_r>
 800475a:	2d47      	cmp	r5, #71	; 0x47
 800475c:	d101      	bne.n	8004762 <__cvt+0x56>
 800475e:	07fb      	lsls	r3, r7, #31
 8004760:	d516      	bpl.n	8004790 <__cvt+0x84>
 8004762:	2d46      	cmp	r5, #70	; 0x46
 8004764:	eb00 0304 	add.w	r3, r0, r4
 8004768:	d10c      	bne.n	8004784 <__cvt+0x78>
 800476a:	7802      	ldrb	r2, [r0, #0]
 800476c:	2a30      	cmp	r2, #48	; 0x30
 800476e:	d107      	bne.n	8004780 <__cvt+0x74>
 8004770:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004778:	bf1c      	itt	ne
 800477a:	f1c4 0401 	rsbne	r4, r4, #1
 800477e:	6034      	strne	r4, [r6, #0]
 8004780:	6832      	ldr	r2, [r6, #0]
 8004782:	4413      	add	r3, r2
 8004784:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800478c:	d10f      	bne.n	80047ae <__cvt+0xa2>
 800478e:	9303      	str	r3, [sp, #12]
 8004790:	9b03      	ldr	r3, [sp, #12]
 8004792:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004794:	1a1b      	subs	r3, r3, r0
 8004796:	6013      	str	r3, [r2, #0]
 8004798:	b005      	add	sp, #20
 800479a:	ecbd 8b02 	vpop	{d8}
 800479e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047a0:	1c54      	adds	r4, r2, #1
 80047a2:	9403      	str	r4, [sp, #12]
 80047a4:	7011      	strb	r1, [r2, #0]
 80047a6:	9a03      	ldr	r2, [sp, #12]
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d8f9      	bhi.n	80047a0 <__cvt+0x94>
 80047ac:	e7f0      	b.n	8004790 <__cvt+0x84>
 80047ae:	2130      	movs	r1, #48	; 0x30
 80047b0:	e7f9      	b.n	80047a6 <__cvt+0x9a>

080047b2 <__exponent>:
 80047b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047b4:	4603      	mov	r3, r0
 80047b6:	2900      	cmp	r1, #0
 80047b8:	bfb8      	it	lt
 80047ba:	4249      	neglt	r1, r1
 80047bc:	f803 2b02 	strb.w	r2, [r3], #2
 80047c0:	bfb4      	ite	lt
 80047c2:	222d      	movlt	r2, #45	; 0x2d
 80047c4:	222b      	movge	r2, #43	; 0x2b
 80047c6:	2909      	cmp	r1, #9
 80047c8:	7042      	strb	r2, [r0, #1]
 80047ca:	dd20      	ble.n	800480e <__exponent+0x5c>
 80047cc:	f10d 0207 	add.w	r2, sp, #7
 80047d0:	4617      	mov	r7, r2
 80047d2:	260a      	movs	r6, #10
 80047d4:	fb91 f5f6 	sdiv	r5, r1, r6
 80047d8:	fb06 1115 	mls	r1, r6, r5, r1
 80047dc:	3130      	adds	r1, #48	; 0x30
 80047de:	2d09      	cmp	r5, #9
 80047e0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80047e4:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
 80047e8:	4629      	mov	r1, r5
 80047ea:	dc09      	bgt.n	8004800 <__exponent+0x4e>
 80047ec:	3130      	adds	r1, #48	; 0x30
 80047ee:	3a02      	subs	r2, #2
 80047f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80047f4:	42ba      	cmp	r2, r7
 80047f6:	461c      	mov	r4, r3
 80047f8:	d304      	bcc.n	8004804 <__exponent+0x52>
 80047fa:	1a20      	subs	r0, r4, r0
 80047fc:	b003      	add	sp, #12
 80047fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004800:	4622      	mov	r2, r4
 8004802:	e7e7      	b.n	80047d4 <__exponent+0x22>
 8004804:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004808:	f803 1b01 	strb.w	r1, [r3], #1
 800480c:	e7f2      	b.n	80047f4 <__exponent+0x42>
 800480e:	2230      	movs	r2, #48	; 0x30
 8004810:	461c      	mov	r4, r3
 8004812:	4411      	add	r1, r2
 8004814:	f804 2b02 	strb.w	r2, [r4], #2
 8004818:	7059      	strb	r1, [r3, #1]
 800481a:	e7ee      	b.n	80047fa <__exponent+0x48>
 800481c:	0000      	movs	r0, r0
	...

08004820 <_printf_float>:
 8004820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004824:	b08d      	sub	sp, #52	; 0x34
 8004826:	460c      	mov	r4, r1
 8004828:	4616      	mov	r6, r2
 800482a:	461f      	mov	r7, r3
 800482c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004830:	4605      	mov	r5, r0
 8004832:	f001 fc3d 	bl	80060b0 <_localeconv_r>
 8004836:	f8d0 b000 	ldr.w	fp, [r0]
 800483a:	4658      	mov	r0, fp
 800483c:	f7fb fd50 	bl	80002e0 <strlen>
 8004840:	2300      	movs	r3, #0
 8004842:	930a      	str	r3, [sp, #40]	; 0x28
 8004844:	f8d8 3000 	ldr.w	r3, [r8]
 8004848:	9005      	str	r0, [sp, #20]
 800484a:	3307      	adds	r3, #7
 800484c:	f023 0307 	bic.w	r3, r3, #7
 8004850:	f103 0108 	add.w	r1, r3, #8
 8004854:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004858:	6822      	ldr	r2, [r4, #0]
 800485a:	f8c8 1000 	str.w	r1, [r8]
 800485e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004862:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8004866:	ed9f 7ba0 	vldr	d7, [pc, #640]	; 8004ae8 <_printf_float+0x2c8>
 800486a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800486e:	eeb0 6bc0 	vabs.f64	d6, d0
 8004872:	eeb4 6b47 	vcmp.f64	d6, d7
 8004876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800487a:	f340 81ef 	ble.w	8004c5c <_printf_float+0x43c>
 800487e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8004882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004886:	d502      	bpl.n	800488e <_printf_float+0x6e>
 8004888:	232d      	movs	r3, #45	; 0x2d
 800488a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800488e:	4b98      	ldr	r3, [pc, #608]	; (8004af0 <_printf_float+0x2d0>)
 8004890:	4998      	ldr	r1, [pc, #608]	; (8004af4 <_printf_float+0x2d4>)
 8004892:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004896:	bf8c      	ite	hi
 8004898:	4688      	movhi	r8, r1
 800489a:	4698      	movls	r8, r3
 800489c:	f022 0204 	bic.w	r2, r2, #4
 80048a0:	2303      	movs	r3, #3
 80048a2:	6123      	str	r3, [r4, #16]
 80048a4:	6022      	str	r2, [r4, #0]
 80048a6:	f04f 0a00 	mov.w	sl, #0
 80048aa:	9700      	str	r7, [sp, #0]
 80048ac:	4633      	mov	r3, r6
 80048ae:	aa0b      	add	r2, sp, #44	; 0x2c
 80048b0:	4621      	mov	r1, r4
 80048b2:	4628      	mov	r0, r5
 80048b4:	f000 f9e0 	bl	8004c78 <_printf_common>
 80048b8:	3001      	adds	r0, #1
 80048ba:	f040 8090 	bne.w	80049de <_printf_float+0x1be>
 80048be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048c2:	b00d      	add	sp, #52	; 0x34
 80048c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048c8:	6861      	ldr	r1, [r4, #4]
 80048ca:	1c4b      	adds	r3, r1, #1
 80048cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048d0:	a80a      	add	r0, sp, #40	; 0x28
 80048d2:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
 80048d6:	d13c      	bne.n	8004952 <_printf_float+0x132>
 80048d8:	2306      	movs	r3, #6
 80048da:	6063      	str	r3, [r4, #4]
 80048dc:	2300      	movs	r3, #0
 80048de:	9303      	str	r3, [sp, #12]
 80048e0:	9002      	str	r0, [sp, #8]
 80048e2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80048e6:	6022      	str	r2, [r4, #0]
 80048e8:	f8cd 9004 	str.w	r9, [sp, #4]
 80048ec:	f8cd e000 	str.w	lr, [sp]
 80048f0:	6861      	ldr	r1, [r4, #4]
 80048f2:	4628      	mov	r0, r5
 80048f4:	f7ff ff0a 	bl	800470c <__cvt>
 80048f8:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 80048fc:	2b47      	cmp	r3, #71	; 0x47
 80048fe:	4680      	mov	r8, r0
 8004900:	d109      	bne.n	8004916 <_printf_float+0xf6>
 8004902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004904:	1cd8      	adds	r0, r3, #3
 8004906:	db02      	blt.n	800490e <_printf_float+0xee>
 8004908:	6862      	ldr	r2, [r4, #4]
 800490a:	4293      	cmp	r3, r2
 800490c:	dd54      	ble.n	80049b8 <_printf_float+0x198>
 800490e:	f1a9 0902 	sub.w	r9, r9, #2
 8004912:	fa5f f989 	uxtb.w	r9, r9
 8004916:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800491a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800491c:	d831      	bhi.n	8004982 <_printf_float+0x162>
 800491e:	3901      	subs	r1, #1
 8004920:	464a      	mov	r2, r9
 8004922:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004926:	9109      	str	r1, [sp, #36]	; 0x24
 8004928:	f7ff ff43 	bl	80047b2 <__exponent>
 800492c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800492e:	1883      	adds	r3, r0, r2
 8004930:	2a01      	cmp	r2, #1
 8004932:	4682      	mov	sl, r0
 8004934:	6123      	str	r3, [r4, #16]
 8004936:	dc02      	bgt.n	800493e <_printf_float+0x11e>
 8004938:	6822      	ldr	r2, [r4, #0]
 800493a:	07d1      	lsls	r1, r2, #31
 800493c:	d501      	bpl.n	8004942 <_printf_float+0x122>
 800493e:	3301      	adds	r3, #1
 8004940:	6123      	str	r3, [r4, #16]
 8004942:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004946:	2b00      	cmp	r3, #0
 8004948:	d0af      	beq.n	80048aa <_printf_float+0x8a>
 800494a:	232d      	movs	r3, #45	; 0x2d
 800494c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004950:	e7ab      	b.n	80048aa <_printf_float+0x8a>
 8004952:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8004956:	d002      	beq.n	800495e <_printf_float+0x13e>
 8004958:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800495c:	d1be      	bne.n	80048dc <_printf_float+0xbc>
 800495e:	b171      	cbz	r1, 800497e <_printf_float+0x15e>
 8004960:	2300      	movs	r3, #0
 8004962:	9303      	str	r3, [sp, #12]
 8004964:	9002      	str	r0, [sp, #8]
 8004966:	6022      	str	r2, [r4, #0]
 8004968:	f8cd 9004 	str.w	r9, [sp, #4]
 800496c:	f8cd e000 	str.w	lr, [sp]
 8004970:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004974:	4628      	mov	r0, r5
 8004976:	f7ff fec9 	bl	800470c <__cvt>
 800497a:	4680      	mov	r8, r0
 800497c:	e7c1      	b.n	8004902 <_printf_float+0xe2>
 800497e:	2301      	movs	r3, #1
 8004980:	e7ab      	b.n	80048da <_printf_float+0xba>
 8004982:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004986:	d119      	bne.n	80049bc <_printf_float+0x19c>
 8004988:	2900      	cmp	r1, #0
 800498a:	6863      	ldr	r3, [r4, #4]
 800498c:	dd0c      	ble.n	80049a8 <_printf_float+0x188>
 800498e:	6121      	str	r1, [r4, #16]
 8004990:	b913      	cbnz	r3, 8004998 <_printf_float+0x178>
 8004992:	6822      	ldr	r2, [r4, #0]
 8004994:	07d2      	lsls	r2, r2, #31
 8004996:	d502      	bpl.n	800499e <_printf_float+0x17e>
 8004998:	3301      	adds	r3, #1
 800499a:	440b      	add	r3, r1
 800499c:	6123      	str	r3, [r4, #16]
 800499e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049a0:	65a3      	str	r3, [r4, #88]	; 0x58
 80049a2:	f04f 0a00 	mov.w	sl, #0
 80049a6:	e7cc      	b.n	8004942 <_printf_float+0x122>
 80049a8:	b913      	cbnz	r3, 80049b0 <_printf_float+0x190>
 80049aa:	6822      	ldr	r2, [r4, #0]
 80049ac:	07d0      	lsls	r0, r2, #31
 80049ae:	d501      	bpl.n	80049b4 <_printf_float+0x194>
 80049b0:	3302      	adds	r3, #2
 80049b2:	e7f3      	b.n	800499c <_printf_float+0x17c>
 80049b4:	2301      	movs	r3, #1
 80049b6:	e7f1      	b.n	800499c <_printf_float+0x17c>
 80049b8:	f04f 0967 	mov.w	r9, #103	; 0x67
 80049bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049c0:	4293      	cmp	r3, r2
 80049c2:	db05      	blt.n	80049d0 <_printf_float+0x1b0>
 80049c4:	6822      	ldr	r2, [r4, #0]
 80049c6:	6123      	str	r3, [r4, #16]
 80049c8:	07d1      	lsls	r1, r2, #31
 80049ca:	d5e8      	bpl.n	800499e <_printf_float+0x17e>
 80049cc:	3301      	adds	r3, #1
 80049ce:	e7e5      	b.n	800499c <_printf_float+0x17c>
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	bfd4      	ite	le
 80049d4:	f1c3 0302 	rsble	r3, r3, #2
 80049d8:	2301      	movgt	r3, #1
 80049da:	4413      	add	r3, r2
 80049dc:	e7de      	b.n	800499c <_printf_float+0x17c>
 80049de:	6823      	ldr	r3, [r4, #0]
 80049e0:	055a      	lsls	r2, r3, #21
 80049e2:	d407      	bmi.n	80049f4 <_printf_float+0x1d4>
 80049e4:	6923      	ldr	r3, [r4, #16]
 80049e6:	4642      	mov	r2, r8
 80049e8:	4631      	mov	r1, r6
 80049ea:	4628      	mov	r0, r5
 80049ec:	47b8      	blx	r7
 80049ee:	3001      	adds	r0, #1
 80049f0:	d12a      	bne.n	8004a48 <_printf_float+0x228>
 80049f2:	e764      	b.n	80048be <_printf_float+0x9e>
 80049f4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80049f8:	f240 80e5 	bls.w	8004bc6 <_printf_float+0x3a6>
 80049fc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004a00:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a08:	d13c      	bne.n	8004a84 <_printf_float+0x264>
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	4a3a      	ldr	r2, [pc, #232]	; (8004af8 <_printf_float+0x2d8>)
 8004a0e:	4631      	mov	r1, r6
 8004a10:	4628      	mov	r0, r5
 8004a12:	47b8      	blx	r7
 8004a14:	3001      	adds	r0, #1
 8004a16:	f43f af52 	beq.w	80048be <_printf_float+0x9e>
 8004a1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	db02      	blt.n	8004a28 <_printf_float+0x208>
 8004a22:	6823      	ldr	r3, [r4, #0]
 8004a24:	07d8      	lsls	r0, r3, #31
 8004a26:	d50f      	bpl.n	8004a48 <_printf_float+0x228>
 8004a28:	9b05      	ldr	r3, [sp, #20]
 8004a2a:	465a      	mov	r2, fp
 8004a2c:	4631      	mov	r1, r6
 8004a2e:	4628      	mov	r0, r5
 8004a30:	47b8      	blx	r7
 8004a32:	3001      	adds	r0, #1
 8004a34:	f43f af43 	beq.w	80048be <_printf_float+0x9e>
 8004a38:	f04f 0800 	mov.w	r8, #0
 8004a3c:	f104 091a 	add.w	r9, r4, #26
 8004a40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a42:	3b01      	subs	r3, #1
 8004a44:	4598      	cmp	r8, r3
 8004a46:	db12      	blt.n	8004a6e <_printf_float+0x24e>
 8004a48:	6823      	ldr	r3, [r4, #0]
 8004a4a:	079b      	lsls	r3, r3, #30
 8004a4c:	d509      	bpl.n	8004a62 <_printf_float+0x242>
 8004a4e:	f04f 0800 	mov.w	r8, #0
 8004a52:	f104 0919 	add.w	r9, r4, #25
 8004a56:	68e3      	ldr	r3, [r4, #12]
 8004a58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004a5a:	1a9b      	subs	r3, r3, r2
 8004a5c:	4598      	cmp	r8, r3
 8004a5e:	f2c0 80f2 	blt.w	8004c46 <_printf_float+0x426>
 8004a62:	68e0      	ldr	r0, [r4, #12]
 8004a64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a66:	4298      	cmp	r0, r3
 8004a68:	bfb8      	it	lt
 8004a6a:	4618      	movlt	r0, r3
 8004a6c:	e729      	b.n	80048c2 <_printf_float+0xa2>
 8004a6e:	2301      	movs	r3, #1
 8004a70:	464a      	mov	r2, r9
 8004a72:	4631      	mov	r1, r6
 8004a74:	4628      	mov	r0, r5
 8004a76:	47b8      	blx	r7
 8004a78:	3001      	adds	r0, #1
 8004a7a:	f43f af20 	beq.w	80048be <_printf_float+0x9e>
 8004a7e:	f108 0801 	add.w	r8, r8, #1
 8004a82:	e7dd      	b.n	8004a40 <_printf_float+0x220>
 8004a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	dc38      	bgt.n	8004afc <_printf_float+0x2dc>
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	4a1a      	ldr	r2, [pc, #104]	; (8004af8 <_printf_float+0x2d8>)
 8004a8e:	4631      	mov	r1, r6
 8004a90:	4628      	mov	r0, r5
 8004a92:	47b8      	blx	r7
 8004a94:	3001      	adds	r0, #1
 8004a96:	f43f af12 	beq.w	80048be <_printf_float+0x9e>
 8004a9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a9c:	b923      	cbnz	r3, 8004aa8 <_printf_float+0x288>
 8004a9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004aa0:	b913      	cbnz	r3, 8004aa8 <_printf_float+0x288>
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	07d9      	lsls	r1, r3, #31
 8004aa6:	d5cf      	bpl.n	8004a48 <_printf_float+0x228>
 8004aa8:	9b05      	ldr	r3, [sp, #20]
 8004aaa:	465a      	mov	r2, fp
 8004aac:	4631      	mov	r1, r6
 8004aae:	4628      	mov	r0, r5
 8004ab0:	47b8      	blx	r7
 8004ab2:	3001      	adds	r0, #1
 8004ab4:	f43f af03 	beq.w	80048be <_printf_float+0x9e>
 8004ab8:	f04f 0900 	mov.w	r9, #0
 8004abc:	f104 0a1a 	add.w	sl, r4, #26
 8004ac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ac2:	425b      	negs	r3, r3
 8004ac4:	4599      	cmp	r9, r3
 8004ac6:	db01      	blt.n	8004acc <_printf_float+0x2ac>
 8004ac8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004aca:	e78c      	b.n	80049e6 <_printf_float+0x1c6>
 8004acc:	2301      	movs	r3, #1
 8004ace:	4652      	mov	r2, sl
 8004ad0:	4631      	mov	r1, r6
 8004ad2:	4628      	mov	r0, r5
 8004ad4:	47b8      	blx	r7
 8004ad6:	3001      	adds	r0, #1
 8004ad8:	f43f aef1 	beq.w	80048be <_printf_float+0x9e>
 8004adc:	f109 0901 	add.w	r9, r9, #1
 8004ae0:	e7ee      	b.n	8004ac0 <_printf_float+0x2a0>
 8004ae2:	bf00      	nop
 8004ae4:	f3af 8000 	nop.w
 8004ae8:	ffffffff 	.word	0xffffffff
 8004aec:	7fefffff 	.word	0x7fefffff
 8004af0:	08006f80 	.word	0x08006f80
 8004af4:	08006f84 	.word	0x08006f84
 8004af8:	08006f90 	.word	0x08006f90
 8004afc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004afe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b00:	429a      	cmp	r2, r3
 8004b02:	bfa8      	it	ge
 8004b04:	461a      	movge	r2, r3
 8004b06:	2a00      	cmp	r2, #0
 8004b08:	4691      	mov	r9, r2
 8004b0a:	dc38      	bgt.n	8004b7e <_printf_float+0x35e>
 8004b0c:	f104 031a 	add.w	r3, r4, #26
 8004b10:	f04f 0a00 	mov.w	sl, #0
 8004b14:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b18:	9307      	str	r3, [sp, #28]
 8004b1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b1c:	9306      	str	r3, [sp, #24]
 8004b1e:	eba3 0309 	sub.w	r3, r3, r9
 8004b22:	459a      	cmp	sl, r3
 8004b24:	db33      	blt.n	8004b8e <_printf_float+0x36e>
 8004b26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	db3a      	blt.n	8004ba4 <_printf_float+0x384>
 8004b2e:	6823      	ldr	r3, [r4, #0]
 8004b30:	07da      	lsls	r2, r3, #31
 8004b32:	d437      	bmi.n	8004ba4 <_printf_float+0x384>
 8004b34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b36:	9a06      	ldr	r2, [sp, #24]
 8004b38:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b3a:	1a9a      	subs	r2, r3, r2
 8004b3c:	eba3 0901 	sub.w	r9, r3, r1
 8004b40:	4591      	cmp	r9, r2
 8004b42:	bfa8      	it	ge
 8004b44:	4691      	movge	r9, r2
 8004b46:	f1b9 0f00 	cmp.w	r9, #0
 8004b4a:	dc33      	bgt.n	8004bb4 <_printf_float+0x394>
 8004b4c:	f04f 0800 	mov.w	r8, #0
 8004b50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b54:	f104 0a1a 	add.w	sl, r4, #26
 8004b58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b5c:	1a9b      	subs	r3, r3, r2
 8004b5e:	eba3 0309 	sub.w	r3, r3, r9
 8004b62:	4598      	cmp	r8, r3
 8004b64:	f6bf af70 	bge.w	8004a48 <_printf_float+0x228>
 8004b68:	2301      	movs	r3, #1
 8004b6a:	4652      	mov	r2, sl
 8004b6c:	4631      	mov	r1, r6
 8004b6e:	4628      	mov	r0, r5
 8004b70:	47b8      	blx	r7
 8004b72:	3001      	adds	r0, #1
 8004b74:	f43f aea3 	beq.w	80048be <_printf_float+0x9e>
 8004b78:	f108 0801 	add.w	r8, r8, #1
 8004b7c:	e7ec      	b.n	8004b58 <_printf_float+0x338>
 8004b7e:	4613      	mov	r3, r2
 8004b80:	4631      	mov	r1, r6
 8004b82:	4642      	mov	r2, r8
 8004b84:	4628      	mov	r0, r5
 8004b86:	47b8      	blx	r7
 8004b88:	3001      	adds	r0, #1
 8004b8a:	d1bf      	bne.n	8004b0c <_printf_float+0x2ec>
 8004b8c:	e697      	b.n	80048be <_printf_float+0x9e>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	9a07      	ldr	r2, [sp, #28]
 8004b92:	4631      	mov	r1, r6
 8004b94:	4628      	mov	r0, r5
 8004b96:	47b8      	blx	r7
 8004b98:	3001      	adds	r0, #1
 8004b9a:	f43f ae90 	beq.w	80048be <_printf_float+0x9e>
 8004b9e:	f10a 0a01 	add.w	sl, sl, #1
 8004ba2:	e7ba      	b.n	8004b1a <_printf_float+0x2fa>
 8004ba4:	9b05      	ldr	r3, [sp, #20]
 8004ba6:	465a      	mov	r2, fp
 8004ba8:	4631      	mov	r1, r6
 8004baa:	4628      	mov	r0, r5
 8004bac:	47b8      	blx	r7
 8004bae:	3001      	adds	r0, #1
 8004bb0:	d1c0      	bne.n	8004b34 <_printf_float+0x314>
 8004bb2:	e684      	b.n	80048be <_printf_float+0x9e>
 8004bb4:	9a06      	ldr	r2, [sp, #24]
 8004bb6:	464b      	mov	r3, r9
 8004bb8:	4442      	add	r2, r8
 8004bba:	4631      	mov	r1, r6
 8004bbc:	4628      	mov	r0, r5
 8004bbe:	47b8      	blx	r7
 8004bc0:	3001      	adds	r0, #1
 8004bc2:	d1c3      	bne.n	8004b4c <_printf_float+0x32c>
 8004bc4:	e67b      	b.n	80048be <_printf_float+0x9e>
 8004bc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004bc8:	2a01      	cmp	r2, #1
 8004bca:	dc01      	bgt.n	8004bd0 <_printf_float+0x3b0>
 8004bcc:	07db      	lsls	r3, r3, #31
 8004bce:	d537      	bpl.n	8004c40 <_printf_float+0x420>
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	4642      	mov	r2, r8
 8004bd4:	4631      	mov	r1, r6
 8004bd6:	4628      	mov	r0, r5
 8004bd8:	47b8      	blx	r7
 8004bda:	3001      	adds	r0, #1
 8004bdc:	f43f ae6f 	beq.w	80048be <_printf_float+0x9e>
 8004be0:	9b05      	ldr	r3, [sp, #20]
 8004be2:	465a      	mov	r2, fp
 8004be4:	4631      	mov	r1, r6
 8004be6:	4628      	mov	r0, r5
 8004be8:	47b8      	blx	r7
 8004bea:	3001      	adds	r0, #1
 8004bec:	f43f ae67 	beq.w	80048be <_printf_float+0x9e>
 8004bf0:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004bf4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bfc:	d10b      	bne.n	8004c16 <_printf_float+0x3f6>
 8004bfe:	f04f 0800 	mov.w	r8, #0
 8004c02:	f104 091a 	add.w	r9, r4, #26
 8004c06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	4598      	cmp	r8, r3
 8004c0c:	db0d      	blt.n	8004c2a <_printf_float+0x40a>
 8004c0e:	4653      	mov	r3, sl
 8004c10:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004c14:	e6e8      	b.n	80049e8 <_printf_float+0x1c8>
 8004c16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c18:	f108 0201 	add.w	r2, r8, #1
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	4631      	mov	r1, r6
 8004c20:	4628      	mov	r0, r5
 8004c22:	47b8      	blx	r7
 8004c24:	3001      	adds	r0, #1
 8004c26:	d1f2      	bne.n	8004c0e <_printf_float+0x3ee>
 8004c28:	e649      	b.n	80048be <_printf_float+0x9e>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	464a      	mov	r2, r9
 8004c2e:	4631      	mov	r1, r6
 8004c30:	4628      	mov	r0, r5
 8004c32:	47b8      	blx	r7
 8004c34:	3001      	adds	r0, #1
 8004c36:	f43f ae42 	beq.w	80048be <_printf_float+0x9e>
 8004c3a:	f108 0801 	add.w	r8, r8, #1
 8004c3e:	e7e2      	b.n	8004c06 <_printf_float+0x3e6>
 8004c40:	2301      	movs	r3, #1
 8004c42:	4642      	mov	r2, r8
 8004c44:	e7eb      	b.n	8004c1e <_printf_float+0x3fe>
 8004c46:	2301      	movs	r3, #1
 8004c48:	464a      	mov	r2, r9
 8004c4a:	4631      	mov	r1, r6
 8004c4c:	4628      	mov	r0, r5
 8004c4e:	47b8      	blx	r7
 8004c50:	3001      	adds	r0, #1
 8004c52:	f43f ae34 	beq.w	80048be <_printf_float+0x9e>
 8004c56:	f108 0801 	add.w	r8, r8, #1
 8004c5a:	e6fc      	b.n	8004a56 <_printf_float+0x236>
 8004c5c:	eeb4 0b40 	vcmp.f64	d0, d0
 8004c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c64:	f5ff ae30 	bvc.w	80048c8 <_printf_float+0xa8>
 8004c68:	4b01      	ldr	r3, [pc, #4]	; (8004c70 <_printf_float+0x450>)
 8004c6a:	4902      	ldr	r1, [pc, #8]	; (8004c74 <_printf_float+0x454>)
 8004c6c:	e611      	b.n	8004892 <_printf_float+0x72>
 8004c6e:	bf00      	nop
 8004c70:	08006f88 	.word	0x08006f88
 8004c74:	08006f8c 	.word	0x08006f8c

08004c78 <_printf_common>:
 8004c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c7c:	4691      	mov	r9, r2
 8004c7e:	461f      	mov	r7, r3
 8004c80:	688a      	ldr	r2, [r1, #8]
 8004c82:	690b      	ldr	r3, [r1, #16]
 8004c84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	bfb8      	it	lt
 8004c8c:	4613      	movlt	r3, r2
 8004c8e:	f8c9 3000 	str.w	r3, [r9]
 8004c92:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c96:	4606      	mov	r6, r0
 8004c98:	460c      	mov	r4, r1
 8004c9a:	b112      	cbz	r2, 8004ca2 <_printf_common+0x2a>
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	f8c9 3000 	str.w	r3, [r9]
 8004ca2:	6823      	ldr	r3, [r4, #0]
 8004ca4:	0699      	lsls	r1, r3, #26
 8004ca6:	bf42      	ittt	mi
 8004ca8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004cac:	3302      	addmi	r3, #2
 8004cae:	f8c9 3000 	strmi.w	r3, [r9]
 8004cb2:	6825      	ldr	r5, [r4, #0]
 8004cb4:	f015 0506 	ands.w	r5, r5, #6
 8004cb8:	d107      	bne.n	8004cca <_printf_common+0x52>
 8004cba:	f104 0a19 	add.w	sl, r4, #25
 8004cbe:	68e3      	ldr	r3, [r4, #12]
 8004cc0:	f8d9 2000 	ldr.w	r2, [r9]
 8004cc4:	1a9b      	subs	r3, r3, r2
 8004cc6:	429d      	cmp	r5, r3
 8004cc8:	db29      	blt.n	8004d1e <_printf_common+0xa6>
 8004cca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004cce:	6822      	ldr	r2, [r4, #0]
 8004cd0:	3300      	adds	r3, #0
 8004cd2:	bf18      	it	ne
 8004cd4:	2301      	movne	r3, #1
 8004cd6:	0692      	lsls	r2, r2, #26
 8004cd8:	d42e      	bmi.n	8004d38 <_printf_common+0xc0>
 8004cda:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cde:	4639      	mov	r1, r7
 8004ce0:	4630      	mov	r0, r6
 8004ce2:	47c0      	blx	r8
 8004ce4:	3001      	adds	r0, #1
 8004ce6:	d021      	beq.n	8004d2c <_printf_common+0xb4>
 8004ce8:	6823      	ldr	r3, [r4, #0]
 8004cea:	68e5      	ldr	r5, [r4, #12]
 8004cec:	f8d9 2000 	ldr.w	r2, [r9]
 8004cf0:	f003 0306 	and.w	r3, r3, #6
 8004cf4:	2b04      	cmp	r3, #4
 8004cf6:	bf08      	it	eq
 8004cf8:	1aad      	subeq	r5, r5, r2
 8004cfa:	68a3      	ldr	r3, [r4, #8]
 8004cfc:	6922      	ldr	r2, [r4, #16]
 8004cfe:	bf0c      	ite	eq
 8004d00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d04:	2500      	movne	r5, #0
 8004d06:	4293      	cmp	r3, r2
 8004d08:	bfc4      	itt	gt
 8004d0a:	1a9b      	subgt	r3, r3, r2
 8004d0c:	18ed      	addgt	r5, r5, r3
 8004d0e:	f04f 0900 	mov.w	r9, #0
 8004d12:	341a      	adds	r4, #26
 8004d14:	454d      	cmp	r5, r9
 8004d16:	d11b      	bne.n	8004d50 <_printf_common+0xd8>
 8004d18:	2000      	movs	r0, #0
 8004d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d1e:	2301      	movs	r3, #1
 8004d20:	4652      	mov	r2, sl
 8004d22:	4639      	mov	r1, r7
 8004d24:	4630      	mov	r0, r6
 8004d26:	47c0      	blx	r8
 8004d28:	3001      	adds	r0, #1
 8004d2a:	d103      	bne.n	8004d34 <_printf_common+0xbc>
 8004d2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d34:	3501      	adds	r5, #1
 8004d36:	e7c2      	b.n	8004cbe <_printf_common+0x46>
 8004d38:	18e1      	adds	r1, r4, r3
 8004d3a:	1c5a      	adds	r2, r3, #1
 8004d3c:	2030      	movs	r0, #48	; 0x30
 8004d3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d42:	4422      	add	r2, r4
 8004d44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d4c:	3302      	adds	r3, #2
 8004d4e:	e7c4      	b.n	8004cda <_printf_common+0x62>
 8004d50:	2301      	movs	r3, #1
 8004d52:	4622      	mov	r2, r4
 8004d54:	4639      	mov	r1, r7
 8004d56:	4630      	mov	r0, r6
 8004d58:	47c0      	blx	r8
 8004d5a:	3001      	adds	r0, #1
 8004d5c:	d0e6      	beq.n	8004d2c <_printf_common+0xb4>
 8004d5e:	f109 0901 	add.w	r9, r9, #1
 8004d62:	e7d7      	b.n	8004d14 <_printf_common+0x9c>

08004d64 <_printf_i>:
 8004d64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d68:	4617      	mov	r7, r2
 8004d6a:	7e0a      	ldrb	r2, [r1, #24]
 8004d6c:	b085      	sub	sp, #20
 8004d6e:	2a6e      	cmp	r2, #110	; 0x6e
 8004d70:	4698      	mov	r8, r3
 8004d72:	4606      	mov	r6, r0
 8004d74:	460c      	mov	r4, r1
 8004d76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004d78:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004d7c:	f000 80bc 	beq.w	8004ef8 <_printf_i+0x194>
 8004d80:	d81a      	bhi.n	8004db8 <_printf_i+0x54>
 8004d82:	2a63      	cmp	r2, #99	; 0x63
 8004d84:	d02e      	beq.n	8004de4 <_printf_i+0x80>
 8004d86:	d80a      	bhi.n	8004d9e <_printf_i+0x3a>
 8004d88:	2a00      	cmp	r2, #0
 8004d8a:	f000 80c8 	beq.w	8004f1e <_printf_i+0x1ba>
 8004d8e:	2a58      	cmp	r2, #88	; 0x58
 8004d90:	f000 808a 	beq.w	8004ea8 <_printf_i+0x144>
 8004d94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d98:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004d9c:	e02a      	b.n	8004df4 <_printf_i+0x90>
 8004d9e:	2a64      	cmp	r2, #100	; 0x64
 8004da0:	d001      	beq.n	8004da6 <_printf_i+0x42>
 8004da2:	2a69      	cmp	r2, #105	; 0x69
 8004da4:	d1f6      	bne.n	8004d94 <_printf_i+0x30>
 8004da6:	6821      	ldr	r1, [r4, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004dae:	d023      	beq.n	8004df8 <_printf_i+0x94>
 8004db0:	1d11      	adds	r1, r2, #4
 8004db2:	6019      	str	r1, [r3, #0]
 8004db4:	6813      	ldr	r3, [r2, #0]
 8004db6:	e027      	b.n	8004e08 <_printf_i+0xa4>
 8004db8:	2a73      	cmp	r2, #115	; 0x73
 8004dba:	f000 80b4 	beq.w	8004f26 <_printf_i+0x1c2>
 8004dbe:	d808      	bhi.n	8004dd2 <_printf_i+0x6e>
 8004dc0:	2a6f      	cmp	r2, #111	; 0x6f
 8004dc2:	d02a      	beq.n	8004e1a <_printf_i+0xb6>
 8004dc4:	2a70      	cmp	r2, #112	; 0x70
 8004dc6:	d1e5      	bne.n	8004d94 <_printf_i+0x30>
 8004dc8:	680a      	ldr	r2, [r1, #0]
 8004dca:	f042 0220 	orr.w	r2, r2, #32
 8004dce:	600a      	str	r2, [r1, #0]
 8004dd0:	e003      	b.n	8004dda <_printf_i+0x76>
 8004dd2:	2a75      	cmp	r2, #117	; 0x75
 8004dd4:	d021      	beq.n	8004e1a <_printf_i+0xb6>
 8004dd6:	2a78      	cmp	r2, #120	; 0x78
 8004dd8:	d1dc      	bne.n	8004d94 <_printf_i+0x30>
 8004dda:	2278      	movs	r2, #120	; 0x78
 8004ddc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004de0:	496e      	ldr	r1, [pc, #440]	; (8004f9c <_printf_i+0x238>)
 8004de2:	e064      	b.n	8004eae <_printf_i+0x14a>
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8004dea:	1d11      	adds	r1, r2, #4
 8004dec:	6019      	str	r1, [r3, #0]
 8004dee:	6813      	ldr	r3, [r2, #0]
 8004df0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004df4:	2301      	movs	r3, #1
 8004df6:	e0a3      	b.n	8004f40 <_printf_i+0x1dc>
 8004df8:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004dfc:	f102 0104 	add.w	r1, r2, #4
 8004e00:	6019      	str	r1, [r3, #0]
 8004e02:	d0d7      	beq.n	8004db4 <_printf_i+0x50>
 8004e04:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	da03      	bge.n	8004e14 <_printf_i+0xb0>
 8004e0c:	222d      	movs	r2, #45	; 0x2d
 8004e0e:	425b      	negs	r3, r3
 8004e10:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004e14:	4962      	ldr	r1, [pc, #392]	; (8004fa0 <_printf_i+0x23c>)
 8004e16:	220a      	movs	r2, #10
 8004e18:	e017      	b.n	8004e4a <_printf_i+0xe6>
 8004e1a:	6820      	ldr	r0, [r4, #0]
 8004e1c:	6819      	ldr	r1, [r3, #0]
 8004e1e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004e22:	d003      	beq.n	8004e2c <_printf_i+0xc8>
 8004e24:	1d08      	adds	r0, r1, #4
 8004e26:	6018      	str	r0, [r3, #0]
 8004e28:	680b      	ldr	r3, [r1, #0]
 8004e2a:	e006      	b.n	8004e3a <_printf_i+0xd6>
 8004e2c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e30:	f101 0004 	add.w	r0, r1, #4
 8004e34:	6018      	str	r0, [r3, #0]
 8004e36:	d0f7      	beq.n	8004e28 <_printf_i+0xc4>
 8004e38:	880b      	ldrh	r3, [r1, #0]
 8004e3a:	4959      	ldr	r1, [pc, #356]	; (8004fa0 <_printf_i+0x23c>)
 8004e3c:	2a6f      	cmp	r2, #111	; 0x6f
 8004e3e:	bf14      	ite	ne
 8004e40:	220a      	movne	r2, #10
 8004e42:	2208      	moveq	r2, #8
 8004e44:	2000      	movs	r0, #0
 8004e46:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004e4a:	6865      	ldr	r5, [r4, #4]
 8004e4c:	60a5      	str	r5, [r4, #8]
 8004e4e:	2d00      	cmp	r5, #0
 8004e50:	f2c0 809c 	blt.w	8004f8c <_printf_i+0x228>
 8004e54:	6820      	ldr	r0, [r4, #0]
 8004e56:	f020 0004 	bic.w	r0, r0, #4
 8004e5a:	6020      	str	r0, [r4, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d13f      	bne.n	8004ee0 <_printf_i+0x17c>
 8004e60:	2d00      	cmp	r5, #0
 8004e62:	f040 8095 	bne.w	8004f90 <_printf_i+0x22c>
 8004e66:	4675      	mov	r5, lr
 8004e68:	2a08      	cmp	r2, #8
 8004e6a:	d10b      	bne.n	8004e84 <_printf_i+0x120>
 8004e6c:	6823      	ldr	r3, [r4, #0]
 8004e6e:	07da      	lsls	r2, r3, #31
 8004e70:	d508      	bpl.n	8004e84 <_printf_i+0x120>
 8004e72:	6923      	ldr	r3, [r4, #16]
 8004e74:	6862      	ldr	r2, [r4, #4]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	bfde      	ittt	le
 8004e7a:	2330      	movle	r3, #48	; 0x30
 8004e7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e80:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004e84:	ebae 0305 	sub.w	r3, lr, r5
 8004e88:	6123      	str	r3, [r4, #16]
 8004e8a:	f8cd 8000 	str.w	r8, [sp]
 8004e8e:	463b      	mov	r3, r7
 8004e90:	aa03      	add	r2, sp, #12
 8004e92:	4621      	mov	r1, r4
 8004e94:	4630      	mov	r0, r6
 8004e96:	f7ff feef 	bl	8004c78 <_printf_common>
 8004e9a:	3001      	adds	r0, #1
 8004e9c:	d155      	bne.n	8004f4a <_printf_i+0x1e6>
 8004e9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ea2:	b005      	add	sp, #20
 8004ea4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ea8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004eac:	493c      	ldr	r1, [pc, #240]	; (8004fa0 <_printf_i+0x23c>)
 8004eae:	6822      	ldr	r2, [r4, #0]
 8004eb0:	6818      	ldr	r0, [r3, #0]
 8004eb2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004eb6:	f100 0504 	add.w	r5, r0, #4
 8004eba:	601d      	str	r5, [r3, #0]
 8004ebc:	d001      	beq.n	8004ec2 <_printf_i+0x15e>
 8004ebe:	6803      	ldr	r3, [r0, #0]
 8004ec0:	e002      	b.n	8004ec8 <_printf_i+0x164>
 8004ec2:	0655      	lsls	r5, r2, #25
 8004ec4:	d5fb      	bpl.n	8004ebe <_printf_i+0x15a>
 8004ec6:	8803      	ldrh	r3, [r0, #0]
 8004ec8:	07d0      	lsls	r0, r2, #31
 8004eca:	bf44      	itt	mi
 8004ecc:	f042 0220 	orrmi.w	r2, r2, #32
 8004ed0:	6022      	strmi	r2, [r4, #0]
 8004ed2:	b91b      	cbnz	r3, 8004edc <_printf_i+0x178>
 8004ed4:	6822      	ldr	r2, [r4, #0]
 8004ed6:	f022 0220 	bic.w	r2, r2, #32
 8004eda:	6022      	str	r2, [r4, #0]
 8004edc:	2210      	movs	r2, #16
 8004ede:	e7b1      	b.n	8004e44 <_printf_i+0xe0>
 8004ee0:	4675      	mov	r5, lr
 8004ee2:	fbb3 f0f2 	udiv	r0, r3, r2
 8004ee6:	fb02 3310 	mls	r3, r2, r0, r3
 8004eea:	5ccb      	ldrb	r3, [r1, r3]
 8004eec:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2800      	cmp	r0, #0
 8004ef4:	d1f5      	bne.n	8004ee2 <_printf_i+0x17e>
 8004ef6:	e7b7      	b.n	8004e68 <_printf_i+0x104>
 8004ef8:	6808      	ldr	r0, [r1, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	6949      	ldr	r1, [r1, #20]
 8004efe:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004f02:	d004      	beq.n	8004f0e <_printf_i+0x1aa>
 8004f04:	1d10      	adds	r0, r2, #4
 8004f06:	6018      	str	r0, [r3, #0]
 8004f08:	6813      	ldr	r3, [r2, #0]
 8004f0a:	6019      	str	r1, [r3, #0]
 8004f0c:	e007      	b.n	8004f1e <_printf_i+0x1ba>
 8004f0e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004f12:	f102 0004 	add.w	r0, r2, #4
 8004f16:	6018      	str	r0, [r3, #0]
 8004f18:	6813      	ldr	r3, [r2, #0]
 8004f1a:	d0f6      	beq.n	8004f0a <_printf_i+0x1a6>
 8004f1c:	8019      	strh	r1, [r3, #0]
 8004f1e:	2300      	movs	r3, #0
 8004f20:	6123      	str	r3, [r4, #16]
 8004f22:	4675      	mov	r5, lr
 8004f24:	e7b1      	b.n	8004e8a <_printf_i+0x126>
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	1d11      	adds	r1, r2, #4
 8004f2a:	6019      	str	r1, [r3, #0]
 8004f2c:	6815      	ldr	r5, [r2, #0]
 8004f2e:	6862      	ldr	r2, [r4, #4]
 8004f30:	2100      	movs	r1, #0
 8004f32:	4628      	mov	r0, r5
 8004f34:	f7fb f984 	bl	8000240 <memchr>
 8004f38:	b108      	cbz	r0, 8004f3e <_printf_i+0x1da>
 8004f3a:	1b40      	subs	r0, r0, r5
 8004f3c:	6060      	str	r0, [r4, #4]
 8004f3e:	6863      	ldr	r3, [r4, #4]
 8004f40:	6123      	str	r3, [r4, #16]
 8004f42:	2300      	movs	r3, #0
 8004f44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f48:	e79f      	b.n	8004e8a <_printf_i+0x126>
 8004f4a:	6923      	ldr	r3, [r4, #16]
 8004f4c:	462a      	mov	r2, r5
 8004f4e:	4639      	mov	r1, r7
 8004f50:	4630      	mov	r0, r6
 8004f52:	47c0      	blx	r8
 8004f54:	3001      	adds	r0, #1
 8004f56:	d0a2      	beq.n	8004e9e <_printf_i+0x13a>
 8004f58:	6823      	ldr	r3, [r4, #0]
 8004f5a:	079b      	lsls	r3, r3, #30
 8004f5c:	d507      	bpl.n	8004f6e <_printf_i+0x20a>
 8004f5e:	2500      	movs	r5, #0
 8004f60:	f104 0919 	add.w	r9, r4, #25
 8004f64:	68e3      	ldr	r3, [r4, #12]
 8004f66:	9a03      	ldr	r2, [sp, #12]
 8004f68:	1a9b      	subs	r3, r3, r2
 8004f6a:	429d      	cmp	r5, r3
 8004f6c:	db05      	blt.n	8004f7a <_printf_i+0x216>
 8004f6e:	68e0      	ldr	r0, [r4, #12]
 8004f70:	9b03      	ldr	r3, [sp, #12]
 8004f72:	4298      	cmp	r0, r3
 8004f74:	bfb8      	it	lt
 8004f76:	4618      	movlt	r0, r3
 8004f78:	e793      	b.n	8004ea2 <_printf_i+0x13e>
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	464a      	mov	r2, r9
 8004f7e:	4639      	mov	r1, r7
 8004f80:	4630      	mov	r0, r6
 8004f82:	47c0      	blx	r8
 8004f84:	3001      	adds	r0, #1
 8004f86:	d08a      	beq.n	8004e9e <_printf_i+0x13a>
 8004f88:	3501      	adds	r5, #1
 8004f8a:	e7eb      	b.n	8004f64 <_printf_i+0x200>
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1a7      	bne.n	8004ee0 <_printf_i+0x17c>
 8004f90:	780b      	ldrb	r3, [r1, #0]
 8004f92:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f96:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f9a:	e765      	b.n	8004e68 <_printf_i+0x104>
 8004f9c:	08006fa3 	.word	0x08006fa3
 8004fa0:	08006f92 	.word	0x08006f92

08004fa4 <iprintf>:
 8004fa4:	b40f      	push	{r0, r1, r2, r3}
 8004fa6:	4b0a      	ldr	r3, [pc, #40]	; (8004fd0 <iprintf+0x2c>)
 8004fa8:	b513      	push	{r0, r1, r4, lr}
 8004faa:	681c      	ldr	r4, [r3, #0]
 8004fac:	b124      	cbz	r4, 8004fb8 <iprintf+0x14>
 8004fae:	69a3      	ldr	r3, [r4, #24]
 8004fb0:	b913      	cbnz	r3, 8004fb8 <iprintf+0x14>
 8004fb2:	4620      	mov	r0, r4
 8004fb4:	f7ff fa3c 	bl	8004430 <__sinit>
 8004fb8:	ab05      	add	r3, sp, #20
 8004fba:	9a04      	ldr	r2, [sp, #16]
 8004fbc:	68a1      	ldr	r1, [r4, #8]
 8004fbe:	9301      	str	r3, [sp, #4]
 8004fc0:	4620      	mov	r0, r4
 8004fc2:	f001 fd6d 	bl	8006aa0 <_vfiprintf_r>
 8004fc6:	b002      	add	sp, #8
 8004fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fcc:	b004      	add	sp, #16
 8004fce:	4770      	bx	lr
 8004fd0:	2000000c 	.word	0x2000000c

08004fd4 <_puts_r>:
 8004fd4:	b570      	push	{r4, r5, r6, lr}
 8004fd6:	460e      	mov	r6, r1
 8004fd8:	4605      	mov	r5, r0
 8004fda:	b118      	cbz	r0, 8004fe4 <_puts_r+0x10>
 8004fdc:	6983      	ldr	r3, [r0, #24]
 8004fde:	b90b      	cbnz	r3, 8004fe4 <_puts_r+0x10>
 8004fe0:	f7ff fa26 	bl	8004430 <__sinit>
 8004fe4:	69ab      	ldr	r3, [r5, #24]
 8004fe6:	68ac      	ldr	r4, [r5, #8]
 8004fe8:	b913      	cbnz	r3, 8004ff0 <_puts_r+0x1c>
 8004fea:	4628      	mov	r0, r5
 8004fec:	f7ff fa20 	bl	8004430 <__sinit>
 8004ff0:	4b23      	ldr	r3, [pc, #140]	; (8005080 <_puts_r+0xac>)
 8004ff2:	429c      	cmp	r4, r3
 8004ff4:	d117      	bne.n	8005026 <_puts_r+0x52>
 8004ff6:	686c      	ldr	r4, [r5, #4]
 8004ff8:	89a3      	ldrh	r3, [r4, #12]
 8004ffa:	071b      	lsls	r3, r3, #28
 8004ffc:	d51d      	bpl.n	800503a <_puts_r+0x66>
 8004ffe:	6923      	ldr	r3, [r4, #16]
 8005000:	b1db      	cbz	r3, 800503a <_puts_r+0x66>
 8005002:	3e01      	subs	r6, #1
 8005004:	68a3      	ldr	r3, [r4, #8]
 8005006:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800500a:	3b01      	subs	r3, #1
 800500c:	60a3      	str	r3, [r4, #8]
 800500e:	b9e9      	cbnz	r1, 800504c <_puts_r+0x78>
 8005010:	2b00      	cmp	r3, #0
 8005012:	da2e      	bge.n	8005072 <_puts_r+0x9e>
 8005014:	4622      	mov	r2, r4
 8005016:	210a      	movs	r1, #10
 8005018:	4628      	mov	r0, r5
 800501a:	f000 f96d 	bl	80052f8 <__swbuf_r>
 800501e:	3001      	adds	r0, #1
 8005020:	d011      	beq.n	8005046 <_puts_r+0x72>
 8005022:	200a      	movs	r0, #10
 8005024:	bd70      	pop	{r4, r5, r6, pc}
 8005026:	4b17      	ldr	r3, [pc, #92]	; (8005084 <_puts_r+0xb0>)
 8005028:	429c      	cmp	r4, r3
 800502a:	d101      	bne.n	8005030 <_puts_r+0x5c>
 800502c:	68ac      	ldr	r4, [r5, #8]
 800502e:	e7e3      	b.n	8004ff8 <_puts_r+0x24>
 8005030:	4b15      	ldr	r3, [pc, #84]	; (8005088 <_puts_r+0xb4>)
 8005032:	429c      	cmp	r4, r3
 8005034:	bf08      	it	eq
 8005036:	68ec      	ldreq	r4, [r5, #12]
 8005038:	e7de      	b.n	8004ff8 <_puts_r+0x24>
 800503a:	4621      	mov	r1, r4
 800503c:	4628      	mov	r0, r5
 800503e:	f000 f9bf 	bl	80053c0 <__swsetup_r>
 8005042:	2800      	cmp	r0, #0
 8005044:	d0dd      	beq.n	8005002 <_puts_r+0x2e>
 8005046:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800504a:	bd70      	pop	{r4, r5, r6, pc}
 800504c:	2b00      	cmp	r3, #0
 800504e:	da04      	bge.n	800505a <_puts_r+0x86>
 8005050:	69a2      	ldr	r2, [r4, #24]
 8005052:	4293      	cmp	r3, r2
 8005054:	db06      	blt.n	8005064 <_puts_r+0x90>
 8005056:	290a      	cmp	r1, #10
 8005058:	d004      	beq.n	8005064 <_puts_r+0x90>
 800505a:	6823      	ldr	r3, [r4, #0]
 800505c:	1c5a      	adds	r2, r3, #1
 800505e:	6022      	str	r2, [r4, #0]
 8005060:	7019      	strb	r1, [r3, #0]
 8005062:	e7cf      	b.n	8005004 <_puts_r+0x30>
 8005064:	4622      	mov	r2, r4
 8005066:	4628      	mov	r0, r5
 8005068:	f000 f946 	bl	80052f8 <__swbuf_r>
 800506c:	3001      	adds	r0, #1
 800506e:	d1c9      	bne.n	8005004 <_puts_r+0x30>
 8005070:	e7e9      	b.n	8005046 <_puts_r+0x72>
 8005072:	6823      	ldr	r3, [r4, #0]
 8005074:	200a      	movs	r0, #10
 8005076:	1c5a      	adds	r2, r3, #1
 8005078:	6022      	str	r2, [r4, #0]
 800507a:	7018      	strb	r0, [r3, #0]
 800507c:	bd70      	pop	{r4, r5, r6, pc}
 800507e:	bf00      	nop
 8005080:	08006f3c 	.word	0x08006f3c
 8005084:	08006f5c 	.word	0x08006f5c
 8005088:	08006f1c 	.word	0x08006f1c

0800508c <puts>:
 800508c:	4b02      	ldr	r3, [pc, #8]	; (8005098 <puts+0xc>)
 800508e:	4601      	mov	r1, r0
 8005090:	6818      	ldr	r0, [r3, #0]
 8005092:	f7ff bf9f 	b.w	8004fd4 <_puts_r>
 8005096:	bf00      	nop
 8005098:	2000000c 	.word	0x2000000c

0800509c <_sbrk_r>:
 800509c:	b538      	push	{r3, r4, r5, lr}
 800509e:	4c06      	ldr	r4, [pc, #24]	; (80050b8 <_sbrk_r+0x1c>)
 80050a0:	2300      	movs	r3, #0
 80050a2:	4605      	mov	r5, r0
 80050a4:	4608      	mov	r0, r1
 80050a6:	6023      	str	r3, [r4, #0]
 80050a8:	f7fe fb5e 	bl	8003768 <_sbrk>
 80050ac:	1c43      	adds	r3, r0, #1
 80050ae:	d102      	bne.n	80050b6 <_sbrk_r+0x1a>
 80050b0:	6823      	ldr	r3, [r4, #0]
 80050b2:	b103      	cbz	r3, 80050b6 <_sbrk_r+0x1a>
 80050b4:	602b      	str	r3, [r5, #0]
 80050b6:	bd38      	pop	{r3, r4, r5, pc}
 80050b8:	20001938 	.word	0x20001938

080050bc <setvbuf>:
 80050bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80050c0:	461d      	mov	r5, r3
 80050c2:	4b51      	ldr	r3, [pc, #324]	; (8005208 <setvbuf+0x14c>)
 80050c4:	681e      	ldr	r6, [r3, #0]
 80050c6:	4604      	mov	r4, r0
 80050c8:	460f      	mov	r7, r1
 80050ca:	4690      	mov	r8, r2
 80050cc:	b126      	cbz	r6, 80050d8 <setvbuf+0x1c>
 80050ce:	69b3      	ldr	r3, [r6, #24]
 80050d0:	b913      	cbnz	r3, 80050d8 <setvbuf+0x1c>
 80050d2:	4630      	mov	r0, r6
 80050d4:	f7ff f9ac 	bl	8004430 <__sinit>
 80050d8:	4b4c      	ldr	r3, [pc, #304]	; (800520c <setvbuf+0x150>)
 80050da:	429c      	cmp	r4, r3
 80050dc:	d152      	bne.n	8005184 <setvbuf+0xc8>
 80050de:	6874      	ldr	r4, [r6, #4]
 80050e0:	f1b8 0f02 	cmp.w	r8, #2
 80050e4:	d006      	beq.n	80050f4 <setvbuf+0x38>
 80050e6:	f1b8 0f01 	cmp.w	r8, #1
 80050ea:	f200 8089 	bhi.w	8005200 <setvbuf+0x144>
 80050ee:	2d00      	cmp	r5, #0
 80050f0:	f2c0 8086 	blt.w	8005200 <setvbuf+0x144>
 80050f4:	4621      	mov	r1, r4
 80050f6:	4630      	mov	r0, r6
 80050f8:	f7ff f930 	bl	800435c <_fflush_r>
 80050fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050fe:	b141      	cbz	r1, 8005112 <setvbuf+0x56>
 8005100:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005104:	4299      	cmp	r1, r3
 8005106:	d002      	beq.n	800510e <setvbuf+0x52>
 8005108:	4630      	mov	r0, r6
 800510a:	f7ff fa53 	bl	80045b4 <_free_r>
 800510e:	2300      	movs	r3, #0
 8005110:	6363      	str	r3, [r4, #52]	; 0x34
 8005112:	2300      	movs	r3, #0
 8005114:	61a3      	str	r3, [r4, #24]
 8005116:	6063      	str	r3, [r4, #4]
 8005118:	89a3      	ldrh	r3, [r4, #12]
 800511a:	061b      	lsls	r3, r3, #24
 800511c:	d503      	bpl.n	8005126 <setvbuf+0x6a>
 800511e:	6921      	ldr	r1, [r4, #16]
 8005120:	4630      	mov	r0, r6
 8005122:	f7ff fa47 	bl	80045b4 <_free_r>
 8005126:	89a3      	ldrh	r3, [r4, #12]
 8005128:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800512c:	f023 0303 	bic.w	r3, r3, #3
 8005130:	f1b8 0f02 	cmp.w	r8, #2
 8005134:	81a3      	strh	r3, [r4, #12]
 8005136:	d05d      	beq.n	80051f4 <setvbuf+0x138>
 8005138:	ab01      	add	r3, sp, #4
 800513a:	466a      	mov	r2, sp
 800513c:	4621      	mov	r1, r4
 800513e:	4630      	mov	r0, r6
 8005140:	f000 ffd6 	bl	80060f0 <__swhatbuf_r>
 8005144:	89a3      	ldrh	r3, [r4, #12]
 8005146:	4318      	orrs	r0, r3
 8005148:	81a0      	strh	r0, [r4, #12]
 800514a:	bb2d      	cbnz	r5, 8005198 <setvbuf+0xdc>
 800514c:	9d00      	ldr	r5, [sp, #0]
 800514e:	4628      	mov	r0, r5
 8005150:	f001 f832 	bl	80061b8 <malloc>
 8005154:	4607      	mov	r7, r0
 8005156:	2800      	cmp	r0, #0
 8005158:	d14e      	bne.n	80051f8 <setvbuf+0x13c>
 800515a:	f8dd 9000 	ldr.w	r9, [sp]
 800515e:	45a9      	cmp	r9, r5
 8005160:	d13c      	bne.n	80051dc <setvbuf+0x120>
 8005162:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005166:	89a3      	ldrh	r3, [r4, #12]
 8005168:	f043 0302 	orr.w	r3, r3, #2
 800516c:	81a3      	strh	r3, [r4, #12]
 800516e:	2300      	movs	r3, #0
 8005170:	60a3      	str	r3, [r4, #8]
 8005172:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005176:	6023      	str	r3, [r4, #0]
 8005178:	6123      	str	r3, [r4, #16]
 800517a:	2301      	movs	r3, #1
 800517c:	6163      	str	r3, [r4, #20]
 800517e:	b003      	add	sp, #12
 8005180:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005184:	4b22      	ldr	r3, [pc, #136]	; (8005210 <setvbuf+0x154>)
 8005186:	429c      	cmp	r4, r3
 8005188:	d101      	bne.n	800518e <setvbuf+0xd2>
 800518a:	68b4      	ldr	r4, [r6, #8]
 800518c:	e7a8      	b.n	80050e0 <setvbuf+0x24>
 800518e:	4b21      	ldr	r3, [pc, #132]	; (8005214 <setvbuf+0x158>)
 8005190:	429c      	cmp	r4, r3
 8005192:	bf08      	it	eq
 8005194:	68f4      	ldreq	r4, [r6, #12]
 8005196:	e7a3      	b.n	80050e0 <setvbuf+0x24>
 8005198:	2f00      	cmp	r7, #0
 800519a:	d0d8      	beq.n	800514e <setvbuf+0x92>
 800519c:	69b3      	ldr	r3, [r6, #24]
 800519e:	b913      	cbnz	r3, 80051a6 <setvbuf+0xea>
 80051a0:	4630      	mov	r0, r6
 80051a2:	f7ff f945 	bl	8004430 <__sinit>
 80051a6:	f1b8 0f01 	cmp.w	r8, #1
 80051aa:	bf08      	it	eq
 80051ac:	89a3      	ldrheq	r3, [r4, #12]
 80051ae:	6027      	str	r7, [r4, #0]
 80051b0:	bf04      	itt	eq
 80051b2:	f043 0301 	orreq.w	r3, r3, #1
 80051b6:	81a3      	strheq	r3, [r4, #12]
 80051b8:	89a3      	ldrh	r3, [r4, #12]
 80051ba:	6127      	str	r7, [r4, #16]
 80051bc:	f013 0008 	ands.w	r0, r3, #8
 80051c0:	6165      	str	r5, [r4, #20]
 80051c2:	d01b      	beq.n	80051fc <setvbuf+0x140>
 80051c4:	f013 0001 	ands.w	r0, r3, #1
 80051c8:	bf18      	it	ne
 80051ca:	426d      	negne	r5, r5
 80051cc:	f04f 0300 	mov.w	r3, #0
 80051d0:	bf1d      	ittte	ne
 80051d2:	60a3      	strne	r3, [r4, #8]
 80051d4:	61a5      	strne	r5, [r4, #24]
 80051d6:	4618      	movne	r0, r3
 80051d8:	60a5      	streq	r5, [r4, #8]
 80051da:	e7d0      	b.n	800517e <setvbuf+0xc2>
 80051dc:	4648      	mov	r0, r9
 80051de:	f000 ffeb 	bl	80061b8 <malloc>
 80051e2:	4607      	mov	r7, r0
 80051e4:	2800      	cmp	r0, #0
 80051e6:	d0bc      	beq.n	8005162 <setvbuf+0xa6>
 80051e8:	89a3      	ldrh	r3, [r4, #12]
 80051ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ee:	81a3      	strh	r3, [r4, #12]
 80051f0:	464d      	mov	r5, r9
 80051f2:	e7d3      	b.n	800519c <setvbuf+0xe0>
 80051f4:	2000      	movs	r0, #0
 80051f6:	e7b6      	b.n	8005166 <setvbuf+0xaa>
 80051f8:	46a9      	mov	r9, r5
 80051fa:	e7f5      	b.n	80051e8 <setvbuf+0x12c>
 80051fc:	60a0      	str	r0, [r4, #8]
 80051fe:	e7be      	b.n	800517e <setvbuf+0xc2>
 8005200:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005204:	e7bb      	b.n	800517e <setvbuf+0xc2>
 8005206:	bf00      	nop
 8005208:	2000000c 	.word	0x2000000c
 800520c:	08006f3c 	.word	0x08006f3c
 8005210:	08006f5c 	.word	0x08006f5c
 8005214:	08006f1c 	.word	0x08006f1c

08005218 <siprintf>:
 8005218:	b40e      	push	{r1, r2, r3}
 800521a:	b500      	push	{lr}
 800521c:	b09c      	sub	sp, #112	; 0x70
 800521e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8005222:	ab1d      	add	r3, sp, #116	; 0x74
 8005224:	f8ad 1014 	strh.w	r1, [sp, #20]
 8005228:	9002      	str	r0, [sp, #8]
 800522a:	9006      	str	r0, [sp, #24]
 800522c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005230:	480a      	ldr	r0, [pc, #40]	; (800525c <siprintf+0x44>)
 8005232:	9104      	str	r1, [sp, #16]
 8005234:	9107      	str	r1, [sp, #28]
 8005236:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800523a:	f853 2b04 	ldr.w	r2, [r3], #4
 800523e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8005242:	6800      	ldr	r0, [r0, #0]
 8005244:	9301      	str	r3, [sp, #4]
 8005246:	a902      	add	r1, sp, #8
 8005248:	f001 fb0c 	bl	8006864 <_svfiprintf_r>
 800524c:	9b02      	ldr	r3, [sp, #8]
 800524e:	2200      	movs	r2, #0
 8005250:	701a      	strb	r2, [r3, #0]
 8005252:	b01c      	add	sp, #112	; 0x70
 8005254:	f85d eb04 	ldr.w	lr, [sp], #4
 8005258:	b003      	add	sp, #12
 800525a:	4770      	bx	lr
 800525c:	2000000c 	.word	0x2000000c

08005260 <__sread>:
 8005260:	b510      	push	{r4, lr}
 8005262:	460c      	mov	r4, r1
 8005264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005268:	f001 fd30 	bl	8006ccc <_read_r>
 800526c:	2800      	cmp	r0, #0
 800526e:	bfab      	itete	ge
 8005270:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005272:	89a3      	ldrhlt	r3, [r4, #12]
 8005274:	181b      	addge	r3, r3, r0
 8005276:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800527a:	bfac      	ite	ge
 800527c:	6563      	strge	r3, [r4, #84]	; 0x54
 800527e:	81a3      	strhlt	r3, [r4, #12]
 8005280:	bd10      	pop	{r4, pc}

08005282 <__swrite>:
 8005282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005286:	461f      	mov	r7, r3
 8005288:	898b      	ldrh	r3, [r1, #12]
 800528a:	05db      	lsls	r3, r3, #23
 800528c:	4605      	mov	r5, r0
 800528e:	460c      	mov	r4, r1
 8005290:	4616      	mov	r6, r2
 8005292:	d505      	bpl.n	80052a0 <__swrite+0x1e>
 8005294:	2302      	movs	r3, #2
 8005296:	2200      	movs	r2, #0
 8005298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800529c:	f000 ff16 	bl	80060cc <_lseek_r>
 80052a0:	89a3      	ldrh	r3, [r4, #12]
 80052a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052aa:	81a3      	strh	r3, [r4, #12]
 80052ac:	4632      	mov	r2, r6
 80052ae:	463b      	mov	r3, r7
 80052b0:	4628      	mov	r0, r5
 80052b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052b6:	f000 b871 	b.w	800539c <_write_r>

080052ba <__sseek>:
 80052ba:	b510      	push	{r4, lr}
 80052bc:	460c      	mov	r4, r1
 80052be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052c2:	f000 ff03 	bl	80060cc <_lseek_r>
 80052c6:	1c43      	adds	r3, r0, #1
 80052c8:	89a3      	ldrh	r3, [r4, #12]
 80052ca:	bf15      	itete	ne
 80052cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80052ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80052d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80052d6:	81a3      	strheq	r3, [r4, #12]
 80052d8:	bf18      	it	ne
 80052da:	81a3      	strhne	r3, [r4, #12]
 80052dc:	bd10      	pop	{r4, pc}

080052de <__sclose>:
 80052de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052e2:	f000 b8db 	b.w	800549c <_close_r>

080052e6 <strcpy>:
 80052e6:	4603      	mov	r3, r0
 80052e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80052ec:	f803 2b01 	strb.w	r2, [r3], #1
 80052f0:	2a00      	cmp	r2, #0
 80052f2:	d1f9      	bne.n	80052e8 <strcpy+0x2>
 80052f4:	4770      	bx	lr
	...

080052f8 <__swbuf_r>:
 80052f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052fa:	460e      	mov	r6, r1
 80052fc:	4614      	mov	r4, r2
 80052fe:	4605      	mov	r5, r0
 8005300:	b118      	cbz	r0, 800530a <__swbuf_r+0x12>
 8005302:	6983      	ldr	r3, [r0, #24]
 8005304:	b90b      	cbnz	r3, 800530a <__swbuf_r+0x12>
 8005306:	f7ff f893 	bl	8004430 <__sinit>
 800530a:	4b21      	ldr	r3, [pc, #132]	; (8005390 <__swbuf_r+0x98>)
 800530c:	429c      	cmp	r4, r3
 800530e:	d12a      	bne.n	8005366 <__swbuf_r+0x6e>
 8005310:	686c      	ldr	r4, [r5, #4]
 8005312:	69a3      	ldr	r3, [r4, #24]
 8005314:	60a3      	str	r3, [r4, #8]
 8005316:	89a3      	ldrh	r3, [r4, #12]
 8005318:	071a      	lsls	r2, r3, #28
 800531a:	d52e      	bpl.n	800537a <__swbuf_r+0x82>
 800531c:	6923      	ldr	r3, [r4, #16]
 800531e:	b363      	cbz	r3, 800537a <__swbuf_r+0x82>
 8005320:	6923      	ldr	r3, [r4, #16]
 8005322:	6820      	ldr	r0, [r4, #0]
 8005324:	1ac0      	subs	r0, r0, r3
 8005326:	6963      	ldr	r3, [r4, #20]
 8005328:	b2f6      	uxtb	r6, r6
 800532a:	4298      	cmp	r0, r3
 800532c:	4637      	mov	r7, r6
 800532e:	db04      	blt.n	800533a <__swbuf_r+0x42>
 8005330:	4621      	mov	r1, r4
 8005332:	4628      	mov	r0, r5
 8005334:	f7ff f812 	bl	800435c <_fflush_r>
 8005338:	bb28      	cbnz	r0, 8005386 <__swbuf_r+0x8e>
 800533a:	68a3      	ldr	r3, [r4, #8]
 800533c:	3b01      	subs	r3, #1
 800533e:	60a3      	str	r3, [r4, #8]
 8005340:	6823      	ldr	r3, [r4, #0]
 8005342:	1c5a      	adds	r2, r3, #1
 8005344:	6022      	str	r2, [r4, #0]
 8005346:	701e      	strb	r6, [r3, #0]
 8005348:	6963      	ldr	r3, [r4, #20]
 800534a:	3001      	adds	r0, #1
 800534c:	4298      	cmp	r0, r3
 800534e:	d004      	beq.n	800535a <__swbuf_r+0x62>
 8005350:	89a3      	ldrh	r3, [r4, #12]
 8005352:	07db      	lsls	r3, r3, #31
 8005354:	d519      	bpl.n	800538a <__swbuf_r+0x92>
 8005356:	2e0a      	cmp	r6, #10
 8005358:	d117      	bne.n	800538a <__swbuf_r+0x92>
 800535a:	4621      	mov	r1, r4
 800535c:	4628      	mov	r0, r5
 800535e:	f7fe fffd 	bl	800435c <_fflush_r>
 8005362:	b190      	cbz	r0, 800538a <__swbuf_r+0x92>
 8005364:	e00f      	b.n	8005386 <__swbuf_r+0x8e>
 8005366:	4b0b      	ldr	r3, [pc, #44]	; (8005394 <__swbuf_r+0x9c>)
 8005368:	429c      	cmp	r4, r3
 800536a:	d101      	bne.n	8005370 <__swbuf_r+0x78>
 800536c:	68ac      	ldr	r4, [r5, #8]
 800536e:	e7d0      	b.n	8005312 <__swbuf_r+0x1a>
 8005370:	4b09      	ldr	r3, [pc, #36]	; (8005398 <__swbuf_r+0xa0>)
 8005372:	429c      	cmp	r4, r3
 8005374:	bf08      	it	eq
 8005376:	68ec      	ldreq	r4, [r5, #12]
 8005378:	e7cb      	b.n	8005312 <__swbuf_r+0x1a>
 800537a:	4621      	mov	r1, r4
 800537c:	4628      	mov	r0, r5
 800537e:	f000 f81f 	bl	80053c0 <__swsetup_r>
 8005382:	2800      	cmp	r0, #0
 8005384:	d0cc      	beq.n	8005320 <__swbuf_r+0x28>
 8005386:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800538a:	4638      	mov	r0, r7
 800538c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800538e:	bf00      	nop
 8005390:	08006f3c 	.word	0x08006f3c
 8005394:	08006f5c 	.word	0x08006f5c
 8005398:	08006f1c 	.word	0x08006f1c

0800539c <_write_r>:
 800539c:	b538      	push	{r3, r4, r5, lr}
 800539e:	4c07      	ldr	r4, [pc, #28]	; (80053bc <_write_r+0x20>)
 80053a0:	4605      	mov	r5, r0
 80053a2:	4608      	mov	r0, r1
 80053a4:	4611      	mov	r1, r2
 80053a6:	2200      	movs	r2, #0
 80053a8:	6022      	str	r2, [r4, #0]
 80053aa:	461a      	mov	r2, r3
 80053ac:	f7fe f9ce 	bl	800374c <_write>
 80053b0:	1c43      	adds	r3, r0, #1
 80053b2:	d102      	bne.n	80053ba <_write_r+0x1e>
 80053b4:	6823      	ldr	r3, [r4, #0]
 80053b6:	b103      	cbz	r3, 80053ba <_write_r+0x1e>
 80053b8:	602b      	str	r3, [r5, #0]
 80053ba:	bd38      	pop	{r3, r4, r5, pc}
 80053bc:	20001938 	.word	0x20001938

080053c0 <__swsetup_r>:
 80053c0:	4b32      	ldr	r3, [pc, #200]	; (800548c <__swsetup_r+0xcc>)
 80053c2:	b570      	push	{r4, r5, r6, lr}
 80053c4:	681d      	ldr	r5, [r3, #0]
 80053c6:	4606      	mov	r6, r0
 80053c8:	460c      	mov	r4, r1
 80053ca:	b125      	cbz	r5, 80053d6 <__swsetup_r+0x16>
 80053cc:	69ab      	ldr	r3, [r5, #24]
 80053ce:	b913      	cbnz	r3, 80053d6 <__swsetup_r+0x16>
 80053d0:	4628      	mov	r0, r5
 80053d2:	f7ff f82d 	bl	8004430 <__sinit>
 80053d6:	4b2e      	ldr	r3, [pc, #184]	; (8005490 <__swsetup_r+0xd0>)
 80053d8:	429c      	cmp	r4, r3
 80053da:	d10f      	bne.n	80053fc <__swsetup_r+0x3c>
 80053dc:	686c      	ldr	r4, [r5, #4]
 80053de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	0715      	lsls	r5, r2, #28
 80053e6:	d42c      	bmi.n	8005442 <__swsetup_r+0x82>
 80053e8:	06d0      	lsls	r0, r2, #27
 80053ea:	d411      	bmi.n	8005410 <__swsetup_r+0x50>
 80053ec:	2209      	movs	r2, #9
 80053ee:	6032      	str	r2, [r6, #0]
 80053f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053f4:	81a3      	strh	r3, [r4, #12]
 80053f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053fa:	bd70      	pop	{r4, r5, r6, pc}
 80053fc:	4b25      	ldr	r3, [pc, #148]	; (8005494 <__swsetup_r+0xd4>)
 80053fe:	429c      	cmp	r4, r3
 8005400:	d101      	bne.n	8005406 <__swsetup_r+0x46>
 8005402:	68ac      	ldr	r4, [r5, #8]
 8005404:	e7eb      	b.n	80053de <__swsetup_r+0x1e>
 8005406:	4b24      	ldr	r3, [pc, #144]	; (8005498 <__swsetup_r+0xd8>)
 8005408:	429c      	cmp	r4, r3
 800540a:	bf08      	it	eq
 800540c:	68ec      	ldreq	r4, [r5, #12]
 800540e:	e7e6      	b.n	80053de <__swsetup_r+0x1e>
 8005410:	0751      	lsls	r1, r2, #29
 8005412:	d512      	bpl.n	800543a <__swsetup_r+0x7a>
 8005414:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005416:	b141      	cbz	r1, 800542a <__swsetup_r+0x6a>
 8005418:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800541c:	4299      	cmp	r1, r3
 800541e:	d002      	beq.n	8005426 <__swsetup_r+0x66>
 8005420:	4630      	mov	r0, r6
 8005422:	f7ff f8c7 	bl	80045b4 <_free_r>
 8005426:	2300      	movs	r3, #0
 8005428:	6363      	str	r3, [r4, #52]	; 0x34
 800542a:	89a3      	ldrh	r3, [r4, #12]
 800542c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005430:	81a3      	strh	r3, [r4, #12]
 8005432:	2300      	movs	r3, #0
 8005434:	6063      	str	r3, [r4, #4]
 8005436:	6923      	ldr	r3, [r4, #16]
 8005438:	6023      	str	r3, [r4, #0]
 800543a:	89a3      	ldrh	r3, [r4, #12]
 800543c:	f043 0308 	orr.w	r3, r3, #8
 8005440:	81a3      	strh	r3, [r4, #12]
 8005442:	6923      	ldr	r3, [r4, #16]
 8005444:	b94b      	cbnz	r3, 800545a <__swsetup_r+0x9a>
 8005446:	89a3      	ldrh	r3, [r4, #12]
 8005448:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800544c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005450:	d003      	beq.n	800545a <__swsetup_r+0x9a>
 8005452:	4621      	mov	r1, r4
 8005454:	4630      	mov	r0, r6
 8005456:	f000 fe6f 	bl	8006138 <__smakebuf_r>
 800545a:	89a2      	ldrh	r2, [r4, #12]
 800545c:	f012 0301 	ands.w	r3, r2, #1
 8005460:	d00c      	beq.n	800547c <__swsetup_r+0xbc>
 8005462:	2300      	movs	r3, #0
 8005464:	60a3      	str	r3, [r4, #8]
 8005466:	6963      	ldr	r3, [r4, #20]
 8005468:	425b      	negs	r3, r3
 800546a:	61a3      	str	r3, [r4, #24]
 800546c:	6923      	ldr	r3, [r4, #16]
 800546e:	b953      	cbnz	r3, 8005486 <__swsetup_r+0xc6>
 8005470:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005474:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005478:	d1ba      	bne.n	80053f0 <__swsetup_r+0x30>
 800547a:	bd70      	pop	{r4, r5, r6, pc}
 800547c:	0792      	lsls	r2, r2, #30
 800547e:	bf58      	it	pl
 8005480:	6963      	ldrpl	r3, [r4, #20]
 8005482:	60a3      	str	r3, [r4, #8]
 8005484:	e7f2      	b.n	800546c <__swsetup_r+0xac>
 8005486:	2000      	movs	r0, #0
 8005488:	e7f7      	b.n	800547a <__swsetup_r+0xba>
 800548a:	bf00      	nop
 800548c:	2000000c 	.word	0x2000000c
 8005490:	08006f3c 	.word	0x08006f3c
 8005494:	08006f5c 	.word	0x08006f5c
 8005498:	08006f1c 	.word	0x08006f1c

0800549c <_close_r>:
 800549c:	b538      	push	{r3, r4, r5, lr}
 800549e:	4c06      	ldr	r4, [pc, #24]	; (80054b8 <_close_r+0x1c>)
 80054a0:	2300      	movs	r3, #0
 80054a2:	4605      	mov	r5, r0
 80054a4:	4608      	mov	r0, r1
 80054a6:	6023      	str	r3, [r4, #0]
 80054a8:	f7fe f978 	bl	800379c <_close>
 80054ac:	1c43      	adds	r3, r0, #1
 80054ae:	d102      	bne.n	80054b6 <_close_r+0x1a>
 80054b0:	6823      	ldr	r3, [r4, #0]
 80054b2:	b103      	cbz	r3, 80054b6 <_close_r+0x1a>
 80054b4:	602b      	str	r3, [r5, #0]
 80054b6:	bd38      	pop	{r3, r4, r5, pc}
 80054b8:	20001938 	.word	0x20001938

080054bc <quorem>:
 80054bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054c0:	6903      	ldr	r3, [r0, #16]
 80054c2:	690c      	ldr	r4, [r1, #16]
 80054c4:	429c      	cmp	r4, r3
 80054c6:	4680      	mov	r8, r0
 80054c8:	f300 8082 	bgt.w	80055d0 <quorem+0x114>
 80054cc:	3c01      	subs	r4, #1
 80054ce:	f101 0714 	add.w	r7, r1, #20
 80054d2:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80054d6:	f100 0614 	add.w	r6, r0, #20
 80054da:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80054de:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80054e2:	eb06 030e 	add.w	r3, r6, lr
 80054e6:	3501      	adds	r5, #1
 80054e8:	eb07 090e 	add.w	r9, r7, lr
 80054ec:	9301      	str	r3, [sp, #4]
 80054ee:	fbb0 f5f5 	udiv	r5, r0, r5
 80054f2:	b395      	cbz	r5, 800555a <quorem+0x9e>
 80054f4:	f04f 0a00 	mov.w	sl, #0
 80054f8:	4638      	mov	r0, r7
 80054fa:	46b4      	mov	ip, r6
 80054fc:	46d3      	mov	fp, sl
 80054fe:	f850 2b04 	ldr.w	r2, [r0], #4
 8005502:	b293      	uxth	r3, r2
 8005504:	fb05 a303 	mla	r3, r5, r3, sl
 8005508:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800550c:	b29b      	uxth	r3, r3
 800550e:	ebab 0303 	sub.w	r3, fp, r3
 8005512:	0c12      	lsrs	r2, r2, #16
 8005514:	f8bc b000 	ldrh.w	fp, [ip]
 8005518:	fb05 a202 	mla	r2, r5, r2, sl
 800551c:	fa13 f38b 	uxtah	r3, r3, fp
 8005520:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005524:	fa1f fb82 	uxth.w	fp, r2
 8005528:	f8dc 2000 	ldr.w	r2, [ip]
 800552c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005530:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005534:	b29b      	uxth	r3, r3
 8005536:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800553a:	4581      	cmp	r9, r0
 800553c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005540:	f84c 3b04 	str.w	r3, [ip], #4
 8005544:	d2db      	bcs.n	80054fe <quorem+0x42>
 8005546:	f856 300e 	ldr.w	r3, [r6, lr]
 800554a:	b933      	cbnz	r3, 800555a <quorem+0x9e>
 800554c:	9b01      	ldr	r3, [sp, #4]
 800554e:	3b04      	subs	r3, #4
 8005550:	429e      	cmp	r6, r3
 8005552:	461a      	mov	r2, r3
 8005554:	d330      	bcc.n	80055b8 <quorem+0xfc>
 8005556:	f8c8 4010 	str.w	r4, [r8, #16]
 800555a:	4640      	mov	r0, r8
 800555c:	f001 f851 	bl	8006602 <__mcmp>
 8005560:	2800      	cmp	r0, #0
 8005562:	db25      	blt.n	80055b0 <quorem+0xf4>
 8005564:	3501      	adds	r5, #1
 8005566:	4630      	mov	r0, r6
 8005568:	f04f 0e00 	mov.w	lr, #0
 800556c:	f857 2b04 	ldr.w	r2, [r7], #4
 8005570:	f8d0 c000 	ldr.w	ip, [r0]
 8005574:	b293      	uxth	r3, r2
 8005576:	ebae 0303 	sub.w	r3, lr, r3
 800557a:	0c12      	lsrs	r2, r2, #16
 800557c:	fa13 f38c 	uxtah	r3, r3, ip
 8005580:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005584:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005588:	b29b      	uxth	r3, r3
 800558a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800558e:	45b9      	cmp	r9, r7
 8005590:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005594:	f840 3b04 	str.w	r3, [r0], #4
 8005598:	d2e8      	bcs.n	800556c <quorem+0xb0>
 800559a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800559e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80055a2:	b92a      	cbnz	r2, 80055b0 <quorem+0xf4>
 80055a4:	3b04      	subs	r3, #4
 80055a6:	429e      	cmp	r6, r3
 80055a8:	461a      	mov	r2, r3
 80055aa:	d30b      	bcc.n	80055c4 <quorem+0x108>
 80055ac:	f8c8 4010 	str.w	r4, [r8, #16]
 80055b0:	4628      	mov	r0, r5
 80055b2:	b003      	add	sp, #12
 80055b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055b8:	6812      	ldr	r2, [r2, #0]
 80055ba:	3b04      	subs	r3, #4
 80055bc:	2a00      	cmp	r2, #0
 80055be:	d1ca      	bne.n	8005556 <quorem+0x9a>
 80055c0:	3c01      	subs	r4, #1
 80055c2:	e7c5      	b.n	8005550 <quorem+0x94>
 80055c4:	6812      	ldr	r2, [r2, #0]
 80055c6:	3b04      	subs	r3, #4
 80055c8:	2a00      	cmp	r2, #0
 80055ca:	d1ef      	bne.n	80055ac <quorem+0xf0>
 80055cc:	3c01      	subs	r4, #1
 80055ce:	e7ea      	b.n	80055a6 <quorem+0xea>
 80055d0:	2000      	movs	r0, #0
 80055d2:	e7ee      	b.n	80055b2 <quorem+0xf6>
 80055d4:	0000      	movs	r0, r0
	...

080055d8 <_dtoa_r>:
 80055d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055dc:	ec57 6b10 	vmov	r6, r7, d0
 80055e0:	b095      	sub	sp, #84	; 0x54
 80055e2:	e9cd 6700 	strd	r6, r7, [sp]
 80055e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80055e8:	9107      	str	r1, [sp, #28]
 80055ea:	4605      	mov	r5, r0
 80055ec:	920b      	str	r2, [sp, #44]	; 0x2c
 80055ee:	9310      	str	r3, [sp, #64]	; 0x40
 80055f0:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80055f2:	b93e      	cbnz	r6, 8005604 <_dtoa_r+0x2c>
 80055f4:	2010      	movs	r0, #16
 80055f6:	f000 fddf 	bl	80061b8 <malloc>
 80055fa:	6268      	str	r0, [r5, #36]	; 0x24
 80055fc:	6046      	str	r6, [r0, #4]
 80055fe:	6086      	str	r6, [r0, #8]
 8005600:	6006      	str	r6, [r0, #0]
 8005602:	60c6      	str	r6, [r0, #12]
 8005604:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005606:	6819      	ldr	r1, [r3, #0]
 8005608:	b151      	cbz	r1, 8005620 <_dtoa_r+0x48>
 800560a:	685a      	ldr	r2, [r3, #4]
 800560c:	604a      	str	r2, [r1, #4]
 800560e:	2301      	movs	r3, #1
 8005610:	4093      	lsls	r3, r2
 8005612:	608b      	str	r3, [r1, #8]
 8005614:	4628      	mov	r0, r5
 8005616:	f000 fe1f 	bl	8006258 <_Bfree>
 800561a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800561c:	2200      	movs	r2, #0
 800561e:	601a      	str	r2, [r3, #0]
 8005620:	9b01      	ldr	r3, [sp, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	bfbf      	itttt	lt
 8005626:	2301      	movlt	r3, #1
 8005628:	6023      	strlt	r3, [r4, #0]
 800562a:	9b01      	ldrlt	r3, [sp, #4]
 800562c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005630:	bfb2      	itee	lt
 8005632:	9301      	strlt	r3, [sp, #4]
 8005634:	2300      	movge	r3, #0
 8005636:	6023      	strge	r3, [r4, #0]
 8005638:	9c01      	ldr	r4, [sp, #4]
 800563a:	4b73      	ldr	r3, [pc, #460]	; (8005808 <_dtoa_r+0x230>)
 800563c:	43a3      	bics	r3, r4
 800563e:	d118      	bne.n	8005672 <_dtoa_r+0x9a>
 8005640:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005642:	f242 730f 	movw	r3, #9999	; 0x270f
 8005646:	6013      	str	r3, [r2, #0]
 8005648:	9b00      	ldr	r3, [sp, #0]
 800564a:	b923      	cbnz	r3, 8005656 <_dtoa_r+0x7e>
 800564c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005650:	2c00      	cmp	r4, #0
 8005652:	f000 8518 	beq.w	8006086 <_dtoa_r+0xaae>
 8005656:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005658:	b93b      	cbnz	r3, 800566a <_dtoa_r+0x92>
 800565a:	4b6c      	ldr	r3, [pc, #432]	; (800580c <_dtoa_r+0x234>)
 800565c:	e01d      	b.n	800569a <_dtoa_r+0xc2>
 800565e:	4b6c      	ldr	r3, [pc, #432]	; (8005810 <_dtoa_r+0x238>)
 8005660:	9304      	str	r3, [sp, #16]
 8005662:	3308      	adds	r3, #8
 8005664:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005666:	6013      	str	r3, [r2, #0]
 8005668:	e2a6      	b.n	8005bb8 <_dtoa_r+0x5e0>
 800566a:	4b68      	ldr	r3, [pc, #416]	; (800580c <_dtoa_r+0x234>)
 800566c:	9304      	str	r3, [sp, #16]
 800566e:	3303      	adds	r3, #3
 8005670:	e7f8      	b.n	8005664 <_dtoa_r+0x8c>
 8005672:	ed9d 7b00 	vldr	d7, [sp]
 8005676:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800567a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800567e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005682:	d10c      	bne.n	800569e <_dtoa_r+0xc6>
 8005684:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005686:	2301      	movs	r3, #1
 8005688:	6013      	str	r3, [r2, #0]
 800568a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800568c:	2b00      	cmp	r3, #0
 800568e:	f000 84f7 	beq.w	8006080 <_dtoa_r+0xaa8>
 8005692:	4b60      	ldr	r3, [pc, #384]	; (8005814 <_dtoa_r+0x23c>)
 8005694:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005696:	6013      	str	r3, [r2, #0]
 8005698:	3b01      	subs	r3, #1
 800569a:	9304      	str	r3, [sp, #16]
 800569c:	e28c      	b.n	8005bb8 <_dtoa_r+0x5e0>
 800569e:	a913      	add	r1, sp, #76	; 0x4c
 80056a0:	aa12      	add	r2, sp, #72	; 0x48
 80056a2:	ed9d 0b04 	vldr	d0, [sp, #16]
 80056a6:	4628      	mov	r0, r5
 80056a8:	f001 f823 	bl	80066f2 <__d2b>
 80056ac:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80056b0:	9003      	str	r0, [sp, #12]
 80056b2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80056b4:	2900      	cmp	r1, #0
 80056b6:	d046      	beq.n	8005746 <_dtoa_r+0x16e>
 80056b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056bc:	f3c3 0413 	ubfx	r4, r3, #0, #20
 80056c0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80056c4:	f2a1 3aff 	subw	sl, r1, #1023	; 0x3ff
 80056c8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80056cc:	2100      	movs	r1, #0
 80056ce:	ee07 aa90 	vmov	s15, sl
 80056d2:	ec43 2b16 	vmov	d6, r2, r3
 80056d6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80056da:	ed9f 4b45 	vldr	d4, [pc, #276]	; 80057f0 <_dtoa_r+0x218>
 80056de:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80056e2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80056e6:	ed9f 6b44 	vldr	d6, [pc, #272]	; 80057f8 <_dtoa_r+0x220>
 80056ea:	eea7 6b04 	vfma.f64	d6, d7, d4
 80056ee:	eeb0 7b46 	vmov.f64	d7, d6
 80056f2:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8005800 <_dtoa_r+0x228>
 80056f6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80056fa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80056fe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005706:	9111      	str	r1, [sp, #68]	; 0x44
 8005708:	ee16 ba90 	vmov	fp, s13
 800570c:	d508      	bpl.n	8005720 <_dtoa_r+0x148>
 800570e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8005712:	eeb4 7b46 	vcmp.f64	d7, d6
 8005716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800571a:	bf18      	it	ne
 800571c:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8005720:	f1bb 0f16 	cmp.w	fp, #22
 8005724:	d831      	bhi.n	800578a <_dtoa_r+0x1b2>
 8005726:	4b3c      	ldr	r3, [pc, #240]	; (8005818 <_dtoa_r+0x240>)
 8005728:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800572c:	ed93 7b00 	vldr	d7, [r3]
 8005730:	ed9d 6b00 	vldr	d6, [sp]
 8005734:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800573c:	dd01      	ble.n	8005742 <_dtoa_r+0x16a>
 800573e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005742:	2300      	movs	r3, #0
 8005744:	e022      	b.n	800578c <_dtoa_r+0x1b4>
 8005746:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005748:	4401      	add	r1, r0
 800574a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800574e:	2b20      	cmp	r3, #32
 8005750:	dd15      	ble.n	800577e <_dtoa_r+0x1a6>
 8005752:	9e00      	ldr	r6, [sp, #0]
 8005754:	f201 4212 	addw	r2, r1, #1042	; 0x412
 8005758:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800575c:	fa26 f202 	lsr.w	r2, r6, r2
 8005760:	fa04 f303 	lsl.w	r3, r4, r3
 8005764:	431a      	orrs	r2, r3
 8005766:	ee07 2a90 	vmov	s15, r2
 800576a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800576e:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 8005772:	ec53 2b17 	vmov	r2, r3, d7
 8005776:	2101      	movs	r1, #1
 8005778:	f1a3 73f8 	sub.w	r3, r3, #32505856	; 0x1f00000
 800577c:	e7a7      	b.n	80056ce <_dtoa_r+0xf6>
 800577e:	f1c3 0220 	rsb	r2, r3, #32
 8005782:	9b00      	ldr	r3, [sp, #0]
 8005784:	fa03 f202 	lsl.w	r2, r3, r2
 8005788:	e7ed      	b.n	8005766 <_dtoa_r+0x18e>
 800578a:	2301      	movs	r3, #1
 800578c:	eba0 0a0a 	sub.w	sl, r0, sl
 8005790:	f1ba 0701 	subs.w	r7, sl, #1
 8005794:	bf46      	itte	mi
 8005796:	f1ca 0a01 	rsbmi	sl, sl, #1
 800579a:	2700      	movmi	r7, #0
 800579c:	f04f 0a00 	movpl.w	sl, #0
 80057a0:	f1bb 0f00 	cmp.w	fp, #0
 80057a4:	930d      	str	r3, [sp, #52]	; 0x34
 80057a6:	bfbc      	itt	lt
 80057a8:	2300      	movlt	r3, #0
 80057aa:	930c      	strlt	r3, [sp, #48]	; 0x30
 80057ac:	9b07      	ldr	r3, [sp, #28]
 80057ae:	bfa3      	ittte	ge
 80057b0:	f8cd b030 	strge.w	fp, [sp, #48]	; 0x30
 80057b4:	445f      	addge	r7, fp
 80057b6:	f04f 0800 	movge.w	r8, #0
 80057ba:	ebaa 0a0b 	sublt.w	sl, sl, fp
 80057be:	bfb8      	it	lt
 80057c0:	f1cb 0800 	rsblt	r8, fp, #0
 80057c4:	2b09      	cmp	r3, #9
 80057c6:	f200 80f8 	bhi.w	80059ba <_dtoa_r+0x3e2>
 80057ca:	2b05      	cmp	r3, #5
 80057cc:	bfc4      	itt	gt
 80057ce:	3b04      	subgt	r3, #4
 80057d0:	9307      	strgt	r3, [sp, #28]
 80057d2:	9b07      	ldr	r3, [sp, #28]
 80057d4:	f1a3 0302 	sub.w	r3, r3, #2
 80057d8:	bfcc      	ite	gt
 80057da:	2400      	movgt	r4, #0
 80057dc:	2401      	movle	r4, #1
 80057de:	2b03      	cmp	r3, #3
 80057e0:	f200 80f7 	bhi.w	80059d2 <_dtoa_r+0x3fa>
 80057e4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80057e8:	00e700e5 	.word	0x00e700e5
 80057ec:	00d9001a 	.word	0x00d9001a
 80057f0:	636f4361 	.word	0x636f4361
 80057f4:	3fd287a7 	.word	0x3fd287a7
 80057f8:	8b60c8b3 	.word	0x8b60c8b3
 80057fc:	3fc68a28 	.word	0x3fc68a28
 8005800:	509f79fb 	.word	0x509f79fb
 8005804:	3fd34413 	.word	0x3fd34413
 8005808:	7ff00000 	.word	0x7ff00000
 800580c:	08006fbd 	.word	0x08006fbd
 8005810:	08006fb4 	.word	0x08006fb4
 8005814:	08006f91 	.word	0x08006f91
 8005818:	08006ff8 	.word	0x08006ff8
 800581c:	2301      	movs	r3, #1
 800581e:	930a      	str	r3, [sp, #40]	; 0x28
 8005820:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005822:	2b00      	cmp	r3, #0
 8005824:	f340 80d8 	ble.w	80059d8 <_dtoa_r+0x400>
 8005828:	9306      	str	r3, [sp, #24]
 800582a:	4699      	mov	r9, r3
 800582c:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 800582e:	2200      	movs	r2, #0
 8005830:	6072      	str	r2, [r6, #4]
 8005832:	2104      	movs	r1, #4
 8005834:	f101 0214 	add.w	r2, r1, #20
 8005838:	429a      	cmp	r2, r3
 800583a:	f240 80d2 	bls.w	80059e2 <_dtoa_r+0x40a>
 800583e:	6871      	ldr	r1, [r6, #4]
 8005840:	4628      	mov	r0, r5
 8005842:	f000 fcd5 	bl	80061f0 <_Balloc>
 8005846:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005848:	6030      	str	r0, [r6, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	9304      	str	r3, [sp, #16]
 800584e:	f1b9 0f0e 	cmp.w	r9, #14
 8005852:	d875      	bhi.n	8005940 <_dtoa_r+0x368>
 8005854:	2c00      	cmp	r4, #0
 8005856:	d073      	beq.n	8005940 <_dtoa_r+0x368>
 8005858:	ed9d 7b00 	vldr	d7, [sp]
 800585c:	f1bb 0f00 	cmp.w	fp, #0
 8005860:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8005864:	f340 80ce 	ble.w	8005a04 <_dtoa_r+0x42c>
 8005868:	4ab5      	ldr	r2, [pc, #724]	; (8005b40 <_dtoa_r+0x568>)
 800586a:	f00b 030f 	and.w	r3, fp, #15
 800586e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005872:	ea4f 122b 	mov.w	r2, fp, asr #4
 8005876:	ed93 7b00 	vldr	d7, [r3]
 800587a:	06d3      	lsls	r3, r2, #27
 800587c:	f140 80b6 	bpl.w	80059ec <_dtoa_r+0x414>
 8005880:	4bb0      	ldr	r3, [pc, #704]	; (8005b44 <_dtoa_r+0x56c>)
 8005882:	ed9d 4b0e 	vldr	d4, [sp, #56]	; 0x38
 8005886:	ed93 6b08 	vldr	d6, [r3, #32]
 800588a:	ee84 5b06 	vdiv.f64	d5, d4, d6
 800588e:	ed8d 5b00 	vstr	d5, [sp]
 8005892:	f002 020f 	and.w	r2, r2, #15
 8005896:	2303      	movs	r3, #3
 8005898:	49aa      	ldr	r1, [pc, #680]	; (8005b44 <_dtoa_r+0x56c>)
 800589a:	2a00      	cmp	r2, #0
 800589c:	f040 80a8 	bne.w	80059f0 <_dtoa_r+0x418>
 80058a0:	ed9d 5b00 	vldr	d5, [sp]
 80058a4:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80058a8:	ed8d 6b00 	vstr	d6, [sp]
 80058ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80058ae:	2a00      	cmp	r2, #0
 80058b0:	f000 80da 	beq.w	8005a68 <_dtoa_r+0x490>
 80058b4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80058b8:	ed9d 7b00 	vldr	d7, [sp]
 80058bc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80058c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058c4:	f140 80d0 	bpl.w	8005a68 <_dtoa_r+0x490>
 80058c8:	f1b9 0f00 	cmp.w	r9, #0
 80058cc:	f000 80cc 	beq.w	8005a68 <_dtoa_r+0x490>
 80058d0:	9a06      	ldr	r2, [sp, #24]
 80058d2:	2a00      	cmp	r2, #0
 80058d4:	dd30      	ble.n	8005938 <_dtoa_r+0x360>
 80058d6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80058da:	ee27 7b06 	vmul.f64	d7, d7, d6
 80058de:	ed8d 7b00 	vstr	d7, [sp]
 80058e2:	9c06      	ldr	r4, [sp, #24]
 80058e4:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 80058e8:	3301      	adds	r3, #1
 80058ea:	ed9d 6b00 	vldr	d6, [sp]
 80058ee:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80058f2:	ee07 3a90 	vmov	s15, r3
 80058f6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80058fa:	eea7 5b06 	vfma.f64	d5, d7, d6
 80058fe:	ed8d 5b00 	vstr	d5, [sp]
 8005902:	9b01      	ldr	r3, [sp, #4]
 8005904:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8005908:	9301      	str	r3, [sp, #4]
 800590a:	2c00      	cmp	r4, #0
 800590c:	f040 80af 	bne.w	8005a6e <_dtoa_r+0x496>
 8005910:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8005914:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005918:	ed9d 7b00 	vldr	d7, [sp]
 800591c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005924:	f300 8300 	bgt.w	8005f28 <_dtoa_r+0x950>
 8005928:	eeb1 7b47 	vneg.f64	d7, d7
 800592c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005934:	f100 82f6 	bmi.w	8005f24 <_dtoa_r+0x94c>
 8005938:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 800593c:	e88d 0018 	stmia.w	sp, {r3, r4}
 8005940:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005942:	2b00      	cmp	r3, #0
 8005944:	f2c0 8158 	blt.w	8005bf8 <_dtoa_r+0x620>
 8005948:	f1bb 0f0e 	cmp.w	fp, #14
 800594c:	f300 8154 	bgt.w	8005bf8 <_dtoa_r+0x620>
 8005950:	4b7b      	ldr	r3, [pc, #492]	; (8005b40 <_dtoa_r+0x568>)
 8005952:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005956:	ed93 6b00 	vldr	d6, [r3]
 800595a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800595c:	2b00      	cmp	r3, #0
 800595e:	f280 80f3 	bge.w	8005b48 <_dtoa_r+0x570>
 8005962:	f1b9 0f00 	cmp.w	r9, #0
 8005966:	f300 80ef 	bgt.w	8005b48 <_dtoa_r+0x570>
 800596a:	f040 82da 	bne.w	8005f22 <_dtoa_r+0x94a>
 800596e:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8005972:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005976:	ed9d 7b00 	vldr	d7, [sp]
 800597a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800597e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005982:	464c      	mov	r4, r9
 8005984:	464e      	mov	r6, r9
 8005986:	f280 82ac 	bge.w	8005ee2 <_dtoa_r+0x90a>
 800598a:	9b04      	ldr	r3, [sp, #16]
 800598c:	9904      	ldr	r1, [sp, #16]
 800598e:	2231      	movs	r2, #49	; 0x31
 8005990:	3301      	adds	r3, #1
 8005992:	700a      	strb	r2, [r1, #0]
 8005994:	f10b 0b01 	add.w	fp, fp, #1
 8005998:	e2a7      	b.n	8005eea <_dtoa_r+0x912>
 800599a:	2301      	movs	r3, #1
 800599c:	930a      	str	r3, [sp, #40]	; 0x28
 800599e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059a0:	445b      	add	r3, fp
 80059a2:	f103 0901 	add.w	r9, r3, #1
 80059a6:	9306      	str	r3, [sp, #24]
 80059a8:	464b      	mov	r3, r9
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	bfb8      	it	lt
 80059ae:	2301      	movlt	r3, #1
 80059b0:	e73c      	b.n	800582c <_dtoa_r+0x254>
 80059b2:	2300      	movs	r3, #0
 80059b4:	e733      	b.n	800581e <_dtoa_r+0x246>
 80059b6:	2300      	movs	r3, #0
 80059b8:	e7f0      	b.n	800599c <_dtoa_r+0x3c4>
 80059ba:	2401      	movs	r4, #1
 80059bc:	2300      	movs	r3, #0
 80059be:	9307      	str	r3, [sp, #28]
 80059c0:	940a      	str	r4, [sp, #40]	; 0x28
 80059c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059c6:	9306      	str	r3, [sp, #24]
 80059c8:	4699      	mov	r9, r3
 80059ca:	2200      	movs	r2, #0
 80059cc:	2312      	movs	r3, #18
 80059ce:	920b      	str	r2, [sp, #44]	; 0x2c
 80059d0:	e72c      	b.n	800582c <_dtoa_r+0x254>
 80059d2:	2301      	movs	r3, #1
 80059d4:	930a      	str	r3, [sp, #40]	; 0x28
 80059d6:	e7f4      	b.n	80059c2 <_dtoa_r+0x3ea>
 80059d8:	2301      	movs	r3, #1
 80059da:	9306      	str	r3, [sp, #24]
 80059dc:	4699      	mov	r9, r3
 80059de:	461a      	mov	r2, r3
 80059e0:	e7f5      	b.n	80059ce <_dtoa_r+0x3f6>
 80059e2:	6872      	ldr	r2, [r6, #4]
 80059e4:	3201      	adds	r2, #1
 80059e6:	6072      	str	r2, [r6, #4]
 80059e8:	0049      	lsls	r1, r1, #1
 80059ea:	e723      	b.n	8005834 <_dtoa_r+0x25c>
 80059ec:	2302      	movs	r3, #2
 80059ee:	e753      	b.n	8005898 <_dtoa_r+0x2c0>
 80059f0:	07d6      	lsls	r6, r2, #31
 80059f2:	d504      	bpl.n	80059fe <_dtoa_r+0x426>
 80059f4:	ed91 6b00 	vldr	d6, [r1]
 80059f8:	3301      	adds	r3, #1
 80059fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80059fe:	1052      	asrs	r2, r2, #1
 8005a00:	3108      	adds	r1, #8
 8005a02:	e74a      	b.n	800589a <_dtoa_r+0x2c2>
 8005a04:	d02e      	beq.n	8005a64 <_dtoa_r+0x48c>
 8005a06:	f1cb 0200 	rsb	r2, fp, #0
 8005a0a:	4b4d      	ldr	r3, [pc, #308]	; (8005b40 <_dtoa_r+0x568>)
 8005a0c:	f002 010f 	and.w	r1, r2, #15
 8005a10:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005a14:	ed93 7b00 	vldr	d7, [r3]
 8005a18:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8005a1c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005a20:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005a24:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8005a28:	4946      	ldr	r1, [pc, #280]	; (8005b44 <_dtoa_r+0x56c>)
 8005a2a:	e88d 0018 	stmia.w	sp, {r3, r4}
 8005a2e:	1112      	asrs	r2, r2, #4
 8005a30:	2000      	movs	r0, #0
 8005a32:	2302      	movs	r3, #2
 8005a34:	b93a      	cbnz	r2, 8005a46 <_dtoa_r+0x46e>
 8005a36:	2800      	cmp	r0, #0
 8005a38:	f43f af38 	beq.w	80058ac <_dtoa_r+0x2d4>
 8005a3c:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8005a40:	e88d 0006 	stmia.w	sp, {r1, r2}
 8005a44:	e732      	b.n	80058ac <_dtoa_r+0x2d4>
 8005a46:	07d4      	lsls	r4, r2, #31
 8005a48:	d509      	bpl.n	8005a5e <_dtoa_r+0x486>
 8005a4a:	ed9d 6b08 	vldr	d6, [sp, #32]
 8005a4e:	ed91 7b00 	vldr	d7, [r1]
 8005a52:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005a56:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	2001      	movs	r0, #1
 8005a5e:	1052      	asrs	r2, r2, #1
 8005a60:	3108      	adds	r1, #8
 8005a62:	e7e7      	b.n	8005a34 <_dtoa_r+0x45c>
 8005a64:	2302      	movs	r3, #2
 8005a66:	e721      	b.n	80058ac <_dtoa_r+0x2d4>
 8005a68:	465a      	mov	r2, fp
 8005a6a:	464c      	mov	r4, r9
 8005a6c:	e73d      	b.n	80058ea <_dtoa_r+0x312>
 8005a6e:	9804      	ldr	r0, [sp, #16]
 8005a70:	4b33      	ldr	r3, [pc, #204]	; (8005b40 <_dtoa_r+0x568>)
 8005a72:	1e61      	subs	r1, r4, #1
 8005a74:	4404      	add	r4, r0
 8005a76:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005a78:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005a7c:	ed93 5b00 	vldr	d5, [r3]
 8005a80:	b358      	cbz	r0, 8005ada <_dtoa_r+0x502>
 8005a82:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8005a86:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8005a8a:	ed9d 5b00 	vldr	d5, [sp]
 8005a8e:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8005a92:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005a96:	9b04      	ldr	r3, [sp, #16]
 8005a98:	ee37 7b45 	vsub.f64	d7, d7, d5
 8005a9c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005aa0:	ee14 1a90 	vmov	r1, s9
 8005aa4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005aa8:	3130      	adds	r1, #48	; 0x30
 8005aaa:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005aae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8005aba:	d439      	bmi.n	8005b30 <_dtoa_r+0x558>
 8005abc:	ee32 5b46 	vsub.f64	d5, d2, d6
 8005ac0:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8005ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ac8:	d47b      	bmi.n	8005bc2 <_dtoa_r+0x5ea>
 8005aca:	42a3      	cmp	r3, r4
 8005acc:	f43f af34 	beq.w	8005938 <_dtoa_r+0x360>
 8005ad0:	ee27 7b03 	vmul.f64	d7, d7, d3
 8005ad4:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005ad8:	e7e0      	b.n	8005a9c <_dtoa_r+0x4c4>
 8005ada:	ed9d 7b00 	vldr	d7, [sp]
 8005ade:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005ae2:	9b04      	ldr	r3, [sp, #16]
 8005ae4:	ee25 5b07 	vmul.f64	d5, d5, d7
 8005ae8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005aec:	ee14 1a90 	vmov	r1, s9
 8005af0:	3130      	adds	r1, #48	; 0x30
 8005af2:	f803 1b01 	strb.w	r1, [r3], #1
 8005af6:	429c      	cmp	r4, r3
 8005af8:	eeb8 7be4 	vcvt.f64.s32	d7, s9
 8005afc:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005b00:	d11a      	bne.n	8005b38 <_dtoa_r+0x560>
 8005b02:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8005b06:	ee35 4b07 	vadd.f64	d4, d5, d7
 8005b0a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8005b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b12:	dc56      	bgt.n	8005bc2 <_dtoa_r+0x5ea>
 8005b14:	ee37 5b45 	vsub.f64	d5, d7, d5
 8005b18:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8005b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b20:	f57f af0a 	bpl.w	8005938 <_dtoa_r+0x360>
 8005b24:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8005b28:	2930      	cmp	r1, #48	; 0x30
 8005b2a:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8005b2e:	d001      	beq.n	8005b34 <_dtoa_r+0x55c>
 8005b30:	4693      	mov	fp, r2
 8005b32:	e031      	b.n	8005b98 <_dtoa_r+0x5c0>
 8005b34:	4603      	mov	r3, r0
 8005b36:	e7f5      	b.n	8005b24 <_dtoa_r+0x54c>
 8005b38:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005b3c:	e7d4      	b.n	8005ae8 <_dtoa_r+0x510>
 8005b3e:	bf00      	nop
 8005b40:	08006ff8 	.word	0x08006ff8
 8005b44:	08006fd0 	.word	0x08006fd0
 8005b48:	ed9d 7b00 	vldr	d7, [sp]
 8005b4c:	eeb1 3b46 	vneg.f64	d3, d6
 8005b50:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8005b54:	9b04      	ldr	r3, [sp, #16]
 8005b56:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8005b5a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8005b5e:	ee15 2a10 	vmov	r2, s10
 8005b62:	3230      	adds	r2, #48	; 0x30
 8005b64:	f803 2b01 	strb.w	r2, [r3], #1
 8005b68:	9a04      	ldr	r2, [sp, #16]
 8005b6a:	1a9a      	subs	r2, r3, r2
 8005b6c:	4591      	cmp	r9, r2
 8005b6e:	eeb8 2bc5 	vcvt.f64.s32	d2, s10
 8005b72:	eea3 7b02 	vfma.f64	d7, d3, d2
 8005b76:	d137      	bne.n	8005be8 <_dtoa_r+0x610>
 8005b78:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005b7c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b84:	d41c      	bmi.n	8005bc0 <_dtoa_r+0x5e8>
 8005b86:	eeb4 6b47 	vcmp.f64	d6, d7
 8005b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b8e:	d103      	bne.n	8005b98 <_dtoa_r+0x5c0>
 8005b90:	ee15 2a10 	vmov	r2, s10
 8005b94:	07d2      	lsls	r2, r2, #31
 8005b96:	d413      	bmi.n	8005bc0 <_dtoa_r+0x5e8>
 8005b98:	9903      	ldr	r1, [sp, #12]
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	4628      	mov	r0, r5
 8005b9e:	f000 fb5b 	bl	8006258 <_Bfree>
 8005ba2:	9b00      	ldr	r3, [sp, #0]
 8005ba4:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	701a      	strb	r2, [r3, #0]
 8005baa:	f10b 0201 	add.w	r2, fp, #1
 8005bae:	600a      	str	r2, [r1, #0]
 8005bb0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005bb2:	2a00      	cmp	r2, #0
 8005bb4:	f47f ad57 	bne.w	8005666 <_dtoa_r+0x8e>
 8005bb8:	9804      	ldr	r0, [sp, #16]
 8005bba:	b015      	add	sp, #84	; 0x54
 8005bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bc0:	465a      	mov	r2, fp
 8005bc2:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8005bc6:	2839      	cmp	r0, #57	; 0x39
 8005bc8:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8005bcc:	d106      	bne.n	8005bdc <_dtoa_r+0x604>
 8005bce:	9804      	ldr	r0, [sp, #16]
 8005bd0:	4288      	cmp	r0, r1
 8005bd2:	d107      	bne.n	8005be4 <_dtoa_r+0x60c>
 8005bd4:	2130      	movs	r1, #48	; 0x30
 8005bd6:	7001      	strb	r1, [r0, #0]
 8005bd8:	3201      	adds	r2, #1
 8005bda:	4601      	mov	r1, r0
 8005bdc:	7808      	ldrb	r0, [r1, #0]
 8005bde:	3001      	adds	r0, #1
 8005be0:	7008      	strb	r0, [r1, #0]
 8005be2:	e7a5      	b.n	8005b30 <_dtoa_r+0x558>
 8005be4:	460b      	mov	r3, r1
 8005be6:	e7ec      	b.n	8005bc2 <_dtoa_r+0x5ea>
 8005be8:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005bec:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bf4:	d1af      	bne.n	8005b56 <_dtoa_r+0x57e>
 8005bf6:	e7cf      	b.n	8005b98 <_dtoa_r+0x5c0>
 8005bf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bfa:	2a00      	cmp	r2, #0
 8005bfc:	f000 8129 	beq.w	8005e52 <_dtoa_r+0x87a>
 8005c00:	9a07      	ldr	r2, [sp, #28]
 8005c02:	2a01      	cmp	r2, #1
 8005c04:	f300 810b 	bgt.w	8005e1e <_dtoa_r+0x846>
 8005c08:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005c0a:	2a00      	cmp	r2, #0
 8005c0c:	f000 8103 	beq.w	8005e16 <_dtoa_r+0x83e>
 8005c10:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005c14:	4644      	mov	r4, r8
 8005c16:	f8cd a020 	str.w	sl, [sp, #32]
 8005c1a:	2101      	movs	r1, #1
 8005c1c:	4628      	mov	r0, r5
 8005c1e:	449a      	add	sl, r3
 8005c20:	441f      	add	r7, r3
 8005c22:	f000 fbb9 	bl	8006398 <__i2b>
 8005c26:	4606      	mov	r6, r0
 8005c28:	9b08      	ldr	r3, [sp, #32]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	dd0a      	ble.n	8005c44 <_dtoa_r+0x66c>
 8005c2e:	2f00      	cmp	r7, #0
 8005c30:	dd08      	ble.n	8005c44 <_dtoa_r+0x66c>
 8005c32:	42bb      	cmp	r3, r7
 8005c34:	9a08      	ldr	r2, [sp, #32]
 8005c36:	bfa8      	it	ge
 8005c38:	463b      	movge	r3, r7
 8005c3a:	1ad2      	subs	r2, r2, r3
 8005c3c:	ebaa 0a03 	sub.w	sl, sl, r3
 8005c40:	9208      	str	r2, [sp, #32]
 8005c42:	1aff      	subs	r7, r7, r3
 8005c44:	f1b8 0f00 	cmp.w	r8, #0
 8005c48:	d01f      	beq.n	8005c8a <_dtoa_r+0x6b2>
 8005c4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f000 8105 	beq.w	8005e5c <_dtoa_r+0x884>
 8005c52:	2c00      	cmp	r4, #0
 8005c54:	dd11      	ble.n	8005c7a <_dtoa_r+0x6a2>
 8005c56:	4631      	mov	r1, r6
 8005c58:	4622      	mov	r2, r4
 8005c5a:	4628      	mov	r0, r5
 8005c5c:	f000 fc32 	bl	80064c4 <__pow5mult>
 8005c60:	9a03      	ldr	r2, [sp, #12]
 8005c62:	4601      	mov	r1, r0
 8005c64:	4606      	mov	r6, r0
 8005c66:	4628      	mov	r0, r5
 8005c68:	f000 fb9f 	bl	80063aa <__multiply>
 8005c6c:	9903      	ldr	r1, [sp, #12]
 8005c6e:	900e      	str	r0, [sp, #56]	; 0x38
 8005c70:	4628      	mov	r0, r5
 8005c72:	f000 faf1 	bl	8006258 <_Bfree>
 8005c76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c78:	9303      	str	r3, [sp, #12]
 8005c7a:	ebb8 0204 	subs.w	r2, r8, r4
 8005c7e:	d004      	beq.n	8005c8a <_dtoa_r+0x6b2>
 8005c80:	9903      	ldr	r1, [sp, #12]
 8005c82:	4628      	mov	r0, r5
 8005c84:	f000 fc1e 	bl	80064c4 <__pow5mult>
 8005c88:	9003      	str	r0, [sp, #12]
 8005c8a:	2101      	movs	r1, #1
 8005c8c:	4628      	mov	r0, r5
 8005c8e:	f000 fb83 	bl	8006398 <__i2b>
 8005c92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	4604      	mov	r4, r0
 8005c98:	f340 80e2 	ble.w	8005e60 <_dtoa_r+0x888>
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	4601      	mov	r1, r0
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	f000 fc0f 	bl	80064c4 <__pow5mult>
 8005ca6:	9b07      	ldr	r3, [sp, #28]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	4604      	mov	r4, r0
 8005cac:	f340 80db 	ble.w	8005e66 <_dtoa_r+0x88e>
 8005cb0:	f04f 0800 	mov.w	r8, #0
 8005cb4:	6923      	ldr	r3, [r4, #16]
 8005cb6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005cba:	6918      	ldr	r0, [r3, #16]
 8005cbc:	f000 fb1e 	bl	80062fc <__hi0bits>
 8005cc0:	f1c0 0020 	rsb	r0, r0, #32
 8005cc4:	4438      	add	r0, r7
 8005cc6:	f010 001f 	ands.w	r0, r0, #31
 8005cca:	f000 80f1 	beq.w	8005eb0 <_dtoa_r+0x8d8>
 8005cce:	f1c0 0320 	rsb	r3, r0, #32
 8005cd2:	2b04      	cmp	r3, #4
 8005cd4:	f340 80e3 	ble.w	8005e9e <_dtoa_r+0x8c6>
 8005cd8:	9b08      	ldr	r3, [sp, #32]
 8005cda:	f1c0 001c 	rsb	r0, r0, #28
 8005cde:	4403      	add	r3, r0
 8005ce0:	4482      	add	sl, r0
 8005ce2:	9308      	str	r3, [sp, #32]
 8005ce4:	4407      	add	r7, r0
 8005ce6:	f1ba 0f00 	cmp.w	sl, #0
 8005cea:	dd05      	ble.n	8005cf8 <_dtoa_r+0x720>
 8005cec:	4652      	mov	r2, sl
 8005cee:	9903      	ldr	r1, [sp, #12]
 8005cf0:	4628      	mov	r0, r5
 8005cf2:	f000 fc35 	bl	8006560 <__lshift>
 8005cf6:	9003      	str	r0, [sp, #12]
 8005cf8:	2f00      	cmp	r7, #0
 8005cfa:	dd05      	ble.n	8005d08 <_dtoa_r+0x730>
 8005cfc:	4621      	mov	r1, r4
 8005cfe:	463a      	mov	r2, r7
 8005d00:	4628      	mov	r0, r5
 8005d02:	f000 fc2d 	bl	8006560 <__lshift>
 8005d06:	4604      	mov	r4, r0
 8005d08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	f000 80d2 	beq.w	8005eb4 <_dtoa_r+0x8dc>
 8005d10:	4621      	mov	r1, r4
 8005d12:	9803      	ldr	r0, [sp, #12]
 8005d14:	f000 fc75 	bl	8006602 <__mcmp>
 8005d18:	2800      	cmp	r0, #0
 8005d1a:	f280 80cb 	bge.w	8005eb4 <_dtoa_r+0x8dc>
 8005d1e:	2300      	movs	r3, #0
 8005d20:	220a      	movs	r2, #10
 8005d22:	9903      	ldr	r1, [sp, #12]
 8005d24:	4628      	mov	r0, r5
 8005d26:	f000 faae 	bl	8006286 <__multadd>
 8005d2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d2c:	9003      	str	r0, [sp, #12]
 8005d2e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	f000 81ae 	beq.w	8006094 <_dtoa_r+0xabc>
 8005d38:	2300      	movs	r3, #0
 8005d3a:	4631      	mov	r1, r6
 8005d3c:	220a      	movs	r2, #10
 8005d3e:	4628      	mov	r0, r5
 8005d40:	f000 faa1 	bl	8006286 <__multadd>
 8005d44:	9b06      	ldr	r3, [sp, #24]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	4606      	mov	r6, r0
 8005d4a:	dc03      	bgt.n	8005d54 <_dtoa_r+0x77c>
 8005d4c:	9b07      	ldr	r3, [sp, #28]
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	f300 80b8 	bgt.w	8005ec4 <_dtoa_r+0x8ec>
 8005d54:	9b08      	ldr	r3, [sp, #32]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	dd05      	ble.n	8005d66 <_dtoa_r+0x78e>
 8005d5a:	4631      	mov	r1, r6
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	4628      	mov	r0, r5
 8005d60:	f000 fbfe 	bl	8006560 <__lshift>
 8005d64:	4606      	mov	r6, r0
 8005d66:	f1b8 0f00 	cmp.w	r8, #0
 8005d6a:	f000 8115 	beq.w	8005f98 <_dtoa_r+0x9c0>
 8005d6e:	6871      	ldr	r1, [r6, #4]
 8005d70:	4628      	mov	r0, r5
 8005d72:	f000 fa3d 	bl	80061f0 <_Balloc>
 8005d76:	6932      	ldr	r2, [r6, #16]
 8005d78:	3202      	adds	r2, #2
 8005d7a:	4607      	mov	r7, r0
 8005d7c:	0092      	lsls	r2, r2, #2
 8005d7e:	f106 010c 	add.w	r1, r6, #12
 8005d82:	300c      	adds	r0, #12
 8005d84:	f7fe fc02 	bl	800458c <memcpy>
 8005d88:	2201      	movs	r2, #1
 8005d8a:	4639      	mov	r1, r7
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	f000 fbe7 	bl	8006560 <__lshift>
 8005d92:	9b00      	ldr	r3, [sp, #0]
 8005d94:	9f04      	ldr	r7, [sp, #16]
 8005d96:	f003 0301 	and.w	r3, r3, #1
 8005d9a:	46b1      	mov	r9, r6
 8005d9c:	9308      	str	r3, [sp, #32]
 8005d9e:	4606      	mov	r6, r0
 8005da0:	4621      	mov	r1, r4
 8005da2:	9803      	ldr	r0, [sp, #12]
 8005da4:	f7ff fb8a 	bl	80054bc <quorem>
 8005da8:	4649      	mov	r1, r9
 8005daa:	4682      	mov	sl, r0
 8005dac:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005db0:	9803      	ldr	r0, [sp, #12]
 8005db2:	f000 fc26 	bl	8006602 <__mcmp>
 8005db6:	4632      	mov	r2, r6
 8005db8:	9000      	str	r0, [sp, #0]
 8005dba:	4621      	mov	r1, r4
 8005dbc:	4628      	mov	r0, r5
 8005dbe:	f000 fc3a 	bl	8006636 <__mdiff>
 8005dc2:	68c3      	ldr	r3, [r0, #12]
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	f040 80e8 	bne.w	8005f9c <_dtoa_r+0x9c4>
 8005dcc:	4601      	mov	r1, r0
 8005dce:	900a      	str	r0, [sp, #40]	; 0x28
 8005dd0:	9803      	ldr	r0, [sp, #12]
 8005dd2:	f000 fc16 	bl	8006602 <__mcmp>
 8005dd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005dd8:	4603      	mov	r3, r0
 8005dda:	4611      	mov	r1, r2
 8005ddc:	4628      	mov	r0, r5
 8005dde:	930a      	str	r3, [sp, #40]	; 0x28
 8005de0:	f000 fa3a 	bl	8006258 <_Bfree>
 8005de4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f040 80da 	bne.w	8005fa0 <_dtoa_r+0x9c8>
 8005dec:	9a07      	ldr	r2, [sp, #28]
 8005dee:	2a00      	cmp	r2, #0
 8005df0:	f040 80d6 	bne.w	8005fa0 <_dtoa_r+0x9c8>
 8005df4:	9a08      	ldr	r2, [sp, #32]
 8005df6:	2a00      	cmp	r2, #0
 8005df8:	f040 80d2 	bne.w	8005fa0 <_dtoa_r+0x9c8>
 8005dfc:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005e00:	f000 80ee 	beq.w	8005fe0 <_dtoa_r+0xa08>
 8005e04:	9b00      	ldr	r3, [sp, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	dd01      	ble.n	8005e0e <_dtoa_r+0x836>
 8005e0a:	f10a 0831 	add.w	r8, sl, #49	; 0x31
 8005e0e:	1c7b      	adds	r3, r7, #1
 8005e10:	f887 8000 	strb.w	r8, [r7]
 8005e14:	e06b      	b.n	8005eee <_dtoa_r+0x916>
 8005e16:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e18:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005e1c:	e6fa      	b.n	8005c14 <_dtoa_r+0x63c>
 8005e1e:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 8005e22:	45a0      	cmp	r8, r4
 8005e24:	bfbf      	itttt	lt
 8005e26:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8005e28:	eba4 0808 	sublt.w	r8, r4, r8
 8005e2c:	4443      	addlt	r3, r8
 8005e2e:	930c      	strlt	r3, [sp, #48]	; 0x30
 8005e30:	bfb6      	itet	lt
 8005e32:	46a0      	movlt	r8, r4
 8005e34:	eba8 0404 	subge.w	r4, r8, r4
 8005e38:	2400      	movlt	r4, #0
 8005e3a:	f1b9 0f00 	cmp.w	r9, #0
 8005e3e:	bfbb      	ittet	lt
 8005e40:	ebaa 0309 	sublt.w	r3, sl, r9
 8005e44:	9308      	strlt	r3, [sp, #32]
 8005e46:	f8cd a020 	strge.w	sl, [sp, #32]
 8005e4a:	2300      	movlt	r3, #0
 8005e4c:	bfa8      	it	ge
 8005e4e:	464b      	movge	r3, r9
 8005e50:	e6e3      	b.n	8005c1a <_dtoa_r+0x642>
 8005e52:	4644      	mov	r4, r8
 8005e54:	f8cd a020 	str.w	sl, [sp, #32]
 8005e58:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005e5a:	e6e5      	b.n	8005c28 <_dtoa_r+0x650>
 8005e5c:	4642      	mov	r2, r8
 8005e5e:	e70f      	b.n	8005c80 <_dtoa_r+0x6a8>
 8005e60:	9b07      	ldr	r3, [sp, #28]
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	dc16      	bgt.n	8005e94 <_dtoa_r+0x8bc>
 8005e66:	9b00      	ldr	r3, [sp, #0]
 8005e68:	b9a3      	cbnz	r3, 8005e94 <_dtoa_r+0x8bc>
 8005e6a:	9b01      	ldr	r3, [sp, #4]
 8005e6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e70:	b983      	cbnz	r3, 8005e94 <_dtoa_r+0x8bc>
 8005e72:	9b01      	ldr	r3, [sp, #4]
 8005e74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e78:	0d1b      	lsrs	r3, r3, #20
 8005e7a:	051b      	lsls	r3, r3, #20
 8005e7c:	b16b      	cbz	r3, 8005e9a <_dtoa_r+0x8c2>
 8005e7e:	f10a 0a01 	add.w	sl, sl, #1
 8005e82:	3701      	adds	r7, #1
 8005e84:	f04f 0801 	mov.w	r8, #1
 8005e88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	f47f af12 	bne.w	8005cb4 <_dtoa_r+0x6dc>
 8005e90:	2001      	movs	r0, #1
 8005e92:	e717      	b.n	8005cc4 <_dtoa_r+0x6ec>
 8005e94:	f04f 0800 	mov.w	r8, #0
 8005e98:	e7f6      	b.n	8005e88 <_dtoa_r+0x8b0>
 8005e9a:	4698      	mov	r8, r3
 8005e9c:	e7f4      	b.n	8005e88 <_dtoa_r+0x8b0>
 8005e9e:	f43f af22 	beq.w	8005ce6 <_dtoa_r+0x70e>
 8005ea2:	9a08      	ldr	r2, [sp, #32]
 8005ea4:	331c      	adds	r3, #28
 8005ea6:	441a      	add	r2, r3
 8005ea8:	449a      	add	sl, r3
 8005eaa:	9208      	str	r2, [sp, #32]
 8005eac:	441f      	add	r7, r3
 8005eae:	e71a      	b.n	8005ce6 <_dtoa_r+0x70e>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	e7f6      	b.n	8005ea2 <_dtoa_r+0x8ca>
 8005eb4:	f1b9 0f00 	cmp.w	r9, #0
 8005eb8:	dc39      	bgt.n	8005f2e <_dtoa_r+0x956>
 8005eba:	9b07      	ldr	r3, [sp, #28]
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	dd36      	ble.n	8005f2e <_dtoa_r+0x956>
 8005ec0:	f8cd 9018 	str.w	r9, [sp, #24]
 8005ec4:	9b06      	ldr	r3, [sp, #24]
 8005ec6:	b963      	cbnz	r3, 8005ee2 <_dtoa_r+0x90a>
 8005ec8:	4621      	mov	r1, r4
 8005eca:	2205      	movs	r2, #5
 8005ecc:	4628      	mov	r0, r5
 8005ece:	f000 f9da 	bl	8006286 <__multadd>
 8005ed2:	4601      	mov	r1, r0
 8005ed4:	4604      	mov	r4, r0
 8005ed6:	9803      	ldr	r0, [sp, #12]
 8005ed8:	f000 fb93 	bl	8006602 <__mcmp>
 8005edc:	2800      	cmp	r0, #0
 8005ede:	f73f ad54 	bgt.w	800598a <_dtoa_r+0x3b2>
 8005ee2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ee4:	ea6f 0b03 	mvn.w	fp, r3
 8005ee8:	9b04      	ldr	r3, [sp, #16]
 8005eea:	f04f 0900 	mov.w	r9, #0
 8005eee:	4621      	mov	r1, r4
 8005ef0:	4628      	mov	r0, r5
 8005ef2:	9300      	str	r3, [sp, #0]
 8005ef4:	f000 f9b0 	bl	8006258 <_Bfree>
 8005ef8:	9b00      	ldr	r3, [sp, #0]
 8005efa:	2e00      	cmp	r6, #0
 8005efc:	f43f ae4c 	beq.w	8005b98 <_dtoa_r+0x5c0>
 8005f00:	f1b9 0f00 	cmp.w	r9, #0
 8005f04:	d006      	beq.n	8005f14 <_dtoa_r+0x93c>
 8005f06:	45b1      	cmp	r9, r6
 8005f08:	d004      	beq.n	8005f14 <_dtoa_r+0x93c>
 8005f0a:	4649      	mov	r1, r9
 8005f0c:	4628      	mov	r0, r5
 8005f0e:	f000 f9a3 	bl	8006258 <_Bfree>
 8005f12:	9b00      	ldr	r3, [sp, #0]
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	4631      	mov	r1, r6
 8005f18:	4628      	mov	r0, r5
 8005f1a:	f000 f99d 	bl	8006258 <_Bfree>
 8005f1e:	9b00      	ldr	r3, [sp, #0]
 8005f20:	e63a      	b.n	8005b98 <_dtoa_r+0x5c0>
 8005f22:	2400      	movs	r4, #0
 8005f24:	4626      	mov	r6, r4
 8005f26:	e7dc      	b.n	8005ee2 <_dtoa_r+0x90a>
 8005f28:	4693      	mov	fp, r2
 8005f2a:	4626      	mov	r6, r4
 8005f2c:	e52d      	b.n	800598a <_dtoa_r+0x3b2>
 8005f2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f30:	f8cd 9018 	str.w	r9, [sp, #24]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f47f af0d 	bne.w	8005d54 <_dtoa_r+0x77c>
 8005f3a:	9f04      	ldr	r7, [sp, #16]
 8005f3c:	9803      	ldr	r0, [sp, #12]
 8005f3e:	4621      	mov	r1, r4
 8005f40:	f7ff fabc 	bl	80054bc <quorem>
 8005f44:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005f48:	f807 8b01 	strb.w	r8, [r7], #1
 8005f4c:	9b04      	ldr	r3, [sp, #16]
 8005f4e:	9a06      	ldr	r2, [sp, #24]
 8005f50:	1afb      	subs	r3, r7, r3
 8005f52:	429a      	cmp	r2, r3
 8005f54:	f300 8081 	bgt.w	800605a <_dtoa_r+0xa82>
 8005f58:	9b04      	ldr	r3, [sp, #16]
 8005f5a:	2a01      	cmp	r2, #1
 8005f5c:	bfac      	ite	ge
 8005f5e:	189b      	addge	r3, r3, r2
 8005f60:	3301      	addlt	r3, #1
 8005f62:	461f      	mov	r7, r3
 8005f64:	f04f 0900 	mov.w	r9, #0
 8005f68:	2201      	movs	r2, #1
 8005f6a:	9903      	ldr	r1, [sp, #12]
 8005f6c:	4628      	mov	r0, r5
 8005f6e:	f000 faf7 	bl	8006560 <__lshift>
 8005f72:	4621      	mov	r1, r4
 8005f74:	9003      	str	r0, [sp, #12]
 8005f76:	f000 fb44 	bl	8006602 <__mcmp>
 8005f7a:	2800      	cmp	r0, #0
 8005f7c:	dc33      	bgt.n	8005fe6 <_dtoa_r+0xa0e>
 8005f7e:	d102      	bne.n	8005f86 <_dtoa_r+0x9ae>
 8005f80:	f018 0f01 	tst.w	r8, #1
 8005f84:	d12f      	bne.n	8005fe6 <_dtoa_r+0xa0e>
 8005f86:	463b      	mov	r3, r7
 8005f88:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8005f8c:	2a30      	cmp	r2, #48	; 0x30
 8005f8e:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8005f92:	d1ac      	bne.n	8005eee <_dtoa_r+0x916>
 8005f94:	460b      	mov	r3, r1
 8005f96:	e7f7      	b.n	8005f88 <_dtoa_r+0x9b0>
 8005f98:	4630      	mov	r0, r6
 8005f9a:	e6fa      	b.n	8005d92 <_dtoa_r+0x7ba>
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e71c      	b.n	8005dda <_dtoa_r+0x802>
 8005fa0:	9a00      	ldr	r2, [sp, #0]
 8005fa2:	2a00      	cmp	r2, #0
 8005fa4:	db04      	blt.n	8005fb0 <_dtoa_r+0x9d8>
 8005fa6:	d127      	bne.n	8005ff8 <_dtoa_r+0xa20>
 8005fa8:	9a07      	ldr	r2, [sp, #28]
 8005faa:	bb2a      	cbnz	r2, 8005ff8 <_dtoa_r+0xa20>
 8005fac:	9a08      	ldr	r2, [sp, #32]
 8005fae:	bb1a      	cbnz	r2, 8005ff8 <_dtoa_r+0xa20>
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f77f af2c 	ble.w	8005e0e <_dtoa_r+0x836>
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	9903      	ldr	r1, [sp, #12]
 8005fba:	4628      	mov	r0, r5
 8005fbc:	f000 fad0 	bl	8006560 <__lshift>
 8005fc0:	4621      	mov	r1, r4
 8005fc2:	9003      	str	r0, [sp, #12]
 8005fc4:	f000 fb1d 	bl	8006602 <__mcmp>
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	dc05      	bgt.n	8005fd8 <_dtoa_r+0xa00>
 8005fcc:	f47f af1f 	bne.w	8005e0e <_dtoa_r+0x836>
 8005fd0:	f018 0f01 	tst.w	r8, #1
 8005fd4:	f43f af1b 	beq.w	8005e0e <_dtoa_r+0x836>
 8005fd8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005fdc:	f47f af15 	bne.w	8005e0a <_dtoa_r+0x832>
 8005fe0:	2339      	movs	r3, #57	; 0x39
 8005fe2:	703b      	strb	r3, [r7, #0]
 8005fe4:	3701      	adds	r7, #1
 8005fe6:	463b      	mov	r3, r7
 8005fe8:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8005fec:	2a39      	cmp	r2, #57	; 0x39
 8005fee:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8005ff2:	d03a      	beq.n	800606a <_dtoa_r+0xa92>
 8005ff4:	3201      	adds	r2, #1
 8005ff6:	e03f      	b.n	8006078 <_dtoa_r+0xaa0>
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f107 0301 	add.w	r3, r7, #1
 8005ffe:	dd05      	ble.n	800600c <_dtoa_r+0xa34>
 8006000:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006004:	d0ec      	beq.n	8005fe0 <_dtoa_r+0xa08>
 8006006:	f108 0801 	add.w	r8, r8, #1
 800600a:	e701      	b.n	8005e10 <_dtoa_r+0x838>
 800600c:	461f      	mov	r7, r3
 800600e:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006012:	9b04      	ldr	r3, [sp, #16]
 8006014:	9a06      	ldr	r2, [sp, #24]
 8006016:	1afb      	subs	r3, r7, r3
 8006018:	4293      	cmp	r3, r2
 800601a:	d0a5      	beq.n	8005f68 <_dtoa_r+0x990>
 800601c:	2300      	movs	r3, #0
 800601e:	220a      	movs	r2, #10
 8006020:	9903      	ldr	r1, [sp, #12]
 8006022:	4628      	mov	r0, r5
 8006024:	f000 f92f 	bl	8006286 <__multadd>
 8006028:	45b1      	cmp	r9, r6
 800602a:	9003      	str	r0, [sp, #12]
 800602c:	f04f 0300 	mov.w	r3, #0
 8006030:	f04f 020a 	mov.w	r2, #10
 8006034:	4649      	mov	r1, r9
 8006036:	4628      	mov	r0, r5
 8006038:	d104      	bne.n	8006044 <_dtoa_r+0xa6c>
 800603a:	f000 f924 	bl	8006286 <__multadd>
 800603e:	4681      	mov	r9, r0
 8006040:	4606      	mov	r6, r0
 8006042:	e6ad      	b.n	8005da0 <_dtoa_r+0x7c8>
 8006044:	f000 f91f 	bl	8006286 <__multadd>
 8006048:	4631      	mov	r1, r6
 800604a:	4681      	mov	r9, r0
 800604c:	2300      	movs	r3, #0
 800604e:	220a      	movs	r2, #10
 8006050:	4628      	mov	r0, r5
 8006052:	f000 f918 	bl	8006286 <__multadd>
 8006056:	4606      	mov	r6, r0
 8006058:	e6a2      	b.n	8005da0 <_dtoa_r+0x7c8>
 800605a:	2300      	movs	r3, #0
 800605c:	220a      	movs	r2, #10
 800605e:	9903      	ldr	r1, [sp, #12]
 8006060:	4628      	mov	r0, r5
 8006062:	f000 f910 	bl	8006286 <__multadd>
 8006066:	9003      	str	r0, [sp, #12]
 8006068:	e768      	b.n	8005f3c <_dtoa_r+0x964>
 800606a:	9a04      	ldr	r2, [sp, #16]
 800606c:	428a      	cmp	r2, r1
 800606e:	d105      	bne.n	800607c <_dtoa_r+0xaa4>
 8006070:	9904      	ldr	r1, [sp, #16]
 8006072:	f10b 0b01 	add.w	fp, fp, #1
 8006076:	2231      	movs	r2, #49	; 0x31
 8006078:	700a      	strb	r2, [r1, #0]
 800607a:	e738      	b.n	8005eee <_dtoa_r+0x916>
 800607c:	460b      	mov	r3, r1
 800607e:	e7b3      	b.n	8005fe8 <_dtoa_r+0xa10>
 8006080:	4b09      	ldr	r3, [pc, #36]	; (80060a8 <_dtoa_r+0xad0>)
 8006082:	f7ff bb0a 	b.w	800569a <_dtoa_r+0xc2>
 8006086:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006088:	2b00      	cmp	r3, #0
 800608a:	f47f aae8 	bne.w	800565e <_dtoa_r+0x86>
 800608e:	4b07      	ldr	r3, [pc, #28]	; (80060ac <_dtoa_r+0xad4>)
 8006090:	f7ff bb03 	b.w	800569a <_dtoa_r+0xc2>
 8006094:	9b06      	ldr	r3, [sp, #24]
 8006096:	2b00      	cmp	r3, #0
 8006098:	f73f af4f 	bgt.w	8005f3a <_dtoa_r+0x962>
 800609c:	9b07      	ldr	r3, [sp, #28]
 800609e:	2b02      	cmp	r3, #2
 80060a0:	f77f af4b 	ble.w	8005f3a <_dtoa_r+0x962>
 80060a4:	e70e      	b.n	8005ec4 <_dtoa_r+0x8ec>
 80060a6:	bf00      	nop
 80060a8:	08006f90 	.word	0x08006f90
 80060ac:	08006fb4 	.word	0x08006fb4

080060b0 <_localeconv_r>:
 80060b0:	4b04      	ldr	r3, [pc, #16]	; (80060c4 <_localeconv_r+0x14>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6a18      	ldr	r0, [r3, #32]
 80060b6:	4b04      	ldr	r3, [pc, #16]	; (80060c8 <_localeconv_r+0x18>)
 80060b8:	2800      	cmp	r0, #0
 80060ba:	bf08      	it	eq
 80060bc:	4618      	moveq	r0, r3
 80060be:	30f0      	adds	r0, #240	; 0xf0
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	2000000c 	.word	0x2000000c
 80060c8:	20000070 	.word	0x20000070

080060cc <_lseek_r>:
 80060cc:	b538      	push	{r3, r4, r5, lr}
 80060ce:	4c07      	ldr	r4, [pc, #28]	; (80060ec <_lseek_r+0x20>)
 80060d0:	4605      	mov	r5, r0
 80060d2:	4608      	mov	r0, r1
 80060d4:	4611      	mov	r1, r2
 80060d6:	2200      	movs	r2, #0
 80060d8:	6022      	str	r2, [r4, #0]
 80060da:	461a      	mov	r2, r3
 80060dc:	f7fd fb68 	bl	80037b0 <_lseek>
 80060e0:	1c43      	adds	r3, r0, #1
 80060e2:	d102      	bne.n	80060ea <_lseek_r+0x1e>
 80060e4:	6823      	ldr	r3, [r4, #0]
 80060e6:	b103      	cbz	r3, 80060ea <_lseek_r+0x1e>
 80060e8:	602b      	str	r3, [r5, #0]
 80060ea:	bd38      	pop	{r3, r4, r5, pc}
 80060ec:	20001938 	.word	0x20001938

080060f0 <__swhatbuf_r>:
 80060f0:	b570      	push	{r4, r5, r6, lr}
 80060f2:	460e      	mov	r6, r1
 80060f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060f8:	2900      	cmp	r1, #0
 80060fa:	b090      	sub	sp, #64	; 0x40
 80060fc:	4614      	mov	r4, r2
 80060fe:	461d      	mov	r5, r3
 8006100:	da07      	bge.n	8006112 <__swhatbuf_r+0x22>
 8006102:	2300      	movs	r3, #0
 8006104:	602b      	str	r3, [r5, #0]
 8006106:	89b3      	ldrh	r3, [r6, #12]
 8006108:	061a      	lsls	r2, r3, #24
 800610a:	d410      	bmi.n	800612e <__swhatbuf_r+0x3e>
 800610c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006110:	e00e      	b.n	8006130 <__swhatbuf_r+0x40>
 8006112:	aa01      	add	r2, sp, #4
 8006114:	f000 fdfa 	bl	8006d0c <_fstat_r>
 8006118:	2800      	cmp	r0, #0
 800611a:	dbf2      	blt.n	8006102 <__swhatbuf_r+0x12>
 800611c:	9a02      	ldr	r2, [sp, #8]
 800611e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006122:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006126:	425a      	negs	r2, r3
 8006128:	415a      	adcs	r2, r3
 800612a:	602a      	str	r2, [r5, #0]
 800612c:	e7ee      	b.n	800610c <__swhatbuf_r+0x1c>
 800612e:	2340      	movs	r3, #64	; 0x40
 8006130:	2000      	movs	r0, #0
 8006132:	6023      	str	r3, [r4, #0]
 8006134:	b010      	add	sp, #64	; 0x40
 8006136:	bd70      	pop	{r4, r5, r6, pc}

08006138 <__smakebuf_r>:
 8006138:	898b      	ldrh	r3, [r1, #12]
 800613a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800613c:	079d      	lsls	r5, r3, #30
 800613e:	4606      	mov	r6, r0
 8006140:	460c      	mov	r4, r1
 8006142:	d507      	bpl.n	8006154 <__smakebuf_r+0x1c>
 8006144:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006148:	6023      	str	r3, [r4, #0]
 800614a:	6123      	str	r3, [r4, #16]
 800614c:	2301      	movs	r3, #1
 800614e:	6163      	str	r3, [r4, #20]
 8006150:	b002      	add	sp, #8
 8006152:	bd70      	pop	{r4, r5, r6, pc}
 8006154:	ab01      	add	r3, sp, #4
 8006156:	466a      	mov	r2, sp
 8006158:	f7ff ffca 	bl	80060f0 <__swhatbuf_r>
 800615c:	9900      	ldr	r1, [sp, #0]
 800615e:	4605      	mov	r5, r0
 8006160:	4630      	mov	r0, r6
 8006162:	f7fe fa75 	bl	8004650 <_malloc_r>
 8006166:	b948      	cbnz	r0, 800617c <__smakebuf_r+0x44>
 8006168:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800616c:	059a      	lsls	r2, r3, #22
 800616e:	d4ef      	bmi.n	8006150 <__smakebuf_r+0x18>
 8006170:	f023 0303 	bic.w	r3, r3, #3
 8006174:	f043 0302 	orr.w	r3, r3, #2
 8006178:	81a3      	strh	r3, [r4, #12]
 800617a:	e7e3      	b.n	8006144 <__smakebuf_r+0xc>
 800617c:	4b0d      	ldr	r3, [pc, #52]	; (80061b4 <__smakebuf_r+0x7c>)
 800617e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006180:	89a3      	ldrh	r3, [r4, #12]
 8006182:	6020      	str	r0, [r4, #0]
 8006184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006188:	81a3      	strh	r3, [r4, #12]
 800618a:	9b00      	ldr	r3, [sp, #0]
 800618c:	6163      	str	r3, [r4, #20]
 800618e:	9b01      	ldr	r3, [sp, #4]
 8006190:	6120      	str	r0, [r4, #16]
 8006192:	b15b      	cbz	r3, 80061ac <__smakebuf_r+0x74>
 8006194:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006198:	4630      	mov	r0, r6
 800619a:	f000 fdc9 	bl	8006d30 <_isatty_r>
 800619e:	b128      	cbz	r0, 80061ac <__smakebuf_r+0x74>
 80061a0:	89a3      	ldrh	r3, [r4, #12]
 80061a2:	f023 0303 	bic.w	r3, r3, #3
 80061a6:	f043 0301 	orr.w	r3, r3, #1
 80061aa:	81a3      	strh	r3, [r4, #12]
 80061ac:	89a3      	ldrh	r3, [r4, #12]
 80061ae:	431d      	orrs	r5, r3
 80061b0:	81a5      	strh	r5, [r4, #12]
 80061b2:	e7cd      	b.n	8006150 <__smakebuf_r+0x18>
 80061b4:	080043b1 	.word	0x080043b1

080061b8 <malloc>:
 80061b8:	4b02      	ldr	r3, [pc, #8]	; (80061c4 <malloc+0xc>)
 80061ba:	4601      	mov	r1, r0
 80061bc:	6818      	ldr	r0, [r3, #0]
 80061be:	f7fe ba47 	b.w	8004650 <_malloc_r>
 80061c2:	bf00      	nop
 80061c4:	2000000c 	.word	0x2000000c

080061c8 <__ascii_mbtowc>:
 80061c8:	b082      	sub	sp, #8
 80061ca:	b901      	cbnz	r1, 80061ce <__ascii_mbtowc+0x6>
 80061cc:	a901      	add	r1, sp, #4
 80061ce:	b142      	cbz	r2, 80061e2 <__ascii_mbtowc+0x1a>
 80061d0:	b14b      	cbz	r3, 80061e6 <__ascii_mbtowc+0x1e>
 80061d2:	7813      	ldrb	r3, [r2, #0]
 80061d4:	600b      	str	r3, [r1, #0]
 80061d6:	7812      	ldrb	r2, [r2, #0]
 80061d8:	1c10      	adds	r0, r2, #0
 80061da:	bf18      	it	ne
 80061dc:	2001      	movne	r0, #1
 80061de:	b002      	add	sp, #8
 80061e0:	4770      	bx	lr
 80061e2:	4610      	mov	r0, r2
 80061e4:	e7fb      	b.n	80061de <__ascii_mbtowc+0x16>
 80061e6:	f06f 0001 	mvn.w	r0, #1
 80061ea:	e7f8      	b.n	80061de <__ascii_mbtowc+0x16>

080061ec <__malloc_lock>:
 80061ec:	4770      	bx	lr

080061ee <__malloc_unlock>:
 80061ee:	4770      	bx	lr

080061f0 <_Balloc>:
 80061f0:	b570      	push	{r4, r5, r6, lr}
 80061f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80061f4:	4604      	mov	r4, r0
 80061f6:	460e      	mov	r6, r1
 80061f8:	b93d      	cbnz	r5, 800620a <_Balloc+0x1a>
 80061fa:	2010      	movs	r0, #16
 80061fc:	f7ff ffdc 	bl	80061b8 <malloc>
 8006200:	6260      	str	r0, [r4, #36]	; 0x24
 8006202:	6045      	str	r5, [r0, #4]
 8006204:	6085      	str	r5, [r0, #8]
 8006206:	6005      	str	r5, [r0, #0]
 8006208:	60c5      	str	r5, [r0, #12]
 800620a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800620c:	68eb      	ldr	r3, [r5, #12]
 800620e:	b183      	cbz	r3, 8006232 <_Balloc+0x42>
 8006210:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006218:	b9b8      	cbnz	r0, 800624a <_Balloc+0x5a>
 800621a:	2101      	movs	r1, #1
 800621c:	fa01 f506 	lsl.w	r5, r1, r6
 8006220:	1d6a      	adds	r2, r5, #5
 8006222:	0092      	lsls	r2, r2, #2
 8006224:	4620      	mov	r0, r4
 8006226:	f000 fab3 	bl	8006790 <_calloc_r>
 800622a:	b160      	cbz	r0, 8006246 <_Balloc+0x56>
 800622c:	6046      	str	r6, [r0, #4]
 800622e:	6085      	str	r5, [r0, #8]
 8006230:	e00e      	b.n	8006250 <_Balloc+0x60>
 8006232:	2221      	movs	r2, #33	; 0x21
 8006234:	2104      	movs	r1, #4
 8006236:	4620      	mov	r0, r4
 8006238:	f000 faaa 	bl	8006790 <_calloc_r>
 800623c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800623e:	60e8      	str	r0, [r5, #12]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d1e4      	bne.n	8006210 <_Balloc+0x20>
 8006246:	2000      	movs	r0, #0
 8006248:	bd70      	pop	{r4, r5, r6, pc}
 800624a:	6802      	ldr	r2, [r0, #0]
 800624c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006250:	2300      	movs	r3, #0
 8006252:	6103      	str	r3, [r0, #16]
 8006254:	60c3      	str	r3, [r0, #12]
 8006256:	bd70      	pop	{r4, r5, r6, pc}

08006258 <_Bfree>:
 8006258:	b570      	push	{r4, r5, r6, lr}
 800625a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800625c:	4606      	mov	r6, r0
 800625e:	460d      	mov	r5, r1
 8006260:	b93c      	cbnz	r4, 8006272 <_Bfree+0x1a>
 8006262:	2010      	movs	r0, #16
 8006264:	f7ff ffa8 	bl	80061b8 <malloc>
 8006268:	6270      	str	r0, [r6, #36]	; 0x24
 800626a:	6044      	str	r4, [r0, #4]
 800626c:	6084      	str	r4, [r0, #8]
 800626e:	6004      	str	r4, [r0, #0]
 8006270:	60c4      	str	r4, [r0, #12]
 8006272:	b13d      	cbz	r5, 8006284 <_Bfree+0x2c>
 8006274:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006276:	686a      	ldr	r2, [r5, #4]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800627e:	6029      	str	r1, [r5, #0]
 8006280:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006284:	bd70      	pop	{r4, r5, r6, pc}

08006286 <__multadd>:
 8006286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800628a:	690d      	ldr	r5, [r1, #16]
 800628c:	461f      	mov	r7, r3
 800628e:	4606      	mov	r6, r0
 8006290:	460c      	mov	r4, r1
 8006292:	f101 0e14 	add.w	lr, r1, #20
 8006296:	2300      	movs	r3, #0
 8006298:	f8de 0000 	ldr.w	r0, [lr]
 800629c:	b281      	uxth	r1, r0
 800629e:	fb02 7101 	mla	r1, r2, r1, r7
 80062a2:	0c0f      	lsrs	r7, r1, #16
 80062a4:	0c00      	lsrs	r0, r0, #16
 80062a6:	fb02 7000 	mla	r0, r2, r0, r7
 80062aa:	b289      	uxth	r1, r1
 80062ac:	3301      	adds	r3, #1
 80062ae:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80062b2:	429d      	cmp	r5, r3
 80062b4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80062b8:	f84e 1b04 	str.w	r1, [lr], #4
 80062bc:	dcec      	bgt.n	8006298 <__multadd+0x12>
 80062be:	b1d7      	cbz	r7, 80062f6 <__multadd+0x70>
 80062c0:	68a3      	ldr	r3, [r4, #8]
 80062c2:	429d      	cmp	r5, r3
 80062c4:	db12      	blt.n	80062ec <__multadd+0x66>
 80062c6:	6861      	ldr	r1, [r4, #4]
 80062c8:	4630      	mov	r0, r6
 80062ca:	3101      	adds	r1, #1
 80062cc:	f7ff ff90 	bl	80061f0 <_Balloc>
 80062d0:	6922      	ldr	r2, [r4, #16]
 80062d2:	3202      	adds	r2, #2
 80062d4:	f104 010c 	add.w	r1, r4, #12
 80062d8:	4680      	mov	r8, r0
 80062da:	0092      	lsls	r2, r2, #2
 80062dc:	300c      	adds	r0, #12
 80062de:	f7fe f955 	bl	800458c <memcpy>
 80062e2:	4621      	mov	r1, r4
 80062e4:	4630      	mov	r0, r6
 80062e6:	f7ff ffb7 	bl	8006258 <_Bfree>
 80062ea:	4644      	mov	r4, r8
 80062ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80062f0:	3501      	adds	r5, #1
 80062f2:	615f      	str	r7, [r3, #20]
 80062f4:	6125      	str	r5, [r4, #16]
 80062f6:	4620      	mov	r0, r4
 80062f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080062fc <__hi0bits>:
 80062fc:	0c02      	lsrs	r2, r0, #16
 80062fe:	0412      	lsls	r2, r2, #16
 8006300:	4603      	mov	r3, r0
 8006302:	b9b2      	cbnz	r2, 8006332 <__hi0bits+0x36>
 8006304:	0403      	lsls	r3, r0, #16
 8006306:	2010      	movs	r0, #16
 8006308:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800630c:	bf04      	itt	eq
 800630e:	021b      	lsleq	r3, r3, #8
 8006310:	3008      	addeq	r0, #8
 8006312:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006316:	bf04      	itt	eq
 8006318:	011b      	lsleq	r3, r3, #4
 800631a:	3004      	addeq	r0, #4
 800631c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006320:	bf04      	itt	eq
 8006322:	009b      	lsleq	r3, r3, #2
 8006324:	3002      	addeq	r0, #2
 8006326:	2b00      	cmp	r3, #0
 8006328:	db06      	blt.n	8006338 <__hi0bits+0x3c>
 800632a:	005b      	lsls	r3, r3, #1
 800632c:	d503      	bpl.n	8006336 <__hi0bits+0x3a>
 800632e:	3001      	adds	r0, #1
 8006330:	4770      	bx	lr
 8006332:	2000      	movs	r0, #0
 8006334:	e7e8      	b.n	8006308 <__hi0bits+0xc>
 8006336:	2020      	movs	r0, #32
 8006338:	4770      	bx	lr

0800633a <__lo0bits>:
 800633a:	6803      	ldr	r3, [r0, #0]
 800633c:	f013 0207 	ands.w	r2, r3, #7
 8006340:	4601      	mov	r1, r0
 8006342:	d00b      	beq.n	800635c <__lo0bits+0x22>
 8006344:	07da      	lsls	r2, r3, #31
 8006346:	d423      	bmi.n	8006390 <__lo0bits+0x56>
 8006348:	0798      	lsls	r0, r3, #30
 800634a:	bf49      	itett	mi
 800634c:	085b      	lsrmi	r3, r3, #1
 800634e:	089b      	lsrpl	r3, r3, #2
 8006350:	2001      	movmi	r0, #1
 8006352:	600b      	strmi	r3, [r1, #0]
 8006354:	bf5c      	itt	pl
 8006356:	600b      	strpl	r3, [r1, #0]
 8006358:	2002      	movpl	r0, #2
 800635a:	4770      	bx	lr
 800635c:	b298      	uxth	r0, r3
 800635e:	b9a8      	cbnz	r0, 800638c <__lo0bits+0x52>
 8006360:	0c1b      	lsrs	r3, r3, #16
 8006362:	2010      	movs	r0, #16
 8006364:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006368:	bf04      	itt	eq
 800636a:	0a1b      	lsreq	r3, r3, #8
 800636c:	3008      	addeq	r0, #8
 800636e:	071a      	lsls	r2, r3, #28
 8006370:	bf04      	itt	eq
 8006372:	091b      	lsreq	r3, r3, #4
 8006374:	3004      	addeq	r0, #4
 8006376:	079a      	lsls	r2, r3, #30
 8006378:	bf04      	itt	eq
 800637a:	089b      	lsreq	r3, r3, #2
 800637c:	3002      	addeq	r0, #2
 800637e:	07da      	lsls	r2, r3, #31
 8006380:	d402      	bmi.n	8006388 <__lo0bits+0x4e>
 8006382:	085b      	lsrs	r3, r3, #1
 8006384:	d006      	beq.n	8006394 <__lo0bits+0x5a>
 8006386:	3001      	adds	r0, #1
 8006388:	600b      	str	r3, [r1, #0]
 800638a:	4770      	bx	lr
 800638c:	4610      	mov	r0, r2
 800638e:	e7e9      	b.n	8006364 <__lo0bits+0x2a>
 8006390:	2000      	movs	r0, #0
 8006392:	4770      	bx	lr
 8006394:	2020      	movs	r0, #32
 8006396:	4770      	bx	lr

08006398 <__i2b>:
 8006398:	b510      	push	{r4, lr}
 800639a:	460c      	mov	r4, r1
 800639c:	2101      	movs	r1, #1
 800639e:	f7ff ff27 	bl	80061f0 <_Balloc>
 80063a2:	2201      	movs	r2, #1
 80063a4:	6144      	str	r4, [r0, #20]
 80063a6:	6102      	str	r2, [r0, #16]
 80063a8:	bd10      	pop	{r4, pc}

080063aa <__multiply>:
 80063aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ae:	4614      	mov	r4, r2
 80063b0:	690a      	ldr	r2, [r1, #16]
 80063b2:	6923      	ldr	r3, [r4, #16]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	bfb8      	it	lt
 80063b8:	460b      	movlt	r3, r1
 80063ba:	4689      	mov	r9, r1
 80063bc:	bfbc      	itt	lt
 80063be:	46a1      	movlt	r9, r4
 80063c0:	461c      	movlt	r4, r3
 80063c2:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80063c6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80063ca:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80063ce:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80063d2:	eb07 060a 	add.w	r6, r7, sl
 80063d6:	429e      	cmp	r6, r3
 80063d8:	bfc8      	it	gt
 80063da:	3101      	addgt	r1, #1
 80063dc:	f7ff ff08 	bl	80061f0 <_Balloc>
 80063e0:	f100 0514 	add.w	r5, r0, #20
 80063e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80063e8:	462b      	mov	r3, r5
 80063ea:	2200      	movs	r2, #0
 80063ec:	4543      	cmp	r3, r8
 80063ee:	d316      	bcc.n	800641e <__multiply+0x74>
 80063f0:	f104 0214 	add.w	r2, r4, #20
 80063f4:	f109 0114 	add.w	r1, r9, #20
 80063f8:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 80063fc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006400:	9301      	str	r3, [sp, #4]
 8006402:	9c01      	ldr	r4, [sp, #4]
 8006404:	4294      	cmp	r4, r2
 8006406:	4613      	mov	r3, r2
 8006408:	d80c      	bhi.n	8006424 <__multiply+0x7a>
 800640a:	2e00      	cmp	r6, #0
 800640c:	dd03      	ble.n	8006416 <__multiply+0x6c>
 800640e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006412:	2b00      	cmp	r3, #0
 8006414:	d054      	beq.n	80064c0 <__multiply+0x116>
 8006416:	6106      	str	r6, [r0, #16]
 8006418:	b003      	add	sp, #12
 800641a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800641e:	f843 2b04 	str.w	r2, [r3], #4
 8006422:	e7e3      	b.n	80063ec <__multiply+0x42>
 8006424:	f8b3 a000 	ldrh.w	sl, [r3]
 8006428:	3204      	adds	r2, #4
 800642a:	f1ba 0f00 	cmp.w	sl, #0
 800642e:	d020      	beq.n	8006472 <__multiply+0xc8>
 8006430:	46ae      	mov	lr, r5
 8006432:	4689      	mov	r9, r1
 8006434:	f04f 0c00 	mov.w	ip, #0
 8006438:	f859 4b04 	ldr.w	r4, [r9], #4
 800643c:	f8be b000 	ldrh.w	fp, [lr]
 8006440:	b2a3      	uxth	r3, r4
 8006442:	fb0a b303 	mla	r3, sl, r3, fp
 8006446:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 800644a:	f8de 4000 	ldr.w	r4, [lr]
 800644e:	4463      	add	r3, ip
 8006450:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8006454:	fb0a c40b 	mla	r4, sl, fp, ip
 8006458:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800645c:	b29b      	uxth	r3, r3
 800645e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006462:	454f      	cmp	r7, r9
 8006464:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8006468:	f84e 3b04 	str.w	r3, [lr], #4
 800646c:	d8e4      	bhi.n	8006438 <__multiply+0x8e>
 800646e:	f8ce c000 	str.w	ip, [lr]
 8006472:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8006476:	f1b9 0f00 	cmp.w	r9, #0
 800647a:	d01f      	beq.n	80064bc <__multiply+0x112>
 800647c:	682b      	ldr	r3, [r5, #0]
 800647e:	46ae      	mov	lr, r5
 8006480:	468c      	mov	ip, r1
 8006482:	f04f 0a00 	mov.w	sl, #0
 8006486:	f8bc 4000 	ldrh.w	r4, [ip]
 800648a:	f8be b002 	ldrh.w	fp, [lr, #2]
 800648e:	fb09 b404 	mla	r4, r9, r4, fp
 8006492:	44a2      	add	sl, r4
 8006494:	b29b      	uxth	r3, r3
 8006496:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800649a:	f84e 3b04 	str.w	r3, [lr], #4
 800649e:	f85c 3b04 	ldr.w	r3, [ip], #4
 80064a2:	f8be 4000 	ldrh.w	r4, [lr]
 80064a6:	0c1b      	lsrs	r3, r3, #16
 80064a8:	fb09 4303 	mla	r3, r9, r3, r4
 80064ac:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 80064b0:	4567      	cmp	r7, ip
 80064b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80064b6:	d8e6      	bhi.n	8006486 <__multiply+0xdc>
 80064b8:	f8ce 3000 	str.w	r3, [lr]
 80064bc:	3504      	adds	r5, #4
 80064be:	e7a0      	b.n	8006402 <__multiply+0x58>
 80064c0:	3e01      	subs	r6, #1
 80064c2:	e7a2      	b.n	800640a <__multiply+0x60>

080064c4 <__pow5mult>:
 80064c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064c8:	4615      	mov	r5, r2
 80064ca:	f012 0203 	ands.w	r2, r2, #3
 80064ce:	4606      	mov	r6, r0
 80064d0:	460f      	mov	r7, r1
 80064d2:	d007      	beq.n	80064e4 <__pow5mult+0x20>
 80064d4:	3a01      	subs	r2, #1
 80064d6:	4c21      	ldr	r4, [pc, #132]	; (800655c <__pow5mult+0x98>)
 80064d8:	2300      	movs	r3, #0
 80064da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80064de:	f7ff fed2 	bl	8006286 <__multadd>
 80064e2:	4607      	mov	r7, r0
 80064e4:	10ad      	asrs	r5, r5, #2
 80064e6:	d035      	beq.n	8006554 <__pow5mult+0x90>
 80064e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80064ea:	b93c      	cbnz	r4, 80064fc <__pow5mult+0x38>
 80064ec:	2010      	movs	r0, #16
 80064ee:	f7ff fe63 	bl	80061b8 <malloc>
 80064f2:	6270      	str	r0, [r6, #36]	; 0x24
 80064f4:	6044      	str	r4, [r0, #4]
 80064f6:	6084      	str	r4, [r0, #8]
 80064f8:	6004      	str	r4, [r0, #0]
 80064fa:	60c4      	str	r4, [r0, #12]
 80064fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006500:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006504:	b94c      	cbnz	r4, 800651a <__pow5mult+0x56>
 8006506:	f240 2171 	movw	r1, #625	; 0x271
 800650a:	4630      	mov	r0, r6
 800650c:	f7ff ff44 	bl	8006398 <__i2b>
 8006510:	2300      	movs	r3, #0
 8006512:	f8c8 0008 	str.w	r0, [r8, #8]
 8006516:	4604      	mov	r4, r0
 8006518:	6003      	str	r3, [r0, #0]
 800651a:	f04f 0800 	mov.w	r8, #0
 800651e:	07eb      	lsls	r3, r5, #31
 8006520:	d50a      	bpl.n	8006538 <__pow5mult+0x74>
 8006522:	4639      	mov	r1, r7
 8006524:	4622      	mov	r2, r4
 8006526:	4630      	mov	r0, r6
 8006528:	f7ff ff3f 	bl	80063aa <__multiply>
 800652c:	4639      	mov	r1, r7
 800652e:	4681      	mov	r9, r0
 8006530:	4630      	mov	r0, r6
 8006532:	f7ff fe91 	bl	8006258 <_Bfree>
 8006536:	464f      	mov	r7, r9
 8006538:	106d      	asrs	r5, r5, #1
 800653a:	d00b      	beq.n	8006554 <__pow5mult+0x90>
 800653c:	6820      	ldr	r0, [r4, #0]
 800653e:	b938      	cbnz	r0, 8006550 <__pow5mult+0x8c>
 8006540:	4622      	mov	r2, r4
 8006542:	4621      	mov	r1, r4
 8006544:	4630      	mov	r0, r6
 8006546:	f7ff ff30 	bl	80063aa <__multiply>
 800654a:	6020      	str	r0, [r4, #0]
 800654c:	f8c0 8000 	str.w	r8, [r0]
 8006550:	4604      	mov	r4, r0
 8006552:	e7e4      	b.n	800651e <__pow5mult+0x5a>
 8006554:	4638      	mov	r0, r7
 8006556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800655a:	bf00      	nop
 800655c:	080070c0 	.word	0x080070c0

08006560 <__lshift>:
 8006560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006564:	460c      	mov	r4, r1
 8006566:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800656a:	6923      	ldr	r3, [r4, #16]
 800656c:	6849      	ldr	r1, [r1, #4]
 800656e:	eb0a 0903 	add.w	r9, sl, r3
 8006572:	68a3      	ldr	r3, [r4, #8]
 8006574:	4607      	mov	r7, r0
 8006576:	4616      	mov	r6, r2
 8006578:	f109 0501 	add.w	r5, r9, #1
 800657c:	42ab      	cmp	r3, r5
 800657e:	db31      	blt.n	80065e4 <__lshift+0x84>
 8006580:	4638      	mov	r0, r7
 8006582:	f7ff fe35 	bl	80061f0 <_Balloc>
 8006586:	2200      	movs	r2, #0
 8006588:	4680      	mov	r8, r0
 800658a:	f100 0314 	add.w	r3, r0, #20
 800658e:	4611      	mov	r1, r2
 8006590:	4552      	cmp	r2, sl
 8006592:	db2a      	blt.n	80065ea <__lshift+0x8a>
 8006594:	6920      	ldr	r0, [r4, #16]
 8006596:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800659a:	f104 0114 	add.w	r1, r4, #20
 800659e:	f016 021f 	ands.w	r2, r6, #31
 80065a2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80065a6:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80065aa:	d022      	beq.n	80065f2 <__lshift+0x92>
 80065ac:	f1c2 0c20 	rsb	ip, r2, #32
 80065b0:	2000      	movs	r0, #0
 80065b2:	680e      	ldr	r6, [r1, #0]
 80065b4:	4096      	lsls	r6, r2
 80065b6:	4330      	orrs	r0, r6
 80065b8:	f843 0b04 	str.w	r0, [r3], #4
 80065bc:	f851 0b04 	ldr.w	r0, [r1], #4
 80065c0:	458e      	cmp	lr, r1
 80065c2:	fa20 f00c 	lsr.w	r0, r0, ip
 80065c6:	d8f4      	bhi.n	80065b2 <__lshift+0x52>
 80065c8:	6018      	str	r0, [r3, #0]
 80065ca:	b108      	cbz	r0, 80065d0 <__lshift+0x70>
 80065cc:	f109 0502 	add.w	r5, r9, #2
 80065d0:	3d01      	subs	r5, #1
 80065d2:	4638      	mov	r0, r7
 80065d4:	f8c8 5010 	str.w	r5, [r8, #16]
 80065d8:	4621      	mov	r1, r4
 80065da:	f7ff fe3d 	bl	8006258 <_Bfree>
 80065de:	4640      	mov	r0, r8
 80065e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065e4:	3101      	adds	r1, #1
 80065e6:	005b      	lsls	r3, r3, #1
 80065e8:	e7c8      	b.n	800657c <__lshift+0x1c>
 80065ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80065ee:	3201      	adds	r2, #1
 80065f0:	e7ce      	b.n	8006590 <__lshift+0x30>
 80065f2:	3b04      	subs	r3, #4
 80065f4:	f851 2b04 	ldr.w	r2, [r1], #4
 80065f8:	f843 2f04 	str.w	r2, [r3, #4]!
 80065fc:	458e      	cmp	lr, r1
 80065fe:	d8f9      	bhi.n	80065f4 <__lshift+0x94>
 8006600:	e7e6      	b.n	80065d0 <__lshift+0x70>

08006602 <__mcmp>:
 8006602:	6903      	ldr	r3, [r0, #16]
 8006604:	690a      	ldr	r2, [r1, #16]
 8006606:	1a9b      	subs	r3, r3, r2
 8006608:	b530      	push	{r4, r5, lr}
 800660a:	d10c      	bne.n	8006626 <__mcmp+0x24>
 800660c:	0092      	lsls	r2, r2, #2
 800660e:	3014      	adds	r0, #20
 8006610:	3114      	adds	r1, #20
 8006612:	1884      	adds	r4, r0, r2
 8006614:	4411      	add	r1, r2
 8006616:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800661a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800661e:	4295      	cmp	r5, r2
 8006620:	d003      	beq.n	800662a <__mcmp+0x28>
 8006622:	d305      	bcc.n	8006630 <__mcmp+0x2e>
 8006624:	2301      	movs	r3, #1
 8006626:	4618      	mov	r0, r3
 8006628:	bd30      	pop	{r4, r5, pc}
 800662a:	42a0      	cmp	r0, r4
 800662c:	d3f3      	bcc.n	8006616 <__mcmp+0x14>
 800662e:	e7fa      	b.n	8006626 <__mcmp+0x24>
 8006630:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006634:	e7f7      	b.n	8006626 <__mcmp+0x24>

08006636 <__mdiff>:
 8006636:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800663a:	460d      	mov	r5, r1
 800663c:	4607      	mov	r7, r0
 800663e:	4611      	mov	r1, r2
 8006640:	4628      	mov	r0, r5
 8006642:	4614      	mov	r4, r2
 8006644:	f7ff ffdd 	bl	8006602 <__mcmp>
 8006648:	1e06      	subs	r6, r0, #0
 800664a:	d108      	bne.n	800665e <__mdiff+0x28>
 800664c:	4631      	mov	r1, r6
 800664e:	4638      	mov	r0, r7
 8006650:	f7ff fdce 	bl	80061f0 <_Balloc>
 8006654:	2301      	movs	r3, #1
 8006656:	6103      	str	r3, [r0, #16]
 8006658:	6146      	str	r6, [r0, #20]
 800665a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800665e:	bfa4      	itt	ge
 8006660:	4623      	movge	r3, r4
 8006662:	462c      	movge	r4, r5
 8006664:	4638      	mov	r0, r7
 8006666:	6861      	ldr	r1, [r4, #4]
 8006668:	bfa6      	itte	ge
 800666a:	461d      	movge	r5, r3
 800666c:	2600      	movge	r6, #0
 800666e:	2601      	movlt	r6, #1
 8006670:	f7ff fdbe 	bl	80061f0 <_Balloc>
 8006674:	692b      	ldr	r3, [r5, #16]
 8006676:	60c6      	str	r6, [r0, #12]
 8006678:	6926      	ldr	r6, [r4, #16]
 800667a:	f105 0914 	add.w	r9, r5, #20
 800667e:	f104 0214 	add.w	r2, r4, #20
 8006682:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006686:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800668a:	f100 0514 	add.w	r5, r0, #20
 800668e:	f04f 0c00 	mov.w	ip, #0
 8006692:	f852 ab04 	ldr.w	sl, [r2], #4
 8006696:	f859 4b04 	ldr.w	r4, [r9], #4
 800669a:	fa1c f18a 	uxtah	r1, ip, sl
 800669e:	b2a3      	uxth	r3, r4
 80066a0:	1ac9      	subs	r1, r1, r3
 80066a2:	0c23      	lsrs	r3, r4, #16
 80066a4:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80066a8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80066ac:	b289      	uxth	r1, r1
 80066ae:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80066b2:	45c8      	cmp	r8, r9
 80066b4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80066b8:	4696      	mov	lr, r2
 80066ba:	f845 3b04 	str.w	r3, [r5], #4
 80066be:	d8e8      	bhi.n	8006692 <__mdiff+0x5c>
 80066c0:	45be      	cmp	lr, r7
 80066c2:	d305      	bcc.n	80066d0 <__mdiff+0x9a>
 80066c4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80066c8:	b18b      	cbz	r3, 80066ee <__mdiff+0xb8>
 80066ca:	6106      	str	r6, [r0, #16]
 80066cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066d0:	f85e 1b04 	ldr.w	r1, [lr], #4
 80066d4:	fa1c f381 	uxtah	r3, ip, r1
 80066d8:	141a      	asrs	r2, r3, #16
 80066da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80066de:	b29b      	uxth	r3, r3
 80066e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80066e8:	f845 3b04 	str.w	r3, [r5], #4
 80066ec:	e7e8      	b.n	80066c0 <__mdiff+0x8a>
 80066ee:	3e01      	subs	r6, #1
 80066f0:	e7e8      	b.n	80066c4 <__mdiff+0x8e>

080066f2 <__d2b>:
 80066f2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80066f6:	460e      	mov	r6, r1
 80066f8:	2101      	movs	r1, #1
 80066fa:	ec59 8b10 	vmov	r8, r9, d0
 80066fe:	4615      	mov	r5, r2
 8006700:	f7ff fd76 	bl	80061f0 <_Balloc>
 8006704:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006708:	4607      	mov	r7, r0
 800670a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800670e:	bb34      	cbnz	r4, 800675e <__d2b+0x6c>
 8006710:	9301      	str	r3, [sp, #4]
 8006712:	f1b8 0f00 	cmp.w	r8, #0
 8006716:	d027      	beq.n	8006768 <__d2b+0x76>
 8006718:	a802      	add	r0, sp, #8
 800671a:	f840 8d08 	str.w	r8, [r0, #-8]!
 800671e:	f7ff fe0c 	bl	800633a <__lo0bits>
 8006722:	9900      	ldr	r1, [sp, #0]
 8006724:	b1f0      	cbz	r0, 8006764 <__d2b+0x72>
 8006726:	9a01      	ldr	r2, [sp, #4]
 8006728:	f1c0 0320 	rsb	r3, r0, #32
 800672c:	fa02 f303 	lsl.w	r3, r2, r3
 8006730:	430b      	orrs	r3, r1
 8006732:	40c2      	lsrs	r2, r0
 8006734:	617b      	str	r3, [r7, #20]
 8006736:	9201      	str	r2, [sp, #4]
 8006738:	9b01      	ldr	r3, [sp, #4]
 800673a:	61bb      	str	r3, [r7, #24]
 800673c:	2b00      	cmp	r3, #0
 800673e:	bf14      	ite	ne
 8006740:	2102      	movne	r1, #2
 8006742:	2101      	moveq	r1, #1
 8006744:	6139      	str	r1, [r7, #16]
 8006746:	b1c4      	cbz	r4, 800677a <__d2b+0x88>
 8006748:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800674c:	4404      	add	r4, r0
 800674e:	6034      	str	r4, [r6, #0]
 8006750:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006754:	6028      	str	r0, [r5, #0]
 8006756:	4638      	mov	r0, r7
 8006758:	b003      	add	sp, #12
 800675a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800675e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006762:	e7d5      	b.n	8006710 <__d2b+0x1e>
 8006764:	6179      	str	r1, [r7, #20]
 8006766:	e7e7      	b.n	8006738 <__d2b+0x46>
 8006768:	a801      	add	r0, sp, #4
 800676a:	f7ff fde6 	bl	800633a <__lo0bits>
 800676e:	9b01      	ldr	r3, [sp, #4]
 8006770:	617b      	str	r3, [r7, #20]
 8006772:	2101      	movs	r1, #1
 8006774:	6139      	str	r1, [r7, #16]
 8006776:	3020      	adds	r0, #32
 8006778:	e7e5      	b.n	8006746 <__d2b+0x54>
 800677a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800677e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006782:	6030      	str	r0, [r6, #0]
 8006784:	6918      	ldr	r0, [r3, #16]
 8006786:	f7ff fdb9 	bl	80062fc <__hi0bits>
 800678a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800678e:	e7e1      	b.n	8006754 <__d2b+0x62>

08006790 <_calloc_r>:
 8006790:	b538      	push	{r3, r4, r5, lr}
 8006792:	fb02 f401 	mul.w	r4, r2, r1
 8006796:	4621      	mov	r1, r4
 8006798:	f7fd ff5a 	bl	8004650 <_malloc_r>
 800679c:	4605      	mov	r5, r0
 800679e:	b118      	cbz	r0, 80067a8 <_calloc_r+0x18>
 80067a0:	4622      	mov	r2, r4
 80067a2:	2100      	movs	r1, #0
 80067a4:	f7fd fefd 	bl	80045a2 <memset>
 80067a8:	4628      	mov	r0, r5
 80067aa:	bd38      	pop	{r3, r4, r5, pc}

080067ac <__ssputs_r>:
 80067ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067b0:	688e      	ldr	r6, [r1, #8]
 80067b2:	429e      	cmp	r6, r3
 80067b4:	4682      	mov	sl, r0
 80067b6:	460c      	mov	r4, r1
 80067b8:	4691      	mov	r9, r2
 80067ba:	4698      	mov	r8, r3
 80067bc:	d835      	bhi.n	800682a <__ssputs_r+0x7e>
 80067be:	898a      	ldrh	r2, [r1, #12]
 80067c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80067c4:	d031      	beq.n	800682a <__ssputs_r+0x7e>
 80067c6:	6825      	ldr	r5, [r4, #0]
 80067c8:	6909      	ldr	r1, [r1, #16]
 80067ca:	1a6f      	subs	r7, r5, r1
 80067cc:	6965      	ldr	r5, [r4, #20]
 80067ce:	2302      	movs	r3, #2
 80067d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80067d4:	fb95 f5f3 	sdiv	r5, r5, r3
 80067d8:	f108 0301 	add.w	r3, r8, #1
 80067dc:	443b      	add	r3, r7
 80067de:	429d      	cmp	r5, r3
 80067e0:	bf38      	it	cc
 80067e2:	461d      	movcc	r5, r3
 80067e4:	0553      	lsls	r3, r2, #21
 80067e6:	d531      	bpl.n	800684c <__ssputs_r+0xa0>
 80067e8:	4629      	mov	r1, r5
 80067ea:	f7fd ff31 	bl	8004650 <_malloc_r>
 80067ee:	4606      	mov	r6, r0
 80067f0:	b950      	cbnz	r0, 8006808 <__ssputs_r+0x5c>
 80067f2:	230c      	movs	r3, #12
 80067f4:	f8ca 3000 	str.w	r3, [sl]
 80067f8:	89a3      	ldrh	r3, [r4, #12]
 80067fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067fe:	81a3      	strh	r3, [r4, #12]
 8006800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006808:	463a      	mov	r2, r7
 800680a:	6921      	ldr	r1, [r4, #16]
 800680c:	f7fd febe 	bl	800458c <memcpy>
 8006810:	89a3      	ldrh	r3, [r4, #12]
 8006812:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800681a:	81a3      	strh	r3, [r4, #12]
 800681c:	6126      	str	r6, [r4, #16]
 800681e:	6165      	str	r5, [r4, #20]
 8006820:	443e      	add	r6, r7
 8006822:	1bed      	subs	r5, r5, r7
 8006824:	6026      	str	r6, [r4, #0]
 8006826:	60a5      	str	r5, [r4, #8]
 8006828:	4646      	mov	r6, r8
 800682a:	4546      	cmp	r6, r8
 800682c:	bf28      	it	cs
 800682e:	4646      	movcs	r6, r8
 8006830:	4632      	mov	r2, r6
 8006832:	4649      	mov	r1, r9
 8006834:	6820      	ldr	r0, [r4, #0]
 8006836:	f000 fa8b 	bl	8006d50 <memmove>
 800683a:	68a3      	ldr	r3, [r4, #8]
 800683c:	1b9b      	subs	r3, r3, r6
 800683e:	60a3      	str	r3, [r4, #8]
 8006840:	6823      	ldr	r3, [r4, #0]
 8006842:	441e      	add	r6, r3
 8006844:	6026      	str	r6, [r4, #0]
 8006846:	2000      	movs	r0, #0
 8006848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800684c:	462a      	mov	r2, r5
 800684e:	f000 fa99 	bl	8006d84 <_realloc_r>
 8006852:	4606      	mov	r6, r0
 8006854:	2800      	cmp	r0, #0
 8006856:	d1e1      	bne.n	800681c <__ssputs_r+0x70>
 8006858:	6921      	ldr	r1, [r4, #16]
 800685a:	4650      	mov	r0, sl
 800685c:	f7fd feaa 	bl	80045b4 <_free_r>
 8006860:	e7c7      	b.n	80067f2 <__ssputs_r+0x46>
	...

08006864 <_svfiprintf_r>:
 8006864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006868:	b09d      	sub	sp, #116	; 0x74
 800686a:	4680      	mov	r8, r0
 800686c:	9303      	str	r3, [sp, #12]
 800686e:	898b      	ldrh	r3, [r1, #12]
 8006870:	061c      	lsls	r4, r3, #24
 8006872:	460d      	mov	r5, r1
 8006874:	4616      	mov	r6, r2
 8006876:	d50f      	bpl.n	8006898 <_svfiprintf_r+0x34>
 8006878:	690b      	ldr	r3, [r1, #16]
 800687a:	b96b      	cbnz	r3, 8006898 <_svfiprintf_r+0x34>
 800687c:	2140      	movs	r1, #64	; 0x40
 800687e:	f7fd fee7 	bl	8004650 <_malloc_r>
 8006882:	6028      	str	r0, [r5, #0]
 8006884:	6128      	str	r0, [r5, #16]
 8006886:	b928      	cbnz	r0, 8006894 <_svfiprintf_r+0x30>
 8006888:	230c      	movs	r3, #12
 800688a:	f8c8 3000 	str.w	r3, [r8]
 800688e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006892:	e0c5      	b.n	8006a20 <_svfiprintf_r+0x1bc>
 8006894:	2340      	movs	r3, #64	; 0x40
 8006896:	616b      	str	r3, [r5, #20]
 8006898:	2300      	movs	r3, #0
 800689a:	9309      	str	r3, [sp, #36]	; 0x24
 800689c:	2320      	movs	r3, #32
 800689e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068a2:	2330      	movs	r3, #48	; 0x30
 80068a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068a8:	f04f 0b01 	mov.w	fp, #1
 80068ac:	4637      	mov	r7, r6
 80068ae:	463c      	mov	r4, r7
 80068b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d13c      	bne.n	8006932 <_svfiprintf_r+0xce>
 80068b8:	ebb7 0a06 	subs.w	sl, r7, r6
 80068bc:	d00b      	beq.n	80068d6 <_svfiprintf_r+0x72>
 80068be:	4653      	mov	r3, sl
 80068c0:	4632      	mov	r2, r6
 80068c2:	4629      	mov	r1, r5
 80068c4:	4640      	mov	r0, r8
 80068c6:	f7ff ff71 	bl	80067ac <__ssputs_r>
 80068ca:	3001      	adds	r0, #1
 80068cc:	f000 80a3 	beq.w	8006a16 <_svfiprintf_r+0x1b2>
 80068d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068d2:	4453      	add	r3, sl
 80068d4:	9309      	str	r3, [sp, #36]	; 0x24
 80068d6:	783b      	ldrb	r3, [r7, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	f000 809c 	beq.w	8006a16 <_svfiprintf_r+0x1b2>
 80068de:	2300      	movs	r3, #0
 80068e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80068e4:	9304      	str	r3, [sp, #16]
 80068e6:	9307      	str	r3, [sp, #28]
 80068e8:	9205      	str	r2, [sp, #20]
 80068ea:	9306      	str	r3, [sp, #24]
 80068ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068f0:	931a      	str	r3, [sp, #104]	; 0x68
 80068f2:	2205      	movs	r2, #5
 80068f4:	7821      	ldrb	r1, [r4, #0]
 80068f6:	4850      	ldr	r0, [pc, #320]	; (8006a38 <_svfiprintf_r+0x1d4>)
 80068f8:	f7f9 fca2 	bl	8000240 <memchr>
 80068fc:	1c67      	adds	r7, r4, #1
 80068fe:	9b04      	ldr	r3, [sp, #16]
 8006900:	b9d8      	cbnz	r0, 800693a <_svfiprintf_r+0xd6>
 8006902:	06d9      	lsls	r1, r3, #27
 8006904:	bf44      	itt	mi
 8006906:	2220      	movmi	r2, #32
 8006908:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800690c:	071a      	lsls	r2, r3, #28
 800690e:	bf44      	itt	mi
 8006910:	222b      	movmi	r2, #43	; 0x2b
 8006912:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006916:	7822      	ldrb	r2, [r4, #0]
 8006918:	2a2a      	cmp	r2, #42	; 0x2a
 800691a:	d016      	beq.n	800694a <_svfiprintf_r+0xe6>
 800691c:	9a07      	ldr	r2, [sp, #28]
 800691e:	2100      	movs	r1, #0
 8006920:	200a      	movs	r0, #10
 8006922:	4627      	mov	r7, r4
 8006924:	3401      	adds	r4, #1
 8006926:	783b      	ldrb	r3, [r7, #0]
 8006928:	3b30      	subs	r3, #48	; 0x30
 800692a:	2b09      	cmp	r3, #9
 800692c:	d951      	bls.n	80069d2 <_svfiprintf_r+0x16e>
 800692e:	b1c9      	cbz	r1, 8006964 <_svfiprintf_r+0x100>
 8006930:	e011      	b.n	8006956 <_svfiprintf_r+0xf2>
 8006932:	2b25      	cmp	r3, #37	; 0x25
 8006934:	d0c0      	beq.n	80068b8 <_svfiprintf_r+0x54>
 8006936:	4627      	mov	r7, r4
 8006938:	e7b9      	b.n	80068ae <_svfiprintf_r+0x4a>
 800693a:	4a3f      	ldr	r2, [pc, #252]	; (8006a38 <_svfiprintf_r+0x1d4>)
 800693c:	1a80      	subs	r0, r0, r2
 800693e:	fa0b f000 	lsl.w	r0, fp, r0
 8006942:	4318      	orrs	r0, r3
 8006944:	9004      	str	r0, [sp, #16]
 8006946:	463c      	mov	r4, r7
 8006948:	e7d3      	b.n	80068f2 <_svfiprintf_r+0x8e>
 800694a:	9a03      	ldr	r2, [sp, #12]
 800694c:	1d11      	adds	r1, r2, #4
 800694e:	6812      	ldr	r2, [r2, #0]
 8006950:	9103      	str	r1, [sp, #12]
 8006952:	2a00      	cmp	r2, #0
 8006954:	db01      	blt.n	800695a <_svfiprintf_r+0xf6>
 8006956:	9207      	str	r2, [sp, #28]
 8006958:	e004      	b.n	8006964 <_svfiprintf_r+0x100>
 800695a:	4252      	negs	r2, r2
 800695c:	f043 0302 	orr.w	r3, r3, #2
 8006960:	9207      	str	r2, [sp, #28]
 8006962:	9304      	str	r3, [sp, #16]
 8006964:	783b      	ldrb	r3, [r7, #0]
 8006966:	2b2e      	cmp	r3, #46	; 0x2e
 8006968:	d10e      	bne.n	8006988 <_svfiprintf_r+0x124>
 800696a:	787b      	ldrb	r3, [r7, #1]
 800696c:	2b2a      	cmp	r3, #42	; 0x2a
 800696e:	f107 0101 	add.w	r1, r7, #1
 8006972:	d132      	bne.n	80069da <_svfiprintf_r+0x176>
 8006974:	9b03      	ldr	r3, [sp, #12]
 8006976:	1d1a      	adds	r2, r3, #4
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	9203      	str	r2, [sp, #12]
 800697c:	2b00      	cmp	r3, #0
 800697e:	bfb8      	it	lt
 8006980:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006984:	3702      	adds	r7, #2
 8006986:	9305      	str	r3, [sp, #20]
 8006988:	4c2c      	ldr	r4, [pc, #176]	; (8006a3c <_svfiprintf_r+0x1d8>)
 800698a:	7839      	ldrb	r1, [r7, #0]
 800698c:	2203      	movs	r2, #3
 800698e:	4620      	mov	r0, r4
 8006990:	f7f9 fc56 	bl	8000240 <memchr>
 8006994:	b138      	cbz	r0, 80069a6 <_svfiprintf_r+0x142>
 8006996:	2340      	movs	r3, #64	; 0x40
 8006998:	1b00      	subs	r0, r0, r4
 800699a:	fa03 f000 	lsl.w	r0, r3, r0
 800699e:	9b04      	ldr	r3, [sp, #16]
 80069a0:	4303      	orrs	r3, r0
 80069a2:	9304      	str	r3, [sp, #16]
 80069a4:	3701      	adds	r7, #1
 80069a6:	7839      	ldrb	r1, [r7, #0]
 80069a8:	4825      	ldr	r0, [pc, #148]	; (8006a40 <_svfiprintf_r+0x1dc>)
 80069aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069ae:	2206      	movs	r2, #6
 80069b0:	1c7e      	adds	r6, r7, #1
 80069b2:	f7f9 fc45 	bl	8000240 <memchr>
 80069b6:	2800      	cmp	r0, #0
 80069b8:	d035      	beq.n	8006a26 <_svfiprintf_r+0x1c2>
 80069ba:	4b22      	ldr	r3, [pc, #136]	; (8006a44 <_svfiprintf_r+0x1e0>)
 80069bc:	b9fb      	cbnz	r3, 80069fe <_svfiprintf_r+0x19a>
 80069be:	9b03      	ldr	r3, [sp, #12]
 80069c0:	3307      	adds	r3, #7
 80069c2:	f023 0307 	bic.w	r3, r3, #7
 80069c6:	3308      	adds	r3, #8
 80069c8:	9303      	str	r3, [sp, #12]
 80069ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069cc:	444b      	add	r3, r9
 80069ce:	9309      	str	r3, [sp, #36]	; 0x24
 80069d0:	e76c      	b.n	80068ac <_svfiprintf_r+0x48>
 80069d2:	fb00 3202 	mla	r2, r0, r2, r3
 80069d6:	2101      	movs	r1, #1
 80069d8:	e7a3      	b.n	8006922 <_svfiprintf_r+0xbe>
 80069da:	2300      	movs	r3, #0
 80069dc:	9305      	str	r3, [sp, #20]
 80069de:	4618      	mov	r0, r3
 80069e0:	240a      	movs	r4, #10
 80069e2:	460f      	mov	r7, r1
 80069e4:	3101      	adds	r1, #1
 80069e6:	783a      	ldrb	r2, [r7, #0]
 80069e8:	3a30      	subs	r2, #48	; 0x30
 80069ea:	2a09      	cmp	r2, #9
 80069ec:	d903      	bls.n	80069f6 <_svfiprintf_r+0x192>
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d0ca      	beq.n	8006988 <_svfiprintf_r+0x124>
 80069f2:	9005      	str	r0, [sp, #20]
 80069f4:	e7c8      	b.n	8006988 <_svfiprintf_r+0x124>
 80069f6:	fb04 2000 	mla	r0, r4, r0, r2
 80069fa:	2301      	movs	r3, #1
 80069fc:	e7f1      	b.n	80069e2 <_svfiprintf_r+0x17e>
 80069fe:	ab03      	add	r3, sp, #12
 8006a00:	9300      	str	r3, [sp, #0]
 8006a02:	462a      	mov	r2, r5
 8006a04:	4b10      	ldr	r3, [pc, #64]	; (8006a48 <_svfiprintf_r+0x1e4>)
 8006a06:	a904      	add	r1, sp, #16
 8006a08:	4640      	mov	r0, r8
 8006a0a:	f7fd ff09 	bl	8004820 <_printf_float>
 8006a0e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006a12:	4681      	mov	r9, r0
 8006a14:	d1d9      	bne.n	80069ca <_svfiprintf_r+0x166>
 8006a16:	89ab      	ldrh	r3, [r5, #12]
 8006a18:	065b      	lsls	r3, r3, #25
 8006a1a:	f53f af38 	bmi.w	800688e <_svfiprintf_r+0x2a>
 8006a1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a20:	b01d      	add	sp, #116	; 0x74
 8006a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a26:	ab03      	add	r3, sp, #12
 8006a28:	9300      	str	r3, [sp, #0]
 8006a2a:	462a      	mov	r2, r5
 8006a2c:	4b06      	ldr	r3, [pc, #24]	; (8006a48 <_svfiprintf_r+0x1e4>)
 8006a2e:	a904      	add	r1, sp, #16
 8006a30:	4640      	mov	r0, r8
 8006a32:	f7fe f997 	bl	8004d64 <_printf_i>
 8006a36:	e7ea      	b.n	8006a0e <_svfiprintf_r+0x1aa>
 8006a38:	080070cc 	.word	0x080070cc
 8006a3c:	080070d2 	.word	0x080070d2
 8006a40:	080070d6 	.word	0x080070d6
 8006a44:	08004821 	.word	0x08004821
 8006a48:	080067ad 	.word	0x080067ad

08006a4c <__sfputc_r>:
 8006a4c:	6893      	ldr	r3, [r2, #8]
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	b410      	push	{r4}
 8006a54:	6093      	str	r3, [r2, #8]
 8006a56:	da09      	bge.n	8006a6c <__sfputc_r+0x20>
 8006a58:	6994      	ldr	r4, [r2, #24]
 8006a5a:	42a3      	cmp	r3, r4
 8006a5c:	db02      	blt.n	8006a64 <__sfputc_r+0x18>
 8006a5e:	b2cb      	uxtb	r3, r1
 8006a60:	2b0a      	cmp	r3, #10
 8006a62:	d103      	bne.n	8006a6c <__sfputc_r+0x20>
 8006a64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a68:	f7fe bc46 	b.w	80052f8 <__swbuf_r>
 8006a6c:	6813      	ldr	r3, [r2, #0]
 8006a6e:	1c58      	adds	r0, r3, #1
 8006a70:	6010      	str	r0, [r2, #0]
 8006a72:	7019      	strb	r1, [r3, #0]
 8006a74:	b2c8      	uxtb	r0, r1
 8006a76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <__sfputs_r>:
 8006a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a7e:	4606      	mov	r6, r0
 8006a80:	460f      	mov	r7, r1
 8006a82:	4614      	mov	r4, r2
 8006a84:	18d5      	adds	r5, r2, r3
 8006a86:	42ac      	cmp	r4, r5
 8006a88:	d101      	bne.n	8006a8e <__sfputs_r+0x12>
 8006a8a:	2000      	movs	r0, #0
 8006a8c:	e007      	b.n	8006a9e <__sfputs_r+0x22>
 8006a8e:	463a      	mov	r2, r7
 8006a90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a94:	4630      	mov	r0, r6
 8006a96:	f7ff ffd9 	bl	8006a4c <__sfputc_r>
 8006a9a:	1c43      	adds	r3, r0, #1
 8006a9c:	d1f3      	bne.n	8006a86 <__sfputs_r+0xa>
 8006a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006aa0 <_vfiprintf_r>:
 8006aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa4:	b09d      	sub	sp, #116	; 0x74
 8006aa6:	460c      	mov	r4, r1
 8006aa8:	4617      	mov	r7, r2
 8006aaa:	9303      	str	r3, [sp, #12]
 8006aac:	4606      	mov	r6, r0
 8006aae:	b118      	cbz	r0, 8006ab8 <_vfiprintf_r+0x18>
 8006ab0:	6983      	ldr	r3, [r0, #24]
 8006ab2:	b90b      	cbnz	r3, 8006ab8 <_vfiprintf_r+0x18>
 8006ab4:	f7fd fcbc 	bl	8004430 <__sinit>
 8006ab8:	4b7c      	ldr	r3, [pc, #496]	; (8006cac <_vfiprintf_r+0x20c>)
 8006aba:	429c      	cmp	r4, r3
 8006abc:	d157      	bne.n	8006b6e <_vfiprintf_r+0xce>
 8006abe:	6874      	ldr	r4, [r6, #4]
 8006ac0:	89a3      	ldrh	r3, [r4, #12]
 8006ac2:	0718      	lsls	r0, r3, #28
 8006ac4:	d55d      	bpl.n	8006b82 <_vfiprintf_r+0xe2>
 8006ac6:	6923      	ldr	r3, [r4, #16]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d05a      	beq.n	8006b82 <_vfiprintf_r+0xe2>
 8006acc:	2300      	movs	r3, #0
 8006ace:	9309      	str	r3, [sp, #36]	; 0x24
 8006ad0:	2320      	movs	r3, #32
 8006ad2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ad6:	2330      	movs	r3, #48	; 0x30
 8006ad8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006adc:	f04f 0b01 	mov.w	fp, #1
 8006ae0:	46b8      	mov	r8, r7
 8006ae2:	4645      	mov	r5, r8
 8006ae4:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d155      	bne.n	8006b98 <_vfiprintf_r+0xf8>
 8006aec:	ebb8 0a07 	subs.w	sl, r8, r7
 8006af0:	d00b      	beq.n	8006b0a <_vfiprintf_r+0x6a>
 8006af2:	4653      	mov	r3, sl
 8006af4:	463a      	mov	r2, r7
 8006af6:	4621      	mov	r1, r4
 8006af8:	4630      	mov	r0, r6
 8006afa:	f7ff ffbf 	bl	8006a7c <__sfputs_r>
 8006afe:	3001      	adds	r0, #1
 8006b00:	f000 80c4 	beq.w	8006c8c <_vfiprintf_r+0x1ec>
 8006b04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b06:	4453      	add	r3, sl
 8006b08:	9309      	str	r3, [sp, #36]	; 0x24
 8006b0a:	f898 3000 	ldrb.w	r3, [r8]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	f000 80bc 	beq.w	8006c8c <_vfiprintf_r+0x1ec>
 8006b14:	2300      	movs	r3, #0
 8006b16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b1a:	9304      	str	r3, [sp, #16]
 8006b1c:	9307      	str	r3, [sp, #28]
 8006b1e:	9205      	str	r2, [sp, #20]
 8006b20:	9306      	str	r3, [sp, #24]
 8006b22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b26:	931a      	str	r3, [sp, #104]	; 0x68
 8006b28:	2205      	movs	r2, #5
 8006b2a:	7829      	ldrb	r1, [r5, #0]
 8006b2c:	4860      	ldr	r0, [pc, #384]	; (8006cb0 <_vfiprintf_r+0x210>)
 8006b2e:	f7f9 fb87 	bl	8000240 <memchr>
 8006b32:	f105 0801 	add.w	r8, r5, #1
 8006b36:	9b04      	ldr	r3, [sp, #16]
 8006b38:	2800      	cmp	r0, #0
 8006b3a:	d131      	bne.n	8006ba0 <_vfiprintf_r+0x100>
 8006b3c:	06d9      	lsls	r1, r3, #27
 8006b3e:	bf44      	itt	mi
 8006b40:	2220      	movmi	r2, #32
 8006b42:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006b46:	071a      	lsls	r2, r3, #28
 8006b48:	bf44      	itt	mi
 8006b4a:	222b      	movmi	r2, #43	; 0x2b
 8006b4c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006b50:	782a      	ldrb	r2, [r5, #0]
 8006b52:	2a2a      	cmp	r2, #42	; 0x2a
 8006b54:	d02c      	beq.n	8006bb0 <_vfiprintf_r+0x110>
 8006b56:	9a07      	ldr	r2, [sp, #28]
 8006b58:	2100      	movs	r1, #0
 8006b5a:	200a      	movs	r0, #10
 8006b5c:	46a8      	mov	r8, r5
 8006b5e:	3501      	adds	r5, #1
 8006b60:	f898 3000 	ldrb.w	r3, [r8]
 8006b64:	3b30      	subs	r3, #48	; 0x30
 8006b66:	2b09      	cmp	r3, #9
 8006b68:	d96d      	bls.n	8006c46 <_vfiprintf_r+0x1a6>
 8006b6a:	b371      	cbz	r1, 8006bca <_vfiprintf_r+0x12a>
 8006b6c:	e026      	b.n	8006bbc <_vfiprintf_r+0x11c>
 8006b6e:	4b51      	ldr	r3, [pc, #324]	; (8006cb4 <_vfiprintf_r+0x214>)
 8006b70:	429c      	cmp	r4, r3
 8006b72:	d101      	bne.n	8006b78 <_vfiprintf_r+0xd8>
 8006b74:	68b4      	ldr	r4, [r6, #8]
 8006b76:	e7a3      	b.n	8006ac0 <_vfiprintf_r+0x20>
 8006b78:	4b4f      	ldr	r3, [pc, #316]	; (8006cb8 <_vfiprintf_r+0x218>)
 8006b7a:	429c      	cmp	r4, r3
 8006b7c:	bf08      	it	eq
 8006b7e:	68f4      	ldreq	r4, [r6, #12]
 8006b80:	e79e      	b.n	8006ac0 <_vfiprintf_r+0x20>
 8006b82:	4621      	mov	r1, r4
 8006b84:	4630      	mov	r0, r6
 8006b86:	f7fe fc1b 	bl	80053c0 <__swsetup_r>
 8006b8a:	2800      	cmp	r0, #0
 8006b8c:	d09e      	beq.n	8006acc <_vfiprintf_r+0x2c>
 8006b8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b92:	b01d      	add	sp, #116	; 0x74
 8006b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b98:	2b25      	cmp	r3, #37	; 0x25
 8006b9a:	d0a7      	beq.n	8006aec <_vfiprintf_r+0x4c>
 8006b9c:	46a8      	mov	r8, r5
 8006b9e:	e7a0      	b.n	8006ae2 <_vfiprintf_r+0x42>
 8006ba0:	4a43      	ldr	r2, [pc, #268]	; (8006cb0 <_vfiprintf_r+0x210>)
 8006ba2:	1a80      	subs	r0, r0, r2
 8006ba4:	fa0b f000 	lsl.w	r0, fp, r0
 8006ba8:	4318      	orrs	r0, r3
 8006baa:	9004      	str	r0, [sp, #16]
 8006bac:	4645      	mov	r5, r8
 8006bae:	e7bb      	b.n	8006b28 <_vfiprintf_r+0x88>
 8006bb0:	9a03      	ldr	r2, [sp, #12]
 8006bb2:	1d11      	adds	r1, r2, #4
 8006bb4:	6812      	ldr	r2, [r2, #0]
 8006bb6:	9103      	str	r1, [sp, #12]
 8006bb8:	2a00      	cmp	r2, #0
 8006bba:	db01      	blt.n	8006bc0 <_vfiprintf_r+0x120>
 8006bbc:	9207      	str	r2, [sp, #28]
 8006bbe:	e004      	b.n	8006bca <_vfiprintf_r+0x12a>
 8006bc0:	4252      	negs	r2, r2
 8006bc2:	f043 0302 	orr.w	r3, r3, #2
 8006bc6:	9207      	str	r2, [sp, #28]
 8006bc8:	9304      	str	r3, [sp, #16]
 8006bca:	f898 3000 	ldrb.w	r3, [r8]
 8006bce:	2b2e      	cmp	r3, #46	; 0x2e
 8006bd0:	d110      	bne.n	8006bf4 <_vfiprintf_r+0x154>
 8006bd2:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006bd6:	2b2a      	cmp	r3, #42	; 0x2a
 8006bd8:	f108 0101 	add.w	r1, r8, #1
 8006bdc:	d137      	bne.n	8006c4e <_vfiprintf_r+0x1ae>
 8006bde:	9b03      	ldr	r3, [sp, #12]
 8006be0:	1d1a      	adds	r2, r3, #4
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	9203      	str	r2, [sp, #12]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	bfb8      	it	lt
 8006bea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006bee:	f108 0802 	add.w	r8, r8, #2
 8006bf2:	9305      	str	r3, [sp, #20]
 8006bf4:	4d31      	ldr	r5, [pc, #196]	; (8006cbc <_vfiprintf_r+0x21c>)
 8006bf6:	f898 1000 	ldrb.w	r1, [r8]
 8006bfa:	2203      	movs	r2, #3
 8006bfc:	4628      	mov	r0, r5
 8006bfe:	f7f9 fb1f 	bl	8000240 <memchr>
 8006c02:	b140      	cbz	r0, 8006c16 <_vfiprintf_r+0x176>
 8006c04:	2340      	movs	r3, #64	; 0x40
 8006c06:	1b40      	subs	r0, r0, r5
 8006c08:	fa03 f000 	lsl.w	r0, r3, r0
 8006c0c:	9b04      	ldr	r3, [sp, #16]
 8006c0e:	4303      	orrs	r3, r0
 8006c10:	9304      	str	r3, [sp, #16]
 8006c12:	f108 0801 	add.w	r8, r8, #1
 8006c16:	f898 1000 	ldrb.w	r1, [r8]
 8006c1a:	4829      	ldr	r0, [pc, #164]	; (8006cc0 <_vfiprintf_r+0x220>)
 8006c1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c20:	2206      	movs	r2, #6
 8006c22:	f108 0701 	add.w	r7, r8, #1
 8006c26:	f7f9 fb0b 	bl	8000240 <memchr>
 8006c2a:	2800      	cmp	r0, #0
 8006c2c:	d034      	beq.n	8006c98 <_vfiprintf_r+0x1f8>
 8006c2e:	4b25      	ldr	r3, [pc, #148]	; (8006cc4 <_vfiprintf_r+0x224>)
 8006c30:	bb03      	cbnz	r3, 8006c74 <_vfiprintf_r+0x1d4>
 8006c32:	9b03      	ldr	r3, [sp, #12]
 8006c34:	3307      	adds	r3, #7
 8006c36:	f023 0307 	bic.w	r3, r3, #7
 8006c3a:	3308      	adds	r3, #8
 8006c3c:	9303      	str	r3, [sp, #12]
 8006c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c40:	444b      	add	r3, r9
 8006c42:	9309      	str	r3, [sp, #36]	; 0x24
 8006c44:	e74c      	b.n	8006ae0 <_vfiprintf_r+0x40>
 8006c46:	fb00 3202 	mla	r2, r0, r2, r3
 8006c4a:	2101      	movs	r1, #1
 8006c4c:	e786      	b.n	8006b5c <_vfiprintf_r+0xbc>
 8006c4e:	2300      	movs	r3, #0
 8006c50:	9305      	str	r3, [sp, #20]
 8006c52:	4618      	mov	r0, r3
 8006c54:	250a      	movs	r5, #10
 8006c56:	4688      	mov	r8, r1
 8006c58:	3101      	adds	r1, #1
 8006c5a:	f898 2000 	ldrb.w	r2, [r8]
 8006c5e:	3a30      	subs	r2, #48	; 0x30
 8006c60:	2a09      	cmp	r2, #9
 8006c62:	d903      	bls.n	8006c6c <_vfiprintf_r+0x1cc>
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d0c5      	beq.n	8006bf4 <_vfiprintf_r+0x154>
 8006c68:	9005      	str	r0, [sp, #20]
 8006c6a:	e7c3      	b.n	8006bf4 <_vfiprintf_r+0x154>
 8006c6c:	fb05 2000 	mla	r0, r5, r0, r2
 8006c70:	2301      	movs	r3, #1
 8006c72:	e7f0      	b.n	8006c56 <_vfiprintf_r+0x1b6>
 8006c74:	ab03      	add	r3, sp, #12
 8006c76:	9300      	str	r3, [sp, #0]
 8006c78:	4622      	mov	r2, r4
 8006c7a:	4b13      	ldr	r3, [pc, #76]	; (8006cc8 <_vfiprintf_r+0x228>)
 8006c7c:	a904      	add	r1, sp, #16
 8006c7e:	4630      	mov	r0, r6
 8006c80:	f7fd fdce 	bl	8004820 <_printf_float>
 8006c84:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006c88:	4681      	mov	r9, r0
 8006c8a:	d1d8      	bne.n	8006c3e <_vfiprintf_r+0x19e>
 8006c8c:	89a3      	ldrh	r3, [r4, #12]
 8006c8e:	065b      	lsls	r3, r3, #25
 8006c90:	f53f af7d 	bmi.w	8006b8e <_vfiprintf_r+0xee>
 8006c94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c96:	e77c      	b.n	8006b92 <_vfiprintf_r+0xf2>
 8006c98:	ab03      	add	r3, sp, #12
 8006c9a:	9300      	str	r3, [sp, #0]
 8006c9c:	4622      	mov	r2, r4
 8006c9e:	4b0a      	ldr	r3, [pc, #40]	; (8006cc8 <_vfiprintf_r+0x228>)
 8006ca0:	a904      	add	r1, sp, #16
 8006ca2:	4630      	mov	r0, r6
 8006ca4:	f7fe f85e 	bl	8004d64 <_printf_i>
 8006ca8:	e7ec      	b.n	8006c84 <_vfiprintf_r+0x1e4>
 8006caa:	bf00      	nop
 8006cac:	08006f3c 	.word	0x08006f3c
 8006cb0:	080070cc 	.word	0x080070cc
 8006cb4:	08006f5c 	.word	0x08006f5c
 8006cb8:	08006f1c 	.word	0x08006f1c
 8006cbc:	080070d2 	.word	0x080070d2
 8006cc0:	080070d6 	.word	0x080070d6
 8006cc4:	08004821 	.word	0x08004821
 8006cc8:	08006a7d 	.word	0x08006a7d

08006ccc <_read_r>:
 8006ccc:	b538      	push	{r3, r4, r5, lr}
 8006cce:	4c07      	ldr	r4, [pc, #28]	; (8006cec <_read_r+0x20>)
 8006cd0:	4605      	mov	r5, r0
 8006cd2:	4608      	mov	r0, r1
 8006cd4:	4611      	mov	r1, r2
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	6022      	str	r2, [r4, #0]
 8006cda:	461a      	mov	r2, r3
 8006cdc:	f7fc fd28 	bl	8003730 <_read>
 8006ce0:	1c43      	adds	r3, r0, #1
 8006ce2:	d102      	bne.n	8006cea <_read_r+0x1e>
 8006ce4:	6823      	ldr	r3, [r4, #0]
 8006ce6:	b103      	cbz	r3, 8006cea <_read_r+0x1e>
 8006ce8:	602b      	str	r3, [r5, #0]
 8006cea:	bd38      	pop	{r3, r4, r5, pc}
 8006cec:	20001938 	.word	0x20001938

08006cf0 <__ascii_wctomb>:
 8006cf0:	b149      	cbz	r1, 8006d06 <__ascii_wctomb+0x16>
 8006cf2:	2aff      	cmp	r2, #255	; 0xff
 8006cf4:	bf85      	ittet	hi
 8006cf6:	238a      	movhi	r3, #138	; 0x8a
 8006cf8:	6003      	strhi	r3, [r0, #0]
 8006cfa:	700a      	strbls	r2, [r1, #0]
 8006cfc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006d00:	bf98      	it	ls
 8006d02:	2001      	movls	r0, #1
 8006d04:	4770      	bx	lr
 8006d06:	4608      	mov	r0, r1
 8006d08:	4770      	bx	lr
	...

08006d0c <_fstat_r>:
 8006d0c:	b538      	push	{r3, r4, r5, lr}
 8006d0e:	4c07      	ldr	r4, [pc, #28]	; (8006d2c <_fstat_r+0x20>)
 8006d10:	2300      	movs	r3, #0
 8006d12:	4605      	mov	r5, r0
 8006d14:	4608      	mov	r0, r1
 8006d16:	4611      	mov	r1, r2
 8006d18:	6023      	str	r3, [r4, #0]
 8006d1a:	f7fc fd42 	bl	80037a2 <_fstat>
 8006d1e:	1c43      	adds	r3, r0, #1
 8006d20:	d102      	bne.n	8006d28 <_fstat_r+0x1c>
 8006d22:	6823      	ldr	r3, [r4, #0]
 8006d24:	b103      	cbz	r3, 8006d28 <_fstat_r+0x1c>
 8006d26:	602b      	str	r3, [r5, #0]
 8006d28:	bd38      	pop	{r3, r4, r5, pc}
 8006d2a:	bf00      	nop
 8006d2c:	20001938 	.word	0x20001938

08006d30 <_isatty_r>:
 8006d30:	b538      	push	{r3, r4, r5, lr}
 8006d32:	4c06      	ldr	r4, [pc, #24]	; (8006d4c <_isatty_r+0x1c>)
 8006d34:	2300      	movs	r3, #0
 8006d36:	4605      	mov	r5, r0
 8006d38:	4608      	mov	r0, r1
 8006d3a:	6023      	str	r3, [r4, #0]
 8006d3c:	f7fc fd36 	bl	80037ac <_isatty>
 8006d40:	1c43      	adds	r3, r0, #1
 8006d42:	d102      	bne.n	8006d4a <_isatty_r+0x1a>
 8006d44:	6823      	ldr	r3, [r4, #0]
 8006d46:	b103      	cbz	r3, 8006d4a <_isatty_r+0x1a>
 8006d48:	602b      	str	r3, [r5, #0]
 8006d4a:	bd38      	pop	{r3, r4, r5, pc}
 8006d4c:	20001938 	.word	0x20001938

08006d50 <memmove>:
 8006d50:	4288      	cmp	r0, r1
 8006d52:	b510      	push	{r4, lr}
 8006d54:	eb01 0302 	add.w	r3, r1, r2
 8006d58:	d803      	bhi.n	8006d62 <memmove+0x12>
 8006d5a:	1e42      	subs	r2, r0, #1
 8006d5c:	4299      	cmp	r1, r3
 8006d5e:	d10c      	bne.n	8006d7a <memmove+0x2a>
 8006d60:	bd10      	pop	{r4, pc}
 8006d62:	4298      	cmp	r0, r3
 8006d64:	d2f9      	bcs.n	8006d5a <memmove+0xa>
 8006d66:	1881      	adds	r1, r0, r2
 8006d68:	1ad2      	subs	r2, r2, r3
 8006d6a:	42d3      	cmn	r3, r2
 8006d6c:	d100      	bne.n	8006d70 <memmove+0x20>
 8006d6e:	bd10      	pop	{r4, pc}
 8006d70:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d74:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006d78:	e7f7      	b.n	8006d6a <memmove+0x1a>
 8006d7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d7e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006d82:	e7eb      	b.n	8006d5c <memmove+0xc>

08006d84 <_realloc_r>:
 8006d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d86:	4607      	mov	r7, r0
 8006d88:	4614      	mov	r4, r2
 8006d8a:	460e      	mov	r6, r1
 8006d8c:	b921      	cbnz	r1, 8006d98 <_realloc_r+0x14>
 8006d8e:	4611      	mov	r1, r2
 8006d90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006d94:	f7fd bc5c 	b.w	8004650 <_malloc_r>
 8006d98:	b922      	cbnz	r2, 8006da4 <_realloc_r+0x20>
 8006d9a:	f7fd fc0b 	bl	80045b4 <_free_r>
 8006d9e:	4625      	mov	r5, r4
 8006da0:	4628      	mov	r0, r5
 8006da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006da4:	f000 f814 	bl	8006dd0 <_malloc_usable_size_r>
 8006da8:	4284      	cmp	r4, r0
 8006daa:	d90f      	bls.n	8006dcc <_realloc_r+0x48>
 8006dac:	4621      	mov	r1, r4
 8006dae:	4638      	mov	r0, r7
 8006db0:	f7fd fc4e 	bl	8004650 <_malloc_r>
 8006db4:	4605      	mov	r5, r0
 8006db6:	2800      	cmp	r0, #0
 8006db8:	d0f2      	beq.n	8006da0 <_realloc_r+0x1c>
 8006dba:	4631      	mov	r1, r6
 8006dbc:	4622      	mov	r2, r4
 8006dbe:	f7fd fbe5 	bl	800458c <memcpy>
 8006dc2:	4631      	mov	r1, r6
 8006dc4:	4638      	mov	r0, r7
 8006dc6:	f7fd fbf5 	bl	80045b4 <_free_r>
 8006dca:	e7e9      	b.n	8006da0 <_realloc_r+0x1c>
 8006dcc:	4635      	mov	r5, r6
 8006dce:	e7e7      	b.n	8006da0 <_realloc_r+0x1c>

08006dd0 <_malloc_usable_size_r>:
 8006dd0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8006dd4:	2800      	cmp	r0, #0
 8006dd6:	f1a0 0004 	sub.w	r0, r0, #4
 8006dda:	bfbc      	itt	lt
 8006ddc:	580b      	ldrlt	r3, [r1, r0]
 8006dde:	18c0      	addlt	r0, r0, r3
 8006de0:	4770      	bx	lr
	...

08006de4 <_init>:
 8006de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de6:	bf00      	nop
 8006de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dea:	bc08      	pop	{r3}
 8006dec:	469e      	mov	lr, r3
 8006dee:	4770      	bx	lr

08006df0 <_fini>:
 8006df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006df2:	bf00      	nop
 8006df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006df6:	bc08      	pop	{r3}
 8006df8:	469e      	mov	lr, r3
 8006dfa:	4770      	bx	lr
